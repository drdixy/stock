
(in-package :common-lisp-user)

#+(and clisp (not pcl))
(progn
  ;(defun allocate-instance (class)
  ;  (clos::allocate-std-instance 
  ;   class (length (class-slots class))))
  (defun class-slots (class)
    (clos::class-slots class))
  (defun class-precedence-list (class)
    (clos::class-precedence-list class))
  (defun class-direct-superclasses (class)
    (clos::class-direct-superclasses class))     
  (defun slot-definition-name (slot)
    (clos::slotdef-name slot))
  (defun slot-definition-initargs (slot)
    (clos::slotdef-initargs slot))
  (defun slot-definition-initform (slot)
    (let ((? (clos::slotdef-initer slot)))
      (and ? (if (car ?) (funcall (car ?)) (cdr ?)))))
  (defun slot-definition-readers (slot)
    (declare (ignore slot))
    (error "slot-definition-readers undefined in CLISP"))
  (defun slot-definition-writers (slot) 
    (declare (ignore slot))
    (error "slot-definition-writers undefined in CLISP"))
  (defmacro slot-value-using-class (class object slot)
    (declare (ignore class))
    `(slot-value ,object (slot-definition-name ,slot)))
  (defun slot-boundp-using-class (class object slot)
    (declare (ignore class))
    (slot-boundp object (slot-definition-name slot)))
  (defun slot-makunbound-using-class (class object slot)
    (declare (ignore class))
    (slot-makunbound object (slot-definition-name slot)))
  ;;(defun change-class (object new-class)
  ;;  (declare (ignore object new-class))
  ;;  (error "CLISP CLOS does not implement change-class."))
  (defvar %clisp-prototypes% (make-hash-table))
  (defun class-prototype (class)
    (or (gethash class %clisp-prototypes% )
        (setf (gethash class %clisp-prototypes% )
              (clos::allocate-std-instance
               class (length (class-slots class))))))
)
