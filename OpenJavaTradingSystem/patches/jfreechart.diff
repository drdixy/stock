diff -rcNbB -x CVS jfreechart-orig/ant/build.xml jfreechart/ant/build.xml
*** jfreechart-orig/ant/build.xml	2004-09-07 09:30:54.000000000 +0200
--- jfreechart/ant/build.xml	2004-11-16 10:12:15.000000000 +0100
***************
*** 23,33 ****
          <property name="jfreechart.name" value="jfreechart" />
          <property name="jfreechart.version" value="0.9.21" />
          <property name="jcommon.name" value="jcommon" />
!         <property name="jcommon.version" value="0.9.6" />
          <property name="builddir" value="${basedir}/build" />
!         <property name="jcommon.jar" value="${basedir}/lib/${jcommon.name}-${jcommon.version}.jar"/>
!         <property name="servlet.jar" value="${basedir}/lib/servlet.jar"/>
!         <property name="gnujaxp.jar" value="${basedir}/lib/gnujaxp.jar"/>
          <property name="junit.jar" value="${basedir}/lib/junit.jar"/>
          <available classname="javax.imageio.ImageIO" property="ImageIO.present"/>
          <path id="build.classpath">
--- 23,33 ----
          <property name="jfreechart.name" value="jfreechart" />
          <property name="jfreechart.version" value="0.9.21" />
          <property name="jcommon.name" value="jcommon" />
!         <property name="jcommon.version" value="0.9.7" />
          <property name="builddir" value="${basedir}/build" />
!         <property name="jcommon.jar" value="${basedir}/../OpenJavaTradingSystem/lib/${jcommon.name}-${jcommon.version}.jar"/>
!         <property name="servlet.jar" value="${basedir}/../OpenJavaTradingSystem/lib/servlet.jar"/>
!         <property name="gnujaxp.jar" value="${basedir}/../OpenJavaTradingSystem/lib/gnujaxp.jar"/>
          <property name="junit.jar" value="${basedir}/lib/junit.jar"/>
          <available classname="javax.imageio.ImageIO" property="ImageIO.present"/>
          <path id="build.classpath">
***************
*** 35,40 ****
--- 35,41 ----
              <pathelement location="${servlet.jar}"/>
              <pathelement location="${gnujaxp.jar}"/>
          </path>
+         <property name="build.target" value="1.4" />
  
      </target>
  
***************
*** 49,55 ****
          <javac srcdir="${basedir}/source" 
                 destdir="${basedir}/build"
                 debug="on"
!                deprecation="on">
              <classpath refid="build.classpath" />
              <include name="org/jfree/**"/>
              <exclude name="org/jfree/**/junit/*"/>
--- 50,58 ----
          <javac srcdir="${basedir}/source" 
                 destdir="${basedir}/build"
                 debug="on"
!                deprecation="off"
! 	       target="${build.target}" 
! 	       source="${build.target}">
              <classpath refid="build.classpath" />
              <include name="org/jfree/**"/>
              <exclude name="org/jfree/**/junit/*"/>
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/AbstractXYAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/AbstractXYAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/CategoryAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/CategoryAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/CategoryTextAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/CategoryTextAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/AnnotationsPackageTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/AnnotationsPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/CategoryTextAnnotationTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/CategoryTextAnnotationTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/annotations/junit/package.html jfreechart/bin/org/jfree/chart/annotations/junit/package.html
*** jfreechart-orig/bin/org/jfree/chart/annotations/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/annotations/junit/package.html	2004-08-31 16:29:03.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Tests for the classes in the <code>org.jfree.chart.annotations</code> package.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/TextAnnotationTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/TextAnnotationTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests$TestDrawable.class and jfreechart/bin/org/jfree/chart/annotations/junit/XYDrawableAnnotationTests$TestDrawable.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/XYImageAnnotationTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/XYImageAnnotationTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/XYLineAnnotationTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/XYLineAnnotationTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/XYPointerAnnotationTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/XYPointerAnnotationTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/XYShapeAnnotationTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/XYShapeAnnotationTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/junit/XYTextAnnotationTests.class and jfreechart/bin/org/jfree/chart/annotations/junit/XYTextAnnotationTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/annotations/package.html jfreechart/bin/org/jfree/chart/annotations/package.html
*** jfreechart-orig/bin/org/jfree/chart/annotations/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/annotations/package.html	2004-08-31 16:28:00.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ A framework for addings annotations to charts.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/TextAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/TextAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/XYAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/XYAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/XYDrawableAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/XYDrawableAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/XYImageAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/XYImageAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/XYLineAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/XYLineAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/XYPointerAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/XYPointerAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/XYShapeAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/XYShapeAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/annotations/XYTextAnnotation.class and jfreechart/bin/org/jfree/chart/annotations/XYTextAnnotation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/Axis.class and jfreechart/bin/org/jfree/chart/axis/Axis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/AxisCollection.class and jfreechart/bin/org/jfree/chart/axis/AxisCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/AxisLocation.class and jfreechart/bin/org/jfree/chart/axis/AxisLocation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/AxisSpace.class and jfreechart/bin/org/jfree/chart/axis/AxisSpace.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/AxisState.class and jfreechart/bin/org/jfree/chart/axis/AxisState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CategoryAnchor.class and jfreechart/bin/org/jfree/chart/axis/CategoryAnchor.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CategoryAxis3D.class and jfreechart/bin/org/jfree/chart/axis/CategoryAxis3D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CategoryAxis.class and jfreechart/bin/org/jfree/chart/axis/CategoryAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CategoryLabelPosition.class and jfreechart/bin/org/jfree/chart/axis/CategoryLabelPosition.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CategoryLabelPositions.class and jfreechart/bin/org/jfree/chart/axis/CategoryLabelPositions.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CategoryLabelWidthType.class and jfreechart/bin/org/jfree/chart/axis/CategoryLabelWidthType.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CategoryTick.class and jfreechart/bin/org/jfree/chart/axis/CategoryTick.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/ColorBar.class and jfreechart/bin/org/jfree/chart/axis/ColorBar.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CompassFormat.class and jfreechart/bin/org/jfree/chart/axis/CompassFormat.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CyclicNumberAxis.class and jfreechart/bin/org/jfree/chart/axis/CyclicNumberAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/CyclicNumberAxis$CycleBoundTick.class and jfreechart/bin/org/jfree/chart/axis/CyclicNumberAxis$CycleBoundTick.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/DateAxis.class and jfreechart/bin/org/jfree/chart/axis/DateAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/DateAxis$DefaultTimeline.class and jfreechart/bin/org/jfree/chart/axis/DateAxis$DefaultTimeline.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/DateTick.class and jfreechart/bin/org/jfree/chart/axis/DateTick.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/DateTickMarkPosition.class and jfreechart/bin/org/jfree/chart/axis/DateTickMarkPosition.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/DateTickUnit.class and jfreechart/bin/org/jfree/chart/axis/DateTickUnit.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/ExtendedCategoryAxis.class and jfreechart/bin/org/jfree/chart/axis/ExtendedCategoryAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/AxisLocationTests.class and jfreechart/bin/org/jfree/chart/axis/junit/AxisLocationTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/AxisPackageTests.class and jfreechart/bin/org/jfree/chart/axis/junit/AxisPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/AxisSpaceTests.class and jfreechart/bin/org/jfree/chart/axis/junit/AxisSpaceTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/AxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/AxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/CategoryAnchorTests.class and jfreechart/bin/org/jfree/chart/axis/junit/CategoryAnchorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/CategoryAxis3DTests.class and jfreechart/bin/org/jfree/chart/axis/junit/CategoryAxis3DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/CategoryAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/CategoryAxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/CategoryLabelPositionsTests.class and jfreechart/bin/org/jfree/chart/axis/junit/CategoryLabelPositionsTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/CategoryLabelPositionTests.class and jfreechart/bin/org/jfree/chart/axis/junit/CategoryLabelPositionTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/CategoryLabelWidthTypeTests.class and jfreechart/bin/org/jfree/chart/axis/junit/CategoryLabelWidthTypeTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/CategoryTickTests.class and jfreechart/bin/org/jfree/chart/axis/junit/CategoryTickTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/ColorBarTests.class and jfreechart/bin/org/jfree/chart/axis/junit/ColorBarTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/CyclicNumberAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/CyclicNumberAxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/DateAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/DateAxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/DateTickMarkPositionTests.class and jfreechart/bin/org/jfree/chart/axis/junit/DateTickMarkPositionTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/DateTickTests.class and jfreechart/bin/org/jfree/chart/axis/junit/DateTickTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/DateTickUnitTests.class and jfreechart/bin/org/jfree/chart/axis/junit/DateTickUnitTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/LogarithmicAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/LogarithmicAxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/MarkerAxisBandTests.class and jfreechart/bin/org/jfree/chart/axis/junit/MarkerAxisBandTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/NumberAxis3DTests.class and jfreechart/bin/org/jfree/chart/axis/junit/NumberAxis3DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/NumberAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/NumberAxisTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/axis/junit/package.html jfreechart/bin/org/jfree/chart/axis/junit/package.html
*** jfreechart-orig/bin/org/jfree/chart/axis/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/axis/junit/package.html	2004-08-31 16:31:24.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Tests for the axis classes and interfaces.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/PeriodAxisLabelInfoTests.class and jfreechart/bin/org/jfree/chart/axis/junit/PeriodAxisLabelInfoTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/PeriodAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/PeriodAxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/SegmentedTimelineTests2.class and jfreechart/bin/org/jfree/chart/axis/junit/SegmentedTimelineTests2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/SegmentedTimelineTests.class and jfreechart/bin/org/jfree/chart/axis/junit/SegmentedTimelineTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/SubCategoryAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/SubCategoryAxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/SymbolicAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/SymbolicAxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/junit/ValueAxisTests.class and jfreechart/bin/org/jfree/chart/axis/junit/ValueAxisTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/LogarithmicAxis.class and jfreechart/bin/org/jfree/chart/axis/LogarithmicAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/MarkerAxisBand.class and jfreechart/bin/org/jfree/chart/axis/MarkerAxisBand.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/ModuloAxis.class and jfreechart/bin/org/jfree/chart/axis/ModuloAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/NumberAxis3D.class and jfreechart/bin/org/jfree/chart/axis/NumberAxis3D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/NumberAxis.class and jfreechart/bin/org/jfree/chart/axis/NumberAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/NumberTick.class and jfreechart/bin/org/jfree/chart/axis/NumberTick.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/NumberTickUnit.class and jfreechart/bin/org/jfree/chart/axis/NumberTickUnit.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/axis/package.html jfreechart/bin/org/jfree/chart/axis/package.html
*** jfreechart-orig/bin/org/jfree/chart/axis/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/axis/package.html	2004-08-31 16:30:24.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Axis classes and interfaces.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/PeriodAxis.class and jfreechart/bin/org/jfree/chart/axis/PeriodAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/PeriodAxisLabelInfo.class and jfreechart/bin/org/jfree/chart/axis/PeriodAxisLabelInfo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/SegmentedTimeline$BaseTimelineSegmentRange.class and jfreechart/bin/org/jfree/chart/axis/SegmentedTimeline$BaseTimelineSegmentRange.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/SegmentedTimeline.class and jfreechart/bin/org/jfree/chart/axis/SegmentedTimeline.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/SegmentedTimeline$Segment.class and jfreechart/bin/org/jfree/chart/axis/SegmentedTimeline$Segment.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/SegmentedTimeline$SegmentRange.class and jfreechart/bin/org/jfree/chart/axis/SegmentedTimeline$SegmentRange.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/StandardTickUnitSource.class and jfreechart/bin/org/jfree/chart/axis/StandardTickUnitSource.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/SubCategoryAxis.class and jfreechart/bin/org/jfree/chart/axis/SubCategoryAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/SymbolicAxis.class and jfreechart/bin/org/jfree/chart/axis/SymbolicAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/SymbolicTickUnit.class and jfreechart/bin/org/jfree/chart/axis/SymbolicTickUnit.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/Tick.class and jfreechart/bin/org/jfree/chart/axis/Tick.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/TickUnit.class and jfreechart/bin/org/jfree/chart/axis/TickUnit.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/TickUnits.class and jfreechart/bin/org/jfree/chart/axis/TickUnits.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/TickUnitSource.class and jfreechart/bin/org/jfree/chart/axis/TickUnitSource.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/Timeline.class and jfreechart/bin/org/jfree/chart/axis/Timeline.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/ValueAxis.class and jfreechart/bin/org/jfree/chart/axis/ValueAxis.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/axis/ValueTick.class and jfreechart/bin/org/jfree/chart/axis/ValueTick.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartColor.class and jfreechart/bin/org/jfree/chart/ChartColor.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartFactory.class and jfreechart/bin/org/jfree/chart/ChartFactory.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartFrame.class and jfreechart/bin/org/jfree/chart/ChartFrame.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartMouseEvent.class and jfreechart/bin/org/jfree/chart/ChartMouseEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartMouseListener.class and jfreechart/bin/org/jfree/chart/ChartMouseListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartPanel.class and jfreechart/bin/org/jfree/chart/ChartPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartPanelConstants.class and jfreechart/bin/org/jfree/chart/ChartPanelConstants.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartRenderingInfo.class and jfreechart/bin/org/jfree/chart/ChartRenderingInfo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ChartUtilities.class and jfreechart/bin/org/jfree/chart/ChartUtilities.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ClipPath.class and jfreechart/bin/org/jfree/chart/ClipPath.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/DefaultShapeFactory.class and jfreechart/bin/org/jfree/chart/DefaultShapeFactory.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/AreaChartDemo.class and jfreechart/bin/org/jfree/chart/demo/AreaChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChart3DDemo1.class and jfreechart/bin/org/jfree/chart/demo/BarChart3DDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChart3DDemo2.class and jfreechart/bin/org/jfree/chart/demo/BarChart3DDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChart3DDemo3.class and jfreechart/bin/org/jfree/chart/demo/BarChart3DDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo3.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo3$CustomRenderer.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo3$CustomRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo4.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo5.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo6.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo6.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo7.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo7.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo7$LabelGenerator.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo7$LabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo8.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo8.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BarChartDemo.class and jfreechart/bin/org/jfree/chart/demo/BarChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BoxAndWhiskerDemo.class and jfreechart/bin/org/jfree/chart/demo/BoxAndWhiskerDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BubblePlotDemo.class and jfreechart/bin/org/jfree/chart/demo/BubblePlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BubblyBubblesDemo2.class and jfreechart/bin/org/jfree/chart/demo/BubblyBubblesDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BubblyBubblesDemo2$UpdaterThread.class and jfreechart/bin/org/jfree/chart/demo/BubblyBubblesDemo2$UpdaterThread.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BubblyBubblesDemo.class and jfreechart/bin/org/jfree/chart/demo/BubblyBubblesDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/BubblyBubblesDemo$UpdaterThread.class and jfreechart/bin/org/jfree/chart/demo/BubblyBubblesDemo$UpdaterThread.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CandlestickDemo.class and jfreechart/bin/org/jfree/chart/demo/CandlestickDemo.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/demo/categorydata.xml jfreechart/bin/org/jfree/chart/demo/categorydata.xml
*** jfreechart-orig/bin/org/jfree/chart/demo/categorydata.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/demo/categorydata.xml	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,45 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ 
+ <!-- Sample data for JFreeChart. -->
+ 
+ <CategoryDataset>
+ 
+   <Series name = "Series 1">
+     <Item>
+       <Key>Category 1</Key>
+       <Value>15.4</Value>
+     </Item>
+     <Item>
+       <Key>Category 2</Key>
+       <Value>12.7</Value>
+     </Item>
+     <Item>
+       <Key>Category 3</Key>
+       <Value>5.7</Value>
+     </Item>
+     <Item>
+       <Key>Category 4</Key>
+       <Value>9.1</Value>
+     </Item>
+   </Series>
+ 
+   <Series name = "Series 2">
+     <Item>
+       <Key>Category 1</Key>
+       <Value>45.4</Value>
+     </Item>
+     <Item>
+       <Key>Category 2</Key>
+       <Value>73.7</Value>
+     </Item>
+     <Item>
+       <Key>Category 3</Key>
+       <Value>23.7</Value>
+     </Item>
+     <Item>
+       <Key>Category 4</Key>
+       <Value>19.4</Value>
+     </Item>
+   </Series>
+ 
+ </CategoryDataset>
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CategoryStepChartDemo.class and jfreechart/bin/org/jfree/chart/demo/CategoryStepChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ChartPanelSerializationTest.class and jfreechart/bin/org/jfree/chart/demo/ChartPanelSerializationTest.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ChartTiming1.class and jfreechart/bin/org/jfree/chart/demo/ChartTiming1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ChartTiming2.class and jfreechart/bin/org/jfree/chart/demo/ChartTiming2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ChartTiming3.class and jfreechart/bin/org/jfree/chart/demo/ChartTiming3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ChartTiming4.class and jfreechart/bin/org/jfree/chart/demo/ChartTiming4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CircleDrawer.class and jfreechart/bin/org/jfree/chart/demo/CircleDrawer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CombinedCategoryPlotDemo1.class and jfreechart/bin/org/jfree/chart/demo/CombinedCategoryPlotDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CombinedCategoryPlotDemo2.class and jfreechart/bin/org/jfree/chart/demo/CombinedCategoryPlotDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CombinedXYPlotDemo1.class and jfreechart/bin/org/jfree/chart/demo/CombinedXYPlotDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CombinedXYPlotDemo2.class and jfreechart/bin/org/jfree/chart/demo/CombinedXYPlotDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CombinedXYPlotDemo3.class and jfreechart/bin/org/jfree/chart/demo/CombinedXYPlotDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CombinedXYPlotDemo4.class and jfreechart/bin/org/jfree/chart/demo/CombinedXYPlotDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CombinedXYPlotDemo5.class and jfreechart/bin/org/jfree/chart/demo/CombinedXYPlotDemo5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassDemo$1.class and jfreechart/bin/org/jfree/chart/demo/CompassDemo$1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassDemo$2.class and jfreechart/bin/org/jfree/chart/demo/CompassDemo$2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassDemo2.class and jfreechart/bin/org/jfree/chart/demo/CompassDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassDemo$3.class and jfreechart/bin/org/jfree/chart/demo/CompassDemo$3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassDemo$4.class and jfreechart/bin/org/jfree/chart/demo/CompassDemo$4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassDemo$5.class and jfreechart/bin/org/jfree/chart/demo/CompassDemo$5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassDemo$6.class and jfreechart/bin/org/jfree/chart/demo/CompassDemo$6.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassDemo.class and jfreechart/bin/org/jfree/chart/demo/CompassDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CompassFormatDemo.class and jfreechart/bin/org/jfree/chart/demo/CompassFormatDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ContourPlotDemo2.class and jfreechart/bin/org/jfree/chart/demo/ContourPlotDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ContourPlotDemo.class and jfreechart/bin/org/jfree/chart/demo/ContourPlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CrosshairDemo1.class and jfreechart/bin/org/jfree/chart/demo/CrosshairDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CyclicXYPlotDemo$1.class and jfreechart/bin/org/jfree/chart/demo/CyclicXYPlotDemo$1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CyclicXYPlotDemo$2.class and jfreechart/bin/org/jfree/chart/demo/CyclicXYPlotDemo$2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CyclicXYPlotDemo$3.class and jfreechart/bin/org/jfree/chart/demo/CyclicXYPlotDemo$3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/CyclicXYPlotDemo.class and jfreechart/bin/org/jfree/chart/demo/CyclicXYPlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DemoDatasetFactory.class and jfreechart/bin/org/jfree/chart/demo/DemoDatasetFactory.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DescriptionPanel.class and jfreechart/bin/org/jfree/chart/demo/DescriptionPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DifferenceChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/DifferenceChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DifferenceChartDemo.class and jfreechart/bin/org/jfree/chart/demo/DifferenceChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DualAxisDemo2.class and jfreechart/bin/org/jfree/chart/demo/DualAxisDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DualAxisDemo3.class and jfreechart/bin/org/jfree/chart/demo/DualAxisDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DualAxisDemo4.class and jfreechart/bin/org/jfree/chart/demo/DualAxisDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DualAxisDemo5$1.class and jfreechart/bin/org/jfree/chart/demo/DualAxisDemo5$1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DualAxisDemo5.class and jfreechart/bin/org/jfree/chart/demo/DualAxisDemo5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DualAxisDemo.class and jfreechart/bin/org/jfree/chart/demo/DualAxisDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DynamicDataDemo2.class and jfreechart/bin/org/jfree/chart/demo/DynamicDataDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DynamicDataDemo3.class and jfreechart/bin/org/jfree/chart/demo/DynamicDataDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/DynamicDataDemo.class and jfreechart/bin/org/jfree/chart/demo/DynamicDataDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/EmptyXYDataset.class and jfreechart/bin/org/jfree/chart/demo/EmptyXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/EventFrequencyDemo.class and jfreechart/bin/org/jfree/chart/demo/EventFrequencyDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ExtendedStackedBarRenderer.class and jfreechart/bin/org/jfree/chart/demo/ExtendedStackedBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/FastScatterPlotDemo.class and jfreechart/bin/org/jfree/chart/demo/FastScatterPlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/First.class and jfreechart/bin/org/jfree/chart/demo/First.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/GanttDemo1.class and jfreechart/bin/org/jfree/chart/demo/GanttDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/GanttDemo2.class and jfreechart/bin/org/jfree/chart/demo/GanttDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/HighLowChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/HighLowChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/HighLowChartDemo.class and jfreechart/bin/org/jfree/chart/demo/HighLowChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/HistogramDemo2.class and jfreechart/bin/org/jfree/chart/demo/HistogramDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/HistogramDemo.class and jfreechart/bin/org/jfree/chart/demo/HistogramDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ImageMapDemo1.class and jfreechart/bin/org/jfree/chart/demo/ImageMapDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ImageMapDemo2.class and jfreechart/bin/org/jfree/chart/demo/ImageMapDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ImageMapDemo3.class and jfreechart/bin/org/jfree/chart/demo/ImageMapDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ImageMapDemo4.class and jfreechart/bin/org/jfree/chart/demo/ImageMapDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ImageMapDemo5.class and jfreechart/bin/org/jfree/chart/demo/ImageMapDemo5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ImageMapDemo6.class and jfreechart/bin/org/jfree/chart/demo/ImageMapDemo6.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ImageMapDemo7.class and jfreechart/bin/org/jfree/chart/demo/ImageMapDemo7.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/InternalFrameDemo.class and jfreechart/bin/org/jfree/chart/demo/InternalFrameDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/IntervalBarChartDemo1.class and jfreechart/bin/org/jfree/chart/demo/IntervalBarChartDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ItemLabelDemo1.class and jfreechart/bin/org/jfree/chart/demo/ItemLabelDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ItemLabelDemo1$LabelGenerator.class and jfreechart/bin/org/jfree/chart/demo/ItemLabelDemo1$LabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ItemLabelDemo2.class and jfreechart/bin/org/jfree/chart/demo/ItemLabelDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ItemLabelDemo2$LabelGenerator.class and jfreechart/bin/org/jfree/chart/demo/ItemLabelDemo2$LabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/JFreeChartAppletDemo.class and jfreechart/bin/org/jfree/chart/demo/JFreeChartAppletDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/JFreeChartDemo$1.class and jfreechart/bin/org/jfree/chart/demo/JFreeChartDemo$1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/JFreeChartDemoBase.class and jfreechart/bin/org/jfree/chart/demo/JFreeChartDemoBase.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/JFreeChartDemo.class and jfreechart/bin/org/jfree/chart/demo/JFreeChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LayeredBarChartDemo1.class and jfreechart/bin/org/jfree/chart/demo/LayeredBarChartDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LayeredBarChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/LayeredBarChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LegendManiaDemo.class and jfreechart/bin/org/jfree/chart/demo/LegendManiaDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LegendManiaDemo$UpdaterThread.class and jfreechart/bin/org/jfree/chart/demo/LegendManiaDemo$UpdaterThread.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LineChartDemo1.class and jfreechart/bin/org/jfree/chart/demo/LineChartDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LineChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/LineChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LineChartDemo3.class and jfreechart/bin/org/jfree/chart/demo/LineChartDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LineChartDemo4.class and jfreechart/bin/org/jfree/chart/demo/LineChartDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LineChartDemo5.class and jfreechart/bin/org/jfree/chart/demo/LineChartDemo5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/LineChartDemo6.class and jfreechart/bin/org/jfree/chart/demo/LineChartDemo6.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MarkerDemo1.class and jfreechart/bin/org/jfree/chart/demo/MarkerDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MeterChartDemo$1.class and jfreechart/bin/org/jfree/chart/demo/MeterChartDemo$1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MeterChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/MeterChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MeterChartDemo.class and jfreechart/bin/org/jfree/chart/demo/MeterChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MinMaxCategoryPlotDemo.class and jfreechart/bin/org/jfree/chart/demo/MinMaxCategoryPlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MouseZoomDemo$CheckListener.class and jfreechart/bin/org/jfree/chart/demo/MouseZoomDemo$CheckListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MouseZoomDemo.class and jfreechart/bin/org/jfree/chart/demo/MouseZoomDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MovingAverageDemo.class and jfreechart/bin/org/jfree/chart/demo/MovingAverageDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultipleAxisDemo1.class and jfreechart/bin/org/jfree/chart/demo/MultipleAxisDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultipleAxisDemo2.class and jfreechart/bin/org/jfree/chart/demo/MultipleAxisDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultipleAxisDemo3.class and jfreechart/bin/org/jfree/chart/demo/MultipleAxisDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultipleDatasetDemo1.class and jfreechart/bin/org/jfree/chart/demo/MultipleDatasetDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultiplePieChartDemo1.class and jfreechart/bin/org/jfree/chart/demo/MultiplePieChartDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultiplePieChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/MultiplePieChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultiplePieChartDemo3.class and jfreechart/bin/org/jfree/chart/demo/MultiplePieChartDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultiplePieChartDemo4.class and jfreechart/bin/org/jfree/chart/demo/MultiplePieChartDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultiShapesXYDemo.class and jfreechart/bin/org/jfree/chart/demo/MultiShapesXYDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/MultiShapesXYDemo$DemoRenderer.class and jfreechart/bin/org/jfree/chart/demo/MultiShapesXYDemo$DemoRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/NormalDistributionDemo.class and jfreechart/bin/org/jfree/chart/demo/NormalDistributionDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/OverlaidBarChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/OverlaidBarChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/OverlaidBarChartDemo.class and jfreechart/bin/org/jfree/chart/demo/OverlaidBarChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/OverlaidXYPlotDemo2.class and jfreechart/bin/org/jfree/chart/demo/OverlaidXYPlotDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/OverlaidXYPlotDemo.class and jfreechart/bin/org/jfree/chart/demo/OverlaidXYPlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PanScrollZoomDemo$1.class and jfreechart/bin/org/jfree/chart/demo/PanScrollZoomDemo$1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PanScrollZoomDemo.class and jfreechart/bin/org/jfree/chart/demo/PanScrollZoomDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ParetoChartDemo.class and jfreechart/bin/org/jfree/chart/demo/ParetoChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/Performance2.class and jfreechart/bin/org/jfree/chart/demo/Performance2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/Performance.class and jfreechart/bin/org/jfree/chart/demo/Performance.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChart3DDemo1.class and jfreechart/bin/org/jfree/chart/demo/PieChart3DDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChart3DDemo2.class and jfreechart/bin/org/jfree/chart/demo/PieChart3DDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChart3DDemo3.class and jfreechart/bin/org/jfree/chart/demo/PieChart3DDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChart3DDemo4.class and jfreechart/bin/org/jfree/chart/demo/PieChart3DDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChart3DDemo4$CustomLabelGenerator.class and jfreechart/bin/org/jfree/chart/demo/PieChart3DDemo4$CustomLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo1.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo3.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo4.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo4$Rotator.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo4$Rotator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo5.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo6.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo6.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo6$CustomLabelGenerator.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo6$CustomLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PieChartDemo7.class and jfreechart/bin/org/jfree/chart/demo/PieChartDemo7.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/demo/piedata.xml jfreechart/bin/org/jfree/chart/demo/piedata.xml
*** jfreechart-orig/bin/org/jfree/chart/demo/piedata.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/demo/piedata.xml	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,22 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ 
+ <!-- A sample pie dataset for JFreeChart. -->
+ 
+ <PieDataset>
+   <Item>
+     <Key>Java</Key>
+     <Value>15.4</Value>
+   </Item>
+   <Item>
+     <Key>C++</Key>
+     <Value>12.7</Value>
+   </Item>
+   <Item>
+     <Key>PHP</Key>
+     <Value>5.7</Value>
+   </Item>
+   <Item>
+     <Key>Python</Key>
+     <Value>9.1</Value>
+   </Item>
+ </PieDataset>
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PlotOrientationDemo2.class and jfreechart/bin/org/jfree/chart/demo/PlotOrientationDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PlotOrientationDemo.class and jfreechart/bin/org/jfree/chart/demo/PlotOrientationDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PolarChartDemo.class and jfreechart/bin/org/jfree/chart/demo/PolarChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PopulationChartDemo.class and jfreechart/bin/org/jfree/chart/demo/PopulationChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/PriceVolumeDemo.class and jfreechart/bin/org/jfree/chart/demo/PriceVolumeDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/resources/DemoResources.class and jfreechart/bin/org/jfree/chart/demo/resources/DemoResources.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/resources/DemoResources_de.class and jfreechart/bin/org/jfree/chart/demo/resources/DemoResources_de.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/resources/DemoResources_es.class and jfreechart/bin/org/jfree/chart/demo/resources/DemoResources_es.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/resources/DemoResources_fr.class and jfreechart/bin/org/jfree/chart/demo/resources/DemoResources_fr.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/resources/DemoResources_pl.class and jfreechart/bin/org/jfree/chart/demo/resources/DemoResources_pl.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/demo/resources/package.html jfreechart/bin/org/jfree/chart/demo/resources/package.html
*** jfreechart-orig/bin/org/jfree/chart/demo/resources/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/demo/resources/package.html	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Resource bundles for the JFreeChart demonstration applications.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/Rotator.class and jfreechart/bin/org/jfree/chart/demo/Rotator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SampleSignalDataset.class and jfreechart/bin/org/jfree/chart/demo/SampleSignalDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SampleXYDataset2.class and jfreechart/bin/org/jfree/chart/demo/SampleXYDataset2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SampleXYDataset.class and jfreechart/bin/org/jfree/chart/demo/SampleXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SampleXYDatasetThread.class and jfreechart/bin/org/jfree/chart/demo/SampleXYDatasetThread.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SampleXYSymbolicDataset.class and jfreechart/bin/org/jfree/chart/demo/SampleXYSymbolicDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SampleXYZDataset.class and jfreechart/bin/org/jfree/chart/demo/SampleXYZDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SampleYSymbolicDataset.class and jfreechart/bin/org/jfree/chart/demo/SampleYSymbolicDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ScatterPlotDemo2.class and jfreechart/bin/org/jfree/chart/demo/ScatterPlotDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ScatterPlotDemo3.class and jfreechart/bin/org/jfree/chart/demo/ScatterPlotDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ScatterPlotDemo4.class and jfreechart/bin/org/jfree/chart/demo/ScatterPlotDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ScatterPlotDemo.class and jfreechart/bin/org/jfree/chart/demo/ScatterPlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SecondaryDatasetDemo2.class and jfreechart/bin/org/jfree/chart/demo/SecondaryDatasetDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/Second.class and jfreechart/bin/org/jfree/chart/demo/Second.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SegmentedHighLowChartDemo.class and jfreechart/bin/org/jfree/chart/demo/SegmentedHighLowChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SerializationTest1.class and jfreechart/bin/org/jfree/chart/demo/SerializationTest1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SimpleIntervalXYDataset2.class and jfreechart/bin/org/jfree/chart/demo/SimpleIntervalXYDataset2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SimpleIntervalXYDataset.class and jfreechart/bin/org/jfree/chart/demo/SimpleIntervalXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SmallNumberDemo.class and jfreechart/bin/org/jfree/chart/demo/SmallNumberDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StackedAreaChartDemo.class and jfreechart/bin/org/jfree/chart/demo/StackedAreaChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StackedBarChart3DDemo.class and jfreechart/bin/org/jfree/chart/demo/StackedBarChart3DDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StackedBarChartDemo1.class and jfreechart/bin/org/jfree/chart/demo/StackedBarChartDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StackedBarChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/StackedBarChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StackedBarChartDemo3.class and jfreechart/bin/org/jfree/chart/demo/StackedBarChartDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StackedBarChartDemo4.class and jfreechart/bin/org/jfree/chart/demo/StackedBarChartDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StackedXYAreaChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/StackedXYAreaChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StackedXYAreaChartDemo.class and jfreechart/bin/org/jfree/chart/demo/StackedXYAreaChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/StatisticalBarChartDemo.class and jfreechart/bin/org/jfree/chart/demo/StatisticalBarChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SurveyResultsDemo2.class and jfreechart/bin/org/jfree/chart/demo/SurveyResultsDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SurveyResultsDemo3.class and jfreechart/bin/org/jfree/chart/demo/SurveyResultsDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SurveyResultsDemo.class and jfreechart/bin/org/jfree/chart/demo/SurveyResultsDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SymbolicChartDemo1.class and jfreechart/bin/org/jfree/chart/demo/SymbolicChartDemo1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SymbolicXYPlotDemo.class and jfreechart/bin/org/jfree/chart/demo/SymbolicXYPlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/SymbolicYPlotDemo.class and jfreechart/bin/org/jfree/chart/demo/SymbolicYPlotDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$10.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$10.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$11.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$11.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$12.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$12.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$13.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$13.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$14.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$14.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$1.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$2.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo2.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$3.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$4.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$5.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$6.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$6.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$7.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$7.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$8.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$8.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo$9.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo$9.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/ThermometerDemo.class and jfreechart/bin/org/jfree/chart/demo/ThermometerDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimePeriodValuesDemo2.class and jfreechart/bin/org/jfree/chart/demo/TimePeriodValuesDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimePeriodValuesDemo3.class and jfreechart/bin/org/jfree/chart/demo/TimePeriodValuesDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimePeriodValuesDemo.class and jfreechart/bin/org/jfree/chart/demo/TimePeriodValuesDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo10.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo10.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo11.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo11.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo12.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo12.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo13.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo13.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo2.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo3.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo4.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo5.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo5.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo6.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo6.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo7.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo7.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo8.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo8.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo9.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo9.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/TimeSeriesDemo.class and jfreechart/bin/org/jfree/chart/demo/TimeSeriesDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/WaferMapChartDemo.class and jfreechart/bin/org/jfree/chart/demo/WaferMapChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/WaterfallChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/WaterfallChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/WaterfallChartDemo.class and jfreechart/bin/org/jfree/chart/demo/WaterfallChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/WaterTemperatureDemo.class and jfreechart/bin/org/jfree/chart/demo/WaterTemperatureDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/WindChartDemo.class and jfreechart/bin/org/jfree/chart/demo/WindChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XMLBarChartDemo.class and jfreechart/bin/org/jfree/chart/demo/XMLBarChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XMLPieChartDemo.class and jfreechart/bin/org/jfree/chart/demo/XMLPieChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYAreaChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/XYAreaChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYAreaChartDemo.class and jfreechart/bin/org/jfree/chart/demo/XYAreaChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYAreaChartTest.class and jfreechart/bin/org/jfree/chart/demo/XYAreaChartTest.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYBarChartDemo2.class and jfreechart/bin/org/jfree/chart/demo/XYBarChartDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYBarChartDemo3.class and jfreechart/bin/org/jfree/chart/demo/XYBarChartDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYBarChartDemo4.class and jfreechart/bin/org/jfree/chart/demo/XYBarChartDemo4.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYBarChartDemo.class and jfreechart/bin/org/jfree/chart/demo/XYBarChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYBoxAndWhiskerDemo.class and jfreechart/bin/org/jfree/chart/demo/XYBoxAndWhiskerDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYLineAndShapeRendererDemo.class and jfreechart/bin/org/jfree/chart/demo/XYLineAndShapeRendererDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYLogAxesDemo.class and jfreechart/bin/org/jfree/chart/demo/XYLogAxesDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYSeriesDemo2.class and jfreechart/bin/org/jfree/chart/demo/XYSeriesDemo2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYSeriesDemo3.class and jfreechart/bin/org/jfree/chart/demo/XYSeriesDemo3.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYSeriesDemo.class and jfreechart/bin/org/jfree/chart/demo/XYSeriesDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYStepAreaChartDemo.class and jfreechart/bin/org/jfree/chart/demo/XYStepAreaChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYStepChartDemo.class and jfreechart/bin/org/jfree/chart/demo/XYStepChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/XYTickLabelDemo.class and jfreechart/bin/org/jfree/chart/demo/XYTickLabelDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/demo/YIntervalChartDemo.class and jfreechart/bin/org/jfree/chart/demo/YIntervalChartDemo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/DrawableLegendItem.class and jfreechart/bin/org/jfree/chart/DrawableLegendItem.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/Effect3D.class and jfreechart/bin/org/jfree/chart/Effect3D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/encoders/EncoderUtil.class and jfreechart/bin/org/jfree/chart/encoders/EncoderUtil.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/encoders/ImageEncoder.class and jfreechart/bin/org/jfree/chart/encoders/ImageEncoder.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/encoders/ImageEncoderFactory.class and jfreechart/bin/org/jfree/chart/encoders/ImageEncoderFactory.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/encoders/ImageFormat.class and jfreechart/bin/org/jfree/chart/encoders/ImageFormat.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/encoders/KeypointPNGEncoderAdapter.class and jfreechart/bin/org/jfree/chart/encoders/KeypointPNGEncoderAdapter.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/encoders/package.html jfreechart/bin/org/jfree/chart/encoders/package.html
*** jfreechart-orig/bin/org/jfree/chart/encoders/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/encoders/package.html	2004-08-31 16:32:00.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Classes related to the encoding of charts to different image formats.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/encoders/SunJPEGEncoderAdapter.class and jfreechart/bin/org/jfree/chart/encoders/SunJPEGEncoderAdapter.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/encoders/SunPNGEncoderAdapter.class and jfreechart/bin/org/jfree/chart/encoders/SunPNGEncoderAdapter.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/CategoryItemEntity.class and jfreechart/bin/org/jfree/chart/entity/CategoryItemEntity.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/ChartEntity.class and jfreechart/bin/org/jfree/chart/entity/ChartEntity.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/ContourEntity.class and jfreechart/bin/org/jfree/chart/entity/ContourEntity.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/EntityCollection.class and jfreechart/bin/org/jfree/chart/entity/EntityCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/junit/CategoryItemEntityTests.class and jfreechart/bin/org/jfree/chart/entity/junit/CategoryItemEntityTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/junit/ContourEntityTests.class and jfreechart/bin/org/jfree/chart/entity/junit/ContourEntityTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/junit/EntityPackageTests.class and jfreechart/bin/org/jfree/chart/entity/junit/EntityPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/junit/LegendItemEntityTests.class and jfreechart/bin/org/jfree/chart/entity/junit/LegendItemEntityTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/junit/PieSectionEntityTests.class and jfreechart/bin/org/jfree/chart/entity/junit/PieSectionEntityTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/junit/StandardEntityCollectionTests.class and jfreechart/bin/org/jfree/chart/entity/junit/StandardEntityCollectionTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/junit/TickLabelEntityTests.class and jfreechart/bin/org/jfree/chart/entity/junit/TickLabelEntityTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/junit/XYItemEntityTests.class and jfreechart/bin/org/jfree/chart/entity/junit/XYItemEntityTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/LegendItemEntity.class and jfreechart/bin/org/jfree/chart/entity/LegendItemEntity.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/entity/package.html jfreechart/bin/org/jfree/chart/entity/package.html
*** jfreechart-orig/bin/org/jfree/chart/entity/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/entity/package.html	2004-08-31 16:32:37.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Classes representing components of (or entities in) a chart.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/PieSectionEntity.class and jfreechart/bin/org/jfree/chart/entity/PieSectionEntity.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/StandardEntityCollection.class and jfreechart/bin/org/jfree/chart/entity/StandardEntityCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/TickLabelEntity.class and jfreechart/bin/org/jfree/chart/entity/TickLabelEntity.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/XYAnnotationEntity.class and jfreechart/bin/org/jfree/chart/entity/XYAnnotationEntity.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/entity/XYItemEntity.class and jfreechart/bin/org/jfree/chart/entity/XYItemEntity.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/AxisChangeEvent.class and jfreechart/bin/org/jfree/chart/event/AxisChangeEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/AxisChangeListener.class and jfreechart/bin/org/jfree/chart/event/AxisChangeListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/ChartChangeEvent.class and jfreechart/bin/org/jfree/chart/event/ChartChangeEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/ChartChangeListener.class and jfreechart/bin/org/jfree/chart/event/ChartChangeListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/ChartProgressEvent.class and jfreechart/bin/org/jfree/chart/event/ChartProgressEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/ChartProgressListener.class and jfreechart/bin/org/jfree/chart/event/ChartProgressListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/LegendChangeEvent.class and jfreechart/bin/org/jfree/chart/event/LegendChangeEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/LegendChangeListener.class and jfreechart/bin/org/jfree/chart/event/LegendChangeListener.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/event/package.html jfreechart/bin/org/jfree/chart/event/package.html
*** jfreechart-orig/bin/org/jfree/chart/event/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/event/package.html	2004-08-31 16:33:49.000000000 +0200
***************
*** 0 ****
--- 1,8 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Event classes and listener interfaces, used to provide a change
+ notification mechanism so that charts are automatically redrawn
+ whenever changes are made to any chart component.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/PlotChangeEvent.class and jfreechart/bin/org/jfree/chart/event/PlotChangeEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/PlotChangeListener.class and jfreechart/bin/org/jfree/chart/event/PlotChangeListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/RendererChangeEvent.class and jfreechart/bin/org/jfree/chart/event/RendererChangeEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/RendererChangeListener.class and jfreechart/bin/org/jfree/chart/event/RendererChangeListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/TitleChangeEvent.class and jfreechart/bin/org/jfree/chart/event/TitleChangeEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/event/TitleChangeListener.class and jfreechart/bin/org/jfree/chart/event/TitleChangeListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/gorilla.jpg and jfreechart/bin/org/jfree/chart/gorilla.jpg sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/imagemap/DynamicDriveToolTipTagFragmentGenerator.class and jfreechart/bin/org/jfree/chart/imagemap/DynamicDriveToolTipTagFragmentGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/imagemap/ImageMapUtil.class and jfreechart/bin/org/jfree/chart/imagemap/ImageMapUtil.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/imagemap/OverLIBToolTipTagFragmentGenerator.class and jfreechart/bin/org/jfree/chart/imagemap/OverLIBToolTipTagFragmentGenerator.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/imagemap/package.html jfreechart/bin/org/jfree/chart/imagemap/package.html
*** jfreechart-orig/bin/org/jfree/chart/imagemap/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/imagemap/package.html	2004-08-31 16:34:47.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Classes for image maps.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.class and jfreechart/bin/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/imagemap/StandardURLTagFragmentGenerator.class and jfreechart/bin/org/jfree/chart/imagemap/StandardURLTagFragmentGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/imagemap/ToolTipTagFragmentGenerator.class and jfreechart/bin/org/jfree/chart/imagemap/ToolTipTagFragmentGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/imagemap/URLTagFragmentGenerator.class and jfreechart/bin/org/jfree/chart/imagemap/URLTagFragmentGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/JFreeChart.class and jfreechart/bin/org/jfree/chart/JFreeChart.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/JFreeChartInfo.class and jfreechart/bin/org/jfree/chart/JFreeChartInfo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/BarChart3DTests.class and jfreechart/bin/org/jfree/chart/junit/BarChart3DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/BarChart3DTests$LocalListener.class and jfreechart/bin/org/jfree/chart/junit/BarChart3DTests$LocalListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/BarChartTests.class and jfreechart/bin/org/jfree/chart/junit/BarChartTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/BarChartTests$LocalListener.class and jfreechart/bin/org/jfree/chart/junit/BarChartTests$LocalListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/ChartPackageTests.class and jfreechart/bin/org/jfree/chart/junit/ChartPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/ChartPanelTests.class and jfreechart/bin/org/jfree/chart/junit/ChartPanelTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/ChartRenderingInfoTests.class and jfreechart/bin/org/jfree/chart/junit/ChartRenderingInfoTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/JFreeChartTests.class and jfreechart/bin/org/jfree/chart/junit/JFreeChartTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/JFreeChartTestSuite.class and jfreechart/bin/org/jfree/chart/junit/JFreeChartTestSuite.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/LegendItemTests.class and jfreechart/bin/org/jfree/chart/junit/LegendItemTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/junit/package.html jfreechart/bin/org/jfree/chart/junit/package.html
*** jfreechart-orig/bin/org/jfree/chart/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/junit/package.html	2004-08-31 16:35:34.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Test cases for the JFreeChart class library, based on the JUnit framework.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/PieChart3DTests.class and jfreechart/bin/org/jfree/chart/junit/PieChart3DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/PieChart3DTests$LocalListener.class and jfreechart/bin/org/jfree/chart/junit/PieChart3DTests$LocalListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/PieChartTests.class and jfreechart/bin/org/jfree/chart/junit/PieChartTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/PieChartTests$LocalListener.class and jfreechart/bin/org/jfree/chart/junit/PieChartTests$LocalListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/ScatterPlotTests.class and jfreechart/bin/org/jfree/chart/junit/ScatterPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/ScatterPlotTests$LocalListener.class and jfreechart/bin/org/jfree/chart/junit/ScatterPlotTests$LocalListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/StackedBarChartTests.class and jfreechart/bin/org/jfree/chart/junit/StackedBarChartTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/junit/StackedBarChartTests$LocalListener.class and jfreechart/bin/org/jfree/chart/junit/StackedBarChartTests$LocalListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/AbstractXYItemLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/AbstractXYItemLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/BoxAndWhiskerToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/BoxAndWhiskerToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/BoxAndWhiskerXYToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/BoxAndWhiskerXYToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/CategoryLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/CategoryLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/CategoryToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/CategoryToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/ContourToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/ContourToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/CustomXYToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/CustomXYToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/HighLowItemLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/HighLowItemLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/IntervalCategoryLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/IntervalCategoryLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/ItemLabelAnchor.class and jfreechart/bin/org/jfree/chart/labels/ItemLabelAnchor.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/ItemLabelPosition.class and jfreechart/bin/org/jfree/chart/labels/ItemLabelPosition.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/BoxAndWhiskerToolTipGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/BoxAndWhiskerToolTipGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/BoxAndWhiskerXYToolTipGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/BoxAndWhiskerXYToolTipGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/CustomXYItemLabelGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/CustomXYItemLabelGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/HighLowItemLabelGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/HighLowItemLabelGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/IntervalCategoryLabelGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/IntervalCategoryLabelGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/ItemLabelAnchorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/ItemLabelAnchorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/ItemLabelPositionTests.class and jfreechart/bin/org/jfree/chart/labels/junit/ItemLabelPositionTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/LabelsPackageTests.class and jfreechart/bin/org/jfree/chart/labels/junit/LabelsPackageTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/labels/junit/package.html jfreechart/bin/org/jfree/chart/labels/junit/package.html
*** jfreechart-orig/bin/org/jfree/chart/labels/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/labels/junit/package.html	2004-08-31 16:37:05.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ JUnit tests.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/StandardCategoryLabelGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/StandardCategoryLabelGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/StandardCategoryToolTipGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/StandardCategoryToolTipGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/StandardContourToolTipGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/StandardContourToolTipGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/StandardPieItemLabelGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/StandardPieItemLabelGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/StandardXYLabelGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/StandardXYLabelGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/StandardXYToolTipGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/StandardXYToolTipGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/StandardXYZToolTipGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/StandardXYZToolTipGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/junit/SymbolicXYItemLabelGeneratorTests.class and jfreechart/bin/org/jfree/chart/labels/junit/SymbolicXYItemLabelGeneratorTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/labels/package.html jfreechart/bin/org/jfree/chart/labels/package.html
*** jfreechart-orig/bin/org/jfree/chart/labels/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/labels/package.html	2004-08-31 16:36:24.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Generators and other classes used for the display of item labels and tooltips.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/PieSectionLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/PieSectionLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/PieToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/PieToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/StandardCategoryLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/StandardCategoryLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/StandardCategoryToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/StandardCategoryToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/StandardContourToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/StandardContourToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/StandardPieItemLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/StandardPieItemLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/StandardXYLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/StandardXYLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/StandardXYToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/StandardXYToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/StandardXYZToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/StandardXYZToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/SymbolicXYItemLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/SymbolicXYItemLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/XYLabelGenerator.class and jfreechart/bin/org/jfree/chart/labels/XYLabelGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/XYToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/XYToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/labels/XYZToolTipGenerator.class and jfreechart/bin/org/jfree/chart/labels/XYZToolTipGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/Legend.class and jfreechart/bin/org/jfree/chart/Legend.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/LegendItem.class and jfreechart/bin/org/jfree/chart/LegendItem.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/LegendItemCollection.class and jfreechart/bin/org/jfree/chart/LegendItemCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/LegendItemLayout.class and jfreechart/bin/org/jfree/chart/LegendItemLayout.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/LegendRenderingOrder.class and jfreechart/bin/org/jfree/chart/LegendRenderingOrder.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_de.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_de.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_de.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_de.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,20 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file - german version
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ # 15-Mar-2004 : Revised version (Christian W. Zuckschwerdt);
+ #
+ 
+ Auto_Range=Autojustage
+ All_Axes=Beide Achsen
+ Chart_Properties=Diagramm Eigenschaften
+ Copy=Kopieren
+ Horizontal_Axis=Horizontale Achse
+ PNG_Image_Files=PNG Datei (Portable Network Graphics) (*.png)
+ Print...=Drucken...
+ Properties...=Eigenschaften...
+ Save_as...=Speichern unter...
+ Vertical_Axis=Vertikale Achse
+ Zoom_In=Hineinzoomen
+ Zoom_Out=Herauszoomen
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_es.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_es.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_es.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_es.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file - spanish version
+ #
+ # Changes (from 16-Dec-2003)
+ # --------------------------
+ # 16-Dec-2003 : Initial Version: Complejo Hospitalario Universitario Juan Canalejo
+ #
+ 
+ Auto_Range=Escala autom\u00E1tica
+ All_Axes=Todos los ejes
+ Chart_Properties=Propiedades del gr\u00E1fico
+ Copy=Copiar
+ Horizontal_Axis=Eje horizontal
+ PNG_Image_Files=Formato PNG (Portable Network Graphics) (*.png)
+ Print...=Imprimir...
+ Properties...=Propiedades...
+ Save_as...=Grabar como...
+ Vertical_Axis=Eje vertical
+ Zoom_In=Acercar
+ Zoom_Out=Alejar
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_fr.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_fr.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_fr.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_fr.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file - french version
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ Auto_Range=Echelle automatique
+ All_Axes=Les deux axes
+ Chart_Properties=Propri\u00E9t\u00E9s du graphique
+ Copy=Copier
+ Horizontal_Axis=Axe horizontal
+ PNG_Image_Files=Format PNG (Portable Network Graphics) (*.png)
+ Print...=Imprimer...
+ Properties...=Propri\u00E9t\u00E9s...
+ Save_as...=Enregistrer sous...
+ Vertical_Axis=Axe vertical
+ Zoom_In=Zoom avant
+ Zoom_Out=Zoom arri\u00E8re
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_it.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_it.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_it.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_it.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,13 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file - italian version
+ Auto_Range=Dimensiona Automaticamente
+ All_Axes=Entrambi gli Assi
+ Chart_Properties=Proprietà del Grafico
+ Copy=Copia
+ Horizontal_Axis=Asse Orizontale
+ PNG_Image_Files=Immagine PNG
+ Print...=Stampa...
+ Properties...=Proprietà...
+ Save_as...=Salva Come...
+ Vertical_Axis=Asse Verticale
+ Zoom_In=Ingrandisci
+ Zoom_Out=Rimpicciolisci
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_nl.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_nl.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_nl.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_nl.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,20 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 24-Mar-2003 : Translated into Dutch
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ Auto_Range=Automatisch bereik
+ All_Axes=Beide assen
+ Chart_Properties=Eigenschappen
+ Copy=Kopie\u00EBren
+ Horizontal_Axis=Horizontale As
+ PNG_Image_Files=PNG afbeelding
+ Print...=Afdrukken...
+ Properties...=Eigenschappen...
+ Save_as...=Opslaan als...
+ Vertical_Axis=Verticale As
+ Zoom_In=Inzoomen
+ Zoom_Out=Uitzoomen
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_pl.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_pl.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_pl.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_pl.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file
+ # 
+ # Changes (from 15-Mar-2004)
+ # --------------------------
+ # 15-Mar-2004 : Initial version (Kuba Duda);
+ #
+ 
+ Auto_Range=Automatyczny zakres
+ All_Axes=Obie osie
+ Chart_Properties=W\u0142a\u015bciwo\u015bci wykresu
+ Copy=Kopiuj
+ Horizontal_Axis=O\u015b pozioma 
+ PNG_Image_Files=Pliki graficzne PNG
+ Print...=Drukuj...
+ Properties...=W\u0142a\u015bciwo\u015bci...
+ Save_as...=Zapisz jako...
+ Vertical_Axis=O\u015b pionowa
+ Zoom_In=Powi\u0119ksz
+ Zoom_Out=Pomniejsz
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle.properties jfreechart/bin/org/jfree/chart/LocalizationBundle.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ Auto_Range=Auto Range
+ All_Axes=Both Axes
+ Chart_Properties=Chart Properties
+ Copy=Copy
+ Horizontal_Axis=Horizontal Axis
+ PNG_Image_Files=PNG Image Files
+ Print...=Print...
+ Properties...=Properties...
+ Save_as...=Save as...
+ Vertical_Axis=Vertical Axis
+ Zoom_In=Zoom In
+ Zoom_Out=Zoom Out
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_pt_PT.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_pt_PT.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_pt_PT.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_pt_PT.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file - portuguese version
+ # 
+ # Changes (from 09-Set-2003)
+ # --------------------------
+ # 09-Set-2003 : Initial version (ER);
+ #
+ 
+ Auto_Range=Escala autom\u00E1tica
+ All_Axes=Todos os eixos
+ Chart_Properties=Propriedades do gr\u00E1fico
+ Copy=Copiar
+ Horizontal_Axis=Eixo horizontal
+ PNG_Image_Files=Formato PNG (Portable Network Graphics) (*.png)
+ Print...=Imprimir...
+ Properties...=Propriedades...
+ Save_as...=Gravar como...
+ Vertical_Axis=Eixo vertical
+ Zoom_In=Aproximar
+ Zoom_Out=Afastar
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_ru.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_ru.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_ru.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_ru.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file
+ # 
+ # Changes (from 10-Nov-2003)
+ # --------------------------
+ # 10-Nov-2003 : Initial version (AL);
+ #
+ 
+ Auto_Range=\u0410\u0432\u0442\u043e\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435
+ All_Axes=\u041f\u043e \u0432\u0441\u0435\u043c \u043e\u0441\u044f\u043c
+ Chart_Properties=\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u0430
+ Copy=\u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c
+ Horizontal_Axis=\u041f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0441\u0438
+ PNG_Image_Files=PNG \u0444\u0430\u0439\u043b
+ Print...=\u041f\u0435\u0447\u0430\u0442\u044c...
+ Properties...=\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438...
+ Save_as...=\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u0430\u043a...
+ Vertical_Axis=\u041f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0441\u0438
+ Zoom_In=\u041f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u044c
+ Zoom_Out=\u041e\u0442\u0434\u0430\u043b\u0438\u0442\u044c
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_zh_TW.properties jfreechart/bin/org/jfree/chart/LocalizationBundle_zh_TW.properties
*** jfreechart-orig/bin/org/jfree/chart/LocalizationBundle_zh_TW.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/LocalizationBundle_zh_TW.properties	2004-08-31 16:26:08.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ Auto_Range=\u81ea\u52d5\u8abf\u6574
+ All_Axes=\u6240\u6709\u8ef8
+ Chart_Properties=\u5716\u8868\u5167\u5bb9
+ Copy=\u8907\u88fd
+ Horizontal_Axis=\u6a6b\u8ef8
+ PNG_Image_Files=PNG\u5716\u6a94
+ Print...=\u5217\u5370
+ Properties...=\u5167\u5bb9
+ Save_as...=\u53e6\u5b58\u65b0\u6a94
+ Vertical_Axis=\u7e31\u8ef8
+ Zoom_In=\u653e\u5927
+ Zoom_Out=\u7e2e\u5c0f
Binärdateien jfreechart-orig/bin/org/jfree/chart/MeterLegend.class and jfreechart/bin/org/jfree/chart/MeterLegend.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/ArrowNeedle.class and jfreechart/bin/org/jfree/chart/needle/ArrowNeedle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/LineNeedle.class and jfreechart/bin/org/jfree/chart/needle/LineNeedle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/LongNeedle.class and jfreechart/bin/org/jfree/chart/needle/LongNeedle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/MeterNeedle.class and jfreechart/bin/org/jfree/chart/needle/MeterNeedle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/MiddlePinNeedle.class and jfreechart/bin/org/jfree/chart/needle/MiddlePinNeedle.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/needle/package.html jfreechart/bin/org/jfree/chart/needle/package.html
*** jfreechart-orig/bin/org/jfree/chart/needle/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/needle/package.html	2004-08-31 16:37:36.000000000 +0200
***************
*** 0 ****
--- 1,7 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ A range of objects that can be used to represent the needle on a
+ {@link org.jfree.chart.plot.CompassPlot}.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/PinNeedle.class and jfreechart/bin/org/jfree/chart/needle/PinNeedle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/PlumNeedle.class and jfreechart/bin/org/jfree/chart/needle/PlumNeedle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/PointerNeedle.class and jfreechart/bin/org/jfree/chart/needle/PointerNeedle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/ShipNeedle.class and jfreechart/bin/org/jfree/chart/needle/ShipNeedle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/needle/WindNeedle.class and jfreechart/bin/org/jfree/chart/needle/WindNeedle.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/package.html jfreechart/bin/org/jfree/chart/package.html
*** jfreechart-orig/bin/org/jfree/chart/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/package.html	2004-08-31 17:19:59.000000000 +0200
***************
*** 0 ****
--- 1,7 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Core classes, including {@link org.jfree.chart.JFreeChart} and
+ {@link org.jfree.chart.ChartPanel}.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/CategoryPlot.class and jfreechart/bin/org/jfree/chart/plot/CategoryPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/CombinedDomainCategoryPlot.class and jfreechart/bin/org/jfree/chart/plot/CombinedDomainCategoryPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/CombinedDomainXYPlot.class and jfreechart/bin/org/jfree/chart/plot/CombinedDomainXYPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/CombinedRangeCategoryPlot.class and jfreechart/bin/org/jfree/chart/plot/CombinedRangeCategoryPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/CombinedRangeXYPlot.class and jfreechart/bin/org/jfree/chart/plot/CombinedRangeXYPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/CompassPlot.class and jfreechart/bin/org/jfree/chart/plot/CompassPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/ContourPlot.class and jfreechart/bin/org/jfree/chart/plot/ContourPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/ContourPlotUtilities.class and jfreechart/bin/org/jfree/chart/plot/ContourPlotUtilities.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/ContourValuePlot.class and jfreechart/bin/org/jfree/chart/plot/ContourValuePlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/CrosshairState.class and jfreechart/bin/org/jfree/chart/plot/CrosshairState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/DatasetRenderingOrder.class and jfreechart/bin/org/jfree/chart/plot/DatasetRenderingOrder.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/DefaultDrawingSupplier.class and jfreechart/bin/org/jfree/chart/plot/DefaultDrawingSupplier.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/DialShape.class and jfreechart/bin/org/jfree/chart/plot/DialShape.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/DrawingSupplier.class and jfreechart/bin/org/jfree/chart/plot/DrawingSupplier.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/FastScatterPlot.class and jfreechart/bin/org/jfree/chart/plot/FastScatterPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/IntervalMarker.class and jfreechart/bin/org/jfree/chart/plot/IntervalMarker.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/JThermometer.class and jfreechart/bin/org/jfree/chart/plot/JThermometer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/CategoryPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/CategoryPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/CombinedDomainCategoryPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/CombinedDomainXYPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/CombinedRangeCategoryPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/CombinedRangeXYPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/CompassPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/CompassPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/ContourPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/ContourPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/FastScatterPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/FastScatterPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/IntervalMarkerTests.class and jfreechart/bin/org/jfree/chart/plot/junit/IntervalMarkerTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/MeterPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/MeterPlotTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/junit/package.html jfreechart/bin/org/jfree/chart/plot/junit/package.html
*** jfreechart-orig/bin/org/jfree/chart/plot/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/junit/package.html	2004-08-31 16:42:21.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ JUnit tests for the plot classes.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/PiePlot3DTests.class and jfreechart/bin/org/jfree/chart/plot/junit/PiePlot3DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/PiePlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/PiePlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/PlotOrientationTests.class and jfreechart/bin/org/jfree/chart/plot/junit/PlotOrientationTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/PlotPackageTests.class and jfreechart/bin/org/jfree/chart/plot/junit/PlotPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/PlotRenderingInfoTests.class and jfreechart/bin/org/jfree/chart/plot/junit/PlotRenderingInfoTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/ThermometerPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/ThermometerPlotTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/ValueMarkerTests.class and jfreechart/bin/org/jfree/chart/plot/junit/ValueMarkerTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/junit/XYPlotTests.class and jfreechart/bin/org/jfree/chart/plot/junit/XYPlotTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_de.properties jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_de.properties
*** jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_de.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_de.properties	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,22 ----
+ # org.jfree.chart.plot.plot ResourceBundle properties file - german version
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ # 15-Mar-2004 : Revised version (Christian W. Zuckschwerdt);
+ #
+ 
+ Category_Plot=Kategoriediagramm
+ Combined_Domain_XYPlot=Rubriken-kombiniertes XY-Diagramm
+ Combined_Range_XYPlot=Werte-kombiniertes XY-Diagramm
+ Compass_Plot=Kompass-Diagramm
+ Contour_Plot=Liniendiagramm
+ Fast_Scatter_Plot=Streudiagramm
+ Meter_Plot=Tachometer-Diagramm
+ Period_Marker_Plot=Zeitreihe
+ Pie_Plot=Kreisdiagramm
+ Thermometer_Plot=Thermometer-Diagramm
+ XY_Plot=XY-Diagramm
+ 
+ #Secteurs 3D
+ Pie_3D_Plot=3D-Kreisdiagramm
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_es.properties jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_es.properties
*** jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_es.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_es.properties	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.plot.plot ResourceBundle properties file - spanish version
+ #
+ # Changes (from 16-Dec-2003)
+ # --------------------------
+ # 16-Dec-2003 : Initial Version: Complejo Hospitalario Universitario Juan Canalejo
+ #
+ 
+ Category_Plot=Barras
+ Combined_Domain_XYPlot=Curvas combinadas por la abcisa
+ Combined_Range_XYPlot=Curvas combinadas por la ordenada
+ Compass_Plot=Diagrama del comp\u00a3s
+ Contour_Plot=Contorno del comp\u00a3s
+ Fast_Scatter_Plot=Dispersi\u00f3n
+ Meter_Plot=Diagrama del metro
+ Period_Marker_Plot=Diagrama del marcador del período
+ Pie_Plot=Sectores
+ Thermometer_Plot=Term\u00f3metro
+ XY_Plot=Curvas
+ Pie_3D_Plot=Sectores 3D
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_fr.properties jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_fr.properties
*** jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_fr.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_fr.properties	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.plot.plot ResourceBundle properties file - French version
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ Category_Plot=Barres
+ Combined_Domain_XYPlot=Courbes combin\u00E9es sur l'abcisse
+ Combined_Range_XYPlot=Courbes combin\u00E9es sur l'ordonn\u00E9e
+ Compass_Plot=Compas
+ Contour_Plot=Contours
+ Fast_Scatter_Plot=Nuage de points
+ Meter_Plot=Niveaux
+ Period_Marker_Plot=Period Marker Plot
+ Pie_Plot=Secteurs
+ Thermometer_Plot=Thermom\u00E8tre
+ XY_Plot=Courbes
+ Pie_3D_Plot=Secteurs 3D
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_nl.properties jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_nl.properties
*** jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_nl.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_nl.properties	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,22 ----
+ # org.jfree.chart.plot.plot ResourceBundle properties file
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 24-Mar-2003 : Translated into Dutch
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ Category_Plot=Categorie diagram
+ Combined_Domain_XYPlot=Diagrammen met gecombineerd domein
+ Combined_Range_XYPlot=Diagrammen met gecombineerd bereik
+ Compass_Plot=Kompas diagram
+ Contour_Plot=Contour diagram
+ Fast_Scatter_Plot=Spreidingsdiagram
+ Meter_Plot=Wijzerplaat-diagram
+ Period_Marker_Plot=Periodemarker-diagram
+ Pie_Plot=Taartdiagram
+ Thermometer_Plot=Thermometer-diagram
+ XY_Plot=XY Diagram
+ 
+ #Secteurs 3D
+ Pie_3D_Plot=3D Taartdiagram
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_pl.properties jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_pl.properties
*** jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_pl.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_pl.properties	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,22 ----
+ # org.jfree.chart.plot.plot ResourceBundle properties file
+ # 
+ # Changes (from 15-Mar-2004)
+ # --------------------------
+ # 15-Mar-2004 : Initial version (Kuba Duda);
+ #
+ 
+ Category_Plot=Wykres kategorii
+ Combined_Domain_XYPlot=Wykres kombinowany z dzielon\u0105 osi\u0105 domeny
+ Combined_Range_XYPlot=Wykres kombinowany z dzielon\u0105 osi\u0105 zasi\u0119gu
+ Compass_Plot=wykres kompasowy
+ Contour_Plot=Wykres konturowy
+ Fast_Scatter_Plot=Szybki wykres rozproszony punktowy
+ Meter_Plot=Wykres miernikowy
+ Period_Marker_Plot=Wykres zaznaczaj\u0105cy okresy czasu
+ Pie_Plot=Wykres ko\u0142owy
+ Thermometer_Plot=Wykres temperatury
+ XY_Plot=Wykres XY
+ Polar_Plot=Wykres dwuwymiarowy o wsp\u00f3\u0142rz\u0119dnych biegunowych
+ 
+ #Secteurs 3D
+ Pie_3D_Plot=Wykres ko\u0142owy 3D
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle.properties jfreechart/bin/org/jfree/chart/plot/LocalizationBundle.properties
*** jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/LocalizationBundle.properties	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,23 ----
+ # org.jfree.chart.plot.plot ResourceBundle properties file
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ # 19-Jan-2004 : Added Polar_Plot (DG);
+ #
+ 
+ Category_Plot=Category Plot
+ Combined_Domain_XYPlot=Combined Domain XYPlot
+ Combined_Range_XYPlot=Combined Range XYPlot
+ Compass_Plot=Compass Plot
+ Contour_Plot=Contour Plot
+ Fast_Scatter_Plot=Fast Scatter Plot
+ Meter_Plot=Meter Plot
+ Period_Marker_Plot=Period Marker Plot
+ Pie_Plot=Pie Plot
+ Thermometer_Plot=Thermometer Plot
+ XY_Plot=XY Plot
+ Polar_Plot=Polar Plot
+ 
+ #Secteurs 3D
+ Pie_3D_Plot=Pie 3D Plot
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_pt_PT.properties jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_pt_PT.properties
*** jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_pt_PT.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_pt_PT.properties	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,19 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file - portuguese version
+ # 
+ # Changes (from 09-Set-2003)
+ # --------------------------
+ # 09-Set-2003 : Initial version (Eduardo Ramalho);
+ #
+ 
+ Category_Plot=Barras
+ Combined_Domain_XYPlot=Curvas combinadas pela abcissa
+ Combined_Range_XYPlot=Curvas combinadas pela ordenada
+ Compass_Plot=Compasso
+ Contour_Plot=Contours
+ Fast_Scatter_Plot=Dispers\u00E3o
+ Meter_Plot=N\u00EDvel
+ Period_Marker_Plot=Period Marker Plot
+ Pie_Plot=Sectores
+ Thermometer_Plot=Term\u00a2metro
+ XY_Plot=Curvas
+ Pie_3D_Plot=Sectores 3D
\ Kein Zeilenumbruch am Dateiende.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_ru.properties jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_ru.properties
*** jfreechart-orig/bin/org/jfree/chart/plot/LocalizationBundle_ru.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/LocalizationBundle_ru.properties	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,21 ----
+ # org.jfree.chart.plot.plot ResourceBundle properties file
+ # 
+ # Changes (from 10-Nov-2003)
+ # --------------------------
+ # 10-Nov-2003 : Initial version (AL);
+ #
+ 
+ Category_Plot=\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f
+ Combined_Domain_XYPlot=\u0421\u043e\u0432\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043f\u043e \u043e\u0441\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432
+ Combined_Range_XYPlot=\u0421\u043e\u0432\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043f\u043e \u043e\u0441\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439
+ Compass_Plot=\u041a\u043e\u043c\u043f\u0430\u0441
+ Contour_Plot=\u041a\u043e\u043d\u0442\u0443\u0440
+ Fast_Scatter_Plot=\u0420\u043e\u0441\u0441\u044b\u043f\u044c
+ Meter_Plot=\u041c\u0435\u0442\u0440\u0438\u043a\u0430
+ Period_Marker_Plot=\u041f\u0435\u0440\u0438\u043e\u0434
+ Pie_Plot=\u041a\u0440\u0443\u0433
+ Thermometer_Plot=\u0422\u0435\u0440\u043c\u043e\u043c\u0435\u0442\u0440
+ XY_Plot=XY
+ 
+ #Secteurs 3D
+ Pie_3D_Plot=\u0422\u0440\u0435\u0445\u043c\u0435\u0440\u043d\u044b\u0439 \u043a\u0440\u0443\u0433
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/Marker.class and jfreechart/bin/org/jfree/chart/plot/Marker.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/MeterPlot.class and jfreechart/bin/org/jfree/chart/plot/MeterPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/MultiplePiePlot.class and jfreechart/bin/org/jfree/chart/plot/MultiplePiePlot.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/plot/package.html jfreechart/bin/org/jfree/chart/plot/package.html
*** jfreechart-orig/bin/org/jfree/chart/plot/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/plot/package.html	2004-08-31 16:39:21.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Plot classes and related interfaces.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PieLabelDistributor.class and jfreechart/bin/org/jfree/chart/plot/PieLabelDistributor.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PieLabelRecord.class and jfreechart/bin/org/jfree/chart/plot/PieLabelRecord.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PiePlot3D.class and jfreechart/bin/org/jfree/chart/plot/PiePlot3D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PiePlot.class and jfreechart/bin/org/jfree/chart/plot/PiePlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PiePlotState.class and jfreechart/bin/org/jfree/chart/plot/PiePlotState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/Plot.class and jfreechart/bin/org/jfree/chart/plot/Plot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PlotOrientation.class and jfreechart/bin/org/jfree/chart/plot/PlotOrientation.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PlotRenderingInfo.class and jfreechart/bin/org/jfree/chart/plot/PlotRenderingInfo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PlotState.class and jfreechart/bin/org/jfree/chart/plot/PlotState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/PolarPlot.class and jfreechart/bin/org/jfree/chart/plot/PolarPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/ThermometerPlot.class and jfreechart/bin/org/jfree/chart/plot/ThermometerPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/ValueAxisPlot.class and jfreechart/bin/org/jfree/chart/plot/ValueAxisPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/ValueMarker.class and jfreechart/bin/org/jfree/chart/plot/ValueMarker.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/WaferMapPlot.class and jfreechart/bin/org/jfree/chart/plot/WaferMapPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/plot/XYPlot.class and jfreechart/bin/org/jfree/chart/plot/XYPlot.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/PolarChartPanel.class and jfreechart/bin/org/jfree/chart/PolarChartPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/AbstractRenderer.class and jfreechart/bin/org/jfree/chart/renderer/AbstractRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/AreaRendererEndType.class and jfreechart/bin/org/jfree/chart/renderer/AreaRendererEndType.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/AreaRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/AreaRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/BarRenderer3D.class and jfreechart/bin/org/jfree/chart/renderer/category/BarRenderer3D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/BarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/BarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/CategoryItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/CategoryItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/CategoryItemRendererState.class and jfreechart/bin/org/jfree/chart/renderer/category/CategoryItemRendererState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/CategoryStepRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/CategoryStepRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/DefaultCategoryItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/DefaultCategoryItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/GanttRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/GanttRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/IntervalBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/IntervalBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/AreaRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/AreaRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/BarRenderer3DTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/BarRenderer3DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/BarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/BarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/GanttRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/GanttRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/LineAndShapeRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/LineRenderer3DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/RendererCategoryPackageTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/RendererCategoryPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/StackedAreaRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/StackedAreaRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/StackedBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/StackedBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/junit/WaterfallBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/category/junit/WaterfallBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/LayeredBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/LayeredBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/LevelRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/LevelRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/LineAndShapeRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/LineAndShapeRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/LineRenderer3D.class and jfreechart/bin/org/jfree/chart/renderer/category/LineRenderer3D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/MinMaxCategoryRenderer$1.class and jfreechart/bin/org/jfree/chart/renderer/category/MinMaxCategoryRenderer$1.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/MinMaxCategoryRenderer$2.class and jfreechart/bin/org/jfree/chart/renderer/category/MinMaxCategoryRenderer$2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/StackedAreaRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/StackedAreaRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/StackedBarRenderer3D.class and jfreechart/bin/org/jfree/chart/renderer/category/StackedBarRenderer3D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/StackedBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/StackedBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/StatisticalBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/StatisticalBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/category/WaterfallBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/category/WaterfallBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/CategoryURLGeneratorTable.class and jfreechart/bin/org/jfree/chart/renderer/CategoryURLGeneratorTable.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/DefaultPolarItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/DefaultPolarItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/junit/AbstractRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/junit/AbstractRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/junit/AreaRendererEndTypeTests.class and jfreechart/bin/org/jfree/chart/renderer/junit/AreaRendererEndTypeTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/junit/DefaultDrawingSupplierTests.class and jfreechart/bin/org/jfree/chart/renderer/junit/DefaultDrawingSupplierTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/renderer/junit/package.html jfreechart/bin/org/jfree/chart/renderer/junit/package.html
*** jfreechart-orig/bin/org/jfree/chart/renderer/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/renderer/junit/package.html	2004-08-31 16:45:33.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ JUnit tests.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/junit/RendererChangeDetector.class and jfreechart/bin/org/jfree/chart/renderer/junit/RendererChangeDetector.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/junit/RendererPackageTests.class and jfreechart/bin/org/jfree/chart/renderer/junit/RendererPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/NotOutlierException.class and jfreechart/bin/org/jfree/chart/renderer/NotOutlierException.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/Outlier.class and jfreechart/bin/org/jfree/chart/renderer/Outlier.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/OutlierList.class and jfreechart/bin/org/jfree/chart/renderer/OutlierList.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/OutlierListCollection.class and jfreechart/bin/org/jfree/chart/renderer/OutlierListCollection.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/renderer/package.html jfreechart/bin/org/jfree/chart/renderer/package.html
*** jfreechart-orig/bin/org/jfree/chart/renderer/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/renderer/package.html	2004-08-31 16:45:01.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Plug-in renderers for the {@link org.jfree.chart.plot.CategoryPlot} and {@link org.jfree.chart.plot.XYPlot} classes.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/PolarItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/PolarItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/RangeType.class and jfreechart/bin/org/jfree/chart/renderer/RangeType.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/RendererState.class and jfreechart/bin/org/jfree/chart/renderer/RendererState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/WaferMapRenderer.class and jfreechart/bin/org/jfree/chart/renderer/WaferMapRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/CandlestickRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/CandlestickRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/ClusteredXYBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/ClusteredXYBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/CyclicXYItemRenderer$OverwriteDataSet.class and jfreechart/bin/org/jfree/chart/renderer/xy/CyclicXYItemRenderer$OverwriteDataSet.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/DefaultXYItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/DefaultXYItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/HighLow.class and jfreechart/bin/org/jfree/chart/renderer/xy/HighLow.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/HighLowRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/HighLowRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/AbstractXYItemRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/CandlestickRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/ClusteredXYBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/HighLowRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/RendererXYPackageTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/RendererXYPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/SignalRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/SignalRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/StackedAreaXYRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/StackedAreaXYRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/StackedXYBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/StandardXYItemRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/WindItemRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/WindItemRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYAreaRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYBarRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYBoxAndWhiskerRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYBoxAndWhiskerRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYBubbleRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYDifferenceRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYDotRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYStepAreaRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.class and jfreechart/bin/org/jfree/chart/renderer/xy/junit/YIntervalRendererTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/SignalRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/SignalRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/StackedAreaXYRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/StackedAreaXYRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.class and jfreechart/bin/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/StackedXYAreaRenderer$StackedXYAreaRendererState.class and jfreechart/bin/org/jfree/chart/renderer/xy/StackedXYAreaRenderer$StackedXYAreaRendererState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/StackedXYBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/StackedXYBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/StackedXYBarRenderer$StackedXYBarRendererState.class and jfreechart/bin/org/jfree/chart/renderer/xy/StackedXYBarRenderer$StackedXYBarRendererState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/StandardXYItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/StandardXYItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/WindItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/WindItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYAreaRenderer2.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYAreaRenderer2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYAreaRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYAreaRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYAreaRenderer$XYAreaRendererState.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYAreaRenderer$XYAreaRendererState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYBarRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYBarRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYBarRenderer$XYBarRendererState.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYBarRenderer$XYBarRendererState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYBubbleRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYBubbleRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYDifferenceRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYDifferenceRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYDotRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYDotRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYItemRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYItemRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYItemRendererState.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYItemRendererState.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer$State.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer$State.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYStepAreaRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYStepAreaRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/XYStepRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/XYStepRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/renderer/xy/YIntervalRenderer.class and jfreechart/bin/org/jfree/chart/renderer/xy/YIntervalRenderer.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/resources/JFreeChartResources.class and jfreechart/bin/org/jfree/chart/resources/JFreeChartResources.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/resources/package.html jfreechart/bin/org/jfree/chart/resources/package.html
*** jfreechart-orig/bin/org/jfree/chart/resources/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/resources/package.html	2004-08-31 16:51:48.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Localised resources for the JFreeChart class library.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/SeriesShapeFactory.class and jfreechart/bin/org/jfree/chart/SeriesShapeFactory.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/servlet/ChartDeleter.class and jfreechart/bin/org/jfree/chart/servlet/ChartDeleter.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/servlet/DisplayChart.class and jfreechart/bin/org/jfree/chart/servlet/DisplayChart.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/servlet/package.html jfreechart/bin/org/jfree/chart/servlet/package.html
*** jfreechart-orig/bin/org/jfree/chart/servlet/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/servlet/package.html	2004-08-31 16:52:16.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Classes for providing useful servlet and JSP functionality.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/servlet/ServletUtilities.class and jfreechart/bin/org/jfree/chart/servlet/ServletUtilities.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ShapeFactory.class and jfreechart/bin/org/jfree/chart/ShapeFactory.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/StandardLegend.class and jfreechart/bin/org/jfree/chart/StandardLegend.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/StandardLegendItemLayout.class and jfreechart/bin/org/jfree/chart/StandardLegendItemLayout.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/DateTitle.class and jfreechart/bin/org/jfree/chart/title/DateTitle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/ImageTitle.class and jfreechart/bin/org/jfree/chart/title/ImageTitle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/junit/DateTitleTests.class and jfreechart/bin/org/jfree/chart/title/junit/DateTitleTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/junit/ImageTitleTests.class and jfreechart/bin/org/jfree/chart/title/junit/ImageTitleTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/junit/TextTitleTests.class and jfreechart/bin/org/jfree/chart/title/junit/TextTitleTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/junit/TitlePackageTests.class and jfreechart/bin/org/jfree/chart/title/junit/TitlePackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/junit/TitleTests.class and jfreechart/bin/org/jfree/chart/title/junit/TitleTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/LegendTitle.class and jfreechart/bin/org/jfree/chart/title/LegendTitle.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/title/package.html jfreechart/bin/org/jfree/chart/title/package.html
*** jfreechart-orig/bin/org/jfree/chart/title/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/title/package.html	2004-08-31 16:52:48.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Classes used to display chart titles and subtitles.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/TextTitle.class and jfreechart/bin/org/jfree/chart/title/TextTitle.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/title/Title.class and jfreechart/bin/org/jfree/chart/title/Title.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/AxisPropertyEditPanel.class and jfreechart/bin/org/jfree/chart/ui/AxisPropertyEditPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/ChartPropertyEditPanel.class and jfreechart/bin/org/jfree/chart/ui/ChartPropertyEditPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/ColorBarPropertyEditPanel.class and jfreechart/bin/org/jfree/chart/ui/ColorBarPropertyEditPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/ColorPalette.class and jfreechart/bin/org/jfree/chart/ui/ColorPalette.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/GreyPalette.class and jfreechart/bin/org/jfree/chart/ui/GreyPalette.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/junit/ChartUIPackageTests.class and jfreechart/bin/org/jfree/chart/ui/junit/ChartUIPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/junit/ColorPaletteTests.class and jfreechart/bin/org/jfree/chart/ui/junit/ColorPaletteTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/junit/package.html jfreechart/bin/org/jfree/chart/ui/junit/package.html
*** jfreechart-orig/bin/org/jfree/chart/ui/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/junit/package.html	2004-08-31 16:55:27.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Tests for the classes in the <code>org.jfree.chart.ui</code> package.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/LegendPropertyEditPanel.class and jfreechart/bin/org/jfree/chart/ui/LegendPropertyEditPanel.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_de.properties jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_de.properties
*** jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_de.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_de.properties	2004-08-31 16:54:21.000000000 +0200
***************
*** 0 ****
--- 1,63 ----
+ # org.jfree.chart.ui.ui ResourceBundle properties file - german version
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ # 15-Mar-2004 : Revised version (Christian W. Zuckschwerdt);
+ #
+ 
+ \:=:
+ Appearance=Darstellung
+ Auto-adjust_range=Autojustage des Wertebereichs:
+ Background=Hintergrund:
+ Background_Color=Hintergrundfarbe
+ Background_paint=Hintergrundfarbe:
+ Color=Farbe:
+ Color_Bar=Farbleiste
+ Domain_Axis=Rubrikenachse
+ Draw_anti-aliased=Zeichnung glätten
+ Edit...=Bearbeiten...
+ Edit_Insets=Seitenränder bearbeiten
+ Font=Schrift:
+ Font_Selection=Schriftwahl
+ General=Allgemein:
+ Grid_Color=Gitterfarbe
+ Insets=Ränder:
+ Invert_Palette=Palette invertieren:
+ Label=Beschriftung:
+ Label_Color=Beschriftungsfarbe
+ Label_Insets=Beschriftungsränder:
+ Legend=Legende
+ Maximum_range_value=Maximalwert:
+ Minimum_range_value=Minimalwert:
+ No_editor_implemented=Nicht verfügbar
+ Other=Sonstiges
+ Outline=Rahmenlinien:
+ Outline_Color=Rahmenfarbe
+ Outline_stroke=Rahmenart:
+ Outline_Paint=Rahmenfarbe:
+ Paint=Farbe:
+ Palette_Selection=Farbauswahl
+ Palette=Palette:
+ Pen_Stroke_Selection=Linienstärke wählen
+ Plot=Diagramm
+ Range=Skala
+ Range_Axis=Werteachse
+ Select...=Auswählen...
+ Series_Label_Color=Farbe der Datenreihenbeschriftung
+ Series_label_font=Schrift der Datenreihenbeschriftung:
+ Series_label_paint=Farbe der Datenreihenbeschriftung:
+ Series_Outline_Paint=Farbe der Datenreihenrahmen:
+ Series_Outline_Stroke=Art der Datenreihenrahmen:
+ Series_Paint=Datenreihenfarbe:
+ Series_Stroke=Datenreihenrahmen:
+ Show_tick_labels=Beschriftungen zeichnen
+ Show_tick_marks=Markierungen zeichnen
+ Set_palette...=Palette wählen...
+ Step_Palette=Step Palette:
+ Stroke_Selection=Linienauswahl
+ Text=Text:
+ Ticks=Markierungen
+ Tick_label_font=Markierungsschift:
+ Tick_Label_Insets=Markierungsränder:
+ Title_Color=Titelfarbe
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_es.properties jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_es.properties
*** jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_es.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_es.properties	2004-11-02 18:54:33.000000000 +0100
***************
*** 0 ****
--- 1,69 ----
+ # org.jfree.chart.ui.ui ResourceBundle properties file - spanish version
+ #
+ # Changes (from 16-Dec-2003)
+ # --------------------------
+ # 16-Dec-2003 : Initial Version: Complejo Hospitalario Universitario Juan Canalejo
+ # 14-Oct-2004 : Revised by: Leopoldo Federico Pértile (Grupo de Procesamiento Digital de Imágenes)
+ #				    Universidad Tecnológica Nacional - Facultad Regional Resistencia, Argentina
+ 
+ \:=\ :
+ Appearance=Apariencia
+ Auto-adjust_range=Ejes auto-ajustables :
+ Background=Fondo :
+ Background_Color=Color de fondo
+ Background_paint=Color de fondo :
+ Color=Color :
+ Color_Bar=Color de la barra
+ Domain_Axis=Eje de las abcisas
+ Draw_anti-aliased=Anti-aliasing
+ Draw_lines=Dibujar l\u00edneas:
+ Draw_shapes=Draw figuras:
+ Edit...=Editar...
+ Edit_Insets=Regular la posici\u00F3n
+ Font=Fuente :
+ Font_Selection=Selecci\u00F3n de fuente
+ General=General :
+ Grid_Color=Color de la rejilla
+ Insets=Posici\u00F3n :
+ Invert_Palette=Invertir la paleta :
+ Label=Etiqueta :
+ Label_Color=Color de la etiqueta
+ Label_Insets=Posici\u00F3n de la etiqueta :
+ Legend=Leyenda
+ Maximum_range_value=Valor m\u00E3ximo del eje :
+ Minimum_range_value=Valor m\u00EDnimo del eje :
+ No_editor_implemented=Editor no disponble
+ Orientation=Orientaci\u00F3n:
+ Other=Otro
+ Outline=Borde :
+ Outline_Paint=Color del borde :
+ Outline_Color=Color del borde
+ Outline_stroke=Estilo del trazo del borde :
+ Paint=Color :
+ Palette=Paleta :
+ Palette_Selection=Selecci\u00F3n de la paleta
+ Pen_Stroke_Selection=Selecci\u00F3n del trazo
+ Plot=Trazo
+ Range=Intervalo
+ Range_Axis=Eje de ordenadas
+ Select...=Seleccionar...
+ Series_Label_Color=Color de la etiqueta de las series
+ Series_label_font=Fuente de la etiqueta de las series :
+ Series_label_paint=Color de la etiqueta de las series :
+ Series_Outline_Paint=Color del borde de las series :
+ Series_Outline_Stroke=Estilo del trazo del borde :
+ Series_Paint=Color de  las series :
+ Series_Stroke=Estilo del trazo de las series :
+ Show_Legend=Mostrar leyenda:
+ Show_tick_labels=Visualizar etiquetas de graduaci\u00F3n de escala
+ Show_tick_marks=Visualizar marcas de graduaci\u00F3n de escala
+ Show_Title=Mostrar t\u00EDtulo
+ Set_palette...=Escoja la paleta...
+ Step_Palette=Paso de paleta :
+ Stroke_Selection=Selecci\u00F3n del trazo
+ Text=Texto :
+ Tick_label_font=Fuente de las etiquetas de graduaci\u00F3n de escala :
+ Tick_Label_Insets=Posici\u00F3n de las etiquetas de graduaci\u00F3n de escala :
+ Ticks=Etiquetas de graduaci\u00F3n de escala
+ Title=T\u00EDtulo
+ Title_Color=Color del t\u00EDtulo
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_fr.properties jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_fr.properties
*** jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_fr.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_fr.properties	2004-08-31 16:54:21.000000000 +0200
***************
*** 0 ****
--- 1,62 ----
+ # org.jfree.chart.ui.ui ResourceBundle properties file - french version
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ \:=\ : 
+ Appearance=G\u00E9n\u00E9ral
+ Auto-adjust_range=R\u00E9glage automatique de l'\u00E9chelle :
+ Background=Fond :
+ Background_Color=Couleur du fond
+ Background_paint=Couleur du fond :
+ Color=Couleur :
+ Color_Bar=Couleur de la barre
+ Domain_Axis=Axe des abcisses
+ Draw_anti-aliased=Anti-aliasing
+ Edit...=Edition...
+ Edit_Insets=R\u00E9gler la position
+ Font=Police :
+ Font_Selection=S\u00E9lection de la police
+ General=G\u00E9n\u00E9ral :
+ Grid_Color=Couleur de la grille
+ Insets=Position :
+ Invert_Palette=Inversion de la palette :
+ Label=Etiquette :
+ Label_Color=Couleur de l'\u00E9tiquette
+ Label_Insets=Position de l'\u00E9tiquette :
+ Legend=L\u00E9gende
+ Maximum_range_value=Valeur maximum de l'axe :
+ Minimum_range_value=Valeur minimum de l'axe :
+ No_editor_implemented=Aucun \u00E9diteur disponible
+ Other=Autre
+ Outline=Bordure :
+ Outline_Paint=Couleur de la bordure :
+ Outline_Color=Outline Color
+ Outline_stroke=Bordure :
+ Paint=Couleur :
+ Palette=Palette :
+ Palette_Selection=Selection de la palette
+ Pen_Stroke_Selection=S\u00E9lection du style de trait
+ Plot=Trac\u00E9
+ Range=Echelle
+ Range_Axis=Axe des ordonn\u00E9es
+ Select...=S\u00E9lectionner...
+ Series_Label_Color=S\u00E9lection de la couleur de l'\u00E9tiquette
+ Series_label_font=Police de l'\u00E9tiquette de s\u00E9rie :
+ Series_label_paint=Couleur de l'\u00E9tiquette de s\u00E9rie :
+ Series_Outline_Paint=Couleur de bordure de la s\u00E9rie :
+ Series_Outline_Stroke=Style du trait de bordure de la s\u00E9rie :
+ Series_Paint=Couleur de la s\u00E9rie :
+ Series_Stroke=Style du trait de la s\u00E9rie :
+ Show_tick_labels=Afficher les \u00E9tiquettes de graduation
+ Show_tick_marks=Afficher les rep\u00E8res de graduation
+ Set_palette...=Choix de palette...
+ Step_Palette=Changement de palette :
+ Stroke_Selection=S\u00E9lection du style de trait
+ Text=Texte :
+ Tick_label_font=Police des \u00E9tiquettes de graduation :
+ Tick_Label_Insets=Position des \u00E9tiquettes de graduation :
+ Ticks=Etiquettes de graduation
+ Title_Color=Couleur du titre
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_nl.properties jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_nl.properties
*** jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_nl.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_nl.properties	2004-08-31 16:54:21.000000000 +0200
***************
*** 0 ****
--- 1,67 ----
+ # org.jfree.chart.ui.ui ResourceBundle properties file
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 24-Mar-2003 : Translated into Dutch
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ \:=:
+ Appearance=Uiterlijk
+ Auto-adjust_range=Bereik automatisch bepalen
+ Background=Achtergrond
+ Background_Color=Achtergrondkleur
+ 
+ # "Paint" translated sounds a bit silly IMHO. Since at present only single, 
+ # opaque colors are selectable anyway, lets just call it that -- color.
+ Background_paint=Achtergrondkleur:
+ 
+ Color=Kleur:
+ Color_Bar=Kleurbalk
+ Domain_Axis=Domein as
+ Draw_anti-aliased=Kartelrandjes maskeren (anti-aliasing)
+ Edit...=Wijzig...
+ Edit_Insets=Wijzig marges
+ Font=Lettertype:
+ Font_Selection=Lettertype keuze
+ General=Algemeen:
+ Grid_Color=Rasterkleur
+ Insets=Marges:
+ Invert_Palette=Palet inverteren:
+ Label=Label:
+ Label_Color=Labelkleur
+ Label_Insets=Labelmarges:
+ Legend=Legenda
+ Maximum_range_value=Hoogste waarde:
+ Minimum_range_value=Laagste waarde:
+ No_editor_implemented=Geen editor beschikbaar
+ Other=Overig
+ Outline=Rand:
+ Outline_Color=Randkleur
+ Outline_stroke=Rand stijl:
+ Outline_Paint=Randkleur:
+ Paint=Kleur:
+ Palette_Selection=Paletkleuze
+ Palette=Palet:
+ Pen_Stroke_Selection=Pen/Stijl Keuze
+ Plot=Diagram
+ Range=Bereik
+ Range_Axis=Gegevens as
+ Select...=Selecteer...
+ Series_Label_Color=Kleur serienaam
+ Series_label_font=Lettertype serienaam:
+ Series_label_paint=Kleur serienaam:
+ Series_Outline_Paint=Kleur serie-rand:
+ Series_Outline_Stroke=Stijl serie-rand:
+ Series_Paint=Kleur v.d. serie:
+ Series_Stroke=Stijl v.d. serie:
+ Show_tick_labels=Toon waarde-labels
+ Show_tick_marks=Toon waarde-streepjes
+ Set_palette...=Kies palet...
+ Step_Palette=Stap palet:
+ Stroke_Selection=Stijlkeuze
+ Text=Tekst:
+ Ticks=Waarde-streepjes
+ Tick_label_font=Lettertype waarde-labes:
+ Tick_Label_Insets=Waarde-label marges:
+ Title_Color=Kleur titel
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_pl.properties jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_pl.properties
*** jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_pl.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_pl.properties	2004-08-31 16:54:21.000000000 +0200
***************
*** 0 ****
--- 1,62 ----
+ # org.jfree.chart.ui.ui ResourceBundle properties file
+ # 
+ # Changes (from 15-Mar-2004)
+ # --------------------------
+ # 15-Mar-2004 : Initial version (Kuba Duda);
+ #
+ 
+ \:=:
+ Appearance=Wygl\u0105d
+ Auto-adjust_range=Automatycznie dostosuj zakres:
+ Background=T\u0142o:
+ Background_Color=Kolor t\u0142a
+ Background_paint=Wype\u0142nienie t\u0142a:
+ Color=Kolor:
+ Color_Bar=Pasek kolor\u00f3w
+ Domain_Axis=O\u015b domeny
+ Draw_anti-aliased=Wyg\u0142adzaj kraw\u0119dzie
+ Edit...=Edytuj...
+ Edit_Insets=Edytuj wstawki
+ Font=Czcionka:
+ Font_Selection=Wyb\u00f3r czcionki
+ General=Og\u00f3lne:
+ Grid_Color=Kolor siatki
+ Insets=Wstawki:
+ Invert_Palette=Odwr\u00f3\u0107 palet\u0119:
+ Label=Etykieta:
+ Label_Color=Kolor etykiet
+ Label_Insets=Wstawki etykiet:
+ Legend=Legenda
+ Maximum_range_value=Maksymalna warto\u015b\u0107 zakresu:
+ Minimum_range_value=Minimalna warto\u015b\u0107 zakresu:
+ No_editor_implemented=Edytor nie zaimplementowany
+ Other=Inne
+ Outline=Obrys:
+ Outline_Color=Kolor konturu
+ Outline_stroke=Obrys konturu:
+ Outline_Paint=wype\u0142nienie konturu:
+ Paint=Wype\u0142nienie:
+ Palette_Selection=Wyb\u00f3r palety
+ Palette=Paleta:
+ Pen_Stroke_Selection=Wyb\u00f3r pi\u00f3ra/obrysu
+ Plot=Wykres
+ Range=Zakres
+ Range_Axis=O\u015b zakresu
+ Select...=Wybierz...
+ Series_Label_Color=Kolor etykiety serii
+ Series_label_font=Czcionka etykiety serii:
+ Series_label_paint=Wype\u0142nienie etykiety serii:
+ Series_Outline_Paint=Wype\u0142nienie obrysu serii:
+ Series_Outline_Stroke=Kolor obrysu serii:
+ Series_Paint=Wype\u0142nienie serii:
+ Series_Stroke=Kolor serii:
+ Show_tick_labels=Pokazuj etykiety skali
+ Show_tick_marks=Pokazuj znaczniki skali
+ Set_palette...=Wybierz palet\u0119...
+ Step_Palette=Paleta krokowa:
+ Stroke_Selection=Wyb\u00f3r obrysu
+ Text=Tekst:
+ Ticks=Podzia\u0142ka
+ Tick_label_font=Czcionka etykiet podzia\u0142ki:
+ Tick_Label_Insets=Wstawki etykiet podzia\u0142ki:
+ Title_Color=Kolor tytu\u0142u
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle.properties jfreechart/bin/org/jfree/chart/ui/LocalizationBundle.properties
*** jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/LocalizationBundle.properties	2004-08-31 16:54:21.000000000 +0200
***************
*** 0 ****
--- 1,68 ----
+ # org.jfree.chart.ui.ui ResourceBundle properties file
+ # 
+ # Changes (from 31-Aug-2003)
+ # --------------------------
+ # 31-Aug-2003 : Initial version (AL);
+ #
+ 
+ \:=:
+ Appearance=Appearance
+ Auto-adjust_range=Auto-adjust range:
+ Background=Background:
+ Background_Color=Background Color
+ Background_paint=Background paint:
+ Color=Color:
+ Color_Bar=Color Bar
+ Domain_Axis=Domain Axis
+ Draw_anti-aliased=Draw anti-aliased
+ Draw_lines=Draw Lines:
+ Draw_shapes=Draw Shapes:
+ Edit...=Edit...
+ Edit_Insets=Edit Insets
+ Font=Font:
+ Font_Selection=Font Selection
+ General=General:
+ Grid_Color=Grid Color
+ Insets=Insets:
+ Invert_Palette=Invert Palette:
+ Label=Label:
+ Label_Color=Label Color
+ Label_Insets=Label Insets:
+ Legend=Legend
+ Maximum_range_value=Maximum range value:
+ Minimum_range_value=Minimum range value:
+ No_editor_implemented=No editor implemented
+ Orientation=Orientation:
+ Other=Other
+ Outline=Outline:
+ Outline_Color=Outline Color
+ Outline_stroke=Outline stroke:
+ Outline_Paint=Outline paint:
+ Paint=Paint:
+ Palette_Selection=Palette Selection
+ Palette=Palette:
+ Pen_Stroke_Selection=Pen/Stroke Selection
+ Plot=Plot
+ Range=Range
+ Range_Axis=Range Axis
+ Select...=Select...
+ Series_Label_Color=Series Label Color
+ Series_label_font=Series label font:
+ Series_label_paint=Series label paint:
+ Series_Outline_Paint=Series Outline Paint:
+ Series_Outline_Stroke=Series Outline Stroke:
+ Series_Paint=Series Paint:
+ Series_Stroke=Series Stroke:
+ Show_Legend=Show Legend:
+ Show_tick_labels=Show tick labels
+ Show_tick_marks=Show tick marks
+ Show_Title=Show Title:
+ Set_palette...=Set palette...
+ Step_Palette=Step Palette:
+ Stroke_Selection=Stroke Selection
+ Text=Text:
+ Ticks=Ticks
+ Tick_label_font=Tick label font:
+ Tick_Label_Insets=Tick Label Insets:
+ Title=Title
+ Title_Color=Title Color
\ Kein Zeilenumbruch am Dateiende.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_pt_PT.properties jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_pt_PT.properties
*** jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_pt_PT.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_pt_PT.properties	2004-08-31 16:54:21.000000000 +0200
***************
*** 0 ****
--- 1,62 ----
+ # org.jfree.chart.ChartPanel ResourceBundle properties file - portuguese version
+ # 
+ # Changes (from 09-Set-2003)
+ # --------------------------
+ # 09-Set-2003 : Initial version (Eduardo Ramalho);
+ #
+ 
+ \:=\ :
+ Appearance=Geral
+ Auto-adjust_range=Eixos auto-ajust\u00E1veis :
+ Background=Fundo :
+ Background_Color=Cor de fundo
+ Background_paint=Cor de fundo :
+ Color=Cor :
+ Color_Bar=Cor da barra
+ Domain_Axis=Eixo das abcissas
+ Draw_anti-aliased=Anti-aliasing
+ Edit...=Editar...
+ Edit_Insets=Regular a posi\u00E7\u00E3o
+ Font=Fonte :
+ Font_Selection=Selec\u00E7\u00E3o da fonte
+ General=Geral :
+ Grid_Color=Cor da grelha
+ Insets=Posi\u00E7\u00E3o :
+ Invert_Palette=Inverter a paleta :
+ Label=Etiqueta :
+ Label_Color=Cor da etiqueta
+ Label_Insets=Posi\u00E7\u00E3o da etiqueta :
+ Legend=Legenda
+ Maximum_range_value=Valor m\u00E1ximo do eixo :
+ Minimum_range_value=Valor m\u00EDnimo do eixo :
+ No_editor_implemented=Editor n\u00E3o dispon\u00EDvel
+ Other=Outro
+ Outline=Borda :
+ Outline_Paint=Cor da borda :
+ Outline_Color=Cor da borda
+ Outline_stroke=Estilo do tra\u00E7o da borda :
+ Paint=Cor :
+ Palette=Palete :
+ Palette_Selection=Selec\u00E7\u00E3o da palete
+ Pen_Stroke_Selection=Selec\u00E7\u00E3o de tra\u00E7o
+ Plot=Tra\u00E7o
+ Range=Intervalo
+ Range_Axis=Eixo das ordenadas
+ Select...=Seleccionar...
+ Series_Label_Color=Cor da etiqueta das s\u00E9ries
+ Series_label_font=Fonte da etiqueta das s\u00E9ries :
+ Series_label_paint=Cor da etiqueta das s\u00E9ries :
+ Series_Outline_Paint=Cor da borda das s\u00E9ries :
+ Series_Outline_Stroke=Estilo do tra\u00E7o da borda :
+ Series_Paint=Cor da s\u00E9ries :
+ Series_Stroke=Estilo do tra\u00E7o das s\u00E9ries :
+ Show_tick_labels=Visualizar etiquetas de gradua\u00E7\u00E3o de escala
+ Show_tick_marks=Visualizar marcas de gradua\u00E7\u00E3o de escala
+ Set_palette...=Escolha de palete...
+ Step_Palette=Changement de palette :
+ Stroke_Selection=Selec\u00E7\u00E3o do tra\u00E7o
+ Text=Texto :
+ Tick_label_font=Fonte das etiquetas de gradua\u00E7\u00E3o de escala :
+ Tick_Label_Insets=Posi\u00E7\u00E3o das etiquetas de gradua\u00E7\u00E3o de escala :
+ Ticks=Etiquetas de gradua\u00E7\u00E3o de escala
+ Title_Color=Cor do t\u00EDtulo
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_ru.properties jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_ru.properties
*** jfreechart-orig/bin/org/jfree/chart/ui/LocalizationBundle_ru.properties	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/LocalizationBundle_ru.properties	2004-08-31 16:54:21.000000000 +0200
***************
*** 0 ****
--- 1,62 ----
+ # org.jfree.chart.ui.ui ResourceBundle properties file
+ # 
+ # Changes (from 10-Nov-2003)
+ # --------------------------
+ # 10-Nov-2003 : Initial version (AL);
+ #
+ 
+ \:=:
+ Appearance=\u0412\u0438\u0434
+ Auto-adjust_range=\u0410\u0432\u0442\u0440\u043e\u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u043a\u0430:
+ Background=\u0424\u043e\u043d:
+ Background_Color=\u0426\u0432\u0435\u0442 \u0444\u043e\u043d\u0430
+ Background_paint=\u0424\u043e\u043d\u043e\u0432\u044b\u0439 \u0440\u0438\u0441\u0443\u043d\u043e\u043a:
+ Color=\u0426\u0432\u0435\u0442:
+ Color_Bar=\u0426\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0433\u0440\u0443\u0433
+ Domain_Axis=\u041e\u0441\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432
+ Draw_anti-aliased=\u0410\u043d\u0442\u0438-\u0430\u043b\u0438\u0430\u0441\u0438\u043d\u0433
+ Edit...=\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c...
+ Edit_Insets=\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0442\u0441\u0442\u0443\u043f\u043e\u0432
+ Font=\u0428\u0440\u0438\u0444\u0442:
+ Font_Selection=\u0412\u044b\u0431\u043e\u0440 \u0448\u0440\u0438\u0444\u0442\u0430
+ General=\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435:
+ Grid_Color=\u0426\u0432\u0435\u0442 \u0441\u0435\u0442\u043a\u0438
+ Insets=\u041e\u0442\u0441\u0442\u0443\u043f\u044b:
+ Invert_Palette=\u0418\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u043b\u0438\u0442\u0440\u0443:
+ Label=\u041c\u0435\u0442\u043a\u0430:
+ Label_Color=\u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438
+ Label_Insets=\u041e\u0442\u0441\u0442\u0443\u043f\u044b \u043c\u0435\u0442\u043a\u0438:
+ Legend=\u041b\u0435\u0433\u0435\u043d\u0434\u0430
+ Maximum_range_value=\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435:
+ Minimum_range_value=\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435:
+ No_editor_implemented=\u041d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440
+ Other=\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e
+ Outline=\u0420\u0430\u043c\u043a\u0430:
+ Outline_Color=\u0426\u0432\u0435\u0442 \u0440\u0430\u043c\u043a\u0438
+ Outline_stroke=\u0421\u0442\u0438\u043b\u044c \u0440\u0430\u043c\u043a\u0438:
+ Outline_Paint=\u041e\u043a\u0440\u0430\u0441\u043a\u0430 \u0440\u0430\u043c\u043a\u0438:
+ Paint=\u041e\u043a\u0440\u0430\u0441\u043a\u0430:
+ Palette_Selection=\u0412\u044b\u0431\u043e\u0440 \u043f\u0430\u043b\u0438\u0442\u0440\u044b
+ Palette=\u041f\u0430\u043b\u0438\u0442\u0440\u0430:
+ Pen_Stroke_Selection=\u0412\u044b\u0431\u043e\u0440 \u041a\u0430\u0440\u0430\u043d\u0434\u0430\u0448/\u0428\u0442\u0440\u0438\u0445
+ Plot=\u0413\u0440\u0430\u0444\u0438\u043a
+ Range=\u041e\u0431\u043b\u0430\u0441\u0442\u044c
+ Range_Axis=\u041e\u0441\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439
+ Select...=\u0412\u044b\u0431\u043e\u0440...
+ Series_Label_Color=\u0426\u0432\u0435\u0442 \u043c\u0435\u0442\u043a\u0438 \u0441\u0435\u0440\u0438\u0438
+ Series_label_font=\u0428\u0440\u0438\u0444\u0442 \u043c\u0435\u0442\u043a\u0438 \u0441\u0435\u0440\u0438\u0438:
+ Series_label_paint=\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043a\u0438 \u0441\u0435\u0440\u0438\u0438:
+ Series_Outline_Paint=\u041e\u043a\u0440\u0430\u0441\u043a\u0430 \u0440\u0430\u043c\u043a\u0438 \u0441\u0435\u0440\u0438\u0438:
+ Series_Outline_Stroke=\u0428\u0442\u0440\u0438\u0445\u043e\u0432\u0430\u044f \u0440\u0430\u043c\u043a\u0430 \u0441\u0435\u0440\u0438\u0438:
+ Series_Paint=\u041e\u043a\u0440\u0430\u0441\u043a\u0430 \u0441\u0435\u0440\u0438\u0438:
+ Series_Stroke=\u0428\u0442\u0440\u0438\u0445\u0438 \u0441\u0435\u0440\u0438\u0438:
+ Show_tick_labels=\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0441\u0435\u0432\u044b\u0435 \u043e\u0442\u043c\u0435\u0442\u043a\u0438
+ Show_tick_marks=\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0441\u0435\u0432\u044b\u0435 \u0448\u0442\u0440\u0438\u0445\u0438
+ Set_palette...=\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0430\u043b\u0438\u0442\u0440\u0443...
+ Step_Palette=\u0428\u0430\u0433 \u043f\u0430\u043b\u0438\u0442\u0440\u044b:
+ Stroke_Selection=\u0412\u044b\u0431\u043e\u0440 \u0448\u0442\u0440\u0438\u0445\u0430
+ Text=\u0422\u0435\u043a\u0441\u0442:
+ Ticks=\u041e\u0442\u043c\u0435\u0442\u043a\u0438
+ Tick_label_font=\u0428\u0440\u0438\u0444\u0442 \u043e\u0442\u043c\u0435\u0442\u043a\u0438:
+ Tick_Label_Insets=\u041e\u0442\u0441\u0442\u0443\u043f\u044b \u043e\u0442\u043c\u0435\u0442\u043e\u043a:
+ Title_Color=\u0426\u0432\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/NumberAxisPropertyEditPanel.class and jfreechart/bin/org/jfree/chart/ui/NumberAxisPropertyEditPanel.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/ui/package.html jfreechart/bin/org/jfree/chart/ui/package.html
*** jfreechart-orig/bin/org/jfree/chart/ui/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/ui/package.html	2004-08-31 16:54:21.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ An optional package containing user interface components for editing chart properties (used in the JFreeChart demo application);
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/PaletteChooserPanel.class and jfreechart/bin/org/jfree/chart/ui/PaletteChooserPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/PaletteSample.class and jfreechart/bin/org/jfree/chart/ui/PaletteSample.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/PlotPropertyEditPanel.class and jfreechart/bin/org/jfree/chart/ui/PlotPropertyEditPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/RainbowPalette.class and jfreechart/bin/org/jfree/chart/ui/RainbowPalette.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/ui/TitlePropertyEditPanel.class and jfreechart/bin/org/jfree/chart/ui/TitlePropertyEditPanel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/CategoryURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/CategoryURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/CustomPieURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/CustomPieURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/CustomXYURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/CustomXYURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/junit/CustomXYURLGeneratorTests.class and jfreechart/bin/org/jfree/chart/urls/junit/CustomXYURLGeneratorTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/urls/junit/package.html jfreechart/bin/org/jfree/chart/urls/junit/package.html
*** jfreechart-orig/bin/org/jfree/chart/urls/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/urls/junit/package.html	2004-08-31 16:56:35.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ JUnit tests.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/junit/StandardCategoryURLGeneratorTests.class and jfreechart/bin/org/jfree/chart/urls/junit/StandardCategoryURLGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/junit/StandardPieURLGeneratorTests.class and jfreechart/bin/org/jfree/chart/urls/junit/StandardPieURLGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/junit/StandardXYURLGeneratorTests.class and jfreechart/bin/org/jfree/chart/urls/junit/StandardXYURLGeneratorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/junit/UrlsPackageTests.class and jfreechart/bin/org/jfree/chart/urls/junit/UrlsPackageTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/urls/package.html jfreechart/bin/org/jfree/chart/urls/package.html
*** jfreechart-orig/bin/org/jfree/chart/urls/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/urls/package.html	2004-08-31 16:56:13.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Classes for adding URLS to charts for HTML image map generation.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/PieURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/PieURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/StandardCategoryURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/StandardCategoryURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/StandardPieURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/StandardPieURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/StandardXYURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/StandardXYURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/StandardXYZURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/StandardXYZURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/TimeSeriesURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/TimeSeriesURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/XYURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/XYURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/urls/XYZURLGenerator.class and jfreechart/bin/org/jfree/chart/urls/XYZURLGenerator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/AxisLocationAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/AxisLocationAttributeHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/EnumerationAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/EnumerationAttributeHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/HorizontalTitleAlignmentAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/HorizontalTitleAlignmentAttributeHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/ItemLabelAnchorAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/ItemLabelAnchorAttributeHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/LegendAnchorAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/LegendAnchorAttributeHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/PlotOrientationAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/PlotOrientationAttributeHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/TextAnchorAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/TextAnchorAttributeHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/TitlePositionAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/TitlePositionAttributeHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/attributehandlers/VerticalTitleAlignmentAttributeHandler.class and jfreechart/bin/org/jfree/chart/xml/attributehandlers/VerticalTitleAlignmentAttributeHandler.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-common-base.xml jfreechart/bin/org/jfree/chart/xml/model-common-base.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-common-base.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-common-base.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,53 ----
+ <!-- Contains all manual changes ... until I can trust the automatic process -->
+ <objects>
+     <manual class="org.jfree.chart.Spacer" read-handler="org.jfree.chart.xml.parser.handlers.SpacerReadHandler" write-handler="org.jfree.chart.xml.writer.handlers.SpacerWriteHandler"/>
+     <manual class="org.jfree.chart.axis.TickUnits" read-handler="org.jfree.chart.xml.parser.handlers.TickUnitsReadHandler" write-handler="org.jfree.chart.xml.writer.handlers.TickUnitsWriteHandler"/>
+     <object class="org.jfree.chart.axis.DateTickUnit">
+         <constructor>
+             <parameter class="::int" property="unit"/>
+             <parameter class="::int" property="count"/>
+             <parameter class="::int" property="rollUnit"/>
+             <parameter class="::int" property="rollCount"/>
+         </constructor>
+ 
+         <attribute-property name="unit" attribute="unit" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="count" attribute="count" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="rollUnit" attribute="rollUnit" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="rollCount" attribute="rollCount" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+ 
+     <object class="org.jfree.chart.axis.NumberTickUnit">
+         <constructor>
+             <parameter class="::double" property="size"/>
+         </constructor>
+         <attribute-property name="size" attribute="size" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+ 
+     <object class="org.jfree.data.Range">
+         <constructor>
+             <parameter class="::double" property="lowerBound"/>
+             <parameter class="::double" property="upperBound"/>
+         </constructor>
+         <attribute-property name="lowerBound" attribute="lowerBound" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="upperBound" attribute="upperBound" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+ 
+     <manual class="org.jfree.chart.axis.SymbolicTickUnit"
+             read-handler="org.jfree.chart.xml.parser.handlers.SymbolicTickUnitReadHandler"
+             write-handler="org.jfree.chart.xml.writer.handlers.SymbolicTickUnitWriteHandler"/>
+ 
+     <object class="org.jfree.chart.renderer.ItemLabelPosition">
+         <constructor>
+             <parameter class="org.jfree.chart.renderer.ItemLabelAnchor" property="itemLabelAnchor"/>
+             <parameter class="org.jfree.ui.TextAnchor" property="textAnchor"/>
+             <parameter class="org.jfree.ui.TextAnchor" property="rotationAnchor"/>
+             <parameter class="::double" property="angle"/>
+         </constructor>
+         <attribute-property name="angle" attribute="angle" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="rotationAnchor" attribute="rotationAnchor" handler="org.jfree.chart.xml.attributehandlers.TextAnchorAttributeHandler" />
+         <attribute-property name="textAnchor" attribute="textAnchor" handler="org.jfree.chart.xml.attributehandlers.TextAnchorAttributeHandler" />
+         <attribute-property name="itemLabelAnchor" attribute="itemLabelAnchor" handler="org.jfree.chart.xml.attributehandlers.ItemLabelAnchorAttributeHandler" />
+     </object>
+ 
+     <object class="org.jfree.chart.labels.StandardXYToolTipGenerator"/>
+ </objects>
\ Kein Zeilenumbruch am Dateiende.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.annotations.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.annotations.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.annotations.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.annotations.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,37 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.chart.annotations.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.chart.annotations.XYTextAnnotation">
+         <attribute-property name="x" attribute="x" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="y" attribute="y" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.annotations.CategoryTextAnnotation">
+         <!-- property type is interface java.lang.Comparable -->
+         <element-property name="category" element="category"/>
+         <!-- property type is class org.jfree.chart.axis.CategoryAnchor -->
+         <element-property name="categoryAnchor" element="categoryAnchor"/>
+         <attribute-property name="value" attribute="value" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.annotations.XYPointerAnnotation">
+         <attribute-property name="angle" attribute="angle" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="arrowLength" attribute="arrowLength" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="arrowPaint" element="arrowPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="arrowStroke" element="arrowStroke"/>
+         <attribute-property name="arrowWidth" attribute="arrowWidth" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="baseRadius" attribute="baseRadius" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="labelOffset" attribute="labelOffset" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="tipRadius" attribute="tipRadius" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.annotations.TextAnnotation">
+         <!-- property type is class java.awt.Font -->
+         <element-property name="font" element="font"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="paint" element="paint"/>
+         <attribute-property name="rotationAnchor" attribute="rotationAnchor" handler="org.jfree.chart.xml.attributehandlers.TextAnchorAttributeHandler"/>
+         <attribute-property name="rotationAngle" attribute="rotationAngle" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="text" attribute="text" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="textAnchor" attribute="textAnchor" handler="org.jfree.chart.xml.attributehandlers.TextAnchorAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.axis.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.axis.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.axis.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.axis.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,137 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.chart.axis.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.chart.axis.CategoryAxis">
+         <attribute-property name="axisLineVisible" attribute="axisLineVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.axis.CategoryLabelPosition -->
+         <element-property name="bottomCategoryLabelPosition" element="bottomCategoryLabelPosition"/>
+         <attribute-property name="categoryMargin" attribute="categoryMargin" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.axis.CategoryLabelPosition -->
+         <element-property name="leftCategoryLabelPosition" element="leftCategoryLabelPosition"/>
+         <attribute-property name="lowerMargin" attribute="lowerMargin" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.axis.CategoryLabelPosition -->
+         <element-property name="rightCategoryLabelPosition" element="rightCategoryLabelPosition"/>
+         <attribute-property name="skipCategoryLabelsToFit" attribute="skipCategoryLabelsToFit" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.axis.CategoryLabelPosition -->
+         <element-property name="topCategoryLabelPosition" element="topCategoryLabelPosition"/>
+         <attribute-property name="upperMargin" attribute="upperMargin" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="verticalCategoryLabels" attribute="verticalCategoryLabels" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.axis.NumberAxis">
+         <!-- property type is class org.jfree.chart.axis.MarkerAxisBand -->
+         <element-property name="markerBand" element="markerBand"/>
+         <!-- property type is class java.text.NumberFormat -->
+         <element-property name="numberFormatOverride" element="numberFormatOverride"/>
+         <!-- property type is class org.jfree.chart.axis.NumberTickUnit -->
+         <element-property name="tickUnit" element="tickUnit"/>
+     </object>
+     <object class="org.jfree.chart.axis.ColorBar">
+         <!-- property type is class org.jfree.chart.axis.ValueAxis -->
+         <element-property name="axis" element="axis"/>
+         <!-- property type is class org.jfree.chart.ui.ColorPalette -->
+         <element-property name="colorPalette" element="colorPalette"/>
+     </object>
+     <object class="org.jfree.chart.axis.AxisState">
+         <attribute-property name="cursor" attribute="cursor" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="max" attribute="max" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface java.util.List -->
+         <element-property name="ticks" element="ticks"/>
+     </object>
+     <object class="org.jfree.chart.axis.CyclicNumberAxis">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="advanceLinePaint" element="advanceLinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="advanceLineStroke" element="advanceLineStroke"/>
+         <attribute-property name="advanceLineVisible" attribute="advanceLineVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="boundMappedToLastCycle" attribute="boundMappedToLastCycle" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="offset" attribute="offset" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="period" attribute="period" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.axis.AxisSpace">
+         <attribute-property name="bottom" attribute="bottom" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="left" attribute="left" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="right" attribute="right" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="top" attribute="top" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.axis.SegmentedTimeline">
+         <!-- property type is class org.jfree.chart.axis.SegmentedTimeline -->
+         <element-property name="baseTimeline" element="baseTimeline"/>
+         <!-- property type is interface java.util.List -->
+         <element-property name="exceptionSegments" element="exceptionSegments"/>
+         <attribute-property name="startTime" attribute="startTime" handler="org.jfree.xml.attributehandlers.LongAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.axis.DateAxis">
+         <!-- property type is class java.text.DateFormat -->
+         <element-property name="dateFormatOverride" element="dateFormatOverride"/>
+         <!-- property type is class java.util.Date -->
+         <element-property name="maximumDate" element="maximumDate"/>
+         <!-- property type is class java.util.Date -->
+         <element-property name="minimumDate" element="minimumDate"/>
+         <!-- property type is class org.jfree.chart.axis.DateTickMarkPosition -->
+         <element-property name="tickMarkPosition" element="tickMarkPosition"/>
+         <!-- property type is class org.jfree.chart.axis.DateTickUnit -->
+         <element-property name="tickUnit" element="tickUnit"/>
+         <!-- property type is interface org.jfree.chart.axis.Timeline -->
+         <element-property name="timeline" element="timeline"/>
+     </object>
+     <object class="org.jfree.chart.axis.LogarithmicAxis">
+         <attribute-property name="allowNegativesFlag" attribute="allowNegativesFlag" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="expTickLabelsFlag" attribute="expTickLabelsFlag" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="log10TickLabelsFlag" attribute="log10TickLabelsFlag" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="strictValuesFlag" attribute="strictValuesFlag" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.axis.Axis">
+         <attribute-property name="fixedDimension" attribute="fixedDimension" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="label" attribute="label" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="labelAngle" attribute="labelAngle" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="labelFont" element="labelFont"/>
+         <!-- property type is class java.awt.Insets -->
+         <element-property name="labelInsets" element="labelInsets"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="labelPaint" element="labelPaint"/>
+         <!-- property type is class org.jfree.chart.plot.Plot -->
+         <!-- <element-property name="plot" element="plot"/> -->
+         <ignore name="plot"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="tickLabelFont" element="tickLabelFont"/>
+         <!-- property type is class java.awt.Insets -->
+         <element-property name="tickLabelInsets" element="tickLabelInsets"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="tickLabelPaint" element="tickLabelPaint"/>
+         <attribute-property name="tickLabelsVisible" attribute="tickLabelsVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="tickMarkInsideLength" attribute="tickMarkInsideLength" handler="org.jfree.xml.attributehandlers.FloatAttributeHandler"/>
+         <attribute-property name="tickMarkOutsideLength" attribute="tickMarkOutsideLength" handler="org.jfree.xml.attributehandlers.FloatAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="tickMarkPaint" element="tickMarkPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="tickMarkStroke" element="tickMarkStroke"/>
+         <attribute-property name="tickMarksVisible" attribute="tickMarksVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="visible" attribute="visible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.axis.ValueAxis">
+         <attribute-property name="autoRange" attribute="autoRange" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="autoRangeMinimumSize" attribute="autoRangeMinimumSize" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="autoTickUnitSelection" attribute="autoTickUnitSelection" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="axisLinePaint" element="axisLinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="axisLineStroke" element="axisLineStroke"/>
+         <attribute-property name="axisLineVisible" attribute="axisLineVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="fixedAutoRange" attribute="fixedAutoRange" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="inverted" attribute="inverted" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="lowerBound" attribute="lowerBound" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="lowerMargin" attribute="lowerMargin" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="maximumAxisValue" attribute="maximumAxisValue" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="minimumAxisValue" attribute="minimumAxisValue" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="negativeArrowVisible" attribute="negativeArrowVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="positiveArrowVisible" attribute="positiveArrowVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class org.jfree.data.Range -->
+         <element-property name="range" element="range"/>
+         <!-- property type is interface org.jfree.chart.axis.TickUnitSource -->
+         <element-property name="standardTickUnits" element="standardTickUnits"/>
+         <attribute-property name="upperBound" attribute="upperBound" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="upperMargin" attribute="upperMargin" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="verticalTickLabels" attribute="verticalTickLabels" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.entity.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.entity.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.entity.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.entity.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,39 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.chart.entity.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.chart.entity.CategoryItemEntity">
+         <!-- property type is class java.lang.Object -->
+         <element-property name="category" element="category"/>
+         <attribute-property name="categoryIndex" attribute="categoryIndex" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <!-- property type is interface org.jfree.data.CategoryDataset -->
+         <element-property name="dataset" element="dataset"/>
+         <attribute-property name="series" attribute="series" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.entity.LegendItemEntity">
+         <attribute-property name="seriesIndex" attribute="seriesIndex" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.entity.ChartEntity">
+         <attribute-property name="URLText" attribute="URLText" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is interface java.awt.Shape -->
+         <!-- <element-property name="area" element="area"/> -->
+         <ignore name="area"/>
+         <attribute-property name="toolTipText" attribute="toolTipText" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.entity.PieSectionEntity">
+         <!-- property type is interface org.jfree.data.PieDataset -->
+         <element-property name="dataset" element="dataset"/>
+         <attribute-property name="pieIndex" attribute="pieIndex" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="sectionIndex" attribute="sectionIndex" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <!-- property type is interface java.lang.Comparable -->
+         <element-property name="sectionKey" element="sectionKey"/>
+     </object>
+     <object class="org.jfree.chart.entity.XYItemEntity">
+         <!-- property type is interface org.jfree.data.XYDataset -->
+         <element-property name="dataset" element="dataset"/>
+         <attribute-property name="item" attribute="item" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="series" attribute="series" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.entity.ContourEntity">
+         <attribute-property name="index" attribute="index" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.needle.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.needle.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.needle.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.needle.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,17 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.chart.needle.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.chart.needle.MeterNeedle">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="fillPaint" element="fillPaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="highlightPaint" element="highlightPaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="outlinePaint" element="outlinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="outlineStroke" element="outlineStroke"/>
+         <attribute-property name="rotateX" attribute="rotateX" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="rotateY" attribute="rotateY" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="size" attribute="size" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.plot.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.plot.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.plot.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.plot.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,297 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.chart.plot.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.chart.plot.CombinedRangeXYPlot">
+         <attribute-property name="gap" attribute="gap" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.plot.FastScatterPlot">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="paint" element="paint"/>
+     </object>
+     <object class="org.jfree.chart.plot.ContourPlot">
+         <!-- property type is interface org.jfree.chart.urls.XYURLGenerator -->
+         <element-property name="URLGenerator" element="URLGenerator"/>
+         <!-- property type is class org.jfree.chart.ClipPath -->
+         <element-property name="clipPath" element="clipPath"/>
+         <!-- property type is class org.jfree.ui.RectangleEdge -->
+         <element-property name="colorBarLocation" element="colorBarLocation"/>
+         <!-- property type is interface org.jfree.data.ContourDataset -->
+         <!-- <element-property name="dataset" element="dataset"/> -->
+         <ignore name="dataset"/>
+         <!-- property type is class org.jfree.chart.axis.ValueAxis -->
+         <element-property name="domainAxis" element="domainAxis"/>
+         <attribute-property name="domainCrosshairLockedOnData" attribute="domainCrosshairLockedOnData" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="domainCrosshairPaint" element="domainCrosshairPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="domainCrosshairStroke" element="domainCrosshairStroke"/>
+         <attribute-property name="domainCrosshairValue" attribute="domainCrosshairValue" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="domainCrosshairVisible" attribute="domainCrosshairVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="missingPaint" element="missingPaint"/>
+         <attribute-property name="ptSizePct" attribute="ptSizePct" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.axis.ValueAxis -->
+         <element-property name="rangeAxis" element="rangeAxis"/>
+         <attribute-property name="rangeCrosshairLockedOnData" attribute="rangeCrosshairLockedOnData" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="rangeCrosshairPaint" element="rangeCrosshairPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="rangeCrosshairStroke" element="rangeCrosshairStroke"/>
+         <attribute-property name="rangeCrosshairValue" attribute="rangeCrosshairValue" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="rangeCrosshairVisible" attribute="rangeCrosshairVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="renderAsPoints" attribute="renderAsPoints" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface org.jfree.chart.labels.ContourToolTipGenerator -->
+         <element-property name="toolTipGenerator" element="toolTipGenerator"/>
+     </object>
+     <object class="org.jfree.chart.plot.ThermometerPlot">
+         <!-- property type is interface org.jfree.data.ValueDataset -->
+         <!-- <element-property name="data" element="data"/> -->
+         <!-- Data is deprecated ... -->
+         <ignore name="data"/>
+         <!-- property type is interface org.jfree.data.ValueDataset -->
+         <!-- <element-property name="dataset" element="dataset"/> -->
+         <ignore name="dataset"/>
+ 
+         <attribute-property name="followDataInSubranges" attribute="followDataInSubranges" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="lowerBound" attribute="lowerBound" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="mercuryPaint" element="mercuryPaint"/>
+         <!-- property type is class org.jfree.chart.Spacer -->
+         <element-property name="padding" element="padding"/>
+         <!-- property type is class org.jfree.chart.axis.ValueAxis -->
+         <element-property name="rangeAxis" element="rangeAxis"/>
+         <attribute-property name="showValueLines" attribute="showValueLines" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="thermometerPaint" element="thermometerPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="thermometerStroke" element="thermometerStroke"/>
+         <attribute-property name="units" attribute="units" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="upperBound" attribute="upperBound" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="useSubrangePaint" attribute="useSubrangePaint" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="valueFont" element="valueFont"/>
+         <attribute-property name="valueLocation" attribute="valueLocation" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="valuePaint" element="valuePaint"/>
+     </object>
+     <object class="org.jfree.chart.plot.PlotRenderingInfo">
+         <!-- property type is class java.awt.geom.Rectangle2D -->
+         <element-property name="dataArea" element="dataArea"/>
+         <!-- property type is class java.awt.geom.Rectangle2D -->
+         <element-property name="plotArea" element="plotArea"/>
+     </object>
+     <object class="org.jfree.chart.plot.Pie3DPlot">
+         <attribute-property name="depthFactor" attribute="depthFactor" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.plot.PiePlot">
+         <!-- property type is interface org.jfree.chart.urls.PieURLGenerator -->
+         <element-property name="URLGenerator" element="URLGenerator"/>
+         <attribute-property name="circular" attribute="circular" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface org.jfree.data.PieDataset -->
+         <!-- <element-property name="dataset" element="dataset"/> -->
+         <ignore name="dataset"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="defaultOutlinePaint" element="defaultOutlinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="defaultOutlineStroke" element="defaultOutlineStroke"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="defaultPaint" element="defaultPaint"/>
+         <!-- property type is class org.jfree.util.Rotation -->
+         <element-property name="direction" element="direction"/>
+         <attribute-property name="extractType" attribute="extractType" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="interiorGap" attribute="interiorGap" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface org.jfree.chart.labels.PieItemLabelGenerator -->
+         <element-property name="itemLabelGenerator" element="itemLabelGenerator"/>
+         <attribute-property name="minimumArcAngleToDraw" attribute="minimumArcAngleToDraw" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface org.jfree.data.CategoryDataset -->
+         <element-property name="multiDataset" element="multiDataset"/>
+         <attribute-property name="radius" attribute="radius" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="sectionLabelFont" element="sectionLabelFont"/>
+         <attribute-property name="sectionLabelGap" attribute="sectionLabelGap" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="sectionLabelPaint" element="sectionLabelPaint"/>
+         <attribute-property name="sectionLabelType" attribute="sectionLabelType" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="sectionOutlinePaintListAutoFill" attribute="sectionOutlinePaintListAutoFill" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="sectionOutlineStrokeListAutoFill" attribute="sectionOutlineStrokeListAutoFill" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="sectionPaintListAutoFill" attribute="sectionPaintListAutoFill" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="seriesLabelFont" element="seriesLabelFont"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="seriesLabelPaint" element="seriesLabelPaint"/>
+         <attribute-property name="showSeriesLabels" attribute="showSeriesLabels" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="startAngle" attribute="startAngle" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface org.jfree.chart.labels.PieItemLabelGenerator -->
+         <element-property name="toolTipGenerator" element="toolTipGenerator"/>
+     </object>
+     <object class="org.jfree.chart.plot.CategoryPlot">
+         <attribute-property name="anchorValue" attribute="anchorValue" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.Spacer -->
+         <element-property name="axisOffset" element="axisOffset"/>
+         <!-- property type is class org.jfree.util.SortOrder -->
+         <element-property name="columnRenderingOrder" element="columnRenderingOrder"/>
+         <!-- property type is interface org.jfree.data.CategoryDataset -->
+         <!-- <element-property name="dataset" element="dataset"/> -->
+         <ignore name="dataset"/>
+         <!-- property type is class org.jfree.chart.plot.DatasetRenderingOrder -->
+         <element-property name="datasetRenderingOrder" element="datasetRenderingOrder"/>
+         <!-- property type is class org.jfree.chart.axis.CategoryAxis -->
+         <element-property name="domainAxis" element="domainAxis"/>
+         <attribute-property name="domainAxisLocation" attribute="domainAxisLocation" handler="org.jfree.chart.xml.attributehandlers.AxisLocationAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="domainGridlinePaint" element="domainGridlinePaint"/>
+         <!-- property type is class org.jfree.chart.axis.CategoryAnchor -->
+         <element-property name="domainGridlinePosition" element="domainGridlinePosition"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="domainGridlineStroke" element="domainGridlineStroke"/>
+         <attribute-property name="domainGridlinesVisible" attribute="domainGridlinesVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.axis.AxisSpace -->
+         <element-property name="fixedDomainAxisSpace" element="fixedDomainAxisSpace"/>
+         <!-- property type is class org.jfree.chart.axis.AxisSpace -->
+         <element-property name="fixedRangeAxisSpace" element="fixedRangeAxisSpace"/>
+         <attribute-property name="orientation" attribute="orientation" handler="org.jfree.chart.xml.attributehandlers.PlotOrientationAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.axis.ValueAxis -->
+         <element-property name="rangeAxis" element="rangeAxis"/>
+         <attribute-property name="rangeAxisLocation" attribute="rangeAxisLocation" handler="org.jfree.chart.xml.attributehandlers.AxisLocationAttributeHandler"/>
+         <attribute-property name="rangeCrosshairLockedOnData" attribute="rangeCrosshairLockedOnData" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="rangeCrosshairPaint" element="rangeCrosshairPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="rangeCrosshairStroke" element="rangeCrosshairStroke"/>
+         <attribute-property name="rangeCrosshairValue" attribute="rangeCrosshairValue" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="rangeCrosshairVisible" attribute="rangeCrosshairVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="rangeGridlinePaint" element="rangeGridlinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="rangeGridlineStroke" element="rangeGridlineStroke"/>
+         <attribute-property name="rangeGridlinesVisible" attribute="rangeGridlinesVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface org.jfree.chart.renderer.CategoryItemRenderer -->
+         <element-property name="renderer" element="renderer"/>
+         <!-- property type is class org.jfree.util.SortOrder -->
+         <element-property name="rowRenderingOrder" element="rowRenderingOrder"/>
+         <attribute-property name="weight" attribute="weight" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.plot.MeterPlot">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="criticalPaint" element="criticalPaint"/>
+         <!-- property type is class org.jfree.data.Range -->
+         <element-property name="criticalRange" element="criticalRange"/>
+         <!-- property type is interface org.jfree.data.ValueDataset -->
+         <!-- <element-property name="dataset" element="dataset"/> -->
+         <ignore name="dataset"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="dialBackgroundPaint" element="dialBackgroundPaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="dialOutlinePaint" element="dialOutlinePaint"/>
+         <!-- property type is class org.jfree.chart.plot.DialShape -->
+         <element-property name="dialShape" element="dialShape"/>
+         <attribute-property name="dialType" attribute="dialType" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="drawBorder" attribute="drawBorder" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="meterAngle" attribute="meterAngle" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="needlePaint" element="needlePaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="normalPaint" element="normalPaint"/>
+         <!-- property type is class org.jfree.data.Range -->
+         <element-property name="normalRange" element="normalRange"/>
+         <!-- property type is class org.jfree.data.Range -->
+         <element-property name="range" element="range"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="tickLabelFont" element="tickLabelFont"/>
+         <attribute-property name="tickLabelType" attribute="tickLabelType" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="units" attribute="units" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="valueFont" element="valueFont"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="valuePaint" element="valuePaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="warningPaint" element="warningPaint"/>
+         <!-- property type is class org.jfree.data.Range -->
+         <element-property name="warningRange" element="warningRange"/>
+     </object>
+     <object class="org.jfree.chart.plot.XYPlot">
+         <!-- property type is class org.jfree.chart.Spacer -->
+         <element-property name="axisOffset" element="axisOffset"/>
+         <!-- property type is interface org.jfree.data.XYDataset -->
+         <!-- <element-property name="dataset" element="dataset"/> -->
+         <lookup-element name="dataset" key="::dataset"/>
+         <!-- property type is class org.jfree.chart.axis.ValueAxis -->
+         <element-property name="domainAxis" element="domainAxis"/>
+         <attribute-property name="domainAxisLocation" attribute="domainAxisLocation" handler="org.jfree.chart.xml.attributehandlers.AxisLocationAttributeHandler"/>
+         <attribute-property name="domainCrosshairLockedOnData" attribute="domainCrosshairLockedOnData" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="domainCrosshairPaint" element="domainCrosshairPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="domainCrosshairStroke" element="domainCrosshairStroke"/>
+         <attribute-property name="domainCrosshairValue" attribute="domainCrosshairValue" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="domainCrosshairVisible" attribute="domainCrosshairVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="domainGridlinePaint" element="domainGridlinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="domainGridlineStroke" element="domainGridlineStroke"/>
+         <attribute-property name="domainGridlinesVisible" attribute="domainGridlinesVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="domainTickBandPaint" element="domainTickBandPaint"/>
+         <!-- property type is class org.jfree.chart.axis.AxisSpace -->
+         <element-property name="fixedDomainAxisSpace" element="fixedDomainAxisSpace"/>
+         <!-- property type is class org.jfree.chart.axis.AxisSpace -->
+         <element-property name="fixedRangeAxisSpace" element="fixedRangeAxisSpace"/>
+         <attribute-property name="orientation" attribute="orientation" handler="org.jfree.chart.xml.attributehandlers.PlotOrientationAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.axis.ValueAxis -->
+         <element-property name="rangeAxis" element="rangeAxis"/>
+         <attribute-property name="rangeAxisLocation" attribute="rangeAxisLocation" handler="org.jfree.chart.xml.attributehandlers.AxisLocationAttributeHandler"/>
+         <attribute-property name="rangeCrosshairLockedOnData" attribute="rangeCrosshairLockedOnData" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="rangeCrosshairPaint" element="rangeCrosshairPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="rangeCrosshairStroke" element="rangeCrosshairStroke"/>
+         <attribute-property name="rangeCrosshairValue" attribute="rangeCrosshairValue" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="rangeCrosshairVisible" attribute="rangeCrosshairVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="rangeGridlinePaint" element="rangeGridlinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="rangeGridlineStroke" element="rangeGridlineStroke"/>
+         <attribute-property name="rangeGridlinesVisible" attribute="rangeGridlinesVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="rangeTickBandPaint" element="rangeTickBandPaint"/>
+         <!-- property type is interface org.jfree.chart.renderer.XYItemRenderer -->
+         <element-property name="renderer" element="renderer"/>
+         <attribute-property name="weight" attribute="weight" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.plot.CompassPlot">
+         <attribute-property name="drawBorder" attribute="drawBorder" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="labelFont" element="labelFont"/>
+         <attribute-property name="labelType" attribute="labelType" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.plot.CombinedDomainXYPlot">
+         <attribute-property name="gap" attribute="gap" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.plot.Plot">
+         <attribute-property name="backgroundAlpha" attribute="backgroundAlpha" handler="org.jfree.xml.attributehandlers.FloatAttributeHandler"/>
+         <!-- property type is class java.awt.Image -->
+         <element-property name="backgroundImage" element="backgroundImage"/>
+         <attribute-property name="backgroundImageAlignment" attribute="backgroundImageAlignment" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="backgroundPaint" element="backgroundPaint"/>
+         <attribute-property name="dataAreaRatio" attribute="dataAreaRatio" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface org.jfree.chart.plot.DrawingSupplier -->
+         <!-- <element-property name="drawingSupplier" element="drawingSupplier"/> -->
+         <ignore name="drawingSupplier"/>
+ 
+         <attribute-property name="foregroundAlpha" attribute="foregroundAlpha" handler="org.jfree.xml.attributehandlers.FloatAttributeHandler"/>
+         <!-- property type is class java.awt.Insets -->
+         <element-property name="insets" element="insets"/>
+         <attribute-property name="noDataMessage" attribute="noDataMessage" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="noDataMessageFont" element="noDataMessageFont"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="noDataMessagePaint" element="noDataMessagePaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="outlinePaint" element="outlinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="outlineStroke" element="outlineStroke"/>
+         <!-- property type is class org.jfree.chart.plot.Plot -->
+         <element-property name="parent" element="parent"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.renderer.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.renderer.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.renderer.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.renderer.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,160 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.chart.renderer.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.chart.renderer.Outlier">
+         <!-- property type is class java.awt.geom.Point2D -->
+         <element-property name="point" element="point"/>
+         <attribute-property name="radius" attribute="radius" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.BarRenderer">
+         <attribute-property name="drawBarOutline" attribute="drawBarOutline" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface org.jfree.ui.GradientPaintTransformer -->
+         <element-property name="gradientPaintTransformer" element="gradientPaintTransformer"/>
+         <attribute-property name="itemMargin" attribute="itemMargin" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="maxBarWidth" attribute="maxBarWidth" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.renderer.ItemLabelPosition -->
+         <element-property name="negativeItemLabelPositionFallback" element="negativeItemLabelPositionFallback"/>
+         <!-- property type is class org.jfree.chart.renderer.ItemLabelPosition -->
+         <element-property name="positiveItemLabelPositionFallback" element="positiveItemLabelPositionFallback"/>
+     </object>
+     <object class="org.jfree.chart.renderer.MinMaxCategoryRenderer">
+         <attribute-property name="drawLines" attribute="drawLines" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="groupPaint" element="groupPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="groupStroke" element="groupStroke"/>
+         <!-- property type is interface javax.swing.Icon -->
+         <element-property name="minIcon" element="minIcon"/>
+         <!-- property type is interface javax.swing.Icon -->
+         <element-property name="objectIcon" element="objectIcon"/>
+     </object>
+     <object class="org.jfree.chart.renderer.CategoryItemRendererState">
+         <attribute-property name="barWidth" attribute="barWidth" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.StandardXYItemRenderer">
+         <attribute-property name="defaultShapesFilled" attribute="defaultShapesFilled" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="gapThreshold" attribute="gapThreshold" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="plotImages" attribute="plotImages" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="plotLines" attribute="plotLines" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="plotShapes" attribute="plotShapes" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.CandlestickRenderer">
+         <attribute-property name="autoWidthFactor" attribute="autoWidthFactor" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="autoWidthGap" attribute="autoWidthGap" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="autoWidthMethod" attribute="autoWidthMethod" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="candleWidth" attribute="candleWidth" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="downPaint" element="downPaint"/>
+         <attribute-property name="maxCandleWidthInMilliseconds" attribute="maxCandleWidthInMilliseconds" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="upPaint" element="upPaint"/>
+     </object>
+     <object class="org.jfree.chart.renderer.OutlierList">
+         <!-- property type is class org.jfree.chart.renderer.Outlier -->
+         <element-property name="averagedOutlier" element="averagedOutlier"/>
+         <attribute-property name="multiple" attribute="multiple" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.BarRenderer3D">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="wallPaint" element="wallPaint"/>
+     </object>
+     <object class="org.jfree.chart.renderer.AreaXYRenderer">
+         <attribute-property name="outline" attribute="outline" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.StackedAreaXYRenderer">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="shapePaint" element="shapePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="shapeStroke" element="shapeStroke"/>
+     </object>
+     <object class="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="artifactPaint" element="artifactPaint"/>
+         <attribute-property name="boxWidth" attribute="boxWidth" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="paint" element="paint"/>
+     </object>
+     <object class="org.jfree.chart.renderer.WaterfallBarRenderer">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="firstBarPaint" element="firstBarPaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="lastBarPaint" element="lastBarPaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="negativeBarPaint" element="negativeBarPaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="positiveBarPaint" element="positiveBarPaint"/>
+     </object>
+     <object class="org.jfree.chart.renderer.XYStepAreaRenderer">
+         <attribute-property name="outline" attribute="outline" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="rangeBase" attribute="rangeBase" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.LineAndShapeRenderer">
+         <attribute-property name="defaultShapesFilled" attribute="defaultShapesFilled" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="drawLines" attribute="drawLines" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="drawShapes" attribute="drawShapes" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="shapesFilled" attribute="shapesFilled" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.HighLow">
+         <attribute-property name="tickSize" attribute="tickSize" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.SignalRenderer">
+         <attribute-property name="markOffset" attribute="markOffset" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="shapeHeight" attribute="shapeHeight" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="shapeWidth" attribute="shapeWidth" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.BoxAndWhiskerRenderer">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="artifactPaint" element="artifactPaint"/>
+         <attribute-property name="boxWidth" attribute="boxWidth" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="itemMargin" attribute="itemMargin" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.renderer.AbstractXYItemRenderer">
+         <!-- property type is interface org.jfree.chart.urls.XYURLGenerator -->
+         <element-property name="URLGenerator" element="URLGenerator"/>
+         <!-- property type is class org.jfree.chart.plot.XYPlot -->
+         <!-- <element-property name="plot" element="plot"/> -->
+         <ignore name="plot"/>
+         <!-- property type is interface org.jfree.chart.labels.XYToolTipGenerator -->
+         <element-property name="toolTipGenerator" element="toolTipGenerator"/>
+     </object>
+     <object class="org.jfree.chart.renderer.AbstractCategoryItemRenderer">
+         <!-- property type is interface org.jfree.chart.labels.CategoryItemLabelGenerator -->
+         <element-property name="baseItemLabelGenerator" element="baseItemLabelGenerator"/>
+         <!-- property type is interface org.jfree.chart.urls.CategoryURLGenerator -->
+         <element-property name="baseItemURLGenerator" element="baseItemURLGenerator"/>
+         <attribute-property name="itemLabelAnchorOffset" attribute="itemLabelAnchorOffset" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.plot.CategoryPlot -->
+         <!-- <element-property name="plot" element="plot"/> -->
+         <ignore name="plot"/>
+     </object>
+     <object class="org.jfree.chart.renderer.AbstractRenderer">
+         <!-- <attribute-property name="baseItemLabelAnchor" attribute="baseItemLabelAnchor" handler="org.jfree.chart.xml.attributehandlers.ItemLabelAnchorAttributeHandler"/> -->
+         <ignore name="baseItemLabelAnchor"/>
+         <ignore name="baseItemLabelAngle"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="baseItemLabelFont" element="baseItemLabelFont"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="baseItemLabelPaint" element="baseItemLabelPaint"/>
+         <!-- <attribute-property name="baseItemLabelRotationAnchor" attribute="baseItemLabelRotationAnchor" handler="org.jfree.chart.xml.attributehandlers.TextAnchorAttributeHandler"/> -->
+         <ignore name="baseItemLabelRotationAnchor"/>
+         <!-- <attribute-property name="baseItemLabelTextAnchor" attribute="baseItemLabelTextAnchor" handler="org.jfree.chart.xml.attributehandlers.TextAnchorAttributeHandler"/> -->
+         <ignore name="baseItemLabelTextAnchor"/>
+ 
+         <attribute-property name="baseItemLabelsVisible" attribute="baseItemLabelsVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.renderer.ItemLabelPosition -->
+         <element-property name="baseNegativeItemLabelPosition" element="baseNegativeItemLabelPosition"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="baseOutlinePaint" element="baseOutlinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="baseOutlineStroke" element="baseOutlineStroke"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="basePaint" element="basePaint"/>
+         <!-- property type is class org.jfree.chart.renderer.ItemLabelPosition -->
+         <element-property name="basePositiveItemLabelPosition" element="basePositiveItemLabelPosition"/>
+         <!-- property type is interface java.awt.Shape -->
+         <!-- <element-property name="baseShape" element="baseShape"/> -->
+         <ignore name="baseShape"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="baseStroke" element="baseStroke"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.chart.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.chart.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,144 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.chart.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.chart.MeterLegend">
+         <attribute-property name="legendText" attribute="legendText" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.ClipPath">
+         <!-- property type is class [D -->
+         <element-property name="XValue" element="XValue"/>
+         <!-- property type is class [D -->
+         <element-property name="YValue" element="YValue"/>
+         <attribute-property name="clip" attribute="clip" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Composite -->
+         <element-property name="composite" element="composite"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="drawPaint" element="drawPaint"/>
+         <attribute-property name="drawPath" attribute="drawPath" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="drawStroke" element="drawStroke"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="fillPaint" element="fillPaint"/>
+         <attribute-property name="fillPath" attribute="fillPath" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.Marker">
+         <attribute-property name="label" attribute="label" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="labelFont" element="labelFont"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="labelPaint" element="labelPaint"/>
+         <!-- property type is class org.jfree.chart.MarkerLabelPosition -->
+         <element-property name="labelPosition" element="labelPosition"/>
+     </object>
+     <object class="org.jfree.chart.ChartRenderingInfo">
+         <!-- property type is class java.awt.geom.Rectangle2D -->
+         <element-property name="chartArea" element="chartArea"/>
+         <!-- property type is interface org.jfree.chart.entity.EntityCollection -->
+         <element-property name="entityCollection" element="entityCollection"/>
+         <!-- property type is class java.awt.geom.Rectangle2D -->
+         <element-property name="plotArea" element="plotArea"/>
+     </object>
+     <object class="org.jfree.chart.ImageTitle">
+         <!-- property type is class java.awt.Image -->
+         <element-property name="image" element="image"/>
+     </object>
+     <object class="org.jfree.chart.TextTitle">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="backgroundPaint" element="backgroundPaint"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="font" element="font"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="paint" element="paint"/>
+         <attribute-property name="text" attribute="text" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+     </object>
+ 
+     <!--
+     if register name is defined, then the object will be registered at the
+     root parser by this name while it is constructed. Other objects can
+     reference to this name.
+     -->
+     <object class="org.jfree.chart.JFreeChart" register-name="key::chart">
+         <constructor>
+             <!--
+             instead of tagname a logical name, as the various plots can become
+             very unhandy later
+             -->
+             <parameter class="org.jfree.chart.plot.Plot" property="plot"/>
+         </constructor>
+ 
+         <attribute-property name="antiAlias" attribute="antiAlias" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class java.awt.Image -->
+         <element-property name="backgroundImage" element="backgroundImage"/>
+         <attribute-property name="backgroundImageAlignment" attribute="backgroundImageAlignment" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="backgroundImageAlpha" attribute="backgroundImageAlpha" handler="org.jfree.xml.attributehandlers.FloatAttributeHandler"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="backgroundPaint" element="backgroundPaint"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="borderPaint" element="borderPaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="borderStroke" element="borderStroke"/>
+         <attribute-property name="borderVisible" attribute="borderVisible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.Legend -->
+         <element-property name="legend" element="legend"/>
+         <attribute-property name="notify" attribute="notify" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class java.awt.RenderingHints -->
+         <element-property name="renderingHints" element="renderingHints"/>
+         <!-- property type is interface java.util.List -->
+         <element-property name="subtitles" element="subtitles"/>
+         <attribute-property name="suppressChartChangeEvents" attribute="suppressChartChangeEvents" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.TextTitle -->
+         <element-property name="title" element="title"/>
+         <element-property name="plot" element="plot"/>
+     </object>
+ 
+     <object class="org.jfree.chart.DrawableLegendItem">
+         <!-- property type is class java.awt.geom.Point2D -->
+         <element-property name="labelPosition" element="labelPosition"/>
+         <!-- property type is class java.awt.geom.Line2D -->
+         <element-property name="line" element="line"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="lineStroke" element="lineStroke"/>
+         <!-- property type is interface java.awt.Shape -->
+         <!-- <element-property name="marker" element="marker"/> -->
+         <ignore name="marker"/>
+         <attribute-property name="x" attribute="x" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="y" attribute="y" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.StandardLegend">
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="backgroundPaint" element="backgroundPaint"/>
+         <attribute-property name="displaySeriesLines" attribute="displaySeriesLines" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="displaySeriesShapes" attribute="displaySeriesShapes" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.Spacer -->
+         <element-property name="innerGap" element="innerGap"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="itemFont" element="itemFont"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="itemPaint" element="itemPaint"/>
+         <!-- property type is class org.jfree.chart.Spacer -->
+         <element-property name="outerGap" element="outerGap"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="outlinePaint" element="outlinePaint"/>
+         <attribute-property name="outlineShapes" attribute="outlineShapes" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="outlineStroke" element="outlineStroke"/>
+         <!-- property type is interface java.awt.Paint -->
+         <element-property name="shapeOutlinePaint" element="shapeOutlinePaint"/>
+         <!-- property type is interface java.awt.Stroke -->
+         <element-property name="shapeOutlineStroke" element="shapeOutlineStroke"/>
+         <attribute-property name="title" attribute="title" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is class java.awt.Font -->
+         <element-property name="titleFont" element="titleFont"/>
+     </object>
+     <object class="org.jfree.chart.AbstractTitle">
+         <attribute-property name="horizontalAlignment" attribute="horizontalAlignment" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="notify" attribute="notify" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="position" attribute="position" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <!-- property type is class org.jfree.chart.Spacer -->
+         <element-property name="spacer" element="spacer"/>
+         <attribute-property name="verticalAlignment" attribute="verticalAlignment" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.chart.Legend">
+         <attribute-property name="anchor" attribute="anchor" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.data.gantt.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.data.gantt.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.data.gantt.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.data.gantt.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,10 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.data.gantt.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.data.gantt.Task">
+         <attribute-property name="description" attribute="description" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is interface org.jfree.data.time.TimePeriod -->
+         <element-property name="duration" element="duration"/>
+         <attribute-property name="percentComplete" attribute="percentComplete" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.data.statistics.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.data.statistics.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.data.statistics.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.data.statistics.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,8 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.data.statistics.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset">
+         <attribute-property name="faroutCoefficient" attribute="faroutCoefficient" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="outlierCoefficient" attribute="outlierCoefficient" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.data.time.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.data.time.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.data.time.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.data.time.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,37 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.data.time.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.data.time.TimePeriodValue">
+         <!-- property type is class java.lang.Number -->
+         <element-property name="value" element="value"/>
+     </object>
+     <object class="org.jfree.data.time.TimePeriodValues">
+         <attribute-property name="domainDescription" attribute="domainDescription" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="rangeDescription" attribute="rangeDescription" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.time.TimeSeriesCollection">
+         <!-- property type is class org.jfree.data.time.TimePeriodAnchor -->
+         <element-property name="XPosition" element="XPosition"/>
+         <attribute-property name="domainIsPointsInTime" attribute="domainIsPointsInTime" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="position" attribute="position" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.time.TimeSeriesDataItem">
+         <!-- property type is class java.lang.Number -->
+         <element-property name="value" element="value"/>
+     </object>
+     <object class="org.jfree.data.time.TimePeriodValuesCollection">
+         <!-- property type is class org.jfree.data.time.TimePeriodAnchor -->
+         <element-property name="XPosition" element="XPosition"/>
+         <attribute-property name="domainIsPointsInTime" attribute="domainIsPointsInTime" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <attribute-property name="position" attribute="position" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.time.TimeSeries">
+         <attribute-property name="domainDescription" attribute="domainDescription" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="historyCount" attribute="historyCount" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="maximumItemCount" attribute="maximumItemCount" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="rangeDescription" attribute="rangeDescription" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.time.DynamicTimeSeriesCollection">
+         <attribute-property name="position" attribute="position" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.data.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.data.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.data.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.data.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,51 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.data.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.data.Series">
+         <attribute-property name="description" attribute="description" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="name" attribute="name" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="notify" attribute="notify" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.NormalizedMatrixSeries">
+         <attribute-property name="scaleFactor" attribute="scaleFactor" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.XYDataItem">
+         <!-- property type is class java.lang.Number -->
+         <element-property name="y" element="y"/>
+     </object>
+     <object class="org.jfree.data.DefaultKeyedValue">
+         <!-- property type is class java.lang.Number -->
+         <element-property name="value" element="value"/>
+     </object>
+     <object class="org.jfree.data.DefaultMeterDataset">
+         <attribute-property name="borderType" attribute="borderType" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="units" attribute="units" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is class java.lang.Number -->
+         <element-property name="value" element="value"/>
+     </object>
+     <object class="org.jfree.data.JDBCCategoryDataset">
+         <attribute-property name="transpose" attribute="transpose" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.HistogramDataset">
+         <!-- property type is class org.jfree.data.HistogramDataset$HistogramType -->
+         <element-property name="type" element="type"/>
+     </object>
+     <object class="org.jfree.data.DefaultValueDataset">
+         <!-- property type is class java.lang.Number -->
+         <element-property name="value" element="value"/>
+     </object>
+     <object class="org.jfree.data.XYSeries">
+         <attribute-property name="maximumItemCount" attribute="maximumItemCount" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.KeyedObject">
+         <!-- property type is class java.lang.Object -->
+         <element-property name="object" element="object"/>
+     </object>
+     <object class="org.jfree.data.JDBCXYDataset">
+         <attribute-property name="timeSeries" attribute="timeSeries" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+     <object class="org.jfree.data.AbstractDataset">
+         <!-- property type is class org.jfree.data.DatasetGroup -->
+         <element-property name="group" element="group"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.date.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.date.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.date.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.date.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,25 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.date.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.date.DayOfWeekInMonthRule">
+         <attribute-property name="count" attribute="count" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="dayOfWeek" attribute="dayOfWeek" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="month" attribute="month" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.date.RelativeDayOfWeekRule">
+         <attribute-property name="dayOfWeek" attribute="dayOfWeek" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="relative" attribute="relative" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <!-- property type is class org.jfree.date.AnnualDateRule -->
+         <element-property name="subrule" element="subrule"/>
+     </object>
+     <object class="org.jfree.date.DayAndMonthRule">
+         <attribute-property name="dayOfMonth" attribute="dayOfMonth" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+         <attribute-property name="month" attribute="month" handler="org.jfree.xml.attributehandlers.IntegerAttributeHandler"/>
+     </object>
+     <object class="org.jfree.date.SpreadsheetDate">
+         <attribute-property name="description" attribute="description" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+     </object>
+     <object class="org.jfree.date.SerialDate">
+         <attribute-property name="description" attribute="description" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.text.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.text.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.text.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.text.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,12 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.text.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ -->
+ <objects>
+     <object class="org.jfree.text.TextFragment">
+     </object>
+     <object class="org.jfree.text.TextBlock">
+     </object>
+     <object class="org.jfree.text.TextBlockAnchor">
+     </object>
+     <object class="org.jfree.text.TextLine">
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.ui.about.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.ui.about.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.ui.about.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.ui.about.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,18 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.ui.about.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.ui.about.ProjectInfo">
+         <!-- property type is interface java.util.List -->
+         <element-property name="contributors" element="contributors"/>
+         <attribute-property name="copyright" attribute="copyright" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="info" attribute="info" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is interface java.util.List -->
+         <element-property name="libraries" element="libraries"/>
+         <attribute-property name="licenceName" attribute="licenceName" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="licenceText" attribute="licenceText" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <!-- property type is class java.awt.Image -->
+         <element-property name="logo" element="logo"/>
+         <attribute-property name="name" attribute="name" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+         <attribute-property name="version" attribute="version" handler="org.jfree.xml.attributehandlers.StringAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.ui.xml jfreechart/bin/org/jfree/chart/xml/model-org.jfree.ui.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model-org.jfree.ui.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model-org.jfree.ui.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,11 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model-org.jfree.ui.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <object class="org.jfree.ui.FloatDimension">
+         <attribute-property name="height" attribute="height" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+         <attribute-property name="width" attribute="width" handler="org.jfree.xml.attributehandlers.DoubleAttributeHandler"/>
+     </object>
+     <object class="org.jfree.ui.SortableTableModel">
+         <attribute-property name="ascending" attribute="ascending" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+     </object>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/model.xml jfreechart/bin/org/jfree/chart/xml/model.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/model.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/model.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,798 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <!-- CVSTag: $Id: model.xml,v 1.1 2004/08/31 14:57:59 mungady Exp $ null -->
+ <objects>
+     <include src="model-common-base.xml"/>
+     <include src="model-org.jfree.chart.annotations.xml"/>
+     <include src="model-org.jfree.chart.axis.xml"/>
+     <include src="model-org.jfree.chart.entity.xml"/>
+     <include src="model-org.jfree.chart.needle.xml"/>
+     <include src="model-org.jfree.chart.plot.xml"/>
+     <include src="model-org.jfree.chart.renderer.xml"/>
+     <include src="model-org.jfree.chart.xml"/>
+     <include src="model-org.jfree.data.gantt.xml"/>
+     <include src="model-org.jfree.data.statistics.xml"/>
+     <include src="model-org.jfree.data.time.xml"/>
+     <include src="model-org.jfree.data.xml"/>
+     <include src="model-org.jfree.date.xml"/>
+     <include src="model-org.jfree.ui.about.xml"/>
+     <include src="model-org.jfree.ui.xml"/>
+     <mapping base-class="org.jfree.chart.Marker" type-attribute="type">
+         <type name="org.jfree.chart.Marker" class="org.jfree.chart.Marker"/>
+         <type name="org.jfree.chart.IntervalMarker" class="org.jfree.chart.IntervalMarker"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.urls.XYURLGenerator" type-attribute="type">
+         <type name="org.jfree.chart.urls.StandardXYZURLGenerator" class="org.jfree.chart.urls.StandardXYZURLGenerator"/>
+         <type name="org.jfree.chart.urls.StandardXYURLGenerator" class="org.jfree.chart.urls.StandardXYURLGenerator"/>
+         <type name="org.jfree.chart.urls.CustomXYURLGenerator" class="org.jfree.chart.urls.CustomXYURLGenerator"/>
+         <type name="org.jfree.chart.urls.TimeSeriesURLGenerator" class="org.jfree.chart.urls.TimeSeriesURLGenerator"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.BarRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.IntervalBarRenderer" class="org.jfree.chart.renderer.IntervalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.GanttRenderer" class="org.jfree.chart.renderer.GanttRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer" class="org.jfree.chart.renderer.BarRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer3D" class="org.jfree.chart.renderer.BarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.StatisticalBarRenderer" class="org.jfree.chart.renderer.StatisticalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer3D" class="org.jfree.chart.renderer.StackedBarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.LayeredBarRenderer" class="org.jfree.chart.renderer.LayeredBarRenderer"/>
+         <type name="org.jfree.chart.renderer.WaterfallBarRenderer" class="org.jfree.chart.renderer.WaterfallBarRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer" class="org.jfree.chart.renderer.StackedBarRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.plot.Plot" type-attribute="type">
+         <type name="org.jfree.chart.plot.CombinedRangeXYPlot" class="org.jfree.chart.plot.CombinedRangeXYPlot"/>
+         <type name="org.jfree.chart.plot.FastScatterPlot" class="org.jfree.chart.plot.FastScatterPlot"/>
+         <type name="org.jfree.chart.plot.ContourPlot" class="org.jfree.chart.plot.ContourPlot"/>
+         <type name="org.jfree.chart.plot.CombinedDomainCategoryPlot" class="org.jfree.chart.plot.CombinedDomainCategoryPlot"/>
+         <type name="org.jfree.chart.plot.ThermometerPlot" class="org.jfree.chart.plot.ThermometerPlot"/>
+         <type name="org.jfree.chart.plot.Pie3DPlot" class="org.jfree.chart.plot.Pie3DPlot"/>
+         <type name="org.jfree.chart.plot.PiePlot" class="org.jfree.chart.plot.PiePlot"/>
+         <type name="org.jfree.chart.plot.CategoryPlot" class="org.jfree.chart.plot.CategoryPlot"/>
+         <type name="org.jfree.chart.plot.MeterPlot" class="org.jfree.chart.plot.MeterPlot"/>
+         <type name="org.jfree.chart.plot.XYPlot" class="org.jfree.chart.plot.XYPlot"/>
+         <type name="org.jfree.chart.plot.CompassPlot" class="org.jfree.chart.plot.CompassPlot"/>
+         <type name="org.jfree.chart.plot.PeriodMarkerPlot" class="org.jfree.chart.plot.PeriodMarkerPlot"/>
+         <type name="org.jfree.chart.plot.CombinedDomainXYPlot" class="org.jfree.chart.plot.CombinedDomainXYPlot"/>
+         <type name="org.jfree.chart.plot.CombinedRangeCategoryPlot" class="org.jfree.chart.plot.CombinedRangeCategoryPlot"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.XYDataItem" type-attribute="type">
+         <type name="org.jfree.data.XYDataItem" class="org.jfree.data.XYDataItem"/>
+         <type name="org.jfree.data.XYDataPair" class="org.jfree.data.XYDataPair"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.ContourDataset" type-attribute="type">
+         <type name="org.jfree.data.NonGridContourDataset" class="org.jfree.data.NonGridContourDataset"/>
+         <type name="org.jfree.data.DefaultContourDataset" class="org.jfree.data.DefaultContourDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.util.ObjectTable" type-attribute="type">
+         <type name="org.jfree.ui.TextAnchorTable" class="org.jfree.ui.TextAnchorTable"/>
+         <type name="org.jfree.chart.renderer.CategoryURLGeneratorTable" class="org.jfree.chart.renderer.CategoryURLGeneratorTable"/>
+         <type name="org.jfree.chart.renderer.ItemLabelAnchorTable" class="org.jfree.chart.renderer.ItemLabelAnchorTable"/>
+         <type name="org.jfree.util.ObjectTable" class="org.jfree.util.ObjectTable"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.AbstractRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.XYDotRenderer" class="org.jfree.chart.renderer.XYDotRenderer"/>
+         <type name="org.jfree.chart.renderer.IntervalBarRenderer" class="org.jfree.chart.renderer.IntervalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.GanttRenderer" class="org.jfree.chart.renderer.GanttRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer" class="org.jfree.chart.renderer.BarRenderer"/>
+         <type name="org.jfree.chart.renderer.MinMaxCategoryRenderer" class="org.jfree.chart.renderer.MinMaxCategoryRenderer"/>
+         <type name="org.jfree.chart.renderer.XYDifferenceRenderer" class="org.jfree.chart.renderer.XYDifferenceRenderer"/>
+         <type name="org.jfree.chart.renderer.StandardXYItemRenderer" class="org.jfree.chart.renderer.StandardXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.HighLowRenderer" class="org.jfree.chart.renderer.HighLowRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultXYItemRenderer" class="org.jfree.chart.renderer.DefaultXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedAreaRenderer" class="org.jfree.chart.renderer.StackedAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.CandlestickRenderer" class="org.jfree.chart.renderer.CandlestickRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer3D" class="org.jfree.chart.renderer.BarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.XYStepRenderer" class="org.jfree.chart.renderer.XYStepRenderer"/>
+         <type name="org.jfree.chart.renderer.AreaXYRenderer" class="org.jfree.chart.renderer.AreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.StatisticalBarRenderer" class="org.jfree.chart.renderer.StatisticalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer3D" class="org.jfree.chart.renderer.StackedBarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.StackedAreaXYRenderer" class="org.jfree.chart.renderer.StackedAreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.LayeredBarRenderer" class="org.jfree.chart.renderer.LayeredBarRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer" class="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer"/>
+         <type name="org.jfree.chart.renderer.YIntervalRenderer" class="org.jfree.chart.renderer.YIntervalRenderer"/>
+         <type name="org.jfree.chart.renderer.AreaRenderer" class="org.jfree.chart.renderer.AreaRenderer"/>
+         <type name="org.jfree.chart.renderer.CyclicXYItemRenderer" class="org.jfree.chart.renderer.CyclicXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.WaterfallBarRenderer" class="org.jfree.chart.renderer.WaterfallBarRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBubbleRenderer" class="org.jfree.chart.renderer.XYBubbleRenderer"/>
+         <type name="org.jfree.chart.renderer.XYStepAreaRenderer" class="org.jfree.chart.renderer.XYStepAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultCategoryItemRenderer" class="org.jfree.chart.renderer.DefaultCategoryItemRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer" class="org.jfree.chart.renderer.StackedBarRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBarRenderer" class="org.jfree.chart.renderer.XYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.LineAndShapeRenderer" class="org.jfree.chart.renderer.LineAndShapeRenderer"/>
+         <type name="org.jfree.chart.renderer.ClusteredXYBarRenderer" class="org.jfree.chart.renderer.ClusteredXYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.WindItemRenderer" class="org.jfree.chart.renderer.WindItemRenderer"/>
+         <type name="org.jfree.chart.renderer.SignalRenderer" class="org.jfree.chart.renderer.SignalRenderer"/>
+         <type name="org.jfree.chart.renderer.BoxAndWhiskerRenderer" class="org.jfree.chart.renderer.BoxAndWhiskerRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.AbstractSeriesDataset" type-attribute="type">
+         <type name="org.jfree.data.time.TimeSeriesCollection" class="org.jfree.data.time.TimeSeriesCollection"/>
+         <type name="org.jfree.data.time.TimePeriodValuesCollection" class="org.jfree.data.time.TimePeriodValuesCollection"/>
+         <type name="org.jfree.data.time.DynamicTimeSeriesCollection" class="org.jfree.data.time.DynamicTimeSeriesCollection"/>
+         <type name="org.jfree.data.DefaultTableXYDataset" class="org.jfree.data.DefaultTableXYDataset"/>
+         <type name="org.jfree.data.DefaultHighLowDataset" class="org.jfree.data.DefaultHighLowDataset"/>
+         <type name="org.jfree.data.SubSeriesDataset" class="org.jfree.data.SubSeriesDataset"/>
+         <type name="org.jfree.data.DefaultIntervalCategoryDataset" class="org.jfree.data.DefaultIntervalCategoryDataset"/>
+         <type name="org.jfree.data.gantt.TaskSeriesCollection" class="org.jfree.data.gantt.TaskSeriesCollection"/>
+         <type name="org.jfree.data.MatrixSeriesCollection" class="org.jfree.data.MatrixSeriesCollection"/>
+         <type name="org.jfree.data.DefaultWindDataset" class="org.jfree.data.DefaultWindDataset"/>
+         <type name="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset"/>
+         <type name="org.jfree.data.XYSeriesCollection" class="org.jfree.data.XYSeriesCollection"/>
+         <type name="org.jfree.data.CombinedDataset" class="org.jfree.data.CombinedDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.annotations.XYTextAnnotation" type-attribute="type">
+         <type name="org.jfree.chart.annotations.XYTextAnnotation" class="org.jfree.chart.annotations.XYTextAnnotation"/>
+         <type name="org.jfree.chart.annotations.XYPointerAnnotation" class="org.jfree.chart.annotations.XYPointerAnnotation"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.CategoryItemRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.IntervalBarRenderer" class="org.jfree.chart.renderer.IntervalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.GanttRenderer" class="org.jfree.chart.renderer.GanttRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer" class="org.jfree.chart.renderer.BarRenderer"/>
+         <type name="org.jfree.chart.renderer.MinMaxCategoryRenderer" class="org.jfree.chart.renderer.MinMaxCategoryRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedAreaRenderer" class="org.jfree.chart.renderer.StackedAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer3D" class="org.jfree.chart.renderer.BarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.StatisticalBarRenderer" class="org.jfree.chart.renderer.StatisticalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer3D" class="org.jfree.chart.renderer.StackedBarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.LayeredBarRenderer" class="org.jfree.chart.renderer.LayeredBarRenderer"/>
+         <type name="org.jfree.chart.renderer.AreaRenderer" class="org.jfree.chart.renderer.AreaRenderer"/>
+         <type name="org.jfree.chart.renderer.WaterfallBarRenderer" class="org.jfree.chart.renderer.WaterfallBarRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultCategoryItemRenderer" class="org.jfree.chart.renderer.DefaultCategoryItemRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer" class="org.jfree.chart.renderer.StackedBarRenderer"/>
+         <type name="org.jfree.chart.renderer.LineAndShapeRenderer" class="org.jfree.chart.renderer.LineAndShapeRenderer"/>
+         <type name="org.jfree.chart.renderer.BoxAndWhiskerRenderer" class="org.jfree.chart.renderer.BoxAndWhiskerRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.Range" type-attribute="type">
+         <type name="org.jfree.data.Range" class="org.jfree.data.Range"/>
+         <type name="org.jfree.data.DateRange" class="org.jfree.data.DateRange"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.plot.PiePlot" type-attribute="type">
+         <type name="org.jfree.chart.plot.Pie3DPlot" class="org.jfree.chart.plot.Pie3DPlot"/>
+         <type name="org.jfree.chart.plot.PiePlot" class="org.jfree.chart.plot.PiePlot"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.TickUnitSource" type-attribute="type">
+         <type name="org.jfree.chart.axis.StandardTickUnitSource" class="org.jfree.chart.axis.StandardTickUnitSource"/>
+         <type name="org.jfree.chart.axis.TickUnits" class="org.jfree.chart.axis.TickUnits"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.Axis" type-attribute="type">
+         <type name="org.jfree.chart.axis.SymbolicAxis" class="org.jfree.chart.axis.SymbolicAxis"/>
+         <type name="org.jfree.chart.axis.CategoryAxis" class="org.jfree.chart.axis.CategoryAxis"/>
+         <type name="org.jfree.chart.axis.NumberAxis" class="org.jfree.chart.axis.NumberAxis"/>
+         <type name="org.jfree.chart.axis.CategoryAxis3D" class="org.jfree.chart.axis.CategoryAxis3D"/>
+         <type name="org.jfree.chart.axis.CyclicNumberAxis" class="org.jfree.chart.axis.CyclicNumberAxis"/>
+         <type name="org.jfree.chart.axis.NumberAxis3D" class="org.jfree.chart.axis.NumberAxis3D"/>
+         <type name="org.jfree.chart.axis.DateAxis" class="org.jfree.chart.axis.DateAxis"/>
+         <type name="org.jfree.chart.axis.LogarithmicAxis" class="org.jfree.chart.axis.LogarithmicAxis"/>
+     </mapping>
+     <mapping base-class="java.lang.Comparable" type-attribute="type">
+         <type name="org.jfree.data.time.Week" class="org.jfree.data.time.Week"/>
+         <type name="org.jfree.data.time.Quarter" class="org.jfree.data.time.Quarter"/>
+         <type name="org.jfree.data.time.Millisecond" class="org.jfree.data.time.Millisecond"/>
+         <type name="org.jfree.data.time.Second" class="org.jfree.data.time.Second"/>
+         <type name="org.jfree.data.time.FixedMillisecond" class="org.jfree.data.time.FixedMillisecond"/>
+         <type name="org.jfree.data.time.TimeSeriesDataItem" class="org.jfree.data.time.TimeSeriesDataItem"/>
+         <type name="org.jfree.data.time.Year" class="org.jfree.data.time.Year"/>
+         <type name="org.jfree.data.time.Month" class="org.jfree.data.time.Month"/>
+         <type name="org.jfree.data.time.Minute" class="org.jfree.data.time.Minute"/>
+         <type name="org.jfree.data.time.Hour" class="org.jfree.data.time.Hour"/>
+         <type name="org.jfree.data.time.Day" class="org.jfree.data.time.Day"/>
+         <type name="org.jfree.data.XYDataItem" class="org.jfree.data.XYDataItem"/>
+         <type name="org.jfree.data.XYDataPair" class="org.jfree.data.XYDataPair"/>
+         <type name="org.jfree.date.SpreadsheetDate" class="org.jfree.date.SpreadsheetDate"/>
+         <type name="org.jfree.chart.axis.DateTickUnit" class="org.jfree.chart.axis.DateTickUnit"/>
+         <type name="org.jfree.chart.axis.NumberTickUnit" class="org.jfree.chart.axis.NumberTickUnit"/>
+         <type name="org.jfree.chart.axis.SymbolicTickUnit" class="org.jfree.chart.axis.SymbolicTickUnit"/>
+         <type name="java.util.Date" class="java.util.Date"/>
+         <type name="org.jfree.chart.renderer.Outlier" class="org.jfree.chart.renderer.Outlier"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.StandardLegend" type-attribute="type">
+         <type name="org.jfree.chart.MeterLegend" class="org.jfree.chart.MeterLegend"/>
+         <type name="org.jfree.chart.StandardLegend" class="org.jfree.chart.StandardLegend"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.ValueTick" type-attribute="type">
+         <type name="org.jfree.chart.axis.NumberTick" class="org.jfree.chart.axis.NumberTick"/>
+         <type name="org.jfree.chart.axis.DateTick" class="org.jfree.chart.axis.DateTick"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.XYBarRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.XYBarRenderer" class="org.jfree.chart.renderer.XYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.ClusteredXYBarRenderer" class="org.jfree.chart.renderer.ClusteredXYBarRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.AbstractTitle" type-attribute="type">
+         <type name="org.jfree.chart.ImageTitle" class="org.jfree.chart.ImageTitle"/>
+         <type name="org.jfree.chart.DateTitle" class="org.jfree.chart.DateTitle"/>
+         <type name="org.jfree.chart.TextTitle" class="org.jfree.chart.TextTitle"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.labels.CategoryItemLabelGenerator" type-attribute="type">
+         <type name="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator"/>
+         <type name="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator" class="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.plot.CategoryPlot" type-attribute="type">
+         <type name="org.jfree.chart.plot.CombinedDomainCategoryPlot" class="org.jfree.chart.plot.CombinedDomainCategoryPlot"/>
+         <type name="org.jfree.chart.plot.CategoryPlot" class="org.jfree.chart.plot.CategoryPlot"/>
+         <type name="org.jfree.chart.plot.CombinedRangeCategoryPlot" class="org.jfree.chart.plot.CombinedRangeCategoryPlot"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.time.TimePeriod" type-attribute="type">
+         <type name="org.jfree.data.time.Week" class="org.jfree.data.time.Week"/>
+         <type name="org.jfree.data.time.Quarter" class="org.jfree.data.time.Quarter"/>
+         <type name="org.jfree.data.time.Millisecond" class="org.jfree.data.time.Millisecond"/>
+         <type name="org.jfree.data.time.Second" class="org.jfree.data.time.Second"/>
+         <type name="org.jfree.data.time.FixedMillisecond" class="org.jfree.data.time.FixedMillisecond"/>
+         <type name="org.jfree.data.time.SimpleTimePeriod" class="org.jfree.data.time.SimpleTimePeriod"/>
+         <type name="org.jfree.data.time.Year" class="org.jfree.data.time.Year"/>
+         <type name="org.jfree.data.time.Month" class="org.jfree.data.time.Month"/>
+         <type name="org.jfree.data.time.Minute" class="org.jfree.data.time.Minute"/>
+         <type name="org.jfree.data.time.Hour" class="org.jfree.data.time.Hour"/>
+         <type name="org.jfree.data.time.Day" class="org.jfree.data.time.Day"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.AbstractDataset" type-attribute="type">
+         <type name="org.jfree.data.time.TimeSeriesCollection" class="org.jfree.data.time.TimeSeriesCollection"/>
+         <type name="org.jfree.data.time.TimePeriodValuesCollection" class="org.jfree.data.time.TimePeriodValuesCollection"/>
+         <type name="org.jfree.data.time.DynamicTimeSeriesCollection" class="org.jfree.data.time.DynamicTimeSeriesCollection"/>
+         <type name="org.jfree.data.DefaultPieDataset" class="org.jfree.data.DefaultPieDataset"/>
+         <type name="org.jfree.data.DefaultTableXYDataset" class="org.jfree.data.DefaultTableXYDataset"/>
+         <type name="org.jfree.data.DefaultHighLowDataset" class="org.jfree.data.DefaultHighLowDataset"/>
+         <type name="org.jfree.data.SubSeriesDataset" class="org.jfree.data.SubSeriesDataset"/>
+         <type name="org.jfree.data.DefaultIntervalCategoryDataset" class="org.jfree.data.DefaultIntervalCategoryDataset"/>
+         <type name="org.jfree.data.DefaultKeyedValuesDataset" class="org.jfree.data.DefaultKeyedValuesDataset"/>
+         <type name="org.jfree.data.gantt.TaskSeriesCollection" class="org.jfree.data.gantt.TaskSeriesCollection"/>
+         <type name="org.jfree.data.MatrixSeriesCollection" class="org.jfree.data.MatrixSeriesCollection"/>
+         <type name="org.jfree.data.CategoryToPieDataset" class="org.jfree.data.CategoryToPieDataset"/>
+         <type name="org.jfree.data.JDBCPieDataset" class="org.jfree.data.JDBCPieDataset"/>
+         <type name="org.jfree.data.DefaultKeyedValues2DDataset" class="org.jfree.data.DefaultKeyedValues2DDataset"/>
+         <type name="org.jfree.data.NonGridContourDataset" class="org.jfree.data.NonGridContourDataset"/>
+         <type name="org.jfree.data.DefaultKeyedValueDataset" class="org.jfree.data.DefaultKeyedValueDataset"/>
+         <type name="org.jfree.data.DefaultMeterDataset" class="org.jfree.data.DefaultMeterDataset"/>
+         <type name="org.jfree.data.JDBCCategoryDataset" class="org.jfree.data.JDBCCategoryDataset"/>
+         <type name="org.jfree.data.HistogramDataset" class="org.jfree.data.HistogramDataset"/>
+         <type name="org.jfree.data.DefaultWindDataset" class="org.jfree.data.DefaultWindDataset"/>
+         <type name="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset"/>
+         <type name="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset"/>
+         <type name="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset"/>
+         <type name="org.jfree.data.XYSeriesCollection" class="org.jfree.data.XYSeriesCollection"/>
+         <type name="org.jfree.data.DefaultContourDataset" class="org.jfree.data.DefaultContourDataset"/>
+         <type name="org.jfree.data.DefaultValueDataset" class="org.jfree.data.DefaultValueDataset"/>
+         <type name="org.jfree.data.DefaultCategoryDataset" class="org.jfree.data.DefaultCategoryDataset"/>
+         <type name="org.jfree.data.CombinedDataset" class="org.jfree.data.CombinedDataset"/>
+         <type name="org.jfree.data.JDBCXYDataset" class="org.jfree.data.JDBCXYDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.MatrixSeries" type-attribute="type">
+         <type name="org.jfree.data.NormalizedMatrixSeries" class="org.jfree.data.NormalizedMatrixSeries"/>
+         <type name="org.jfree.data.MatrixSeries" class="org.jfree.data.MatrixSeries"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.CategoryAxis" type-attribute="type">
+         <type name="org.jfree.chart.axis.CategoryAxis" class="org.jfree.chart.axis.CategoryAxis"/>
+         <type name="org.jfree.chart.axis.CategoryAxis3D" class="org.jfree.chart.axis.CategoryAxis3D"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.annotations.TextAnnotation" type-attribute="type">
+         <type name="org.jfree.chart.annotations.XYTextAnnotation" class="org.jfree.chart.annotations.XYTextAnnotation"/>
+         <type name="org.jfree.chart.annotations.CategoryTextAnnotation" class="org.jfree.chart.annotations.CategoryTextAnnotation"/>
+         <type name="org.jfree.chart.annotations.XYPointerAnnotation" class="org.jfree.chart.annotations.XYPointerAnnotation"/>
+         <type name="org.jfree.chart.annotations.TextAnnotation" class="org.jfree.chart.annotations.TextAnnotation"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.PieDataset" type-attribute="type">
+         <type name="org.jfree.data.DefaultPieDataset" class="org.jfree.data.DefaultPieDataset"/>
+         <type name="org.jfree.data.DefaultKeyedValuesDataset" class="org.jfree.data.DefaultKeyedValuesDataset"/>
+         <type name="org.jfree.data.CategoryToPieDataset" class="org.jfree.data.CategoryToPieDataset"/>
+         <type name="org.jfree.data.JDBCPieDataset" class="org.jfree.data.JDBCPieDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.needle.ArrowNeedle" type-attribute="type">
+         <type name="org.jfree.chart.needle.WindNeedle" class="org.jfree.chart.needle.WindNeedle"/>
+         <type name="org.jfree.chart.needle.ArrowNeedle" class="org.jfree.chart.needle.ArrowNeedle"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.labels.XYToolTipGenerator" type-attribute="type">
+         <type name="org.jfree.chart.labels.StandardXYZToolTipGenerator" class="org.jfree.chart.labels.StandardXYZToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.HighLowToolTipGenerator" class="org.jfree.chart.labels.HighLowToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.TimeSeriesToolTipGenerator" class="org.jfree.chart.labels.TimeSeriesToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.SymbolicXYToolTipGenerator" class="org.jfree.chart.labels.SymbolicXYToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.CustomXYToolTipGenerator" class="org.jfree.chart.labels.CustomXYToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.StandardXYToolTipGenerator" class="org.jfree.chart.labels.StandardXYToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator" class="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.LineAndShapeRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.DefaultCategoryItemRenderer" class="org.jfree.chart.renderer.DefaultCategoryItemRenderer"/>
+         <type name="org.jfree.chart.renderer.LineAndShapeRenderer" class="org.jfree.chart.renderer.LineAndShapeRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.AbstractXYItemRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.XYDotRenderer" class="org.jfree.chart.renderer.XYDotRenderer"/>
+         <type name="org.jfree.chart.renderer.XYDifferenceRenderer" class="org.jfree.chart.renderer.XYDifferenceRenderer"/>
+         <type name="org.jfree.chart.renderer.StandardXYItemRenderer" class="org.jfree.chart.renderer.StandardXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.HighLowRenderer" class="org.jfree.chart.renderer.HighLowRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultXYItemRenderer" class="org.jfree.chart.renderer.DefaultXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.CandlestickRenderer" class="org.jfree.chart.renderer.CandlestickRenderer"/>
+         <type name="org.jfree.chart.renderer.XYStepRenderer" class="org.jfree.chart.renderer.XYStepRenderer"/>
+         <type name="org.jfree.chart.renderer.AreaXYRenderer" class="org.jfree.chart.renderer.AreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedAreaXYRenderer" class="org.jfree.chart.renderer.StackedAreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer" class="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer"/>
+         <type name="org.jfree.chart.renderer.YIntervalRenderer" class="org.jfree.chart.renderer.YIntervalRenderer"/>
+         <type name="org.jfree.chart.renderer.CyclicXYItemRenderer" class="org.jfree.chart.renderer.CyclicXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBubbleRenderer" class="org.jfree.chart.renderer.XYBubbleRenderer"/>
+         <type name="org.jfree.chart.renderer.XYStepAreaRenderer" class="org.jfree.chart.renderer.XYStepAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBarRenderer" class="org.jfree.chart.renderer.XYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.ClusteredXYBarRenderer" class="org.jfree.chart.renderer.ClusteredXYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.WindItemRenderer" class="org.jfree.chart.renderer.WindItemRenderer"/>
+         <type name="org.jfree.chart.renderer.SignalRenderer" class="org.jfree.chart.renderer.SignalRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.TextTitle" type-attribute="type">
+         <type name="org.jfree.chart.DateTitle" class="org.jfree.chart.DateTitle"/>
+         <type name="org.jfree.chart.TextTitle" class="org.jfree.chart.TextTitle"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.DefaultCategoryDataset" type-attribute="type">
+         <type name="org.jfree.data.DefaultKeyedValues2DDataset" class="org.jfree.data.DefaultKeyedValues2DDataset"/>
+         <type name="org.jfree.data.JDBCCategoryDataset" class="org.jfree.data.JDBCCategoryDataset"/>
+         <type name="org.jfree.data.DefaultCategoryDataset" class="org.jfree.data.DefaultCategoryDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.Series" type-attribute="type">
+         <type name="org.jfree.data.time.TimePeriodValues" class="org.jfree.data.time.TimePeriodValues"/>
+         <type name="org.jfree.data.time.TimeSeries" class="org.jfree.data.time.TimeSeries"/>
+         <type name="org.jfree.data.gantt.TaskSeries" class="org.jfree.data.gantt.TaskSeries"/>
+         <type name="org.jfree.data.Series" class="org.jfree.data.Series"/>
+         <type name="org.jfree.data.NormalizedMatrixSeries" class="org.jfree.data.NormalizedMatrixSeries"/>
+         <type name="org.jfree.data.MatrixSeries" class="org.jfree.data.MatrixSeries"/>
+         <type name="org.jfree.data.XYSeries" class="org.jfree.data.XYSeries"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.IntervalBarRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.IntervalBarRenderer" class="org.jfree.chart.renderer.IntervalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.GanttRenderer" class="org.jfree.chart.renderer.GanttRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.DefaultPieDataset" type-attribute="type">
+         <type name="org.jfree.data.DefaultPieDataset" class="org.jfree.data.DefaultPieDataset"/>
+         <type name="org.jfree.data.DefaultKeyedValuesDataset" class="org.jfree.data.DefaultKeyedValuesDataset"/>
+         <type name="org.jfree.data.JDBCPieDataset" class="org.jfree.data.JDBCPieDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.Legend" type-attribute="type">
+         <type name="org.jfree.chart.MeterLegend" class="org.jfree.chart.MeterLegend"/>
+         <type name="org.jfree.chart.StandardLegend" class="org.jfree.chart.StandardLegend"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.entity.ChartEntity" type-attribute="type">
+         <type name="org.jfree.chart.entity.CategoryItemEntity" class="org.jfree.chart.entity.CategoryItemEntity"/>
+         <type name="org.jfree.chart.entity.LegendItemEntity" class="org.jfree.chart.entity.LegendItemEntity"/>
+         <type name="org.jfree.chart.entity.ChartEntity" class="org.jfree.chart.entity.ChartEntity"/>
+         <type name="org.jfree.chart.entity.PieSectionEntity" class="org.jfree.chart.entity.PieSectionEntity"/>
+         <type name="org.jfree.chart.entity.XYItemEntity" class="org.jfree.chart.entity.XYItemEntity"/>
+         <type name="org.jfree.chart.entity.ContourEntity" class="org.jfree.chart.entity.ContourEntity"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.DefaultContourDataset" type-attribute="type">
+         <type name="org.jfree.data.NonGridContourDataset" class="org.jfree.data.NonGridContourDataset"/>
+         <type name="org.jfree.data.DefaultContourDataset" class="org.jfree.data.DefaultContourDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.date.AnnualDateRule" type-attribute="type">
+         <type name="org.jfree.date.DayOfWeekInMonthRule" class="org.jfree.date.DayOfWeekInMonthRule"/>
+         <type name="org.jfree.date.RelativeDayOfWeekRule" class="org.jfree.date.RelativeDayOfWeekRule"/>
+         <type name="org.jfree.date.DayAndMonthRule" class="org.jfree.date.DayAndMonthRule"/>
+         <type name="org.jfree.date.EasterSundayRule" class="org.jfree.date.EasterSundayRule"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.AbstractCategoryItemRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.IntervalBarRenderer" class="org.jfree.chart.renderer.IntervalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.GanttRenderer" class="org.jfree.chart.renderer.GanttRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer" class="org.jfree.chart.renderer.BarRenderer"/>
+         <type name="org.jfree.chart.renderer.MinMaxCategoryRenderer" class="org.jfree.chart.renderer.MinMaxCategoryRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedAreaRenderer" class="org.jfree.chart.renderer.StackedAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer3D" class="org.jfree.chart.renderer.BarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.StatisticalBarRenderer" class="org.jfree.chart.renderer.StatisticalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer3D" class="org.jfree.chart.renderer.StackedBarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.LayeredBarRenderer" class="org.jfree.chart.renderer.LayeredBarRenderer"/>
+         <type name="org.jfree.chart.renderer.AreaRenderer" class="org.jfree.chart.renderer.AreaRenderer"/>
+         <type name="org.jfree.chart.renderer.WaterfallBarRenderer" class="org.jfree.chart.renderer.WaterfallBarRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultCategoryItemRenderer" class="org.jfree.chart.renderer.DefaultCategoryItemRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer" class="org.jfree.chart.renderer.StackedBarRenderer"/>
+         <type name="org.jfree.chart.renderer.LineAndShapeRenderer" class="org.jfree.chart.renderer.LineAndShapeRenderer"/>
+         <type name="org.jfree.chart.renderer.BoxAndWhiskerRenderer" class="org.jfree.chart.renderer.BoxAndWhiskerRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.AreaRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.StackedAreaRenderer" class="org.jfree.chart.renderer.StackedAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.AreaRenderer" class="org.jfree.chart.renderer.AreaRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.BarRenderer3D" type-attribute="type">
+         <type name="org.jfree.chart.renderer.BarRenderer3D" class="org.jfree.chart.renderer.BarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer3D" class="org.jfree.chart.renderer.StackedBarRenderer3D"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.plot.XYPlot" type-attribute="type">
+         <type name="org.jfree.chart.plot.CombinedRangeXYPlot" class="org.jfree.chart.plot.CombinedRangeXYPlot"/>
+         <type name="org.jfree.chart.plot.XYPlot" class="org.jfree.chart.plot.XYPlot"/>
+         <type name="org.jfree.chart.plot.PeriodMarkerPlot" class="org.jfree.chart.plot.PeriodMarkerPlot"/>
+         <type name="org.jfree.chart.plot.CombinedDomainXYPlot" class="org.jfree.chart.plot.CombinedDomainXYPlot"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.AreaXYRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.AreaXYRenderer" class="org.jfree.chart.renderer.AreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedAreaXYRenderer" class="org.jfree.chart.renderer.StackedAreaXYRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.ValueAxis" type-attribute="type">
+         <type name="org.jfree.chart.axis.SymbolicAxis" class="org.jfree.chart.axis.SymbolicAxis"/>
+         <type name="org.jfree.chart.axis.NumberAxis" class="org.jfree.chart.axis.NumberAxis"/>
+         <type name="org.jfree.chart.axis.CyclicNumberAxis" class="org.jfree.chart.axis.CyclicNumberAxis"/>
+         <type name="org.jfree.chart.axis.NumberAxis3D" class="org.jfree.chart.axis.NumberAxis3D"/>
+         <type name="org.jfree.chart.axis.DateAxis" class="org.jfree.chart.axis.DateAxis"/>
+         <type name="org.jfree.chart.axis.LogarithmicAxis" class="org.jfree.chart.axis.LogarithmicAxis"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.needle.MeterNeedle" type-attribute="type">
+         <type name="org.jfree.chart.needle.WindNeedle" class="org.jfree.chart.needle.WindNeedle"/>
+         <type name="org.jfree.chart.needle.ShipNeedle" class="org.jfree.chart.needle.ShipNeedle"/>
+         <type name="org.jfree.chart.needle.LongNeedle" class="org.jfree.chart.needle.LongNeedle"/>
+         <type name="org.jfree.chart.needle.LineNeedle" class="org.jfree.chart.needle.LineNeedle"/>
+         <type name="org.jfree.chart.needle.ArrowNeedle" class="org.jfree.chart.needle.ArrowNeedle"/>
+         <type name="org.jfree.chart.needle.PlumNeedle" class="org.jfree.chart.needle.PlumNeedle"/>
+         <type name="org.jfree.chart.needle.PinNeedle" class="org.jfree.chart.needle.PinNeedle"/>
+         <type name="org.jfree.chart.needle.PointerNeedle" class="org.jfree.chart.needle.PointerNeedle"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.NumberTickUnit" type-attribute="type">
+         <type name="org.jfree.chart.axis.NumberTickUnit" class="org.jfree.chart.axis.NumberTickUnit"/>
+         <type name="org.jfree.chart.axis.SymbolicTickUnit" class="org.jfree.chart.axis.SymbolicTickUnit"/>
+     </mapping>
+     <mapping base-class="javax.swing.table.AbstractTableModel" type-attribute="type">
+         <type name="org.jfree.ui.about.SystemPropertiesTableModel" class="org.jfree.ui.about.SystemPropertiesTableModel"/>
+         <type name="org.jfree.ui.about.ContributorsTableModel" class="org.jfree.ui.about.ContributorsTableModel"/>
+         <type name="org.jfree.ui.about.LibraryTableModel" class="org.jfree.ui.about.LibraryTableModel"/>
+         <type name="org.jfree.data.XYDatasetTableModel" class="org.jfree.data.XYDatasetTableModel"/>
+         <type name="org.jfree.data.TimeSeriesTableModel" class="org.jfree.data.TimeSeriesTableModel"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.time.RegularTimePeriod" type-attribute="type">
+         <type name="org.jfree.data.time.Week" class="org.jfree.data.time.Week"/>
+         <type name="org.jfree.data.time.Quarter" class="org.jfree.data.time.Quarter"/>
+         <type name="org.jfree.data.time.Millisecond" class="org.jfree.data.time.Millisecond"/>
+         <type name="org.jfree.data.time.Second" class="org.jfree.data.time.Second"/>
+         <type name="org.jfree.data.time.FixedMillisecond" class="org.jfree.data.time.FixedMillisecond"/>
+         <type name="org.jfree.data.time.Year" class="org.jfree.data.time.Year"/>
+         <type name="org.jfree.data.time.Month" class="org.jfree.data.time.Month"/>
+         <type name="org.jfree.data.time.Minute" class="org.jfree.data.time.Minute"/>
+         <type name="org.jfree.data.time.Hour" class="org.jfree.data.time.Hour"/>
+         <type name="org.jfree.data.time.Day" class="org.jfree.data.time.Day"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.XYItemRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.XYDotRenderer" class="org.jfree.chart.renderer.XYDotRenderer"/>
+         <type name="org.jfree.chart.renderer.XYDifferenceRenderer" class="org.jfree.chart.renderer.XYDifferenceRenderer"/>
+         <type name="org.jfree.chart.renderer.StandardXYItemRenderer" class="org.jfree.chart.renderer.StandardXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.HighLowRenderer" class="org.jfree.chart.renderer.HighLowRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultXYItemRenderer" class="org.jfree.chart.renderer.DefaultXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.CandlestickRenderer" class="org.jfree.chart.renderer.CandlestickRenderer"/>
+         <type name="org.jfree.chart.renderer.XYStepRenderer" class="org.jfree.chart.renderer.XYStepRenderer"/>
+         <type name="org.jfree.chart.renderer.AreaXYRenderer" class="org.jfree.chart.renderer.AreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedAreaXYRenderer" class="org.jfree.chart.renderer.StackedAreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer" class="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer"/>
+         <type name="org.jfree.chart.renderer.YIntervalRenderer" class="org.jfree.chart.renderer.YIntervalRenderer"/>
+         <type name="org.jfree.chart.renderer.CyclicXYItemRenderer" class="org.jfree.chart.renderer.CyclicXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBubbleRenderer" class="org.jfree.chart.renderer.XYBubbleRenderer"/>
+         <type name="org.jfree.chart.renderer.XYStepAreaRenderer" class="org.jfree.chart.renderer.XYStepAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBarRenderer" class="org.jfree.chart.renderer.XYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.ClusteredXYBarRenderer" class="org.jfree.chart.renderer.ClusteredXYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.WindItemRenderer" class="org.jfree.chart.renderer.WindItemRenderer"/>
+         <type name="org.jfree.chart.renderer.SignalRenderer" class="org.jfree.chart.renderer.SignalRenderer"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.StandardXYItemRenderer" type-attribute="type">
+         <type name="org.jfree.chart.renderer.StandardXYItemRenderer" class="org.jfree.chart.renderer.StandardXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultXYItemRenderer" class="org.jfree.chart.renderer.DefaultXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.CyclicXYItemRenderer" class="org.jfree.chart.renderer.CyclicXYItemRenderer"/>
+     </mapping>
+     <mapping base-class="java.lang.Object" type-attribute="type">
+         <type name="org.jfree.ui.ExtensionFileFilter" class="org.jfree.ui.ExtensionFileFilter"/>
+         <type name="org.jfree.ui.about.SystemPropertiesTableModel" class="org.jfree.ui.about.SystemPropertiesTableModel"/>
+         <type name="org.jfree.ui.about.ContributorsTableModel" class="org.jfree.ui.about.ContributorsTableModel"/>
+         <type name="org.jfree.ui.about.SystemProperties" class="org.jfree.ui.about.SystemProperties"/>
+         <type name="org.jfree.base.Library" class="org.jfree.base.Library"/>
+         <type name="org.jfree.ui.about.Contributor" class="org.jfree.ui.about.Contributor"/>
+         <type name="org.jfree.ui.about.LibraryTableModel" class="org.jfree.ui.about.LibraryTableModel"/>
+         <type name="org.jfree.ui.about.ProjectInfo" class="org.jfree.ui.about.ProjectInfo"/>
+         <type name="org.jfree.ui.about.Licences" class="org.jfree.ui.about.Licences"/>
+         <type name="org.jfree.ui.BevelArrowIcon" class="org.jfree.ui.BevelArrowIcon"/>
+         <type name="org.jfree.ui.Layer" class="org.jfree.ui.Layer"/>
+         <type name="org.jfree.ui.Align" class="org.jfree.ui.Align"/>
+         <type name="org.jfree.ui.RefineryUtilities" class="org.jfree.ui.RefineryUtilities"/>
+         <type name="org.jfree.ui.Size2D" class="org.jfree.ui.Size2D"/>
+         <type name="org.jfree.ui.RectangleEdge" class="org.jfree.ui.RectangleEdge"/>
+         <type name="org.jfree.ui.RectangleAnchor" class="org.jfree.ui.RectangleAnchor"/>
+         <type name="org.jfree.ui.SortableTableHeaderListener" class="org.jfree.ui.SortableTableHeaderListener"/>
+         <type name="org.jfree.ui.BoundsAnchor" class="org.jfree.ui.BoundsAnchor"/>
+         <type name="org.jfree.ui.StandardGradientPaintTransformer" class="org.jfree.ui.StandardGradientPaintTransformer"/>
+         <type name="org.jfree.ui.TextAnchorTable" class="org.jfree.ui.TextAnchorTable"/>
+         <type name="org.jfree.ui.TextAnchor" class="org.jfree.ui.TextAnchor"/>
+         <type name="org.jfree.ui.FloatDimension" class="org.jfree.ui.FloatDimension"/>
+         <type name="org.jfree.ui.GradientPaintTransformType" class="org.jfree.ui.GradientPaintTransformType"/>
+         <type name="org.jfree.ui.SortButtonRenderer" class="org.jfree.ui.SortButtonRenderer"/>
+         <type name="org.jfree.data.DefaultKeyedValues" class="org.jfree.data.DefaultKeyedValues"/>
+         <type name="org.jfree.data.time.Week" class="org.jfree.data.time.Week"/>
+         <type name="org.jfree.data.time.Quarter" class="org.jfree.data.time.Quarter"/>
+         <type name="org.jfree.data.time.TimePeriodValue" class="org.jfree.data.time.TimePeriodValue"/>
+         <type name="org.jfree.data.time.TimePeriodValues" class="org.jfree.data.time.TimePeriodValues"/>
+         <type name="org.jfree.data.time.Millisecond" class="org.jfree.data.time.Millisecond"/>
+         <type name="org.jfree.data.time.Second" class="org.jfree.data.time.Second"/>
+         <type name="org.jfree.data.time.TimeSeriesCollection" class="org.jfree.data.time.TimeSeriesCollection"/>
+         <type name="org.jfree.data.time.TimePeriodAnchor" class="org.jfree.data.time.TimePeriodAnchor"/>
+         <type name="org.jfree.data.time.FixedMillisecond" class="org.jfree.data.time.FixedMillisecond"/>
+         <type name="org.jfree.data.time.TimeSeriesDataItem" class="org.jfree.data.time.TimeSeriesDataItem"/>
+         <type name="org.jfree.data.time.SimpleTimePeriod" class="org.jfree.data.time.SimpleTimePeriod"/>
+         <type name="org.jfree.data.time.Year" class="org.jfree.data.time.Year"/>
+         <type name="org.jfree.data.time.TimePeriodValuesCollection" class="org.jfree.data.time.TimePeriodValuesCollection"/>
+         <type name="org.jfree.data.time.TimeSeries" class="org.jfree.data.time.TimeSeries"/>
+         <type name="org.jfree.data.time.Month" class="org.jfree.data.time.Month"/>
+         <type name="org.jfree.data.time.Minute" class="org.jfree.data.time.Minute"/>
+         <type name="org.jfree.data.time.Hour" class="org.jfree.data.time.Hour"/>
+         <type name="org.jfree.data.time.Day" class="org.jfree.data.time.Day"/>
+         <type name="org.jfree.data.time.DynamicTimeSeriesCollection" class="org.jfree.data.time.DynamicTimeSeriesCollection"/>
+         <type name="org.jfree.data.MovingAverage" class="org.jfree.data.MovingAverage"/>
+         <type name="org.jfree.data.DefaultPieDataset" class="org.jfree.data.DefaultPieDataset"/>
+         <type name="org.jfree.data.DataUtilities" class="org.jfree.data.DataUtilities"/>
+         <type name="org.jfree.data.DefaultTableXYDataset" class="org.jfree.data.DefaultTableXYDataset"/>
+         <type name="org.jfree.data.DefaultHighLowDataset" class="org.jfree.data.DefaultHighLowDataset"/>
+         <type name="org.jfree.data.SubSeriesDataset" class="org.jfree.data.SubSeriesDataset"/>
+         <type name="org.jfree.data.DefaultIntervalCategoryDataset" class="org.jfree.data.DefaultIntervalCategoryDataset"/>
+         <type name="org.jfree.data.DefaultKeyedValuesDataset" class="org.jfree.data.DefaultKeyedValuesDataset"/>
+         <type name="org.jfree.data.gantt.TaskSeriesCollection" class="org.jfree.data.gantt.TaskSeriesCollection"/>
+         <type name="org.jfree.data.gantt.TaskSeries" class="org.jfree.data.gantt.TaskSeries"/>
+         <type name="org.jfree.data.gantt.Task" class="org.jfree.data.gantt.Task"/>
+         <type name="org.jfree.data.Statistics" class="org.jfree.data.Statistics"/>
+         <type name="org.jfree.data.Series" class="org.jfree.data.Series"/>
+         <type name="org.jfree.data.Range" class="org.jfree.data.Range"/>
+         <type name="org.jfree.data.KeyedValueComparatorType" class="org.jfree.data.KeyedValueComparatorType"/>
+         <type name="org.jfree.data.NormalizedMatrixSeries" class="org.jfree.data.NormalizedMatrixSeries"/>
+         <type name="org.jfree.data.LineFunction2D" class="org.jfree.data.LineFunction2D"/>
+         <type name="org.jfree.data.DateRange" class="org.jfree.data.DateRange"/>
+         <type name="org.jfree.data.XYDataItem" class="org.jfree.data.XYDataItem"/>
+         <type name="org.jfree.data.MatrixSeriesCollection" class="org.jfree.data.MatrixSeriesCollection"/>
+         <type name="org.jfree.data.KeyedObjects" class="org.jfree.data.KeyedObjects"/>
+         <type name="org.jfree.data.DatasetGroup" class="org.jfree.data.DatasetGroup"/>
+         <type name="org.jfree.data.CategoryToPieDataset" class="org.jfree.data.CategoryToPieDataset"/>
+         <type name="org.jfree.data.PowerFunction2D" class="org.jfree.data.PowerFunction2D"/>
+         <type name="org.jfree.data.JDBCPieDataset" class="org.jfree.data.JDBCPieDataset"/>
+         <type name="org.jfree.data.DefaultKeyedValue" class="org.jfree.data.DefaultKeyedValue"/>
+         <type name="org.jfree.data.MatrixSeries" class="org.jfree.data.MatrixSeries"/>
+         <type name="org.jfree.data.DefaultKeyedValues2DDataset" class="org.jfree.data.DefaultKeyedValues2DDataset"/>
+         <type name="org.jfree.data.XYDataPair" class="org.jfree.data.XYDataPair"/>
+         <type name="org.jfree.data.NonGridContourDataset" class="org.jfree.data.NonGridContourDataset"/>
+         <type name="org.jfree.data.DefaultKeyedValueDataset" class="org.jfree.data.DefaultKeyedValueDataset"/>
+         <type name="org.jfree.data.DefaultMeterDataset" class="org.jfree.data.DefaultMeterDataset"/>
+         <type name="org.jfree.data.JDBCCategoryDataset" class="org.jfree.data.JDBCCategoryDataset"/>
+         <type name="org.jfree.data.KeyedObjects2D" class="org.jfree.data.KeyedObjects2D"/>
+         <type name="org.jfree.data.HistogramDataset" class="org.jfree.data.HistogramDataset"/>
+         <type name="org.jfree.data.HistogramDataset$HistogramType" class="org.jfree.data.HistogramDataset$HistogramType"/>
+         <type name="org.jfree.data.KeyedValueComparator" class="org.jfree.data.KeyedValueComparator"/>
+         <type name="org.jfree.data.DefaultKeyedValues2D" class="org.jfree.data.DefaultKeyedValues2D"/>
+         <type name="org.jfree.data.DefaultWindDataset" class="org.jfree.data.DefaultWindDataset"/>
+         <type name="org.jfree.data.statistics.Statistics" class="org.jfree.data.statistics.Statistics"/>
+         <type name="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset"/>
+         <type name="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset"/>
+         <type name="org.jfree.data.statistics.BoxAndWhiskerItem" class="org.jfree.data.statistics.BoxAndWhiskerItem"/>
+         <type name="org.jfree.data.statistics.BoxAndWhiskerCalculator" class="org.jfree.data.statistics.BoxAndWhiskerCalculator"/>
+         <type name="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset"/>
+         <type name="org.jfree.data.MeanAndStandardDeviation" class="org.jfree.data.MeanAndStandardDeviation"/>
+         <type name="org.jfree.data.XYSeriesCollection" class="org.jfree.data.XYSeriesCollection"/>
+         <type name="org.jfree.data.XYDatasetTableModel" class="org.jfree.data.XYDatasetTableModel"/>
+         <type name="org.jfree.data.DefaultContourDataset" class="org.jfree.data.DefaultContourDataset"/>
+         <type name="org.jfree.data.DefaultValueDataset" class="org.jfree.data.DefaultValueDataset"/>
+         <type name="org.jfree.data.DefaultCategoryDataset" class="org.jfree.data.DefaultCategoryDataset"/>
+         <type name="org.jfree.data.XYSeries" class="org.jfree.data.XYSeries"/>
+         <type name="org.jfree.data.CombinedDataset" class="org.jfree.data.CombinedDataset"/>
+         <type name="org.jfree.data.TimeSeriesTableModel" class="org.jfree.data.TimeSeriesTableModel"/>
+         <type name="org.jfree.data.KeyedObject" class="org.jfree.data.KeyedObject"/>
+         <type name="java.lang.Object" class="java.lang.Object"/>
+         <type name="org.jfree.data.JDBCXYDataset" class="org.jfree.data.JDBCXYDataset"/>
+         <type name="org.jfree.data.DatasetUtilities" class="org.jfree.data.DatasetUtilities"/>
+         <type name="org.jfree.date.DayOfWeekInMonthRule" class="org.jfree.date.DayOfWeekInMonthRule"/>
+         <type name="org.jfree.date.RelativeDayOfWeekRule" class="org.jfree.date.RelativeDayOfWeekRule"/>
+         <type name="org.jfree.date.DayAndMonthRule" class="org.jfree.date.DayAndMonthRule"/>
+         <type name="org.jfree.date.EasterSundayRule" class="org.jfree.date.EasterSundayRule"/>
+         <type name="org.jfree.date.SerialDateUtilities" class="org.jfree.date.SerialDateUtilities"/>
+         <type name="org.jfree.date.DateUtilities" class="org.jfree.date.DateUtilities"/>
+         <type name="org.jfree.date.SpreadsheetDate" class="org.jfree.date.SpreadsheetDate"/>
+         <type name="org.jfree.text.TextFragment" class="org.jfree.text.TextFragment"/>
+         <type name="org.jfree.text.TextBlock" class="org.jfree.text.TextBlock"/>
+         <type name="org.jfree.text.TextBlockAnchor" class="org.jfree.text.TextBlockAnchor"/>
+         <type name="org.jfree.text.TextLine" class="org.jfree.text.TextLine"/>
+         <type name="org.jfree.JCommon" class="org.jfree.JCommon"/>
+         <type name="org.jfree.chart.MeterLegend" class="org.jfree.chart.MeterLegend"/>
+         <type name="org.jfree.chart.LegendItemCollection" class="org.jfree.chart.LegendItemCollection"/>
+         <type name="org.jfree.chart.axis.CategoryTick" class="org.jfree.chart.axis.CategoryTick"/>
+         <type name="org.jfree.chart.axis.SymbolicAxis" class="org.jfree.chart.axis.SymbolicAxis"/>
+         <type name="org.jfree.chart.axis.DateTickUnit" class="org.jfree.chart.axis.DateTickUnit"/>
+         <type name="org.jfree.chart.axis.DateTickMarkPosition" class="org.jfree.chart.axis.DateTickMarkPosition"/>
+         <type name="org.jfree.chart.axis.StandardTickUnitSource" class="org.jfree.chart.axis.StandardTickUnitSource"/>
+         <type name="org.jfree.chart.axis.CategoryAnchor" class="org.jfree.chart.axis.CategoryAnchor"/>
+         <type name="org.jfree.chart.axis.CategoryAxis" class="org.jfree.chart.axis.CategoryAxis"/>
+         <type name="org.jfree.chart.axis.CategoryLabelPosition" class="org.jfree.chart.axis.CategoryLabelPosition"/>
+         <type name="org.jfree.chart.axis.NumberTick" class="org.jfree.chart.axis.NumberTick"/>
+         <type name="org.jfree.chart.axis.TickUnits" class="org.jfree.chart.axis.TickUnits"/>
+         <type name="org.jfree.chart.axis.NumberAxis" class="org.jfree.chart.axis.NumberAxis"/>
+         <type name="org.jfree.chart.axis.MarkerAxisBand" class="org.jfree.chart.axis.MarkerAxisBand"/>
+         <type name="org.jfree.chart.axis.NumberTickUnit" class="org.jfree.chart.axis.NumberTickUnit"/>
+         <type name="org.jfree.chart.axis.SymbolicTickUnit" class="org.jfree.chart.axis.SymbolicTickUnit"/>
+         <type name="org.jfree.chart.axis.ColorBar" class="org.jfree.chart.axis.ColorBar"/>
+         <type name="org.jfree.chart.axis.CategoryAxis3D" class="org.jfree.chart.axis.CategoryAxis3D"/>
+         <type name="org.jfree.chart.axis.AxisState" class="org.jfree.chart.axis.AxisState"/>
+         <type name="org.jfree.chart.axis.AxisLocation" class="org.jfree.chart.axis.AxisLocation"/>
+         <type name="org.jfree.chart.axis.CyclicNumberAxis" class="org.jfree.chart.axis.CyclicNumberAxis"/>
+         <type name="org.jfree.chart.axis.NumberAxis3D" class="org.jfree.chart.axis.NumberAxis3D"/>
+         <type name="org.jfree.chart.axis.AxisSpace" class="org.jfree.chart.axis.AxisSpace"/>
+         <type name="org.jfree.chart.axis.SegmentedTimeline" class="org.jfree.chart.axis.SegmentedTimeline"/>
+         <type name="org.jfree.chart.axis.DateTick" class="org.jfree.chart.axis.DateTick"/>
+         <type name="org.jfree.chart.axis.AxisCollection" class="org.jfree.chart.axis.AxisCollection"/>
+         <type name="org.jfree.chart.axis.DateAxis" class="org.jfree.chart.axis.DateAxis"/>
+         <type name="java.util.Date" class="java.util.Date"/>
+         <type name="org.jfree.chart.axis.LogarithmicAxis" class="org.jfree.chart.axis.LogarithmicAxis"/>
+         <type name="org.jfree.chart.plot.CombinedRangeXYPlot" class="org.jfree.chart.plot.CombinedRangeXYPlot"/>
+         <type name="org.jfree.chart.plot.DatasetRenderingOrder" class="org.jfree.chart.plot.DatasetRenderingOrder"/>
+         <type name="org.jfree.chart.plot.FastScatterPlot" class="org.jfree.chart.plot.FastScatterPlot"/>
+         <type name="org.jfree.chart.plot.DefaultDrawingSupplier" class="org.jfree.chart.plot.DefaultDrawingSupplier"/>
+         <type name="org.jfree.chart.plot.ContourPlot" class="org.jfree.chart.plot.ContourPlot"/>
+         <type name="org.jfree.chart.ClipPath" class="org.jfree.chart.ClipPath"/>
+         <type name="org.jfree.chart.plot.CombinedDomainCategoryPlot" class="org.jfree.chart.plot.CombinedDomainCategoryPlot"/>
+         <type name="org.jfree.chart.plot.ThermometerPlot" class="org.jfree.chart.plot.ThermometerPlot"/>
+         <type name="org.jfree.chart.Spacer" class="org.jfree.chart.Spacer"/>
+         <type name="java.awt.Font" class="java.awt.Font"/>
+         <type name="org.jfree.chart.plot.PlotRenderingInfo" class="org.jfree.chart.plot.PlotRenderingInfo"/>
+         <type name="org.jfree.chart.plot.Pie3DPlot" class="org.jfree.chart.plot.Pie3DPlot"/>
+         <type name="org.jfree.chart.plot.PiePlot" class="org.jfree.chart.plot.PiePlot"/>
+         <type name="org.jfree.chart.plot.PlotOrientation" class="org.jfree.chart.plot.PlotOrientation"/>
+         <type name="org.jfree.chart.plot.CategoryPlot" class="org.jfree.chart.plot.CategoryPlot"/>
+         <type name="org.jfree.util.SortOrder" class="org.jfree.util.SortOrder"/>
+         <type name="org.jfree.chart.plot.MeterPlot" class="org.jfree.chart.plot.MeterPlot"/>
+         <type name="org.jfree.chart.plot.XYPlot" class="org.jfree.chart.plot.XYPlot"/>
+         <type name="org.jfree.chart.plot.CompassPlot" class="org.jfree.chart.plot.CompassPlot"/>
+         <type name="org.jfree.chart.plot.DialShape" class="org.jfree.chart.plot.DialShape"/>
+         <type name="org.jfree.chart.plot.PeriodMarkerPlot" class="org.jfree.chart.plot.PeriodMarkerPlot"/>
+         <type name="org.jfree.chart.plot.CombinedDomainXYPlot" class="org.jfree.chart.plot.CombinedDomainXYPlot"/>
+         <type name="org.jfree.chart.plot.CombinedRangeCategoryPlot" class="org.jfree.chart.plot.CombinedRangeCategoryPlot"/>
+         <type name="org.jfree.chart.plot.PlotState" class="org.jfree.chart.plot.PlotState"/>
+         <type name="org.jfree.chart.urls.StandardXYZURLGenerator" class="org.jfree.chart.urls.StandardXYZURLGenerator"/>
+         <type name="org.jfree.chart.urls.StandardXYURLGenerator" class="org.jfree.chart.urls.StandardXYURLGenerator"/>
+         <type name="org.jfree.chart.urls.StandardPieURLGenerator" class="org.jfree.chart.urls.StandardPieURLGenerator"/>
+         <type name="org.jfree.chart.urls.StandardCategoryURLGenerator" class="org.jfree.chart.urls.StandardCategoryURLGenerator"/>
+         <type name="org.jfree.chart.urls.CustomXYURLGenerator" class="org.jfree.chart.urls.CustomXYURLGenerator"/>
+         <type name="org.jfree.chart.urls.TimeSeriesURLGenerator" class="org.jfree.chart.urls.TimeSeriesURLGenerator"/>
+         <type name="org.jfree.chart.DefaultShapeFactory" class="org.jfree.chart.DefaultShapeFactory"/>
+         <type name="org.jfree.chart.Marker" class="org.jfree.chart.Marker"/>
+         <type name="org.jfree.chart.MarkerLabelPosition" class="org.jfree.chart.MarkerLabelPosition"/>
+         <type name="org.jfree.chart.renderer.Outlier" class="org.jfree.chart.renderer.Outlier"/>
+         <type name="org.jfree.chart.renderer.RangeType" class="org.jfree.chart.renderer.RangeType"/>
+         <type name="org.jfree.chart.renderer.XYDotRenderer" class="org.jfree.chart.renderer.XYDotRenderer"/>
+         <type name="org.jfree.chart.renderer.IntervalBarRenderer" class="org.jfree.chart.renderer.IntervalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.GanttRenderer" class="org.jfree.chart.renderer.GanttRenderer"/>
+         <type name="org.jfree.chart.renderer.BarRenderer" class="org.jfree.chart.renderer.BarRenderer"/>
+         <type name="org.jfree.chart.renderer.ItemLabelPosition" class="org.jfree.chart.renderer.ItemLabelPosition"/>
+         <type name="org.jfree.chart.renderer.MinMaxCategoryRenderer" class="org.jfree.chart.renderer.MinMaxCategoryRenderer"/>
+         <type name="org.jfree.chart.renderer.OutlierListCollection" class="org.jfree.chart.renderer.OutlierListCollection"/>
+         <type name="org.jfree.chart.renderer.XYDifferenceRenderer" class="org.jfree.chart.renderer.XYDifferenceRenderer"/>
+         <type name="org.jfree.chart.renderer.CategoryItemRendererState" class="org.jfree.chart.renderer.CategoryItemRendererState"/>
+         <type name="org.jfree.chart.renderer.StandardXYItemRenderer" class="org.jfree.chart.renderer.StandardXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.HighLowRenderer" class="org.jfree.chart.renderer.HighLowRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultXYItemRenderer" class="org.jfree.chart.renderer.DefaultXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedAreaRenderer" class="org.jfree.chart.renderer.StackedAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.CandlestickRenderer" class="org.jfree.chart.renderer.CandlestickRenderer"/>
+         <type name="org.jfree.chart.renderer.OutlierList" class="org.jfree.chart.renderer.OutlierList"/>
+         <type name="org.jfree.chart.renderer.BarRenderer3D" class="org.jfree.chart.renderer.BarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.XYStepRenderer" class="org.jfree.chart.renderer.XYStepRenderer"/>
+         <type name="org.jfree.chart.renderer.AreaXYRenderer" class="org.jfree.chart.renderer.AreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.StatisticalBarRenderer" class="org.jfree.chart.renderer.StatisticalBarRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer3D" class="org.jfree.chart.renderer.StackedBarRenderer3D"/>
+         <type name="org.jfree.chart.renderer.StackedAreaXYRenderer" class="org.jfree.chart.renderer.StackedAreaXYRenderer"/>
+         <type name="org.jfree.chart.renderer.CategoryURLGeneratorTable" class="org.jfree.chart.renderer.CategoryURLGeneratorTable"/>
+         <type name="org.jfree.chart.renderer.LayeredBarRenderer" class="org.jfree.chart.renderer.LayeredBarRenderer"/>
+         <type name="org.jfree.chart.renderer.XYItemRendererState" class="org.jfree.chart.renderer.XYItemRendererState"/>
+         <type name="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer" class="org.jfree.chart.renderer.XYBoxAndWhiskerRenderer"/>
+         <type name="org.jfree.chart.renderer.YIntervalRenderer" class="org.jfree.chart.renderer.YIntervalRenderer"/>
+         <type name="org.jfree.chart.renderer.ItemLabelAnchorTable" class="org.jfree.chart.renderer.ItemLabelAnchorTable"/>
+         <type name="org.jfree.chart.renderer.AreaRenderer" class="org.jfree.chart.renderer.AreaRenderer"/>
+         <type name="org.jfree.chart.renderer.ItemLabelAnchor" class="org.jfree.chart.renderer.ItemLabelAnchor"/>
+         <type name="org.jfree.chart.renderer.RendererState" class="org.jfree.chart.renderer.RendererState"/>
+         <type name="org.jfree.chart.renderer.CyclicXYItemRenderer" class="org.jfree.chart.renderer.CyclicXYItemRenderer"/>
+         <type name="org.jfree.chart.renderer.WaterfallBarRenderer" class="org.jfree.chart.renderer.WaterfallBarRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBubbleRenderer" class="org.jfree.chart.renderer.XYBubbleRenderer"/>
+         <type name="org.jfree.chart.renderer.XYStepAreaRenderer" class="org.jfree.chart.renderer.XYStepAreaRenderer"/>
+         <type name="org.jfree.chart.renderer.DefaultCategoryItemRenderer" class="org.jfree.chart.renderer.DefaultCategoryItemRenderer"/>
+         <type name="org.jfree.chart.renderer.StackedBarRenderer" class="org.jfree.chart.renderer.StackedBarRenderer"/>
+         <type name="org.jfree.chart.renderer.XYBarRenderer" class="org.jfree.chart.renderer.XYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.LineAndShapeRenderer" class="org.jfree.chart.renderer.LineAndShapeRenderer"/>
+         <type name="org.jfree.chart.renderer.ClusteredXYBarRenderer" class="org.jfree.chart.renderer.ClusteredXYBarRenderer"/>
+         <type name="org.jfree.chart.renderer.WindItemRenderer" class="org.jfree.chart.renderer.WindItemRenderer"/>
+         <type name="org.jfree.chart.renderer.HighLow" class="org.jfree.chart.renderer.HighLow"/>
+         <type name="org.jfree.chart.renderer.SignalRenderer" class="org.jfree.chart.renderer.SignalRenderer"/>
+         <type name="org.jfree.chart.renderer.BoxAndWhiskerRenderer" class="org.jfree.chart.renderer.BoxAndWhiskerRenderer"/>
+         <type name="org.jfree.chart.ChartRenderingInfo" class="org.jfree.chart.ChartRenderingInfo"/>
+         <type name="org.jfree.chart.IntervalMarker" class="org.jfree.chart.IntervalMarker"/>
+         <type name="org.jfree.chart.entity.CategoryItemEntity" class="org.jfree.chart.entity.CategoryItemEntity"/>
+         <type name="org.jfree.chart.entity.LegendItemEntity" class="org.jfree.chart.entity.LegendItemEntity"/>
+         <type name="org.jfree.chart.entity.ChartEntity" class="org.jfree.chart.entity.ChartEntity"/>
+         <type name="org.jfree.chart.entity.PieSectionEntity" class="org.jfree.chart.entity.PieSectionEntity"/>
+         <type name="org.jfree.chart.entity.XYItemEntity" class="org.jfree.chart.entity.XYItemEntity"/>
+         <type name="org.jfree.chart.entity.StandardEntityCollection" class="org.jfree.chart.entity.StandardEntityCollection"/>
+         <type name="org.jfree.chart.entity.ContourEntity" class="org.jfree.chart.entity.ContourEntity"/>
+         <type name="org.jfree.chart.ImageTitle" class="org.jfree.chart.ImageTitle"/>
+         <type name="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator"/>
+         <type name="org.jfree.chart.labels.StandardXYZToolTipGenerator" class="org.jfree.chart.labels.StandardXYZToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.StandardPieItemLabelGenerator" class="org.jfree.chart.labels.StandardPieItemLabelGenerator"/>
+         <type name="org.jfree.chart.labels.HighLowToolTipGenerator" class="org.jfree.chart.labels.HighLowToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.StandardPieToolTipGenerator" class="org.jfree.chart.labels.StandardPieToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator" class="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator"/>
+         <type name="org.jfree.chart.labels.StandardContourToolTipGenerator" class="org.jfree.chart.labels.StandardContourToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.TimeSeriesToolTipGenerator" class="org.jfree.chart.labels.TimeSeriesToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.SymbolicXYToolTipGenerator" class="org.jfree.chart.labels.SymbolicXYToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.CustomXYToolTipGenerator" class="org.jfree.chart.labels.CustomXYToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.StandardXYToolTipGenerator" class="org.jfree.chart.labels.StandardXYToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator" class="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator"/>
+         <type name="org.jfree.chart.needle.WindNeedle" class="org.jfree.chart.needle.WindNeedle"/>
+         <type name="org.jfree.chart.needle.ShipNeedle" class="org.jfree.chart.needle.ShipNeedle"/>
+         <type name="org.jfree.chart.needle.LongNeedle" class="org.jfree.chart.needle.LongNeedle"/>
+         <type name="org.jfree.chart.needle.LineNeedle" class="org.jfree.chart.needle.LineNeedle"/>
+         <type name="org.jfree.chart.needle.ArrowNeedle" class="org.jfree.chart.needle.ArrowNeedle"/>
+         <type name="org.jfree.chart.needle.PlumNeedle" class="org.jfree.chart.needle.PlumNeedle"/>
+         <type name="org.jfree.chart.needle.PinNeedle" class="org.jfree.chart.needle.PinNeedle"/>
+         <type name="org.jfree.chart.needle.PointerNeedle" class="org.jfree.chart.needle.PointerNeedle"/>
+         <type name="org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator" class="org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator"/>
+         <type name="org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator" class="org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator"/>
+         <type name="org.jfree.chart.imagemap.StandardURLTagFragmentGenerator" class="org.jfree.chart.imagemap.StandardURLTagFragmentGenerator"/>
+         <type name="org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator" class="org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator"/>
+         <type name="org.jfree.chart.ChartMouseEvent" class="org.jfree.chart.ChartMouseEvent"/>
+         <type name="org.jfree.chart.DateTitle" class="org.jfree.chart.DateTitle"/>
+         <type name="org.jfree.chart.LegendItem" class="org.jfree.chart.LegendItem"/>
+         <type name="org.jfree.chart.TextTitle" class="org.jfree.chart.TextTitle"/>
+         <type name="org.jfree.chart.JFreeChart" class="org.jfree.chart.JFreeChart"/>
+         <type name="java.awt.RenderingHints" class="java.awt.RenderingHints"/>
+         <type name="org.jfree.chart.DrawableLegendItem" class="org.jfree.chart.DrawableLegendItem"/>
+         <type name="org.jfree.chart.SeriesShapeFactory" class="org.jfree.chart.SeriesShapeFactory"/>
+         <type name="org.jfree.chart.annotations.XYTextAnnotation" class="org.jfree.chart.annotations.XYTextAnnotation"/>
+         <type name="org.jfree.chart.annotations.CategoryTextAnnotation" class="org.jfree.chart.annotations.CategoryTextAnnotation"/>
+         <type name="org.jfree.chart.annotations.XYShapeAnnotation" class="org.jfree.chart.annotations.XYShapeAnnotation"/>
+         <type name="org.jfree.chart.annotations.XYDrawableAnnotation" class="org.jfree.chart.annotations.XYDrawableAnnotation"/>
+         <type name="org.jfree.chart.annotations.XYLineAnnotation" class="org.jfree.chart.annotations.XYLineAnnotation"/>
+         <type name="org.jfree.chart.annotations.XYPointerAnnotation" class="org.jfree.chart.annotations.XYPointerAnnotation"/>
+         <type name="org.jfree.chart.annotations.TextAnnotation" class="org.jfree.chart.annotations.TextAnnotation"/>
+         <type name="org.jfree.chart.CrosshairInfo" class="org.jfree.chart.CrosshairInfo"/>
+         <type name="org.jfree.chart.StandardLegend" class="org.jfree.chart.StandardLegend"/>
+         <type name="org.jfree.chart.StandardLegendItemLayout" class="org.jfree.chart.StandardLegendItemLayout"/>
+         <type name="org.jfree.util.ObjectTable" class="org.jfree.util.ObjectTable"/>
+         <type name="java.awt.Insets" class="java.awt.Insets"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.TickUnit" type-attribute="type">
+         <type name="org.jfree.chart.axis.DateTickUnit" class="org.jfree.chart.axis.DateTickUnit"/>
+         <type name="org.jfree.chart.axis.NumberTickUnit" class="org.jfree.chart.axis.NumberTickUnit"/>
+         <type name="org.jfree.chart.axis.SymbolicTickUnit" class="org.jfree.chart.axis.SymbolicTickUnit"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.urls.StandardXYURLGenerator" type-attribute="type">
+         <type name="org.jfree.chart.urls.StandardXYZURLGenerator" class="org.jfree.chart.urls.StandardXYZURLGenerator"/>
+         <type name="org.jfree.chart.urls.StandardXYURLGenerator" class="org.jfree.chart.urls.StandardXYURLGenerator"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.labels.StandardXYToolTipGenerator" type-attribute="type">
+         <type name="org.jfree.chart.labels.StandardXYZToolTipGenerator" class="org.jfree.chart.labels.StandardXYZToolTipGenerator"/>
+         <type name="org.jfree.chart.labels.StandardXYToolTipGenerator" class="org.jfree.chart.labels.StandardXYToolTipGenerator"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.XYDataset" type-attribute="type">
+         <type name="org.jfree.data.time.TimeSeriesCollection" class="org.jfree.data.time.TimeSeriesCollection"/>
+         <type name="org.jfree.data.time.TimePeriodValuesCollection" class="org.jfree.data.time.TimePeriodValuesCollection"/>
+         <type name="org.jfree.data.time.DynamicTimeSeriesCollection" class="org.jfree.data.time.DynamicTimeSeriesCollection"/>
+         <type name="org.jfree.data.DefaultTableXYDataset" class="org.jfree.data.DefaultTableXYDataset"/>
+         <type name="org.jfree.data.DefaultHighLowDataset" class="org.jfree.data.DefaultHighLowDataset"/>
+         <type name="org.jfree.data.SubSeriesDataset" class="org.jfree.data.SubSeriesDataset"/>
+         <type name="org.jfree.data.MatrixSeriesCollection" class="org.jfree.data.MatrixSeriesCollection"/>
+         <type name="org.jfree.data.NonGridContourDataset" class="org.jfree.data.NonGridContourDataset"/>
+         <type name="org.jfree.data.HistogramDataset" class="org.jfree.data.HistogramDataset"/>
+         <type name="org.jfree.data.DefaultWindDataset" class="org.jfree.data.DefaultWindDataset"/>
+         <type name="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset"/>
+         <type name="org.jfree.data.XYSeriesCollection" class="org.jfree.data.XYSeriesCollection"/>
+         <type name="org.jfree.data.DefaultContourDataset" class="org.jfree.data.DefaultContourDataset"/>
+         <type name="org.jfree.data.CombinedDataset" class="org.jfree.data.CombinedDataset"/>
+         <type name="org.jfree.data.JDBCXYDataset" class="org.jfree.data.JDBCXYDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.data.CategoryDataset" type-attribute="type">
+         <type name="org.jfree.data.DefaultIntervalCategoryDataset" class="org.jfree.data.DefaultIntervalCategoryDataset"/>
+         <type name="org.jfree.data.gantt.TaskSeriesCollection" class="org.jfree.data.gantt.TaskSeriesCollection"/>
+         <type name="org.jfree.data.DefaultKeyedValues2DDataset" class="org.jfree.data.DefaultKeyedValues2DDataset"/>
+         <type name="org.jfree.data.JDBCCategoryDataset" class="org.jfree.data.JDBCCategoryDataset"/>
+         <type name="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset"/>
+         <type name="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset"/>
+         <type name="org.jfree.data.DefaultCategoryDataset" class="org.jfree.data.DefaultCategoryDataset"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.renderer.RendererState" type-attribute="type">
+         <type name="org.jfree.chart.renderer.CategoryItemRendererState" class="org.jfree.chart.renderer.CategoryItemRendererState"/>
+         <type name="org.jfree.chart.renderer.XYItemRendererState" class="org.jfree.chart.renderer.XYItemRendererState"/>
+         <type name="org.jfree.chart.renderer.RendererState" class="org.jfree.chart.renderer.RendererState"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.NumberAxis" type-attribute="type">
+         <type name="org.jfree.chart.axis.SymbolicAxis" class="org.jfree.chart.axis.SymbolicAxis"/>
+         <type name="org.jfree.chart.axis.NumberAxis" class="org.jfree.chart.axis.NumberAxis"/>
+         <type name="org.jfree.chart.axis.CyclicNumberAxis" class="org.jfree.chart.axis.CyclicNumberAxis"/>
+         <type name="org.jfree.chart.axis.NumberAxis3D" class="org.jfree.chart.axis.NumberAxis3D"/>
+         <type name="org.jfree.chart.axis.LogarithmicAxis" class="org.jfree.chart.axis.LogarithmicAxis"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.labels.PieItemLabelGenerator" type-attribute="type">
+         <type name="org.jfree.chart.labels.StandardPieItemLabelGenerator" class="org.jfree.chart.labels.StandardPieItemLabelGenerator"/>
+         <type name="org.jfree.chart.labels.StandardPieToolTipGenerator" class="org.jfree.chart.labels.StandardPieToolTipGenerator"/>
+     </mapping>
+     <mapping base-class="org.jfree.chart.axis.Tick" type-attribute="type">
+         <type name="org.jfree.chart.axis.CategoryTick" class="org.jfree.chart.axis.CategoryTick"/>
+         <type name="org.jfree.chart.axis.NumberTick" class="org.jfree.chart.axis.NumberTick"/>
+         <type name="org.jfree.chart.axis.DateTick" class="org.jfree.chart.axis.DateTick"/>
+     </mapping>
+ </objects>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/objectdescription.xml jfreechart/bin/org/jfree/chart/xml/objectdescription.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/objectdescription.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/objectdescription.xml	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,56 ----
+ <!-- deprecated now -->
+ <objects>
+     <!--
+     if register name is defined, then the object will be registered at the
+     root parser by this name while it is constructed. Other objects can
+     reference to this name.
+     -->
+     <object class="org.jfree.chart.JFreeChart" register-name="key::chart">
+         <constructor>
+             <!--
+             instead of tagname a logical name, as the various plots can become
+             very unhandy later
+             -->
+             <parameter class="org.jfree.chart.plot.Plot" property="plot"/>
+         </constructor>
+ 
+         <!-- defines a property mapping:
+           name is the name of the property according to the bean specification
+ 
+           if the attribute element is defined, the property will be mapped into
+           a separate tag, else the property will be mapped into an attribute of
+           the current tag.
+ 
+           Attribute values are translated by handler implementations - there shouldn't
+           be that many mappings in JFreeChart.
+           -->
+         <property name="title" element="title"/>
+         <property name="legend" element="legend"/>
+         <property name="backgroundPaint" element="background"/>
+         <property name="backgroundImageAlpha" attribute="background-image-alpha" handler="org.jfree.xml.attributehandlers.FloatAttributeHandler"/>
+         <property name="borderPaint" element="borderPaint"/>
+         <property name="borderStroke" element="borderStroke"/>
+         <property name="antiAlias" attribute="anti-alias" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <property name="borderVisible" attribute="border-visible" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <property name="notify" attribute="notify" handler="org.jfree.xml.attributehandlers.BooleanAttributeHandler"/>
+         <property name="plot" element="plot"/>
+     </object>
+     <object class="org.jfree.chart.StandardLegend">
+         <constructor>
+             <parameter class="org.jfree.chart.JFreeChart" property="chart"/>
+         </constructor>
+         <!--
+         the lookup can be used to query a property from the registry
+         This solves the chicken-egg problem of the constructor madness :)
+         -->
+         <property name="outerGap" element="outerGap"/>
+         <property name="innerGap" element="innerGap"/>
+         <property name="titleFont" element="titleFont"/>
+         <property name="itemFont" element="itemFont"/>
+         <property name="itemPaint" element="itemPaint"/>
+         <property name="outlineStroke" element="outlineStroke"/>
+         <property name="outlinePaint" element="outlinePaint"/>
+         <property name="backgroundPaint" element="background"/>
+         <property name="chart" lookup="key::chart"/>
+     </object>
+ </objects>
\ Kein Zeilenumbruch am Dateiende.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/package.html jfreechart/bin/org/jfree/chart/xml/package.html
*** jfreechart-orig/bin/org/jfree/chart/xml/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/package.html	2004-08-31 16:57:59.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Provides support for serializing charts to XML.
+ </body>
+ </html>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/parser/handlers/package.html jfreechart/bin/org/jfree/chart/xml/parser/handlers/package.html
*** jfreechart-orig/bin/org/jfree/chart/xml/parser/handlers/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/parser/handlers/package.html	2004-08-31 17:07:13.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ SAX handlers for subelements within a chart.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/parser/handlers/SpacerReadHandler.class and jfreechart/bin/org/jfree/chart/xml/parser/handlers/SpacerReadHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/parser/handlers/SymbolicTickUnitReadHandler.class and jfreechart/bin/org/jfree/chart/xml/parser/handlers/SymbolicTickUnitReadHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/parser/handlers/TickUnitsReadHandler.class and jfreechart/bin/org/jfree/chart/xml/parser/handlers/TickUnitsReadHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/parser/JFreeChartRootReadHandler.class and jfreechart/bin/org/jfree/chart/xml/parser/JFreeChartRootReadHandler.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/parser/package.html jfreechart/bin/org/jfree/chart/xml/parser/package.html
*** jfreechart-orig/bin/org/jfree/chart/xml/parser/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/parser/package.html	2004-08-31 17:06:27.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ The XML parser for JFreeChart.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/test/ChartIoTest.class and jfreechart/bin/org/jfree/chart/xml/test/ChartIoTest.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/test/ChartReadTest.class and jfreechart/bin/org/jfree/chart/xml/test/ChartReadTest.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/test/ChartWriteTest.class and jfreechart/bin/org/jfree/chart/xml/test/ChartWriteTest.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/test/package.html jfreechart/bin/org/jfree/chart/xml/test/package.html
*** jfreechart-orig/bin/org/jfree/chart/xml/test/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/test/package.html	2004-08-31 17:19:59.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Test classes for chart serialization to XML.
+ </body>
+ </html>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/test/test2.xml jfreechart/bin/org/jfree/chart/xml/test/test2.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/test/test2.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/test/test2.xml	2004-08-31 17:08:03.000000000 +0200
***************
*** 0 ****
--- 1,100 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <chart antiAlias="true" borderVisible="false" notify="true" backgroundImageAlpha="0.5" suppressChartChangeEvents="true" backgroundImageAlignment="15">
+     <subtitles></subtitles>
+     <legend type="org.jfree.chart.StandardLegend" anchor="3" displaySeriesShapes="false" outlineShapes="false" displaySeriesLines="false">
+         <innerGap>
+         </innerGap>
+         <backgroundPaint value="#ffffff"/>
+         <outlinePaint value="#808080"/>
+         <itemPaint value="#000000"/>
+         <shapeOutlinePaint value="#c0c0c0"/>
+         <itemFont family="sansserif" size="10" style="0"/>
+         <outerGap>
+         </outerGap>
+         <titleFont family="sansserif.bold" size="11" style="1"/>
+         <shapeOutlineStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="0.5" miterLimit="10.0"/>
+         <outlineStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+     </legend>
+     <borderStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+     <backgroundPaint>
+         <color1 value="#ffffff"/>
+         <color2 value="#00ff00"/>
+         <point1 x="0.0" y="0.0"/>
+         <point2 x="1000.0" y="0.0"/>
+     </backgroundPaint>
+     <renderingHints>
+         <entry key="KEY_ANTIALIASING" value="VALUE_ANTIALIAS_ON"/>
+     </renderingHints>
+     <borderPaint value="#000000"/>
+     <plot type="org.jfree.chart.plot.XYPlot" foregroundAlpha="1.0" dataAreaRatio="0.0" backgroundAlpha="1.0" backgroundImageAlignment="15" domainGridlinesVisible="true" rangeAxisLocation="top-or-left" orientation="vertical" domainCrosshairLockedOnData="true" rangeCrosshairVisible="true" weight="1" rangeCrosshairValue="0.0" rangeCrosshairLockedOnData="true" domainCrosshairVisible="true" rangeGridlinesVisible="true" domainAxisLocation="bottom-or-left" domainCrosshairValue="0.0">
+         <noDataMessagePaint value="#000000"/>
+         <noDataMessageFont family="sansserif" size="12" style="0"/>
+         <backgroundPaint value="#ffffff"/>
+         <insets top="4" left="8" bottom="4" right="8"/>
+         <outlinePaint value="#808080"/>
+         <outlineStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+         <drawingSupplier>
+         </drawingSupplier>
+         <rangeAxis type="org.jfree.chart.axis.NumberAxis" tickMarkInsideLength="0.0" visible="true" tickMarkOutsideLength="2.0" tickLabelsVisible="true" labelAngle="0.0" tickMarksVisible="true" fixedDimension="0.0" autoTickUnitSelection="true" upperMargin="0.05" positiveArrowVisible="false" lowerMargin="0.05" inverted="false" autoRange="true" verticalTickLabels="false" negativeArrowVisible="false" axisLineVisible="true" maximumAxisValue="1059.9933027836896" minimumAxisValue="-969.9838225560876" fixedAutoRange="0.0" upperBound="1059.9933027836896" lowerBound="-969.9838225560876" autoRangeMinimumSize="1.0E-8">
+             <tickMarkPaint value="#808080"/>
+             <labelFont family="sansserif" size="12" style="0"/>
+             <labelPaint value="#000000"/>
+             <labelInsets top="3" left="3" bottom="3" right="3"/>
+             <tickMarkStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+             <tickLabelFont family="sansserif" size="10" style="0"/>
+             <tickLabelInsets top="2" left="4" bottom="2" right="4"/>
+             <tickLabelPaint value="#000000"/>
+             <axisLineStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+             <range type="org.jfree.data.Range">
+             </range>
+             <axisLinePaint value="#808080"/>
+             <standardTickUnits type="org.jfree.chart.axis.TickUnits">
+             </standardTickUnits>
+             <tickUnit type="org.jfree.chart.axis.NumberTickUnit">
+             </tickUnit>
+         </rangeAxis>
+         <domainCrosshairPaint value="#0000ff"/>
+         <rangeGridlineStroke type="basicStroke" endCap="0" lineJoin="2" lineWidth="0.5" miterLimit="0.0" dashArray="2.0,2.0" dashPhase="0.0"/>
+         <renderer type="org.jfree.chart.renderer.StandardXYItemRenderer" baseItemLabelTextAnchor="bottom-center" baseItemLabelAnchor="outside12" baseItemLabelRotationAnchor="bottom-center" baseItemLabelsVisible="false" plotImages="false" plotShapes="true" plotLines="false" gapThreshold="1.0" defaultShapesFilled="true">
+             <baseStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+             <baseOutlinePaint value="#808080"/>
+             <basePositiveItemLabelPosition>
+             </basePositiveItemLabelPosition>
+             <basePaint value="#0000ff"/>
+             <baseItemLabelPaint value="#000000"/>
+             <baseNegativeItemLabelPosition>
+             </baseNegativeItemLabelPosition>
+             <baseItemLabelFont family="sansserif" size="10" style="0"/>
+             <baseShape x="-3.0" y="-3.0" width="6.0" height="6.0"/>
+             <baseOutlineStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+             <toolTipGenerator type="org.jfree.chart.labels.StandardXYToolTipGenerator">
+             </toolTipGenerator>
+         </renderer>
+         <domainAxis type="org.jfree.chart.axis.NumberAxis" tickMarkInsideLength="0.0" visible="true" tickMarkOutsideLength="2.0" tickLabelsVisible="true" labelAngle="0.0" tickMarksVisible="true" fixedDimension="0.0" autoTickUnitSelection="true" upperMargin="0.05" positiveArrowVisible="false" lowerMargin="0.05" inverted="false" autoRange="true" verticalTickLabels="false" negativeArrowVisible="false" axisLineVisible="true" maximumAxisValue="109.91952294314524" minimumAxisValue="-109.36221934973119" fixedAutoRange="0.0" upperBound="109.91952294314524" lowerBound="-109.36221934973119" autoRangeMinimumSize="1.0E-8">
+             <tickMarkPaint value="#808080"/>
+             <labelFont family="sansserif" size="12" style="0"/>
+             <labelPaint value="#000000"/>
+             <labelInsets top="3" left="3" bottom="3" right="3"/>
+             <tickMarkStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+             <tickLabelFont family="sansserif" size="10" style="0"/>
+             <tickLabelInsets top="2" left="4" bottom="2" right="4"/>
+             <tickLabelPaint value="#000000"/>
+             <axisLineStroke type="basicStroke" endCap="2" lineJoin="0" lineWidth="1.0" miterLimit="10.0"/>
+             <range type="org.jfree.data.Range">
+             </range>
+             <axisLinePaint value="#808080"/>
+             <standardTickUnits type="org.jfree.chart.axis.TickUnits">
+             </standardTickUnits>
+             <tickUnit type="org.jfree.chart.axis.NumberTickUnit">
+             </tickUnit>
+         </domainAxis>
+         <domainCrosshairStroke type="basicStroke" endCap="0" lineJoin="2" lineWidth="0.5" miterLimit="0.0" dashArray="2.0,2.0" dashPhase="0.0"/>
+         <axisOffset>
+         </axisOffset>
+         <rangeCrosshairPaint value="#0000ff"/>
+         <rangeGridlinePaint value="#c0c0c0"/>
+         <domainGridlineStroke type="basicStroke" endCap="0" lineJoin="2" lineWidth="0.5" miterLimit="0.0" dashArray="2.0,2.0" dashPhase="0.0"/>
+         <rangeCrosshairStroke type="basicStroke" endCap="0" lineJoin="2" lineWidth="0.5" miterLimit="0.0" dashArray="2.0,2.0" dashPhase="0.0"/>
+         <domainGridlinePaint value="#c0c0c0"/>
+     </plot>
+ </chart>
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/test/test.xml jfreechart/bin/org/jfree/chart/xml/test/test.xml
*** jfreechart-orig/bin/org/jfree/chart/xml/test/test.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/test/test.xml	2004-08-31 17:08:04.000000000 +0200
***************
*** 0 ****
--- 1,29 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <chart anti-alias="true">
+     <title hAlign="center" text="Scatter Plot" pos="top" vAlign="middle">
+         <paint type="color" value="#000000"/>
+         <font size="18" style="1" family="SansSerif"/>
+         <spacer bottom="0.15" right="0.01" type="relative" left="0.01" top="0.3"/>
+ 
+     </title>
+     <legend anchor="south" type="standard" displayShapes="false">
+         <titleFont size="11" style="1" family="SansSerif"/>
+         <background type="color" value="#ffffff"/>
+         <itemFont size="10" style="0" family="SansSerif"/>
+         <itemPaint type="color" value="#000000"/>
+         <outlineStroke lineWidth="1.0" lineJoin="0" miterLimit="10.0" type="basicStroke" endCap="2"/>
+         <outlinePaint type="color" value="#808080"/>
+         <innerGap bottom="2.0" right="2.0" type="absolute" left="2.0" top="2.0"/>
+         <outerGap bottom="3.0" right="3.0" type="absolute" left="3.0" top="3.0"/>
+     </legend>
+     <background type="gradientPaint">
+         <color1 type="color" value="#ffffff"/>
+         <color2 type="color" value="#00ff00"/>
+         <point1 x="0.0" y="0.0"/>
+         <point2 x="1000.0" y="0.0"/>
+     </background>
+     <borderPaint type="color" value="#000000"/>
+     <borderStroke lineWidth="1.0" lineJoin="0" miterLimit="10.0" type="basicStroke" endCap="2"/>
+     <!-- read from named object "source" and use this to define the property "plot" -->
+     <objectRef source="my.funny.plot" property="plot"/>
+ </chart>
\ Kein Zeilenumbruch am Dateiende.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/writer/handlers/package.html jfreechart/bin/org/jfree/chart/xml/writer/handlers/package.html
*** jfreechart-orig/bin/org/jfree/chart/xml/writer/handlers/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/writer/handlers/package.html	2004-08-31 17:09:41.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Handlers for the generic parser.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/writer/handlers/SpacerWriteHandler.class and jfreechart/bin/org/jfree/chart/xml/writer/handlers/SpacerWriteHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/writer/handlers/SymbolicTickUnitWriteHandler.class and jfreechart/bin/org/jfree/chart/xml/writer/handlers/SymbolicTickUnitWriteHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/writer/handlers/TickUnitsWriteHandler.class and jfreechart/bin/org/jfree/chart/xml/writer/handlers/TickUnitsWriteHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/chart/xml/writer/JFreeChartRootWriteHandler.class and jfreechart/bin/org/jfree/chart/xml/writer/JFreeChartRootWriteHandler.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/chart/xml/writer/package.html jfreechart/bin/org/jfree/chart/xml/writer/package.html
*** jfreechart-orig/bin/org/jfree/chart/xml/writer/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/chart/xml/writer/package.html	2004-08-31 17:20:28.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Writer classes for JFreeChart.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/category/CategoryDataset.class and jfreechart/bin/org/jfree/data/category/CategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/category/CategoryToPieDataset.class and jfreechart/bin/org/jfree/data/category/CategoryToPieDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/category/DefaultCategoryDataset.class and jfreechart/bin/org/jfree/data/category/DefaultCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/category/DefaultIntervalCategoryDataset.class and jfreechart/bin/org/jfree/data/category/DefaultIntervalCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/category/IntervalCategoryDataset.class and jfreechart/bin/org/jfree/data/category/IntervalCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/category/junit/DataCategoryPackageTests.class and jfreechart/bin/org/jfree/data/category/junit/DataCategoryPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/category/junit/DefaultCategoryDatasetTests.class and jfreechart/bin/org/jfree/data/category/junit/DefaultCategoryDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/category/junit/KeyToGroupMapTests.class and jfreechart/bin/org/jfree/data/category/junit/KeyToGroupMapTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/category/package.html jfreechart/bin/org/jfree/data/category/package.html
*** jfreechart-orig/bin/org/jfree/data/category/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/category/package.html	2004-09-02 17:05:14.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ A package containing the {@link CategoryDataset} interface and related classes.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/contour/ContourDataset.class and jfreechart/bin/org/jfree/data/contour/ContourDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/contour/DefaultContourDataset.class and jfreechart/bin/org/jfree/data/contour/DefaultContourDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/contour/NonGridContourDataset.class and jfreechart/bin/org/jfree/data/contour/NonGridContourDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/DefaultKeyedValue.class and jfreechart/bin/org/jfree/data/DefaultKeyedValue.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/DefaultKeyedValues2D.class and jfreechart/bin/org/jfree/data/DefaultKeyedValues2D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/DefaultKeyedValues.class and jfreechart/bin/org/jfree/data/DefaultKeyedValues.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/DomainInfo.class and jfreechart/bin/org/jfree/data/DomainInfo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/DomainOrder.class and jfreechart/bin/org/jfree/data/DomainOrder.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/function/Function2D.class and jfreechart/bin/org/jfree/data/function/Function2D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/function/LineFunction2D.class and jfreechart/bin/org/jfree/data/function/LineFunction2D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/function/NormalDistributionFunction2D.class and jfreechart/bin/org/jfree/data/function/NormalDistributionFunction2D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/function/PowerFunction2D.class and jfreechart/bin/org/jfree/data/function/PowerFunction2D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/GanttCategoryDataset.class and jfreechart/bin/org/jfree/data/gantt/GanttCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/junit/DataGanttPackageTests.class and jfreechart/bin/org/jfree/data/gantt/junit/DataGanttPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/junit/TaskSeriesCollectionTests2.class and jfreechart/bin/org/jfree/data/gantt/junit/TaskSeriesCollectionTests2.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.class and jfreechart/bin/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/junit/TaskSeriesTests.class and jfreechart/bin/org/jfree/data/gantt/junit/TaskSeriesTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/junit/TaskTests.class and jfreechart/bin/org/jfree/data/gantt/junit/TaskTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/gantt/package.html jfreechart/bin/org/jfree/data/gantt/package.html
*** jfreechart-orig/bin/org/jfree/data/gantt/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/gantt/package.html	2004-08-31 17:25:36.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Data interfaces and classes for Gantt charts.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/Task.class and jfreechart/bin/org/jfree/data/gantt/Task.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/TaskSeries.class and jfreechart/bin/org/jfree/data/gantt/TaskSeries.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/gantt/TaskSeriesCollection.class and jfreechart/bin/org/jfree/data/gantt/TaskSeriesCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/AbstractDataset.class and jfreechart/bin/org/jfree/data/general/AbstractDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/AbstractSeriesDataset.class and jfreechart/bin/org/jfree/data/general/AbstractSeriesDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/CombinationDataset.class and jfreechart/bin/org/jfree/data/general/CombinationDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/CombinedDataset.class and jfreechart/bin/org/jfree/data/general/CombinedDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/CombinedDataset$DatasetInfo.class and jfreechart/bin/org/jfree/data/general/CombinedDataset$DatasetInfo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DatasetChangeEvent.class and jfreechart/bin/org/jfree/data/general/DatasetChangeEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DatasetChangeListener.class and jfreechart/bin/org/jfree/data/general/DatasetChangeListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/Dataset.class and jfreechart/bin/org/jfree/data/general/Dataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DatasetGroup.class and jfreechart/bin/org/jfree/data/general/DatasetGroup.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DatasetUtilities.class and jfreechart/bin/org/jfree/data/general/DatasetUtilities.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DataUtilities.class and jfreechart/bin/org/jfree/data/general/DataUtilities.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DefaultKeyedValueDataset.class and jfreechart/bin/org/jfree/data/general/DefaultKeyedValueDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DefaultKeyedValues2DDataset.class and jfreechart/bin/org/jfree/data/general/DefaultKeyedValues2DDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DefaultKeyedValuesDataset.class and jfreechart/bin/org/jfree/data/general/DefaultKeyedValuesDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DefaultMeterDataset.class and jfreechart/bin/org/jfree/data/general/DefaultMeterDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DefaultPieDataset.class and jfreechart/bin/org/jfree/data/general/DefaultPieDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/DefaultValueDataset.class and jfreechart/bin/org/jfree/data/general/DefaultValueDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/junit/DataGeneralPackageTests.class and jfreechart/bin/org/jfree/data/general/junit/DataGeneralPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/junit/DatasetUtilitiesTests.class and jfreechart/bin/org/jfree/data/general/junit/DatasetUtilitiesTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/junit/DefaultKeyedValueDatasetTests.class and jfreechart/bin/org/jfree/data/general/junit/DefaultKeyedValueDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/junit/DefaultKeyedValues2DDatasetTests.class and jfreechart/bin/org/jfree/data/general/junit/DefaultKeyedValues2DDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/junit/DefaultKeyedValuesDatasetTests.class and jfreechart/bin/org/jfree/data/general/junit/DefaultKeyedValuesDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/junit/PieDatasetTests.class and jfreechart/bin/org/jfree/data/general/junit/PieDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/KeyedValueDataset.class and jfreechart/bin/org/jfree/data/general/KeyedValueDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/KeyedValues2DDataset.class and jfreechart/bin/org/jfree/data/general/KeyedValues2DDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/KeyedValuesDataset.class and jfreechart/bin/org/jfree/data/general/KeyedValuesDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/MeterDataset.class and jfreechart/bin/org/jfree/data/general/MeterDataset.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/general/package.html jfreechart/bin/org/jfree/data/general/package.html
*** jfreechart-orig/bin/org/jfree/data/general/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/general/package.html	2004-08-31 17:27:03.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Data interfaces and classes.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/general/PieDataset.class and jfreechart/bin/org/jfree/data/general/PieDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/SeriesChangeEvent.class and jfreechart/bin/org/jfree/data/general/SeriesChangeEvent.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/SeriesChangeListener.class and jfreechart/bin/org/jfree/data/general/SeriesChangeListener.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/Series.class and jfreechart/bin/org/jfree/data/general/Series.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/SeriesDataset.class and jfreechart/bin/org/jfree/data/general/SeriesDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/SeriesException.class and jfreechart/bin/org/jfree/data/general/SeriesException.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/SubSeriesDataset.class and jfreechart/bin/org/jfree/data/general/SubSeriesDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/ValueDataset.class and jfreechart/bin/org/jfree/data/general/ValueDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/general/WaferMapDataset.class and jfreechart/bin/org/jfree/data/general/WaferMapDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/io/CSV.class and jfreechart/bin/org/jfree/data/io/CSV.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/jdbc/JDBCCategoryDataset.class and jfreechart/bin/org/jfree/data/jdbc/JDBCCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/jdbc/JDBCPieDataset.class and jfreechart/bin/org/jfree/data/jdbc/JDBCPieDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/jdbc/JDBCXYDataset.class and jfreechart/bin/org/jfree/data/jdbc/JDBCXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/junit/DataPackageTests.class and jfreechart/bin/org/jfree/data/junit/DataPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/junit/DefaultKeyedValues2DTests.class and jfreechart/bin/org/jfree/data/junit/DefaultKeyedValues2DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/junit/DefaultKeyedValuesTests.class and jfreechart/bin/org/jfree/data/junit/DefaultKeyedValuesTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/junit/DefaultKeyedValueTests.class and jfreechart/bin/org/jfree/data/junit/DefaultKeyedValueTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/junit/KeyedObjects2DTests.class and jfreechart/bin/org/jfree/data/junit/KeyedObjects2DTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/junit/KeyedObjectsTests.class and jfreechart/bin/org/jfree/data/junit/KeyedObjectsTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/junit/KeyedObjectTests.class and jfreechart/bin/org/jfree/data/junit/KeyedObjectTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/junit/package.html jfreechart/bin/org/jfree/data/junit/package.html
*** jfreechart-orig/bin/org/jfree/data/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/junit/package.html	2004-08-31 17:31:05.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Test cases for the classes in com.jrefinery.data.*.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/junit/RangeTests.class and jfreechart/bin/org/jfree/data/junit/RangeTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyedObject.class and jfreechart/bin/org/jfree/data/KeyedObject.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyedObjects2D.class and jfreechart/bin/org/jfree/data/KeyedObjects2D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyedObjects.class and jfreechart/bin/org/jfree/data/KeyedObjects.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyedValue.class and jfreechart/bin/org/jfree/data/KeyedValue.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyedValueComparator.class and jfreechart/bin/org/jfree/data/KeyedValueComparator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyedValueComparatorType.class and jfreechart/bin/org/jfree/data/KeyedValueComparatorType.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyedValues2D.class and jfreechart/bin/org/jfree/data/KeyedValues2D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyedValues.class and jfreechart/bin/org/jfree/data/KeyedValues.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/KeyToGroupMap.class and jfreechart/bin/org/jfree/data/KeyToGroupMap.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/package.html jfreechart/bin/org/jfree/data/package.html
*** jfreechart-orig/bin/org/jfree/data/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/package.html	2004-09-02 17:05:14.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ The base package for classes that represent various types of data.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/Range.class and jfreechart/bin/org/jfree/data/Range.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/RangeInfo.class and jfreechart/bin/org/jfree/data/RangeInfo.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/resources/DataPackageResources.class and jfreechart/bin/org/jfree/data/resources/DataPackageResources.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/resources/DataPackageResources_de.class and jfreechart/bin/org/jfree/data/resources/DataPackageResources_de.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/resources/DataPackageResources_es.class and jfreechart/bin/org/jfree/data/resources/DataPackageResources_es.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/resources/DataPackageResources_fr.class and jfreechart/bin/org/jfree/data/resources/DataPackageResources_fr.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/resources/DataPackageResources_pl.class and jfreechart/bin/org/jfree/data/resources/DataPackageResources_pl.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/resources/DataPackageResources_ru.class and jfreechart/bin/org/jfree/data/resources/DataPackageResources_ru.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/resources/package.html jfreechart/bin/org/jfree/data/resources/package.html
*** jfreechart-orig/bin/org/jfree/data/resources/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/resources/package.html	2004-08-31 17:38:21.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Resource bundles for items that require localisation.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/BoxAndWhiskerCalculator.class and jfreechart/bin/org/jfree/data/statistics/BoxAndWhiskerCalculator.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/BoxAndWhiskerCategoryDataset.class and jfreechart/bin/org/jfree/data/statistics/BoxAndWhiskerCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/BoxAndWhiskerItem.class and jfreechart/bin/org/jfree/data/statistics/BoxAndWhiskerItem.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/BoxAndWhiskerXYDataset.class and jfreechart/bin/org/jfree/data/statistics/BoxAndWhiskerXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.class and jfreechart/bin/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.class and jfreechart/bin/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.class and jfreechart/bin/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/HistogramBin.class and jfreechart/bin/org/jfree/data/statistics/HistogramBin.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/HistogramDataset.class and jfreechart/bin/org/jfree/data/statistics/HistogramDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/HistogramType.class and jfreechart/bin/org/jfree/data/statistics/HistogramType.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/junit/BoxAndWhiskerCalculatorTests.class and jfreechart/bin/org/jfree/data/statistics/junit/BoxAndWhiskerCalculatorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/junit/BoxAndWhiskerItemTests.class and jfreechart/bin/org/jfree/data/statistics/junit/BoxAndWhiskerItemTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/junit/DataStatisticsPackageTests.class and jfreechart/bin/org/jfree/data/statistics/junit/DataStatisticsPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.class and jfreechart/bin/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/junit/HistogramBinTests.class and jfreechart/bin/org/jfree/data/statistics/junit/HistogramBinTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/junit/HistogramDatasetTests.class and jfreechart/bin/org/jfree/data/statistics/junit/HistogramDatasetTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/statistics/junit/package.html jfreechart/bin/org/jfree/data/statistics/junit/package.html
*** jfreechart-orig/bin/org/jfree/data/statistics/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/statistics/junit/package.html	2004-08-31 17:33:05.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Tests for the classes in the <code>org.jfree.data.statistics</code> package.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/junit/RegressionTests.class and jfreechart/bin/org/jfree/data/statistics/junit/RegressionTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/junit/StatisticsTests.class and jfreechart/bin/org/jfree/data/statistics/junit/StatisticsTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/MeanAndStandardDeviation.class and jfreechart/bin/org/jfree/data/statistics/MeanAndStandardDeviation.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/statistics/package.html jfreechart/bin/org/jfree/data/statistics/package.html
*** jfreechart-orig/bin/org/jfree/data/statistics/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/statistics/package.html	2004-08-31 17:32:24.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Classes for representing statistical data.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/Regression.class and jfreechart/bin/org/jfree/data/statistics/Regression.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/StatisticalCategoryDataset.class and jfreechart/bin/org/jfree/data/statistics/StatisticalCategoryDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/statistics/Statistics.class and jfreechart/bin/org/jfree/data/statistics/Statistics.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/DateRange.class and jfreechart/bin/org/jfree/data/time/DateRange.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Day.class and jfreechart/bin/org/jfree/data/time/Day.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/DynamicTimeSeriesCollection.class and jfreechart/bin/org/jfree/data/time/DynamicTimeSeriesCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/DynamicTimeSeriesCollection$ValueSequence.class and jfreechart/bin/org/jfree/data/time/DynamicTimeSeriesCollection$ValueSequence.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/FixedMillisecond.class and jfreechart/bin/org/jfree/data/time/FixedMillisecond.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Hour.class and jfreechart/bin/org/jfree/data/time/Hour.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/DataTimePackageTests.class and jfreechart/bin/org/jfree/data/time/junit/DataTimePackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/DateRangeTests.class and jfreechart/bin/org/jfree/data/time/junit/DateRangeTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/DayTests.class and jfreechart/bin/org/jfree/data/time/junit/DayTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/FixedMillisecondTests.class and jfreechart/bin/org/jfree/data/time/junit/FixedMillisecondTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/HourTests.class and jfreechart/bin/org/jfree/data/time/junit/HourTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/MillisecondTests.class and jfreechart/bin/org/jfree/data/time/junit/MillisecondTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/MinuteTests.class and jfreechart/bin/org/jfree/data/time/junit/MinuteTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/MonthTests.class and jfreechart/bin/org/jfree/data/time/junit/MonthTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/MovingAverageTests.class and jfreechart/bin/org/jfree/data/time/junit/MovingAverageTests.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/time/junit/package.html jfreechart/bin/org/jfree/data/time/junit/package.html
*** jfreechart-orig/bin/org/jfree/data/time/junit/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/time/junit/package.html	2004-08-31 17:34:53.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ JUnit tests.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/QuarterTests.class and jfreechart/bin/org/jfree/data/time/junit/QuarterTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/SecondTests.class and jfreechart/bin/org/jfree/data/time/junit/SecondTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/SimpleTimePeriodTests.class and jfreechart/bin/org/jfree/data/time/junit/SimpleTimePeriodTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/TimePeriodAnchorTests.class and jfreechart/bin/org/jfree/data/time/junit/TimePeriodAnchorTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/TimePeriodValuesTests.class and jfreechart/bin/org/jfree/data/time/junit/TimePeriodValuesTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/TimePeriodValueTests.class and jfreechart/bin/org/jfree/data/time/junit/TimePeriodValueTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/TimeSeriesCollectionTests.class and jfreechart/bin/org/jfree/data/time/junit/TimeSeriesCollectionTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/TimeSeriesDataItemTests.class and jfreechart/bin/org/jfree/data/time/junit/TimeSeriesDataItemTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/TimeSeriesTests.class and jfreechart/bin/org/jfree/data/time/junit/TimeSeriesTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/TimeTableXYDatasetTests.class and jfreechart/bin/org/jfree/data/time/junit/TimeTableXYDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/WeekTests.class and jfreechart/bin/org/jfree/data/time/junit/WeekTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/junit/YearTests.class and jfreechart/bin/org/jfree/data/time/junit/YearTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Millisecond.class and jfreechart/bin/org/jfree/data/time/Millisecond.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Minute.class and jfreechart/bin/org/jfree/data/time/Minute.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Month.class and jfreechart/bin/org/jfree/data/time/Month.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/MovingAverage.class and jfreechart/bin/org/jfree/data/time/MovingAverage.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/time/package.html jfreechart/bin/org/jfree/data/time/package.html
*** jfreechart-orig/bin/org/jfree/data/time/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/time/package.html	2004-08-31 17:34:17.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Interfaces and classes for time-related data.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Quarter.class and jfreechart/bin/org/jfree/data/time/Quarter.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/RegularTimePeriod.class and jfreechart/bin/org/jfree/data/time/RegularTimePeriod.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Second.class and jfreechart/bin/org/jfree/data/time/Second.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/SimpleTimePeriod.class and jfreechart/bin/org/jfree/data/time/SimpleTimePeriod.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimePeriodAnchor.class and jfreechart/bin/org/jfree/data/time/TimePeriodAnchor.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimePeriod.class and jfreechart/bin/org/jfree/data/time/TimePeriod.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimePeriodFormatException.class and jfreechart/bin/org/jfree/data/time/TimePeriodFormatException.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimePeriodValue.class and jfreechart/bin/org/jfree/data/time/TimePeriodValue.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimePeriodValues.class and jfreechart/bin/org/jfree/data/time/TimePeriodValues.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimePeriodValuesCollection.class and jfreechart/bin/org/jfree/data/time/TimePeriodValuesCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimeSeries.class and jfreechart/bin/org/jfree/data/time/TimeSeries.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimeSeriesCollection.class and jfreechart/bin/org/jfree/data/time/TimeSeriesCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimeSeriesDataItem.class and jfreechart/bin/org/jfree/data/time/TimeSeriesDataItem.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimeSeriesTableModel.class and jfreechart/bin/org/jfree/data/time/TimeSeriesTableModel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/TimeTableXYDataset.class and jfreechart/bin/org/jfree/data/time/TimeTableXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Week.class and jfreechart/bin/org/jfree/data/time/Week.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/time/Year.class and jfreechart/bin/org/jfree/data/time/Year.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/Value.class and jfreechart/bin/org/jfree/data/Value.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/Values2D.class and jfreechart/bin/org/jfree/data/Values2D.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/Values.class and jfreechart/bin/org/jfree/data/Values.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/CategoryDatasetHandler.class and jfreechart/bin/org/jfree/data/xml/CategoryDatasetHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/CategorySeriesHandler.class and jfreechart/bin/org/jfree/data/xml/CategorySeriesHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/DatasetReader.class and jfreechart/bin/org/jfree/data/xml/DatasetReader.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/DatasetTags.class and jfreechart/bin/org/jfree/data/xml/DatasetTags.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/ItemHandler.class and jfreechart/bin/org/jfree/data/xml/ItemHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/KeyHandler.class and jfreechart/bin/org/jfree/data/xml/KeyHandler.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/xml/package.html jfreechart/bin/org/jfree/data/xml/package.html
*** jfreechart-orig/bin/org/jfree/data/xml/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/xml/package.html	2004-08-31 17:35:26.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Support for reading datasets from XML files.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/PieDatasetHandler.class and jfreechart/bin/org/jfree/data/xml/PieDatasetHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/RootHandler.class and jfreechart/bin/org/jfree/data/xml/RootHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xml/ValueHandler.class and jfreechart/bin/org/jfree/data/xml/ValueHandler.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/AbstractIntervalXYDataset.class and jfreechart/bin/org/jfree/data/xy/AbstractIntervalXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/AbstractXYDataset.class and jfreechart/bin/org/jfree/data/xy/AbstractXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/AbstractXYZDataset.class and jfreechart/bin/org/jfree/data/xy/AbstractXYZDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/CategoryTableXYDataset.class and jfreechart/bin/org/jfree/data/xy/CategoryTableXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/DefaultHighLowDataset.class and jfreechart/bin/org/jfree/data/xy/DefaultHighLowDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/DefaultOHLCDataset.class and jfreechart/bin/org/jfree/data/xy/DefaultOHLCDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/DefaultTableXYDataset.class and jfreechart/bin/org/jfree/data/xy/DefaultTableXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/DefaultWindDataset.class and jfreechart/bin/org/jfree/data/xy/DefaultWindDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/IntervalXYDataset.class and jfreechart/bin/org/jfree/data/xy/IntervalXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/IntervalXYDelegate.class and jfreechart/bin/org/jfree/data/xy/IntervalXYDelegate.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/IntervalXYZDataset.class and jfreechart/bin/org/jfree/data/xy/IntervalXYZDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/junit/DataXYPackageTests.class and jfreechart/bin/org/jfree/data/xy/junit/DataXYPackageTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.class and jfreechart/bin/org/jfree/data/xy/junit/DefaultTableXYDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/junit/MatrixSeriesTests.class and jfreechart/bin/org/jfree/data/xy/junit/MatrixSeriesTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/junit/TableXYDatasetTests.class and jfreechart/bin/org/jfree/data/xy/junit/TableXYDatasetTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/junit/XYDataItemTests.class and jfreechart/bin/org/jfree/data/xy/junit/XYDataItemTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/junit/XYSeriesCollectionTests.class and jfreechart/bin/org/jfree/data/xy/junit/XYSeriesCollectionTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/junit/XYSeriesTests.class and jfreechart/bin/org/jfree/data/xy/junit/XYSeriesTests.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/MatrixSeries.class and jfreechart/bin/org/jfree/data/xy/MatrixSeries.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/MatrixSeriesCollection.class and jfreechart/bin/org/jfree/data/xy/MatrixSeriesCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/NormalizedMatrixSeries.class and jfreechart/bin/org/jfree/data/xy/NormalizedMatrixSeries.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/OHLCDataItem.class and jfreechart/bin/org/jfree/data/xy/OHLCDataItem.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/OHLCDataset.class and jfreechart/bin/org/jfree/data/xy/OHLCDataset.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/org/jfree/data/xy/package.html jfreechart/bin/org/jfree/data/xy/package.html
*** jfreechart-orig/bin/org/jfree/data/xy/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/org/jfree/data/xy/package.html	2004-09-02 17:05:15.000000000 +0200
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ A package containing the {@link XYDataset} interface and related classes.
+ </body>
+ </html>
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/SignalsDataset.class and jfreechart/bin/org/jfree/data/xy/SignalsDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/TableXYDataset.class and jfreechart/bin/org/jfree/data/xy/TableXYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/WindDataItem.class and jfreechart/bin/org/jfree/data/xy/WindDataItem.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/WindDataset.class and jfreechart/bin/org/jfree/data/xy/WindDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/XisSymbolic.class and jfreechart/bin/org/jfree/data/xy/XisSymbolic.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/XYBarDataset.class and jfreechart/bin/org/jfree/data/xy/XYBarDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/XYDataItem.class and jfreechart/bin/org/jfree/data/xy/XYDataItem.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/XYDataset.class and jfreechart/bin/org/jfree/data/xy/XYDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/XYDatasetTableModel.class and jfreechart/bin/org/jfree/data/xy/XYDatasetTableModel.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/XYSeries.class and jfreechart/bin/org/jfree/data/xy/XYSeries.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/XYSeriesCollection.class and jfreechart/bin/org/jfree/data/xy/XYSeriesCollection.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/XYZDataset.class and jfreechart/bin/org/jfree/data/xy/XYZDataset.class sind verschieden.
Binärdateien jfreechart-orig/bin/org/jfree/data/xy/YisSymbolic.class and jfreechart/bin/org/jfree/data/xy/YisSymbolic.class sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/bin/overview.html jfreechart/bin/overview.html
*** jfreechart-orig/bin/overview.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/bin/overview.html	2004-08-31 16:20:30.000000000 +0200
***************
*** 0 ****
--- 1,11 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ <b>JFreeChart</b> is a free chart library for Java that can generate a
+ wide variety of charts for use in applications, applets and servlets.
+ <p>
+ Please visit <a
+ href="http://www.jfree.org/jfreechart/index.html">http://www.jfree.org/jfreechart/index.html</a>
+ for the latest information about JFreeChart.
+ </body>
+ </html>
diff -rcNbB -x CVS jfreechart-orig/.classpath jfreechart/.classpath
*** jfreechart-orig/.classpath	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/.classpath	2004-11-06 20:29:43.000000000 +0100
***************
*** 0 ****
--- 1,8 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <classpath>
+ 	<classpathentry kind="src" path="source"/>
+ 	<classpathentry kind="src" path="/jcommon"/>
+ 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+ 	<classpathentry kind="con" path="org.eclipse.jdt.USER_LIBRARY/JFree"/>
+ 	<classpathentry kind="output" path="bin"/>
+ </classpath>
Binärdateien jfreechart-orig/jfreechart-0.9.21.jar and jfreechart/jfreechart-0.9.21.jar sind verschieden.
diff -rcNbB -x CVS jfreechart-orig/.project jfreechart/.project
*** jfreechart-orig/.project	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/.project	2004-11-06 20:18:31.000000000 +0100
***************
*** 0 ****
--- 1,17 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ <projectDescription>
+ 	<name>jfreechart</name>
+ 	<comment></comment>
+ 	<projects>
+ 	</projects>
+ 	<buildSpec>
+ 		<buildCommand>
+ 			<name>org.eclipse.jdt.core.javabuilder</name>
+ 			<arguments>
+ 			</arguments>
+ 		</buildCommand>
+ 	</buildSpec>
+ 	<natures>
+ 		<nature>org.eclipse.jdt.core.javanature</nature>
+ 	</natures>
+ </projectDescription>
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/AreaChartDemo.java jfreechart/source/org/jfree/chart/demo/AreaChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/AreaChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/AreaChartDemo.java	2004-11-07 15:21:08.000000000 +0100
***************
*** 0 ****
--- 1,194 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * AreaChartDemo.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: AreaChartDemo.java,v 1.34 2004/05/26 13:04:14 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 11-Jun-2002 : Version 1 (DG);
+  * 25-Jun-2002 : Removed unnecessary imports (DG);
+  * 10-Oct-2002 : Renamed AreaChartForCategoryDataDemo --> AreaChartDemo (DG);
+  * 05-Nov-2003 : Added category label position (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RectangleEdge;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ import org.jfree.ui.VerticalAlignment;
+ import org.jfree.util.Log;
+ import org.jfree.util.PrintStreamLogTarget;
+ 
+ /**
+  * A simple demonstration application showing how to create an area chart using data from a
+  * {@link CategoryDataset}.
+  */
+ public class AreaChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo application.
+      *
+      * @param title  the frame title.
+      */
+     public AreaChartDemo(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final double[][] data = new double[][] {
+             {1.0, 4.0, 3.0, 5.0, 5.0, 7.0, 7.0, 8.0},
+             {5.0, 7.0, 6.0, 8.0, 4.0, 4.0, 2.0, 1.0},
+             {4.0, 3.0, 2.0, 3.0, 6.0, 3.0, 4.0, 3.0}
+         };
+ 
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Series ", "Type ", data
+         );
+ 
+         // create the chart...
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         chartPanel.setEnforceFileExtensions(false);
+         
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+                 
+         final JFreeChart chart = ChartFactory.createAreaChart(
+             "Area Chart",             // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+  
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setAnchor(StandardLegend.SOUTH);
+ 
+         chart.setBackgroundPaint(Color.white);
+         final TextTitle subtitle = new TextTitle("An area chart demonstration.  We use this "
+             + "subtitle as an example of what happens when you get a really long title or "
+             + "subtitle.");
+         subtitle.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         subtitle.setPosition(RectangleEdge.TOP);
+         subtitle.setSpacer(new Spacer(Spacer.RELATIVE, 0.05, 0.05, 0.05, 0.05));
+         subtitle.setVerticalAlignment(VerticalAlignment.BOTTOM);
+         chart.addSubtitle(subtitle);
+ 
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setForegroundAlpha(0.5f);
+         
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinesVisible(true);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinesVisible(true);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+         domainAxis.addCategoryLabelToolTip("Type 1", "The first type.");
+         domainAxis.addCategoryLabelToolTip("Type 2", "The second type.");
+         domainAxis.addCategoryLabelToolTip("Type 3", "The third type.");
+         
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         rangeAxis.setLabelAngle(0 * Math.PI / 2.0);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         Log.getInstance().addTarget(new PrintStreamLogTarget());
+         final AreaChartDemo demo = new AreaChartDemo("Area Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChart3DDemo1.java jfreechart/source/org/jfree/chart/demo/BarChart3DDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChart3DDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChart3DDemo1.java	2004-11-07 15:21:25.000000000 +0100
***************
*** 0 ****
--- 1,163 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * BarChart3DDemo1.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChart3DDemo1.java,v 1.17 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 29-May-2002 : Version 1 (DG);
+  * 11-Oct-2002 : Renamed VerticalBar3DDemo --> VerticalBarChart3DDemo (DG);
+  * 13-May-2003 : Renamed VerticalBarChart3DDemo --> BarChart3DDemo1 (DG);
+  * 24-Nov-2003 : Copied dataset creation code into this demo (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer3D;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a vertical 3D bar chart using data
+  * from a {@link CategoryDataset}.
+  *
+  */
+ public class BarChart3DDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public BarChart3DDemo1(final String title) {
+ 
+         super(title);
+         
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return a sample dataset.
+      */
+    private CategoryDataset createDataset() {
+ 
+         final double[][] data = new double[][]
+             {{10.0, 4.0, 15.0, 14.0},
+              {-5.0, -7.0, 14.0, -3.0},
+              {6.0, 17.0, -12.0, 7.0},
+              {7.0, 15.0, 11.0, 0.0},
+              {-8.0, -6.0, 10.0, -9.0},
+              {9.0, 8.0, 0.0, 6.0},
+              {-10.0, 9.0, 7.0, 7.0},
+              {11.0, 13.0, 9.0, 9.0},
+              {-3.0, 7.0, 11.0, -10.0}};
+              
+         return DatasetUtilities.createCategoryDataset("Series ", "Category ", data);
+ 
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createBarChart3D(
+             "3D Bar Chart Demo",      // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         final CategoryPlot plot = chart.getCategoryPlot();
+         final CategoryAxis axis = plot.getDomainAxis();
+         axis.setCategoryLabelPositions(
+             CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 8.0)
+         );
+         final BarRenderer3D renderer = (BarRenderer3D) plot.getRenderer();
+         renderer.setDrawBarOutline(false);
+         
+         return chart;
+ 
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChart3DDemo1 demo = new BarChart3DDemo1("3D Bar Chart Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChart3DDemo2.java jfreechart/source/org/jfree/chart/demo/BarChart3DDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChart3DDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChart3DDemo2.java	2004-11-07 15:21:35.000000000 +0100
***************
*** 0 ****
--- 1,168 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * BarChart3DDemo2.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChart3DDemo2.java,v 1.20 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 29-May-2002 : Version 1 (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 05-Nov-2002 : Renamed HorizontalBarChart3DDemo.java (DG);
+  * 13-May-2003 : Renamed BarChart3DDemo2.java (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPosition;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.CategoryLabelWidthType;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.text.TextBlockAnchor;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RectangleAnchor;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ import org.jfree.util.Log;
+ import org.jfree.util.PrintStreamLogTarget;
+ 
+ /**
+  * A simple demonstration application showing how to create a horizontal 3D bar chart using data
+  * from a {@link CategoryDataset}.
+  *
+  */
+ public class BarChart3DDemo2 extends ApplicationFrame {
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public BarChart3DDemo2(final String title) {
+ 
+         super(title);
+         
+         // create the chart...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(23.0, "Series 1", "London");
+         dataset.addValue(14.0, "Series 1", "New York");
+         dataset.addValue(14.0, "Series 1", "Istanbul");
+         dataset.addValue(14.0, "Series 1", "Cairo");
+         dataset.addValue(13.0, "Series 2", "London");
+         dataset.addValue(19.0, "Series 2", "New York");
+         dataset.addValue(19.0, "Series 2", "Istanbul");
+         dataset.addValue(19.0, "Series 2", "Cairo");
+         dataset.addValue(7.0, "Series 3", "London");
+         dataset.addValue(9.0, "Series 3", "New York");
+         dataset.addValue(9.0, "Series 3", "Istanbul");
+         dataset.addValue(9.0, "Series 3", "Cairo");
+         
+         final JFreeChart chart = createChart(dataset);
+         
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createBarChart3D(
+             "3D Bar Chart Demo 2",       // chart title
+             "Category",                  // domain axis label
+             "Value",                     // range axis label
+             dataset,                     // data
+             PlotOrientation.HORIZONTAL,  // orientation
+             true,                        // include legend
+             true,                        // tooltips
+             false                        // urls
+         );
+ 
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setForegroundAlpha(1.0f);
+ 
+         // left align the category labels...
+         final CategoryAxis axis = plot.getDomainAxis();
+         final CategoryLabelPositions p = axis.getCategoryLabelPositions();
+         
+         final CategoryLabelPosition left = new CategoryLabelPosition(
+             RectangleAnchor.LEFT, TextBlockAnchor.CENTER_LEFT, 
+             TextAnchor.CENTER_LEFT, 0.0,
+             CategoryLabelWidthType.RANGE, 0.30f
+         );
+         axis.setCategoryLabelPositions(CategoryLabelPositions.replaceLeftPosition(p, left));
+         
+         return chart;        
+     
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         Log.getInstance().addTarget(new PrintStreamLogTarget());
+         final BarChart3DDemo2 demo = new BarChart3DDemo2("3D Bar Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChart3DDemo3.java jfreechart/source/org/jfree/chart/demo/BarChart3DDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChart3DDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChart3DDemo3.java	2004-11-07 15:21:46.000000000 +0100
***************
*** 0 ****
--- 1,158 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * BarChart3DDemo3.java
+  * --------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChart3DDemo3.java,v 1.9 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 24-Nov-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * This demonstration shows a 3D bar chart with item labels displayed.
+  *
+  */
+ public class BarChart3DDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public BarChart3DDemo3(final String title) {
+ 
+         super(title);
+         
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return a sample dataset.
+      */
+    private CategoryDataset createDataset() {
+ 
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(25.0, "Series 1", "Category 1");   
+         dataset.addValue(34.0, "Series 1", "Category 2");   
+         dataset.addValue(19.0, "Series 2", "Category 1");   
+         dataset.addValue(29.0, "Series 2", "Category 2");   
+         dataset.addValue(41.0, "Series 3", "Category 1");   
+         dataset.addValue(33.0, "Series 3", "Category 2");   
+         return dataset;
+ 
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createBarChart3D(
+             "3D Bar Chart Demo",      // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         final CategoryPlot plot = chart.getCategoryPlot();
+         final CategoryAxis axis = plot.getDomainAxis();
+         axis.setCategoryLabelPositions(
+             CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 8.0)
+         );
+         
+         final CategoryItemRenderer renderer = plot.getRenderer();
+         renderer.setItemLabelsVisible(true);
+         final BarRenderer r = (BarRenderer) renderer;
+         r.setMaxBarWidth(0.05);
+         
+         return chart;
+ 
+     }
+     
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChart3DDemo3 demo = new BarChart3DDemo3("3D Bar Chart Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo2.java jfreechart/source/org/jfree/chart/demo/BarChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChartDemo2.java	2004-11-07 15:22:06.000000000 +0100
***************
*** 0 ****
--- 1,160 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * BarChartDemo2.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChartDemo2.java,v 1.10 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 14-Nov-2002 : Version 1 (DG);
+  * 11-Nov-2003 : Renamed BarChartDemo2 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a horizontal bar chart.
+  *
+  */
+ public class BarChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public BarChartDemo2(final String title) {
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A dataset.
+      */
+     private CategoryDataset createDataset() { 
+         final double[][] data = new double[][] {
+             {1.0, 43.0, 35.0, 58.0, 54.0, 77.0, 71.0, 89.0},
+             {54.0, 75.0, 63.0, 83.0, 43.0, 46.0, 27.0, 13.0},
+             {41.0, 33.0, 22.0, 34.0, 62.0, 32.0, 42.0, 34.0}
+         };
+         return DatasetUtilities.createCategoryDataset("Series ", "Factor ", data);
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart Demo 2",         // chart title
+             "Category",                 // domain axis label
+             "Score (%)",                // range axis label
+             dataset,                    // data
+             PlotOrientation.HORIZONTAL, // orientation
+             true,                       // include legend
+             true,
+             false
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.lightGray);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
+         
+         // change the auto tick unit selection to integer units only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setRange(0.0, 100.0);
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChartDemo2 demo = new BarChartDemo2("Bar Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo3.java jfreechart/source/org/jfree/chart/demo/BarChartDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChartDemo3.java	2004-11-07 15:22:37.000000000 +0100
***************
*** 0 ****
--- 1,205 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * BarChartDemo3.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChartDemo3.java,v 1.15 2004/05/10 16:45:24 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 22-Aug-2002 : Version 1 (DG);
+  * 28-Jul-2003 : Updated custom renderer for API changes in 0.9.10 (DG);
+  * 11-Nov-2003 : Renamed BarChartDemo3.java (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Paint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.ItemLabelAnchor;
+ import org.jfree.chart.labels.ItemLabelPosition;
+ import org.jfree.chart.labels.StandardCategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * A bar chart that uses a custom renderer to display different colors within a series.
+  * No legend is displayed because there is only one series but the colors are not consistent.
+  *
+  */
+ public class BarChartDemo3 extends ApplicationFrame {
+ 
+     /**
+      * A custom renderer that returns a different color for each item in a single series.
+      */
+     class CustomRenderer extends BarRenderer {
+ 
+         /** The colors. */
+         private Paint[] colors;
+ 
+         /**
+          * Creates a new renderer.
+          *
+          * @param colors  the colors.
+          */
+         public CustomRenderer(final Paint[] colors) {
+             this.colors = colors;
+         }
+ 
+         /**
+          * Returns the paint for an item.  Overrides the default behaviour inherited from
+          * AbstractSeriesRenderer.
+          *
+          * @param row  the series.
+          * @param column  the category.
+          *
+          * @return The item color.
+          */
+         public Paint getItemPaint(final int row, final int column) {
+             return this.colors[column % this.colors.length];
+         }
+     }
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public BarChartDemo3(final String title) {
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         final double[][] data = new double[][] {{4.0, 3.0, -2.0, 3.0, 6.0}};
+         return DatasetUtilities.createCategoryDataset(
+             "Series ",
+             "Category ",
+             data
+         );
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart Demo 3",       // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // the plot orientation
+             false,                    // include legend
+             true,
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.lightGray);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setNoDataMessage("NO DATA!");
+ 
+         final CategoryItemRenderer renderer = new CustomRenderer(
+             new Paint[] {Color.red, Color.blue, Color.green,
+                 Color.yellow, Color.orange, Color.cyan,
+                 Color.magenta, Color.blue}
+         );
+         renderer.setLabelGenerator(new StandardCategoryLabelGenerator());
+         renderer.setItemLabelsVisible(true);
+         final ItemLabelPosition p = new ItemLabelPosition(
+             ItemLabelAnchor.CENTER, TextAnchor.CENTER, TextAnchor.CENTER, 45.0
+         );
+         renderer.setPositiveItemLabelPosition(p);
+         plot.setRenderer(renderer);
+ 
+         // change the margin at the top of the range axis...
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         rangeAxis.setLowerMargin(0.15);
+         rangeAxis.setUpperMargin(0.15);
+ 
+         return chart;
+ 
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChartDemo3 demo = new BarChartDemo3("Bar Chart Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo4.java jfreechart/source/org/jfree/chart/demo/BarChartDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChartDemo4.java	2004-11-07 15:22:49.000000000 +0100
***************
*** 0 ****
--- 1,187 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * BarChartDemo4.java
+  * ------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChartDemo4.java,v 1.7 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 14-Nov-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A bar chart with only two bars - here the 'maxBarWidth' attribute in the renderer prevents
+  * the bars from getting too wide.
+  *
+  */
+ public class BarChartDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public BarChartDemo4(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Returns a sample dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(5.0, series2, category1);
+         
+         return dataset;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart Demo",         // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,
+             true,                     // include legend
+             true,                     // tooltips?
+             false                     // URLs?
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(new Color(0xBBBBDD));
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         
+         // set the range axis to display integers only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+ 
+         // disable bar outlines...
+         final BarRenderer renderer = (BarRenderer) plot.getRenderer();
+         renderer.setDrawBarOutline(false);
+         renderer.setMaxBarWidth(0.10);
+         
+         // set up gradient paints for series...
+         final GradientPaint gp0 = new GradientPaint(
+             0.0f, 0.0f, Color.blue, 
+             0.0f, 0.0f, Color.lightGray
+         );
+         final GradientPaint gp1 = new GradientPaint(
+             0.0f, 0.0f, Color.green, 
+             0.0f, 0.0f, Color.lightGray
+         );
+         renderer.setSeriesPaint(0, gp0);
+         renderer.setSeriesPaint(1, gp1);
+         
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChartDemo4 demo = new BarChartDemo4("Bar Chart Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo5.java jfreechart/source/org/jfree/chart/demo/BarChartDemo5.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo5.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChartDemo5.java	2004-11-07 15:22:55.000000000 +0100
***************
*** 0 ****
--- 1,174 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * BarChartDemo5.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChartDemo5.java,v 1.10 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 11-Jun-2002 : Version 1 (DG);
+  * 25-Jun-2002 : Removed unnecessary imports (DG);
+  * 09-Oct-2002 : Added frame centering (DG);
+  * 14-Nov-2002 : Renamed HorizontalBarChartDemo --> HorizontalBarChartDemo2 (DG);
+  * 28-Nov-2003 : Renamed HorizontalBarChartDemo2 --> BarChartDemo5 (DG);
+  * 
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a horizontal bar chart.
+  *
+  */
+ public class BarChartDemo5 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public BarChartDemo5(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         final double[][] data = new double[][] {
+                 {1.0, 43.0, 35.0, 58.0, 54.0, 77.0, 71.0, 89.0},
+                 {54.0, 75.0, 63.0, 83.0, 43.0, 46.0, 27.0, 13.0},
+                 {41.0, 33.0, 22.0, 34.0, 62.0, 32.0, 42.0, 34.0}
+         };
+         return DatasetUtilities.createCategoryDataset("Series ", "Factor ", data);
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart",                 // chart title
+             "Category",                  // domain axis label
+             "Score (%)",                 // range axis label
+             dataset,                     // data
+             PlotOrientation.HORIZONTAL,  // orientation
+             true,                        // include legend
+             true,
+             false
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         chart.setBackgroundPaint(Color.lightGray);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+ 
+         plot.getRenderer().setSeriesPaint(0, new Color(0, 0, 255));
+         plot.getRenderer().setSeriesPaint(1, new Color(75, 75, 255));
+         plot.getRenderer().setSeriesPaint(2, new Color(150, 150, 255));
+         
+         // change the auto tick unit selection to integer units only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setRange(0.0, 100.0);
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+ 
+        // NumberAxis hna = rangeAxis;
+        // MarkerAxisBand band = new MarkerAxisBand(hna, 2.0, 2.0, 2.0, 2.0,
+        //     new Font("SansSerif", Font.PLAIN, 9));
+ 
+ //        IntervalMarker m1 = new IntervalMarker(0.0, 33.0, "Low", Color.gray,
+ //            new BasicStroke(0.5f), Color.green, 0.75f);
+ //        IntervalMarker m2 = new IntervalMarker(33.0, 66.0, "Medium", Color.gray,
+ //            new BasicStroke(0.5f), Color.orange, 0.75f);
+ //        IntervalMarker m3 = new IntervalMarker(66.0, 100.0, "High", Color.gray,
+ //            new BasicStroke(0.5f), Color.red, 0.75f);
+ //        band.addMarker(m1);
+ //        band.addMarker(m2);
+ //        band.addMarker(m3);
+ //        hna.setMarkerBand(band);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         return chart;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChartDemo5 demo = new BarChartDemo5("Bar Chart Demo 5");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo6.java jfreechart/source/org/jfree/chart/demo/BarChartDemo6.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo6.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChartDemo6.java	2004-11-07 15:27:52.000000000 +0100
***************
*** 0 ****
--- 1,136 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * BarChartDemo6.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChartDemo6.java,v 1.7 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 07-Aug-2002 : Version 1 (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 14-Nov-2002 : Renamed HorizontalBarChartDemo2 --> HorizontalBarChartDemo3 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Insets;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * Another horizontal bar chart demo.  This time all the extras (titles, legend and axes) are
+  * removed, to display just a single bar.
+  *
+  */
+ public class BarChartDemo6 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public BarChartDemo6(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(83.0, "First", "Factor 1");
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             null,  // chart title
+             "Category",             // domain axis label
+             "Score (%)",            // range axis label
+             dataset,                // data
+             PlotOrientation.HORIZONTAL,
+             false,                  // include legend
+             true,
+             false
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         chart.setBackgroundPaint(Color.yellow);  // not seen
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setInsets(new Insets(0, 0, 0, 0));
+         plot.setRangeGridlinesVisible(false);
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setLowerMargin(0.20);
+         domainAxis.setUpperMargin(0.20);
+         domainAxis.setVisible(false);
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setRange(0.0, 100.0);
+         rangeAxis.setVisible(false);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChartDemo6 demo = new BarChartDemo6("Minimal Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo7.java jfreechart/source/org/jfree/chart/demo/BarChartDemo7.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo7.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChartDemo7.java	2004-11-07 15:27:43.000000000 +0100
***************
*** 0 ****
--- 1,269 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * BarChartDemo7.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChartDemo7.java,v 1.13 2004/05/19 09:57:51 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 27-Jan-2004 : Version 1, based on BarChartDemo.java (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.awt.Font;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.ItemLabelAnchor;
+ import org.jfree.chart.labels.ItemLabelPosition;
+ import org.jfree.chart.labels.StandardCategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.IntervalMarker;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.text.TextUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.Layer;
+ import org.jfree.ui.RectangleAnchor;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ import org.jfree.util.Log;
+ import org.jfree.util.PrintStreamLogTarget;
+ 
+ /**
+  * A simple demonstration application showing how to create a bar chart with a custom item
+  * label generator.
+  */
+ public class BarChartDemo7 extends ApplicationFrame {
+ 
+     /**
+      * A custom label generator.
+      */
+     static class LabelGenerator extends StandardCategoryLabelGenerator {
+         /**
+          * Generates an item label.
+          * 
+          * @param dataset  the dataset.
+          * @param series  the series index.
+          * @param category  the category index.
+          * 
+          * @return the label.
+          */
+         public String generateItemLabel(final CategoryDataset dataset, 
+                                         final int series, 
+                                         final int category) {
+             return dataset.getRowKey(series).toString();
+         }
+     }
+     
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public BarChartDemo7(final String title) {
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Returns a sample dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+         final String series3 = "Third";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(4.0, series1, category2);
+         dataset.addValue(3.0, series1, category3);
+         dataset.addValue(5.0, series1, category4);
+         dataset.addValue(5.0, series1, category5);
+ 
+         dataset.addValue(5.0, series2, category1);
+         dataset.addValue(7.0, series2, category2);
+         dataset.addValue(6.0, series2, category3);
+         dataset.addValue(8.0, series2, category4);
+         dataset.addValue(4.0, series2, category5);
+ 
+         dataset.addValue(4.0, series3, category1);
+         dataset.addValue(3.0, series3, category2);
+         dataset.addValue(2.0, series3, category3);
+         dataset.addValue(3.0, series3, category4);
+         dataset.addValue(6.0, series3, category5);
+         
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart Demo 7",       // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             false,                    // include legend
+             true,                     // tooltips?
+             false                     // URLs?
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.white);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         final IntervalMarker target = new IntervalMarker(4.5, 7.5);
+         target.setLabel("Target Range");
+         target.setLabelFont(new Font("SansSerif", Font.ITALIC, 11));
+         target.setLabelAnchor(RectangleAnchor.LEFT);
+         target.setLabelTextAnchor(TextAnchor.CENTER_LEFT);
+         target.setPaint(new Color(222, 222, 255, 128));
+         plot.addRangeMarker(target, Layer.BACKGROUND);
+         
+         // set the range axis to display integers only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+ 
+         // disable bar outlines...
+         final BarRenderer renderer = (BarRenderer) plot.getRenderer();
+         renderer.setDrawBarOutline(false);
+         renderer.setItemMargin(0.10);
+         
+         // set up gradient paints for series...
+         final GradientPaint gp0 = new GradientPaint(
+             0.0f, 0.0f, Color.blue, 
+             0.0f, 0.0f, Color.lightGray
+         );
+         final GradientPaint gp1 = new GradientPaint(
+             0.0f, 0.0f, Color.green, 
+             0.0f, 0.0f, Color.lightGray
+         );
+         final GradientPaint gp2 = new GradientPaint(
+             0.0f, 0.0f, Color.red, 
+             0.0f, 0.0f, Color.lightGray
+         );
+         renderer.setSeriesPaint(0, gp0);
+         renderer.setSeriesPaint(1, gp1);
+         renderer.setSeriesPaint(2, gp2);
+         
+         renderer.setLabelGenerator(new BarChartDemo7.LabelGenerator());
+         renderer.setItemLabelsVisible(true);
+         final ItemLabelPosition p = new ItemLabelPosition(
+             ItemLabelAnchor.INSIDE12, TextAnchor.CENTER_RIGHT, 
+             TextAnchor.CENTER_RIGHT, -Math.PI / 2.0
+         );
+         renderer.setPositiveItemLabelPosition(p);
+ 
+         final ItemLabelPosition p2 = new ItemLabelPosition(
+             ItemLabelAnchor.OUTSIDE12, TextAnchor.CENTER_LEFT, 
+             TextAnchor.CENTER_LEFT, -Math.PI / 2.0
+         );
+         renderer.setPositiveItemLabelPositionFallback(p2);
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         Log.getInstance().addTarget(new PrintStreamLogTarget());
+         TextUtilities.setUseFontMetricsGetStringBounds(false);
+         final BarChartDemo7 demo = new BarChartDemo7("Bar Chart Demo 7");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo8.java jfreechart/source/org/jfree/chart/demo/BarChartDemo8.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo8.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChartDemo8.java	2004-11-07 15:27:37.000000000 +0100
***************
*** 0 ****
--- 1,202 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * BarChartDemo8.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChartDemo8.java,v 1.5 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 18-Feb-2004 : Version 1, based on BarChartDemo7.java (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Dimension;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a bar chart with a custom item
+  * label generator.
+  *
+  */
+ public class BarChartDemo8 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public BarChartDemo8(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Returns a sample dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+         final String series3 = "Third";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(4.0, series1, category2);
+         dataset.addValue(3.0, series1, category3);
+         dataset.addValue(5.0, series1, category4);
+         dataset.addValue(5.0, series1, category5);
+ 
+         dataset.addValue(5.0, series2, category1);
+         dataset.addValue(7.0, series2, category2);
+         dataset.addValue(6.0, series2, category3);
+         dataset.addValue(8.0, series2, category4);
+         dataset.addValue(4.0, series2, category5);
+ 
+         dataset.addValue(4.0, series3, category1);
+         dataset.addValue(3.0, series3, category2);
+         dataset.addValue(2.0, series3, category3);
+         dataset.addValue(3.0, series3, category4);
+         dataset.addValue(6.0, series3, category5);
+         
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart Demo 8",       // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             false,                    // include legend
+             true,                     // tooltips?
+             false                     // URLs?
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.white);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         // set the range axis to display integers only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         rangeAxis.setUpperMargin(0.15);
+         
+         // disable bar outlines...
+         final CategoryItemRenderer renderer = plot.getRenderer();
+         renderer.setSeriesItemLabelsVisible(0, Boolean.TRUE);
+         
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
+ 
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChartDemo8 demo = new BarChartDemo8("Bar Chart Demo 8");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo.java jfreechart/source/org/jfree/chart/demo/BarChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/BarChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BarChartDemo.java	2004-11-07 15:21:57.000000000 +0100
***************
*** 0 ****
--- 1,224 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * BarChartDemo.java
+  * -----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BarChartDemo.java,v 1.16 2004/04/29 10:06:34 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 11-Jun-2002 : Version 1 (DG);
+  * 25-Jun-2002 : Removed redundant imports (DG);
+  * 09-Oct-2002 : Added frame centering (DG);
+  * 18-Nov-2002 : Changed from DefaultCategoryDataset to DefaultTableDataset (DG);
+  * 28-Oct-2003 : Changed to display gradient paint (DG);
+  * 10-Nov-2003 : Renamed BarChartDemo.java (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a bar chart.
+  *
+  */
+ public class BarChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public BarChartDemo(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Returns a sample dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+         final String series3 = "Third";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(4.0, series1, category2);
+         dataset.addValue(3.0, series1, category3);
+         dataset.addValue(5.0, series1, category4);
+         dataset.addValue(5.0, series1, category5);
+ 
+         dataset.addValue(5.0, series2, category1);
+         dataset.addValue(7.0, series2, category2);
+         dataset.addValue(6.0, series2, category3);
+         dataset.addValue(8.0, series2, category4);
+         dataset.addValue(4.0, series2, category5);
+ 
+         dataset.addValue(4.0, series3, category1);
+         dataset.addValue(3.0, series3, category2);
+         dataset.addValue(2.0, series3, category3);
+         dataset.addValue(3.0, series3, category4);
+         dataset.addValue(6.0, series3, category5);
+         
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart Demo",         // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             true,                     // include legend
+             true,                     // tooltips?
+             false                     // URLs?
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.white);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+ 
+         // set the range axis to display integers only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+ 
+         // disable bar outlines...
+         final BarRenderer renderer = (BarRenderer) plot.getRenderer();
+         renderer.setDrawBarOutline(false);
+         
+         // set up gradient paints for series...
+         final GradientPaint gp0 = new GradientPaint(
+             0.0f, 0.0f, Color.blue, 
+             0.0f, 0.0f, Color.lightGray
+         );
+         final GradientPaint gp1 = new GradientPaint(
+             0.0f, 0.0f, Color.green, 
+             0.0f, 0.0f, Color.lightGray
+         );
+         final GradientPaint gp2 = new GradientPaint(
+             0.0f, 0.0f, Color.red, 
+             0.0f, 0.0f, Color.lightGray
+         );
+         renderer.setSeriesPaint(0, gp0);
+         renderer.setSeriesPaint(1, gp1);
+         renderer.setSeriesPaint(2, gp2);
+ 
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryLabelPositions(
+             CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
+         );
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BarChartDemo demo = new BarChartDemo("Bar Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BoxAndWhiskerDemo.java jfreechart/source/org/jfree/chart/demo/BoxAndWhiskerDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/BoxAndWhiskerDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BoxAndWhiskerDemo.java	2004-11-07 15:27:32.000000000 +0100
***************
*** 0 ****
--- 1,163 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * BoxAndWhiskerDemo.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by David Browning and Contributors.
+  *
+  * Original Author:  David Browning (for the Australian Institute of Marine Science);
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: BoxAndWhiskerDemo.java,v 1.12 2004/06/02 14:35:42 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 21-Aug-2003 : Version 1, contributed by David Browning (for the Australian Institute of 
+  *               Marine Science);
+  * 27-Aug-2003 : Renamed BoxAndWhiskerCategoryDemo --> BoxAndWhiskerDemo, moved dataset creation
+  *               into the demo (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ import java.util.ArrayList;
+ import java.util.List;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
+ import org.jfree.data.statistics.BoxAndWhiskerCategoryDataset;
+ import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.Log;
+ import org.jfree.util.LogContext;
+ 
+ /**
+  * Demonstration of a box-and-whisker chart using a {@link CategoryPlot}.
+  *
+  * @author David Browning
+  */
+ public class BoxAndWhiskerDemo extends ApplicationFrame {
+ 
+     /** Access to logging facilities. */
+     private static final LogContext LOGGER = Log.createContext(BoxAndWhiskerDemo.class);
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public BoxAndWhiskerDemo(final String title) {
+ 
+         super(title);
+         
+         final BoxAndWhiskerCategoryDataset dataset = createSampleDataset();
+ 
+         final CategoryAxis xAxis = new CategoryAxis("Type");
+         final NumberAxis yAxis = new NumberAxis("Value");
+         yAxis.setAutoRangeIncludesZero(false);
+         final BoxAndWhiskerRenderer renderer = new BoxAndWhiskerRenderer();
+         renderer.setFillBox(false);
+         renderer.setToolTipGenerator(new BoxAndWhiskerToolTipGenerator());
+         final CategoryPlot plot = new CategoryPlot(dataset, xAxis, yAxis, renderer);
+ 
+         final JFreeChart chart = new JFreeChart(
+             "Box-and-Whisker Demo",
+             new Font("SansSerif", Font.BOLD, 14),
+             plot,
+             true
+         );
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(450, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private BoxAndWhiskerCategoryDataset createSampleDataset() {
+         
+         final int seriesCount = 3;
+         final int categoryCount = 4;
+         final int entityCount = 22;
+         
+         final DefaultBoxAndWhiskerCategoryDataset dataset 
+             = new DefaultBoxAndWhiskerCategoryDataset();
+         for (int i = 0; i < seriesCount; i++) {
+             for (int j = 0; j < categoryCount; j++) {
+                 final List list = new ArrayList();
+                 // add some values...
+                 for (int k = 0; k < entityCount; k++) {
+                     final double value1 = 10.0 + Math.random() * 3;
+                     list.add(new Double(value1));
+                     final double value2 = 11.25 + Math.random(); // concentrate values in the middle
+                     list.add(new Double(value2));
+                 }
+                 LOGGER.debug("Adding series " + i);
+                 LOGGER.debug(list.toString());
+                 dataset.add(list, "Series " + i, " Type " + j);
+             }
+             
+         }
+ 
+         return dataset;
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * For testing from the command line.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         //Log.getInstance().addTarget(new PrintStreamLogTarget(System.out));
+         final BoxAndWhiskerDemo demo = new BoxAndWhiskerDemo("Box-and-Whisker Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BubblePlotDemo.java jfreechart/source/org/jfree/chart/demo/BubblePlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/BubblePlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BubblePlotDemo.java	2004-11-07 15:23:41.000000000 +0100
***************
*** 0 ****
--- 1,134 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * BubblePlotDemo.java
+  * -------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: BubblePlotDemo.java,v 1.11 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 28-Jan-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYZDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A bubble chart demo.
+  *
+  */
+ public class BubblePlotDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a bubble chart.
+      *
+      * @param title  the frame title.
+      */
+     public BubblePlotDemo(final String title) {
+ 
+         super(title);
+         final XYZDataset data = new SampleXYZDataset();
+         final JFreeChart chart = createChart(data);
+         
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setVerticalZoom(true);
+         chartPanel.setHorizontalZoom(true);
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final XYZDataset dataset) {
+         final JFreeChart chart = ChartFactory.createBubbleChart(
+             "Bubble Plot Demo",
+             "X", 
+             "Y", 
+             dataset, 
+             PlotOrientation.VERTICAL,
+             true, 
+             true, 
+             false
+         );
+         final XYPlot plot = chart.getXYPlot();
+         plot.setForegroundAlpha(0.65f);
+ 
+         // increase the margins to account for the fact that the auto-range doesn't take into
+         // account the bubble size...
+         final NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
+         domainAxis.setLowerMargin(0.15);
+         domainAxis.setUpperMargin(0.15);
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setLowerMargin(0.15);
+         rangeAxis.setUpperMargin(0.15);
+         return chart;
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final BubblePlotDemo demo = new BubblePlotDemo("Bubble Plot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BubblyBubblesDemo2.java jfreechart/source/org/jfree/chart/demo/BubblyBubblesDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/BubblyBubblesDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BubblyBubblesDemo2.java	2004-11-07 15:43:42.000000000 +0100
***************
*** 0 ****
--- 1,199 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * BubblyBubblesDemo2.java
+  * -----------------------
+  * (C) Copyright 2003, 2004, by Barak Naveh and Contributors.
+  *
+  * Original Author:  Barak Naveh;;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: BubblyBubblesDemo2.java,v 1.12 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 10-Jul-2003 : Version 1 contributed by Barak Naveh (DG);
+  * 29-Mar-2004 : Elimintated compiler warnings while keeping JFreeChart conventions (BN);
+  *
+  */
+  
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.MatrixSeriesCollection;
+ import org.jfree.data.xy.NormalizedMatrixSeries;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo that shows how matrix series can be used for charts that follow a
+  * constantly changing grid input.
+  *
+  * @author Barak Naveh
+  *
+  * @since Jun 25, 2003
+  */
+ public class BubblyBubblesDemo2 extends ApplicationFrame {
+     
+     /** The default size. */
+     private static final int    SIZE  = 10;
+  
+     /** The default title. */
+     private static final String TITLE = "Population count at grid locations";
+ 
+     /**
+      * The normalized matrix series is used here to represent a changing
+      * population on a grid.
+      */
+     NormalizedMatrixSeries series;
+ 
+     /**
+      * A demonstration application showing a bubble chart using matrix series.
+      *
+      * @param title the frame title.
+      */
+     public BubblyBubblesDemo2(final String title) {
+         super(title);
+ 
+         this.series = createInitialSeries();
+ 
+         final MatrixSeriesCollection dataset = new MatrixSeriesCollection(this.series);
+ 
+         final JFreeChart chart = ChartFactory.createBubbleChart(
+             TITLE, 
+             "X", 
+             "Y", 
+             dataset, 
+             PlotOrientation.VERTICAL, 
+             true,
+             true, 
+             false 
+         );
+ 
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.yellow));
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setForegroundAlpha(0.5f);
+ 
+         final NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
+         domainAxis.setLowerBound(-0.5);
+ 
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+ 
+         rangeAxis.setLowerBound(-0.5);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setVerticalZoom(true);
+         chartPanel.setHorizontalZoom(true);
+         setContentPane(chartPanel);
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args ignored.
+      */
+     public static void main(final String[] args) {
+         final BubblyBubblesDemo2 demo = new BubblyBubblesDemo2(TITLE);
+         demo.pack();
+         demo.setSize(800, 600);
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+         final Thread updater = demo.new UpdaterThread();
+         updater.setDaemon(true);
+         updater.start();
+     }
+ 
+ 
+     /**
+      * Creates a series.
+      * 
+      * @return The series.
+      */
+     private NormalizedMatrixSeries createInitialSeries() {
+         final NormalizedMatrixSeries newSeries =
+                 new NormalizedMatrixSeries("Sample Grid 1", SIZE, SIZE);
+ 
+         // seed a few random bubbles
+         for (int count = 0; count < SIZE * 3; count++) {
+             final int i = (int) (Math.random() * SIZE);
+             final int j = (int) (Math.random() * SIZE);
+ 
+             final double mij = Math.random() * 1;
+             newSeries.update(i, j, mij);
+         }
+ 
+         newSeries.setScaleFactor(newSeries.getItemCount());
+ 
+         return newSeries;
+     }
+ 
+     /**
+      * Updater thread.
+      */
+     private class UpdaterThread extends Thread {
+         /**
+          * @see java.lang.Runnable#run()
+          */
+         public void run() {
+             setPriority(MIN_PRIORITY); // be nice
+ 
+             while (true) {
+                 final int i = (int) (Math.random() * SIZE);
+                 final int j = (int) (Math.random() * SIZE);
+ 
+                 final double change = Math.random() * 3.0 - 1.0;
+ 
+                 series.update(i, j, series.get(i, j) + change);
+ 
+                 try {
+                     sleep(50);
+                 }
+                 catch (InterruptedException e) {
+                     // suppressed
+                 }
+             }
+         }
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/BubblyBubblesDemo.java jfreechart/source/org/jfree/chart/demo/BubblyBubblesDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/BubblyBubblesDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/BubblyBubblesDemo.java	2004-11-07 15:43:48.000000000 +0100
***************
*** 0 ****
--- 1,196 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * BubblyBubblesDemo.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Barak Naveh and Contributors.
+  *
+  * Original Author:  Barak Naveh;;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: BubblyBubblesDemo.java,v 1.12 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 10-Jul-2003 : Version 1 contributed by Barak Naveh (DG);
+  * 29-Mar-2004 : Elimintated compiler warnings while keeping JFreeChart conventions (BN); 
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.MatrixSeriesCollection;
+ import org.jfree.data.xy.NormalizedMatrixSeries;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo that shows how matrix series can be used for charts that follow a
+  * constantly changing grid input.
+  *
+  * @author Barak Naveh
+  *
+  * @since Jun 25, 2003
+  */
+ public class BubblyBubblesDemo extends ApplicationFrame {
+ 
+     /** The default size. */    
+     private static final int    SIZE  = 10;
+     
+     /** The default title. */
+     private static final String TITLE = "Population count at grid locations";
+ 
+     /**
+      * The normalized matrix series is used here to represent a changing
+      * population on a grid.
+      */
+     NormalizedMatrixSeries series;
+ 
+     /**
+      * A demonstration application showing a bubble chart using matrix series.
+      *
+      * @param title the frame title.
+      */
+     public BubblyBubblesDemo(final String title) {
+         super(title);
+ 
+         this.series = createInitialSeries();
+ 
+         final MatrixSeriesCollection dataset = new MatrixSeriesCollection(this.series);
+ 
+         final JFreeChart chart = ChartFactory.createBubbleChart(
+             TITLE, "X", "Y", dataset, 
+             PlotOrientation.VERTICAL, 
+             true,
+             true, false);
+ 
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0,
+                 1000, Color.blue));
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setForegroundAlpha(0.5f);
+ 
+         final NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
+         domainAxis.setLowerBound(-0.5);
+ 
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+ 
+         // rangeAxis.setInverted(true);  // uncoment to reproduce a bug in jFreeChart
+         rangeAxis.setLowerBound(-0.5);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setVerticalZoom(true);
+         chartPanel.setHorizontalZoom(true);
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args ignored.
+      */
+     public static void main(final String[] args) {
+         final BubblyBubblesDemo demo = new BubblyBubblesDemo(TITLE);
+         demo.pack();
+         demo.setSize(800, 600);
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+         final Thread updater = demo.new UpdaterThread();
+         updater.setDaemon(true);
+         updater.start();
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a series.
+      * 
+      * @return The series.
+      */
+     private NormalizedMatrixSeries createInitialSeries() {
+         final NormalizedMatrixSeries newSeries =
+             new NormalizedMatrixSeries("Sample Grid 1", SIZE, SIZE);
+ 
+         // seed a few random bubbles
+         for (int count = 0; count < SIZE; count++) {
+             final int i = (int) (Math.random() * SIZE);
+             final int j = (int) (Math.random() * SIZE);
+ 
+             final int mij = (int) (Math.random() * SIZE);
+             newSeries.update(i, j, mij);
+         }
+ 
+         newSeries.setScaleFactor(newSeries.getItemCount());
+ 
+         return newSeries;
+     }
+ 
+     /**
+      * A thread for updating the dataset.
+      */
+     private class UpdaterThread extends Thread {
+         /**
+          * @see java.lang.Runnable#run()
+          */
+         public void run() {
+             setPriority(MIN_PRIORITY); // be nice
+ 
+             while (true) {
+                 final int i = (int) (Math.random() * SIZE);
+                 final int j = (int) (Math.random() * SIZE);
+ 
+                 series.update(i, j, series.get(i, j) + 1);
+ 
+                 try {
+                     sleep(50);
+                 }
+                 catch (InterruptedException e) {
+                     // suppress
+                 }
+             }
+         }
+     }
+ }
+ 
+ 
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CandlestickDemo.java jfreechart/source/org/jfree/chart/demo/CandlestickDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/CandlestickDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CandlestickDemo.java	2004-11-07 15:43:35.000000000 +0100
***************
*** 0 ****
--- 1,117 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * CandlestickDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: CandlestickDemo.java,v 1.10 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 16-Oct-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.xy.DefaultHighLowDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing a candlestick chart.
+  *
+  */
+ public class CandlestickDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a candlestick chart.
+      *
+      * @param title  the frame title.
+      */
+     public CandlestickDemo(final String title) {
+ 
+         super(title);
+ 
+         final DefaultHighLowDataset dataset = DemoDatasetFactory.createHighLowDataset();
+         final JFreeChart chart = createChart(dataset);
+         chart.getXYPlot().setOrientation(PlotOrientation.VERTICAL);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The dataset.
+      */
+     private JFreeChart createChart(final DefaultHighLowDataset dataset) {
+         final JFreeChart chart = ChartFactory.createCandlestickChart(
+             "Candlestick Demo",
+             "Time", 
+             "Value",
+             dataset, 
+             true
+         );
+         return chart;        
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CandlestickDemo demo = new CandlestickDemo("Candlestick Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/categorydata.xml jfreechart/source/org/jfree/chart/demo/categorydata.xml
*** jfreechart-orig/source/org/jfree/chart/demo/categorydata.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/categorydata.xml	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,45 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ 
+ <!-- Sample data for JFreeChart. -->
+ 
+ <CategoryDataset>
+ 
+   <Series name = "Series 1">
+     <Item>
+       <Key>Category 1</Key>
+       <Value>15.4</Value>
+     </Item>
+     <Item>
+       <Key>Category 2</Key>
+       <Value>12.7</Value>
+     </Item>
+     <Item>
+       <Key>Category 3</Key>
+       <Value>5.7</Value>
+     </Item>
+     <Item>
+       <Key>Category 4</Key>
+       <Value>9.1</Value>
+     </Item>
+   </Series>
+ 
+   <Series name = "Series 2">
+     <Item>
+       <Key>Category 1</Key>
+       <Value>45.4</Value>
+     </Item>
+     <Item>
+       <Key>Category 2</Key>
+       <Value>73.7</Value>
+     </Item>
+     <Item>
+       <Key>Category 3</Key>
+       <Value>23.7</Value>
+     </Item>
+     <Item>
+       <Key>Category 4</Key>
+       <Value>19.4</Value>
+     </Item>
+   </Series>
+ 
+ </CategoryDataset>
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CategoryStepChartDemo.java jfreechart/source/org/jfree/chart/demo/CategoryStepChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/CategoryStepChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CategoryStepChartDemo.java	2004-11-07 15:31:53.000000000 +0100
***************
*** 0 ****
--- 1,168 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------------
+  * CategoryStepRendererDemo.java
+  * -----------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: CategoryStepChartDemo.java,v 1.2 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 21-Apr-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Dimension;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.chart.renderer.category.CategoryStepRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A simple demonstration application showing how to create an area chart using data from a
+  * {@link CategoryDataset}.
+  *
+  */
+ public class CategoryStepChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo application.
+      *
+      * @param title  the frame title.
+      */
+     public CategoryStepChartDemo(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final double[][] data = new double[][] {
+             {1.0, 4.0, 3.0, 5.0, 5.0, 7.0, 7.0, 8.0},
+             {5.0, 7.0, 6.0, 8.0, 4.0, 4.0, 2.0, 1.0},
+             {4.0, 3.0, 2.0, 3.0, 6.0, 3.0, 4.0, 3.0}
+         };
+ 
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Series ", "Type ", data
+         );
+ 
+         // create the chart...
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         chartPanel.setEnforceFileExtensions(false);
+         
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+             
+         final CategoryItemRenderer renderer = new CategoryStepRenderer(true);
+         final CategoryAxis domainAxis = new CategoryAxis("Category");
+         final ValueAxis rangeAxis = new NumberAxis("Value");
+         final CategoryPlot plot = new CategoryPlot(dataset, domainAxis, rangeAxis, renderer);
+         final JFreeChart chart = new JFreeChart("Category Step Chart", plot);
+  
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setAnchor(StandardLegend.SOUTH);
+ 
+         chart.setBackgroundPaint(Color.white);
+         
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinesVisible(true);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinesVisible(true);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+         domainAxis.addCategoryLabelToolTip("Type 1", "The first type.");
+         domainAxis.addCategoryLabelToolTip("Type 2", "The second type.");
+         domainAxis.addCategoryLabelToolTip("Type 3", "The third type.");
+         
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         rangeAxis.setLabelAngle(0 * Math.PI / 2.0);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CategoryStepChartDemo demo = new CategoryStepChartDemo("Category Step Renderer Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ChartPanelSerializationTest.java jfreechart/source/org/jfree/chart/demo/ChartPanelSerializationTest.java
*** jfreechart-orig/source/org/jfree/chart/demo/ChartPanelSerializationTest.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ChartPanelSerializationTest.java	2004-11-07 15:31:48.000000000 +0100
***************
*** 0 ****
--- 1,241 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------------
+  * ChartPanelSerializationTest.java
+  * --------------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ChartPanelSerializationTest.java,v 1.2 2004/05/20 16:29:07 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 20-May-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.io.ByteArrayInputStream;
+ import java.io.ByteArrayOutputStream;
+ import java.io.ObjectInput;
+ import java.io.ObjectInputStream;
+ import java.io.ObjectOutput;
+ import java.io.ObjectOutputStream;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Month;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ import org.jfree.util.Log;
+ import org.jfree.util.PrintStreamLogTarget;
+ 
+ /**
+  * This demo tests the ability to serialize/deserialize a {@link ChartPanel}.  The
+  * basics are working, but more testing is needed to iron out the remaining bugs.
+  */
+ public class ChartPanelSerializationTest extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a simple time series chart.  This
+      * example uses monthly data.
+      *
+      * @param title  the frame title.
+      */
+     public ChartPanelSerializationTest(final String title) {
+         
+         super(title);
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel1 = new ChartPanel(chart);
+         chartPanel1.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel1.setMouseZoomable(true, false);
+         
+         ChartPanel chartPanel2 = null;
+         try {
+             ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+             ObjectOutput out = new ObjectOutputStream(buffer);
+             out.writeObject(chartPanel1);
+             out.close();
+ 
+             ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
+             chartPanel2 = (ChartPanel) in.readObject();
+             in.close();
+         }
+         catch (Exception e) {
+             e.printStackTrace();
+         }
+ 
+         
+         setContentPane(chartPanel2);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Legal & General Unit Trust Prices",
+             "Date", "Price Per Unit",
+             dataset,
+             true,
+             true,
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+ 
+         final StandardLegend sl = (StandardLegend) chart.getLegend();
+         sl.setDisplaySeriesShapes(true);
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainCrosshairVisible(true);
+         plot.setRangeCrosshairVisible(true);
+         
+         final XYItemRenderer renderer = plot.getRenderer();
+         if (renderer instanceof StandardXYItemRenderer) {
+             final StandardXYItemRenderer rr = (StandardXYItemRenderer) renderer;
+             rr.setPlotShapes(true);
+             rr.setShapesFilled(true);
+             rr.setItemLabelsVisible(true);
+         }
+         
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));
+         
+         return chart;
+ 
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a dataset, consisting of two series of monthly data.
+      *
+      * @return the dataset.
+      */
+     private XYDataset createDataset() {
+ 
+         final TimeSeries s1 = new TimeSeries("L&G European Index Trust", Month.class);
+         s1.add(new Month(2, 2001), 181.8);
+         s1.add(new Month(3, 2001), 167.3);
+         s1.add(new Month(4, 2001), 153.8);
+         s1.add(new Month(5, 2001), 167.6);
+         s1.add(new Month(6, 2001), 158.8);
+         s1.add(new Month(7, 2001), 148.3);
+         s1.add(new Month(8, 2001), 153.9);
+         s1.add(new Month(9, 2001), 142.7);
+         s1.add(new Month(10, 2001), 123.2);
+         s1.add(new Month(11, 2001), 131.8);
+         s1.add(new Month(12, 2001), 139.6);
+         s1.add(new Month(1, 2002), 142.9);
+         s1.add(new Month(2, 2002), 138.7);
+         s1.add(new Month(3, 2002), 137.3);
+         s1.add(new Month(4, 2002), 143.9);
+         s1.add(new Month(5, 2002), 139.8);
+         s1.add(new Month(6, 2002), 137.0);
+         s1.add(new Month(7, 2002), 132.8);
+ 
+         final TimeSeries s2 = new TimeSeries("L&G UK Index Trust", Month.class);
+         s2.add(new Month(2, 2001), 129.6);
+         s2.add(new Month(3, 2001), 123.2);
+         s2.add(new Month(4, 2001), 117.2);
+         s2.add(new Month(5, 2001), 124.1);
+         s2.add(new Month(6, 2001), 122.6);
+         s2.add(new Month(7, 2001), 119.2);
+         s2.add(new Month(8, 2001), 116.5);
+         s2.add(new Month(9, 2001), 112.7);
+         s2.add(new Month(10, 2001), 101.5);
+         s2.add(new Month(11, 2001), 106.1);
+         s2.add(new Month(12, 2001), 110.3);
+         s2.add(new Month(1, 2002), 111.7);
+         s2.add(new Month(2, 2002), 111.0);
+         s2.add(new Month(3, 2002), 109.6);
+         s2.add(new Month(4, 2002), 113.2);
+         s2.add(new Month(5, 2002), 111.6);
+         s2.add(new Month(6, 2002), 108.8);
+         s2.add(new Month(7, 2002), 101.6);
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(s1);
+         dataset.addSeries(s2);
+ 
+         dataset.setDomainIsPointsInTime(true);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         Log.getInstance().addTarget(new PrintStreamLogTarget());
+         final ChartPanelSerializationTest demo = new ChartPanelSerializationTest(
+             "Serialization Test"
+         );
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ChartTiming1.java jfreechart/source/org/jfree/chart/demo/ChartTiming1.java
*** jfreechart-orig/source/org/jfree/chart/demo/ChartTiming1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ChartTiming1.java	2004-11-07 15:31:43.000000000 +0100
***************
*** 0 ****
--- 1,139 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * ChartTiming1.java
+  * -----------------
+  * (C) Copyright 2001-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ChartTiming1.java,v 1.12 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes (from 24-Apr-2002)
+  * --------------------------
+  * 24-Apr-2002 : Added standard header (DG);
+  * 29-Oct-2002 : Modified to use javax.swing.Timer (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Graphics2D;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ import java.awt.geom.Rectangle2D;
+ import java.awt.image.BufferedImage;
+ 
+ import javax.swing.Timer;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.data.general.DefaultPieDataset;
+ 
+ /**
+  * Draws a pie chart over and over for 10 seconds.  Reports on how many redraws were achieved.
+  * <p>
+  * On my PC (SuSE Linux 8.2, JDK 1.4, 256mb RAM, 2.66ghz Pentium) I get 90-95 charts per second.
+  *
+  */
+ public class ChartTiming1 implements ActionListener {
+ 
+     /** A flag that indicates when time is up. */
+     private boolean finished;
+ 
+     /**
+      * Creates a new application.
+      */
+     public ChartTiming1() {
+         // nothing to do
+     }
+ 
+     /**
+      * Runs the timing.
+      */
+     public void run() {
+         this.finished = false;
+ 
+         // create a dataset...
+         final DefaultPieDataset data = new DefaultPieDataset();
+         data.setValue("One", new Double(10.3));
+         data.setValue("Two", new Double(8.5));
+         data.setValue("Three", new Double(3.9));
+         data.setValue("Four", new Double(3.9));
+         data.setValue("Five", new Double(3.9));
+         data.setValue("Six", new Double(3.9));
+ 
+         // create a pie chart...
+         final boolean withLegend = true;
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Testing", 
+             data, 
+             withLegend,
+             true,
+             false
+         );
+ 
+         final BufferedImage image = new BufferedImage(400, 300, BufferedImage.TYPE_INT_RGB);
+         final Graphics2D g2 = image.createGraphics();
+         final Rectangle2D chartArea = new Rectangle2D.Double(0, 0, 400, 300);
+ 
+         // set up the timer...
+         final Timer timer = new Timer(10000, this);
+         timer.setRepeats(false);
+         int count = 0;
+         timer.start();
+         while (!this.finished) {
+             chart.draw(g2, chartArea, null, null);
+             System.out.println("Charts drawn..." + count);
+             if (!this.finished) {
+                 count++;
+             }
+         }
+         System.out.println("DONE");
+ 
+     }
+ 
+     /**
+      * Receives notification of action events (in this case, from the Timer).
+      *
+      * @param event  the event.
+      */
+     public void actionPerformed(final ActionEvent event) {
+         this.finished = true;
+     }
+ 
+     /**
+      * Starting point for the application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ChartTiming1 app = new ChartTiming1();
+         app.run();
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ChartTiming2.java jfreechart/source/org/jfree/chart/demo/ChartTiming2.java
*** jfreechart-orig/source/org/jfree/chart/demo/ChartTiming2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ChartTiming2.java	2004-11-07 15:28:19.000000000 +0100
***************
*** 0 ****
--- 1,138 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * ChartTiming2.java
+  * -----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ChartTiming2.java,v 1.13 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 29-Oct-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Graphics2D;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ import java.awt.geom.Rectangle2D;
+ import java.awt.image.BufferedImage;
+ 
+ import javax.swing.Timer;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYDotRenderer;
+ import org.jfree.data.xy.XYDataset;
+ 
+ /**
+  * Draws a scatter plot over and over for 10 seconds.  Reports on how many redraws were achieved.
+  * <p>
+  * On my PC (SuSE Linux 8.2, JDK 1.4, 256mb RAM, 2.66ghz Pentium) I get 14 charts per second.
+  *
+  */
+ public class ChartTiming2 implements ActionListener {
+ 
+     /** A flag that indicates when time is up. */
+     private boolean finished;
+ 
+     /**
+      * Creates a new application.
+      */
+     public ChartTiming2() {
+         // nothing to do
+     }
+ 
+     /**
+      * Runs the test.
+      */
+     public void run() {
+ 
+         this.finished = false;
+ 
+         // create a dataset...
+         final XYDataset data = new SampleXYDataset2(1, 1440);
+ 
+         // create a scatter chart...
+         final boolean withLegend = true;
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Scatter plot timing", "X", "Y",
+             data, 
+             PlotOrientation.VERTICAL,
+             withLegend, false, false
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setRenderer(new XYDotRenderer());
+ 
+         final BufferedImage image = new BufferedImage(400, 300, BufferedImage.TYPE_INT_RGB);
+         final Graphics2D g2 = image.createGraphics();
+         final Rectangle2D chartArea = new Rectangle2D.Double(0, 0, 400, 300);
+ 
+         // set up the timer...
+         final Timer timer = new Timer(10000, this);
+         timer.setRepeats(false);
+         int count = 0;
+         timer.start();
+         while (!this.finished) {
+             chart.draw(g2, chartArea, null, null);
+             System.out.println("Charts drawn..." + count);
+             if (!this.finished) {
+                 count++;
+             }
+         }
+         System.out.println("DONE");
+ 
+     }
+ 
+     /**
+      * Receives notification of action events (in this case, from the Timer).
+      *
+      * @param event  the event.
+      */
+     public void actionPerformed(final ActionEvent event) {
+         this.finished = true;
+     }
+ 
+     /**
+      * Starting point for the application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ChartTiming2 app = new ChartTiming2();
+         app.run();
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ChartTiming3.java jfreechart/source/org/jfree/chart/demo/ChartTiming3.java
*** jfreechart-orig/source/org/jfree/chart/demo/ChartTiming3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ChartTiming3.java	2004-11-07 15:28:14.000000000 +0100
***************
*** 0 ****
--- 1,148 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * ChartTiming3.java
+  * -----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ChartTiming3.java,v 1.15 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 29-Oct-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Graphics2D;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ import java.awt.geom.Rectangle2D;
+ import java.awt.image.BufferedImage;
+ 
+ import javax.swing.Timer;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYDotRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ 
+ /**
+  * Draws a scatter plot over and over for 10 seconds.  Reports on how many redraws were achieved.
+  * <p>
+  * On my PC (SuSE Linux 8.2, JDK 1.4, 256mb RAM, 2.66ghz Pentium) I get 13-14 charts per second.
+  *
+  */
+ public class ChartTiming3 implements ActionListener {
+ 
+     /** A flag that indicates when time is up. */
+     private boolean finished;
+ 
+     /**
+      * Creates a new application.
+      */
+     public ChartTiming3() {
+         // nothing to do
+     }
+ 
+     /**
+      * Runs the test.
+      */
+     public void run() {
+ 
+         this.finished = false;
+ 
+         // create a dataset...
+         final XYSeries series = new XYSeries("Random Data");
+         for (int i = 0; i < 1440; i++) {
+             final double x = Math.random();
+             final double y = Math.random();
+             series.add(x, y);
+         }
+         final XYDataset data = new XYSeriesCollection(series);
+ 
+         // create a scatter chart...
+         final boolean withLegend = true;
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Scatter plot timing", "X", "Y",
+             data, 
+             PlotOrientation.VERTICAL,
+             withLegend, 
+             false, 
+             false
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setRenderer(new XYDotRenderer());
+ 
+         final BufferedImage image = new BufferedImage(400, 300, BufferedImage.TYPE_INT_RGB);
+         final Graphics2D g2 = image.createGraphics();
+         final Rectangle2D chartArea = new Rectangle2D.Double(0, 0, 400, 300);
+ 
+         // set up the timer...
+         final Timer timer = new Timer(10000, this);
+         timer.setRepeats(false);
+         int count = 0;
+         timer.start();
+         while (!this.finished) {
+             chart.draw(g2, chartArea, null, null);
+             System.out.println("Charts drawn..." + count);
+             if (!this.finished) {
+                 count++;
+             }
+         }
+         System.out.println("DONE");
+ 
+     }
+ 
+     /**
+      * Receives notification of action events (in this case, from the Timer).
+      *
+      * @param event  the event.
+      */
+     public void actionPerformed(final ActionEvent event) {
+         this.finished = true;
+     }
+ 
+     /**
+      * Starting point for the application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ChartTiming3 app = new ChartTiming3();
+         app.run();
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ChartTiming4.java jfreechart/source/org/jfree/chart/demo/ChartTiming4.java
*** jfreechart-orig/source/org/jfree/chart/demo/ChartTiming4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ChartTiming4.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,150 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * ChartTiming4.java
+  * -----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ChartTiming4.java,v 1.16 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 29-Oct-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Graphics2D;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ import java.awt.geom.Rectangle2D;
+ import java.awt.image.BufferedImage;
+ 
+ import javax.swing.Timer;
+ 
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.FastScatterPlot;
+ import org.jfree.chart.plot.Plot;
+ 
+ /**
+  * Draws a scatter plot over and over for 10 seconds.  Reports on how many redraws were achieved.
+  * <p>
+  * On my PC (SuSE Linux 8.2, JDK 1.4, 256mb RAM, 2.66ghz Pentium) I get 31 charts per second.
+  *
+  */
+ public class ChartTiming4 implements ActionListener {
+ 
+     /** A flag that indicates when time is up. */
+     private boolean finished;
+ 
+     /** Storage for the data. */
+     private float[][] data = new float[2][1440];
+ 
+     /**
+      * Creates a new application.
+      */
+     public ChartTiming4() {
+         // nothing to do
+     }
+ 
+     /**
+      * Runs the test.
+      */
+     public void run() {
+ 
+         this.finished = false;
+ 
+         // create a dataset...
+         populateData();
+ 
+         // create a fast scatter chart...
+         final Plot plot = new FastScatterPlot(this.data, new NumberAxis("X"), new NumberAxis("Y"));
+         final JFreeChart chart = new JFreeChart(
+             "Fast Scatter Plot Timing",
+             JFreeChart.DEFAULT_TITLE_FONT,
+             plot, 
+             true
+         );
+ 
+         final BufferedImage image = new BufferedImage(400, 300, BufferedImage.TYPE_INT_RGB);
+         final Graphics2D g2 = image.createGraphics();
+         final Rectangle2D chartArea = new Rectangle2D.Double(0, 0, 400, 300);
+ 
+         // set up the timer...
+         final Timer timer = new Timer(10000, this);
+         timer.setRepeats(false);
+         int count = 0;
+         timer.start();
+         while (!this.finished) {
+             chart.draw(g2, chartArea, null, null);
+             System.out.println("Charts drawn..." + count);
+             if (!this.finished) {
+                 count++;
+             }
+         }
+         System.out.println("DONE");
+ 
+     }
+ 
+     /**
+      * Receives notification of action events (in this case, from the Timer).
+      *
+      * @param event  the event.
+      */
+     public void actionPerformed(final ActionEvent event) {
+         this.finished = true;
+     }
+ 
+     /**
+      * Populates the data array with random values.
+      */
+     private void populateData() {
+ 
+         for (int i = 0; i < this.data[0].length; i++) {
+ 
+             final float x = i;
+             this.data[0][i] = x;
+             this.data[1][i] = 100 + (2 * x) + (float) Math.random() * 1440;
+         }
+ 
+     }
+ 
+     /**
+      * Starting point for the application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ChartTiming4 app = new ChartTiming4();
+         app.run();
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CircleDrawer.java jfreechart/source/org/jfree/chart/demo/CircleDrawer.java
*** jfreechart-orig/source/org/jfree/chart/demo/CircleDrawer.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CircleDrawer.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,112 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * CircleDrawer.java
+  * -----------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: CircleDrawer.java,v 1.10 2004/04/30 07:34:47 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 21-May-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Graphics2D;
+ import java.awt.Paint;
+ import java.awt.Stroke;
+ import java.awt.geom.Ellipse2D;
+ import java.awt.geom.Line2D;
+ import java.awt.geom.Rectangle2D;
+ 
+ import org.jfree.ui.Drawable;
+ 
+ /**
+  * An implementation of the {@link Drawable} interface, to illustrate the use of the 
+  * {@link org.jfree.chart.annotations.XYDrawableAnnotation} class.
+  * 
+  */
+ public class CircleDrawer implements Drawable {
+ 
+     /** The outline paint. */
+     private Paint outlinePaint;
+ 
+     /** The outline stroke. */
+     private Stroke outlineStroke;
+ 
+     /** The fill paint. */
+     private Paint fillPaint;
+ 
+     /**
+      * Creates a new instance.
+      * 
+      * @param outlinePaint  the outline paint.
+      * @param outlineStroke  the outline stroke.
+      * @param fillPaint  the fill paint.
+      */
+     public CircleDrawer(final Paint outlinePaint, 
+                         final Stroke outlineStroke, 
+                         final Paint fillPaint) {
+         this.outlinePaint = outlinePaint;
+         this.outlineStroke = outlineStroke;
+         this.fillPaint = fillPaint;
+     }
+ 
+     /**
+      * Draws the circle.
+      * 
+      * @param g2  the graphics device.
+      * @param area  the area in which to draw.
+      */
+     public void draw(final Graphics2D g2, final Rectangle2D area) {
+         final Ellipse2D ellipse = new Ellipse2D.Double(area.getX(), area.getY(),
+                                                  area.getWidth(), area.getHeight());
+         if (this.fillPaint != null) {
+             g2.setPaint(this.fillPaint);
+             g2.fill(ellipse);
+         }
+         if (this.outlinePaint != null && this.outlineStroke != null) {
+             g2.setPaint(this.outlinePaint);
+             g2.setStroke(this.outlineStroke);
+             g2.draw(ellipse);
+         }
+ 
+         g2.setPaint(Color.black);
+         g2.setStroke(new BasicStroke(1.0f));
+         final Line2D line1 = new Line2D.Double(area.getCenterX(), area.getMinY(),
+                                          area.getCenterX(), area.getMaxY());
+         final Line2D line2 = new Line2D.Double(area.getMinX(), area.getCenterY(),
+                                          area.getMaxX(), area.getCenterY());
+         g2.draw(line1);
+         g2.draw(line2);
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CombinedCategoryPlotDemo1.java jfreechart/source/org/jfree/chart/demo/CombinedCategoryPlotDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/CombinedCategoryPlotDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CombinedCategoryPlotDemo1.java	2004-11-07 15:44:04.000000000 +0100
***************
*** 0 ****
--- 1,235 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------------
+  * CombinedCategoryPlotDemo1.java
+  * ------------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: CombinedCategoryPlotDemo1.java,v 1.14 2004/05/10 16:45:22 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 16-May-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.CombinedDomainCategoryPlot;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo for the {@link CombinedDomainCategoryPlot} class.
+  */
+ public class CombinedCategoryPlotDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public CombinedCategoryPlotDemo1(final String title) {
+ 
+         super(title);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(createChart());
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a dataset.
+      *
+      * @return A dataset.
+      */
+     public CategoryDataset createDataset1() {
+ 
+         final DefaultCategoryDataset result = new DefaultCategoryDataset();
+ 
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+ 
+         // column keys...
+         final String type1 = "Type 1";
+         final String type2 = "Type 2";
+         final String type3 = "Type 3";
+         final String type4 = "Type 4";
+         final String type5 = "Type 5";
+         final String type6 = "Type 6";
+         final String type7 = "Type 7";
+         final String type8 = "Type 8";
+ 
+         result.addValue(1.0, series1, type1);
+         result.addValue(4.0, series1, type2);
+         result.addValue(3.0, series1, type3);
+         result.addValue(5.0, series1, type4);
+         result.addValue(5.0, series1, type5);
+         result.addValue(7.0, series1, type6);
+         result.addValue(7.0, series1, type7);
+         result.addValue(8.0, series1, type8);
+ 
+         result.addValue(5.0, series2, type1);
+         result.addValue(7.0, series2, type2);
+         result.addValue(6.0, series2, type3);
+         result.addValue(8.0, series2, type4);
+         result.addValue(4.0, series2, type5);
+         result.addValue(4.0, series2, type6);
+         result.addValue(2.0, series2, type7);
+         result.addValue(1.0, series2, type8);
+ 
+         return result;
+ 
+     }
+ 
+     /**
+      * Creates a dataset.
+      *
+      * @return A dataset.
+      */
+     public CategoryDataset createDataset2() {
+ 
+         final DefaultCategoryDataset result = new DefaultCategoryDataset();
+ 
+         // row keys...
+         final String series1 = "Third";
+         final String series2 = "Fourth";
+ 
+         // column keys...
+         final String type1 = "Type 1";
+         final String type2 = "Type 2";
+         final String type3 = "Type 3";
+         final String type4 = "Type 4";
+         final String type5 = "Type 5";
+         final String type6 = "Type 6";
+         final String type7 = "Type 7";
+         final String type8 = "Type 8";
+ 
+         result.addValue(11.0, series1, type1);
+         result.addValue(14.0, series1, type2);
+         result.addValue(13.0, series1, type3);
+         result.addValue(15.0, series1, type4);
+         result.addValue(15.0, series1, type5);
+         result.addValue(17.0, series1, type6);
+         result.addValue(17.0, series1, type7);
+         result.addValue(18.0, series1, type8);
+ 
+         result.addValue(15.0, series2, type1);
+         result.addValue(17.0, series2, type2);
+         result.addValue(16.0, series2, type3);
+         result.addValue(18.0, series2, type4);
+         result.addValue(14.0, series2, type5);
+         result.addValue(14.0, series2, type6);
+         result.addValue(12.0, series2, type7);
+         result.addValue(11.0, series2, type8);
+ 
+         return result;
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      *
+      * @return A chart.
+      */
+     private JFreeChart createChart() {
+ 
+         final CategoryDataset dataset1 = createDataset1();
+         final NumberAxis rangeAxis1 = new NumberAxis("Value");
+         rangeAxis1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         final LineAndShapeRenderer renderer1 = new LineAndShapeRenderer();
+         renderer1.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
+         final CategoryPlot subplot1 = new CategoryPlot(dataset1, null, rangeAxis1, renderer1);
+         subplot1.setDomainGridlinesVisible(true);
+         
+         final CategoryDataset dataset2 = createDataset2();
+         final NumberAxis rangeAxis2 = new NumberAxis("Value");
+         rangeAxis2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         final BarRenderer renderer2 = new BarRenderer();
+         renderer2.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
+         final CategoryPlot subplot2 = new CategoryPlot(dataset2, null, rangeAxis2, renderer2);
+         subplot2.setDomainGridlinesVisible(true);
+ 
+         final CategoryAxis domainAxis = new CategoryAxis("Category");
+         final CombinedDomainCategoryPlot plot = new CombinedDomainCategoryPlot(domainAxis);
+         plot.add(subplot1, 2);
+         plot.add(subplot2, 1);
+         
+         final JFreeChart result = new JFreeChart(
+             "Combined Domain Category Plot Demo",
+             new Font("SansSerif", Font.BOLD, 12),
+             plot,
+             true
+         );
+         result.getLegend().setAnchor(Legend.SOUTH);
+         return result;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final String title = "Combined Category Plot Demo 1";
+         final CombinedCategoryPlotDemo1 demo = new CombinedCategoryPlotDemo1(title);
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CombinedCategoryPlotDemo2.java jfreechart/source/org/jfree/chart/demo/CombinedCategoryPlotDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/CombinedCategoryPlotDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CombinedCategoryPlotDemo2.java	2004-11-07 15:45:34.000000000 +0100
***************
*** 0 ****
--- 1,230 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------------
+  * CombinedCategoryPlotDemo2.java
+  * ------------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: CombinedCategoryPlotDemo2.java,v 1.20 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 16-May-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.CombinedRangeCategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo for the {@link CombinedRangeCategoryPlot} class.
+  *
+  */
+ public class CombinedCategoryPlotDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public CombinedCategoryPlotDemo2(final String title) {
+ 
+         super(title);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(createChart());
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a dataset.
+      *
+      * @return A dataset.
+      */
+     public CategoryDataset createDataset1() {
+ 
+         final DefaultCategoryDataset result = new DefaultCategoryDataset();
+ 
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+ 
+         // column keys...
+         final String type1 = "Type 1";
+         final String type2 = "Type 2";
+         final String type3 = "Type 3";
+         final String type4 = "Type 4";
+         final String type5 = "Type 5";
+         final String type6 = "Type 6";
+         final String type7 = "Type 7";
+         final String type8 = "Type 8";
+ 
+         result.addValue(1.0, series1, type1);
+         result.addValue(4.0, series1, type2);
+         result.addValue(3.0, series1, type3);
+         result.addValue(5.0, series1, type4);
+         result.addValue(5.0, series1, type5);
+         result.addValue(7.0, series1, type6);
+         result.addValue(7.0, series1, type7);
+         result.addValue(8.0, series1, type8);
+ 
+         result.addValue(5.0, series2, type1);
+         result.addValue(7.0, series2, type2);
+         result.addValue(6.0, series2, type3);
+         result.addValue(8.0, series2, type4);
+         result.addValue(4.0, series2, type5);
+         result.addValue(4.0, series2, type6);
+         result.addValue(2.0, series2, type7);
+         result.addValue(1.0, series2, type8);
+ 
+         return result;
+ 
+     }
+ 
+     /**
+      * Creates a dataset.
+      *
+      * @return A dataset.
+      */
+     public CategoryDataset createDataset2() {
+ 
+         final DefaultCategoryDataset result = new DefaultCategoryDataset();
+ 
+         // row keys...
+         final String series1 = "Third";
+         final String series2 = "Fourth";
+ 
+         // column keys...
+         final String sector1 = "Sector 1";
+         final String sector2 = "Sector 2";
+         final String sector3 = "Sector 3";
+         final String sector4 = "Sector 4";
+ 
+         result.addValue(11.0, series1, sector1);
+         result.addValue(14.0, series1, sector2);
+         result.addValue(13.0, series1, sector3);
+         result.addValue(15.0, series1, sector4);
+ 
+         result.addValue(15.0, series2, sector1);
+         result.addValue(17.0, series2, sector2);
+         result.addValue(16.0, series2, sector3);
+         result.addValue(18.0, series2, sector4);
+ 
+         return result;
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      *
+      * @return A chart.
+      */
+     private JFreeChart createChart() {
+ 
+         final CategoryDataset dataset1 = createDataset1();
+         final CategoryAxis domainAxis1 = new CategoryAxis("Class 1");
+         domainAxis1.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
+         domainAxis1.setMaxCategoryLabelWidthRatio(5.0f);
+         final LineAndShapeRenderer renderer1 = new LineAndShapeRenderer();
+         renderer1.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
+         final CategoryPlot subplot1 = new CategoryPlot(dataset1, domainAxis1, null, renderer1);
+         subplot1.setDomainGridlinesVisible(true);
+ 
+         final CategoryDataset dataset2 = createDataset2();
+         final CategoryAxis domainAxis2 = new CategoryAxis("Class 2");
+         domainAxis2.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
+         domainAxis2.setMaxCategoryLabelWidthRatio(5.0f);
+         final BarRenderer renderer2 = new BarRenderer();
+         renderer2.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
+         final CategoryPlot subplot2 = new CategoryPlot(dataset2, domainAxis2, null, renderer2);
+         subplot2.setDomainGridlinesVisible(true);
+ 
+         final ValueAxis rangeAxis = new NumberAxis("Value");
+         final CombinedRangeCategoryPlot plot = new CombinedRangeCategoryPlot(rangeAxis);
+         plot.add(subplot1, 3);
+         plot.add(subplot2, 2);
+         plot.setOrientation(PlotOrientation.HORIZONTAL);
+ 
+         final JFreeChart result = new JFreeChart(
+             "Combined Range Category Plot Demo",
+             new Font("SansSerif", Font.BOLD, 12),
+             plot,
+             true
+         );
+         result.getLegend().setAnchor(Legend.SOUTH);
+         return result;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final String title = "Combined Category Plot Demo 2";
+         final CombinedCategoryPlotDemo2 demo = new CombinedCategoryPlotDemo2(title);
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo1.java jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo1.java	2004-11-07 15:45:29.000000000 +0100
***************
*** 0 ****
--- 1,226 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * CombinedXYPlotDemo1.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id $
+  *
+  * Changes
+  * -------
+  * 13-Jan-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.annotations.XYTextAnnotation;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CombinedDomainXYPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing how to create a vertical combined chart.
+  *
+  */
+ public class CombinedXYPlotDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public CombinedXYPlotDemo1(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createCombinedChart();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, false, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(panel);
+ 
+     }
+ 
+     /**
+      * Creates a combined chart.
+      *
+      * @return the combined chart.
+      */
+     private JFreeChart createCombinedChart() {
+ 
+         // create subplot 1...
+         final XYDataset data1 = createDataset1();
+         final XYItemRenderer renderer1 = new StandardXYItemRenderer();
+         final NumberAxis rangeAxis1 = new NumberAxis("Range 1");
+         final XYPlot subplot1 = new XYPlot(data1, null, rangeAxis1, renderer1);
+         subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
+         
+         final XYTextAnnotation annotation = new XYTextAnnotation("Hello!", 50.0, 10000.0);
+         annotation.setFont(new Font("SansSerif", Font.PLAIN, 9));
+         annotation.setRotationAngle(Math.PI / 4.0);
+         subplot1.addAnnotation(annotation);
+         
+         // create subplot 2...
+         final XYDataset data2 = createDataset2();
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer();
+         final NumberAxis rangeAxis2 = new NumberAxis("Range 2");
+         rangeAxis2.setAutoRangeIncludesZero(false);
+         final XYPlot subplot2 = new XYPlot(data2, null, rangeAxis2, renderer2);
+         subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);
+ 
+         // parent plot...
+         final CombinedDomainXYPlot plot = new CombinedDomainXYPlot(new NumberAxis("Domain"));
+         plot.setGap(10.0);
+         
+         // add the subplots...
+         plot.add(subplot1, 1);
+         plot.add(subplot2, 1);
+         plot.setOrientation(PlotOrientation.VERTICAL);
+ 
+         // return a new chart containing the overlaid plot...
+         return new JFreeChart("CombinedDomainXYPlot Demo",
+                               JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return Series 1.
+      */
+     private XYDataset createDataset1() {
+ 
+         // create dataset 1...
+         final XYSeries series1 = new XYSeries("Series 1");
+         series1.add(10.0, 12353.3);
+         series1.add(20.0, 13734.4);
+         series1.add(30.0, 14525.3);
+         series1.add(40.0, 13984.3);
+         series1.add(50.0, 12999.4);
+         series1.add(60.0, 14274.3);
+         series1.add(70.0, 15943.5);
+         series1.add(80.0, 14845.3);
+         series1.add(90.0, 14645.4);
+         series1.add(100.0, 16234.6);
+         series1.add(110.0, 17232.3);
+         series1.add(120.0, 14232.2);
+         series1.add(130.0, 13102.2);
+         series1.add(140.0, 14230.2);
+         series1.add(150.0, 11235.2);
+ 
+         final XYSeries series2 = new XYSeries("Series 2");
+         series2.add(10.0, 15000.3);
+         series2.add(20.0, 11000.4);
+         series2.add(30.0, 17000.3);
+         series2.add(40.0, 15000.3);
+         series2.add(50.0, 14000.4);
+         series2.add(60.0, 12000.3);
+         series2.add(70.0, 11000.5);
+         series2.add(80.0, 12000.3);
+         series2.add(90.0, 13000.4);
+         series2.add(100.0, 12000.6);
+         series2.add(110.0, 13000.3);
+         series2.add(120.0, 17000.2);
+         series2.add(130.0, 18000.2);
+         series2.add(140.0, 16000.2);
+         series2.add(150.0, 17000.2);
+ 
+         final XYSeriesCollection collection = new XYSeriesCollection();
+         collection.addSeries(series1);
+         collection.addSeries(series2);
+         return collection;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return Series 2.
+      */
+     private XYDataset createDataset2() {
+ 
+         // create dataset 2...
+         final XYSeries series2 = new XYSeries("Series 3");
+ 
+         series2.add(10.0, 16853.2);
+         series2.add(20.0, 19642.3);
+         series2.add(30.0, 18253.5);
+         series2.add(40.0, 15352.3);
+         series2.add(50.0, 13532.0);
+         series2.add(100.0, 12635.3);
+         series2.add(110.0, 13998.2);
+         series2.add(120.0, 11943.2);
+         series2.add(130.0, 16943.9);
+         series2.add(140.0, 17843.2);
+         series2.add(150.0, 16495.3);
+         series2.add(160.0, 17943.6);
+         series2.add(170.0, 18500.7);
+         series2.add(180.0, 19595.9);
+ 
+         return new XYSeriesCollection(series2);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CombinedXYPlotDemo1 demo = new CombinedXYPlotDemo1("CombinedDomainXYPlot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo2.java jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo2.java	2004-11-07 15:45:22.000000000 +0100
***************
*** 0 ****
--- 1,222 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * CombinedXYPlotDemo2.java
+  * ------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id $
+  *
+  * Changes
+  * -------
+  * 23-Apr-2002 : Version 1 (DG);
+  * 23-May-2002 : Renamed MultiPlotDemo --> CombinedXYPlotDemo (DG);
+  * 25-Jun-2002 : Removed unnecessary imports (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 25-Feb-2004 : Renamed XYToolTipGenerator --> XYItemLabelGenerator (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.DecimalFormat;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.CombinedRangeXYPlot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.date.SerialDate;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing how to create a combined chart.  A
+  * bar chart is displayed on the left, and a line chart on the right.
+  *
+  */
+ public class CombinedXYPlotDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public CombinedXYPlotDemo2(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createCombinedChart();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, false, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(panel);
+ 
+     }
+ 
+     /**
+      * Creates a combined XYPlot chart.
+      *
+      * @return the combined chart.
+      */
+     private JFreeChart createCombinedChart() {
+ 
+         // create subplot 1...
+         final IntervalXYDataset data1 = createDataset1();
+         final XYItemRenderer renderer1 = new XYBarRenderer(0.20);
+         renderer1.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0,000.0")
+             )
+         );
+         final XYPlot subplot1 = new XYPlot(data1, new DateAxis("Date"), null, renderer1);
+ 
+         // create subplot 2...
+         final XYDataset data2 = createDataset2();
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer();
+         renderer2.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0,000.0")
+             )
+         );
+         final XYPlot subplot2 = new XYPlot(data2, new DateAxis("Date"), null, renderer2);
+ 
+         // create a parent plot...
+         final CombinedRangeXYPlot plot = new CombinedRangeXYPlot(new NumberAxis("Value"));
+ 
+         // add the subplots...
+         plot.add(subplot1, 1);
+         plot.add(subplot2, 1);
+ 
+         // return a new chart containing the overlaid plot...
+         return new JFreeChart(
+             "Combined (Range) XY Plot", JFreeChart.DEFAULT_TITLE_FONT, plot, true
+         );
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return Series 1.
+      */
+     private IntervalXYDataset createDataset1() {
+ 
+         // create dataset 1...
+         final TimeSeries series1 = new TimeSeries("Series 1", Day.class);
+         series1.add(new Day(1, SerialDate.MARCH, 2002), 12353.3);
+         series1.add(new Day(2, SerialDate.MARCH, 2002), 13734.4);
+         series1.add(new Day(3, SerialDate.MARCH, 2002), 14525.3);
+         series1.add(new Day(4, SerialDate.MARCH, 2002), 13984.3);
+         series1.add(new Day(5, SerialDate.MARCH, 2002), 12999.4);
+         series1.add(new Day(6, SerialDate.MARCH, 2002), 14274.3);
+         series1.add(new Day(7, SerialDate.MARCH, 2002), 15943.5);
+         series1.add(new Day(8, SerialDate.MARCH, 2002), 14845.3);
+         series1.add(new Day(9, SerialDate.MARCH, 2002), 14645.4);
+         series1.add(new Day(10, SerialDate.MARCH, 2002), 16234.6);
+         series1.add(new Day(11, SerialDate.MARCH, 2002), 17232.3);
+         series1.add(new Day(12, SerialDate.MARCH, 2002), 14232.2);
+         series1.add(new Day(13, SerialDate.MARCH, 2002), 13102.2);
+         series1.add(new Day(14, SerialDate.MARCH, 2002), 14230.2);
+         series1.add(new Day(15, SerialDate.MARCH, 2002), 11235.2);
+ 
+         final TimeSeriesCollection collection = new TimeSeriesCollection(series1);
+         collection.setDomainIsPointsInTime(false);  // this tells the time series collection that
+                                                     // we intend the data to represent time periods
+                                                     // NOT points in time.  This is required when
+                                                     // determining the min/max values in the
+                                                     // dataset's domain.
+         return collection;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return Series 2.
+      */
+     private XYDataset createDataset2() {
+ 
+         // create dataset 2...
+         final TimeSeries series2 = new TimeSeries("Series 2", Day.class);
+ 
+         series2.add(new Day(3, SerialDate.MARCH, 2002), 16853.2);
+         series2.add(new Day(4, SerialDate.MARCH, 2002), 19642.3);
+         series2.add(new Day(5, SerialDate.MARCH, 2002), 18253.5);
+         series2.add(new Day(6, SerialDate.MARCH, 2002), 15352.3);
+         series2.add(new Day(7, SerialDate.MARCH, 2002), 13532.0);
+         series2.add(new Day(8, SerialDate.MARCH, 2002), 12635.3);
+         series2.add(new Day(9, SerialDate.MARCH, 2002), 13998.2);
+         series2.add(new Day(10, SerialDate.MARCH, 2002), 11943.2);
+         series2.add(new Day(11, SerialDate.MARCH, 2002), 16943.9);
+         series2.add(new Day(12, SerialDate.MARCH, 2002), 17843.2);
+         series2.add(new Day(13, SerialDate.MARCH, 2002), 16495.3);
+         series2.add(new Day(14, SerialDate.MARCH, 2002), 17943.6);
+         series2.add(new Day(15, SerialDate.MARCH, 2002), 18500.7);
+         series2.add(new Day(16, SerialDate.MARCH, 2002), 19595.9);
+ 
+         return new TimeSeriesCollection(series2);
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CombinedXYPlotDemo2 demo = new CombinedXYPlotDemo2("Combined XY Plot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo3.java jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo3.java	2004-11-07 15:45:18.000000000 +0100
***************
*** 0 ****
--- 1,165 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * CombinedXYPlotDemo3.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id $
+  *
+  * Changes
+  * -------
+  * 03-Jul-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CombinedRangeXYPlot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.time.MovingAverage;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing how to create a combined chart using...
+  *
+  */
+ public class CombinedXYPlotDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public CombinedXYPlotDemo3(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createCombinedChart();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, false, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(panel);
+ 
+     }
+ 
+     /**
+      * Creates a combined XYPlot chart.
+      *
+      * @return the combined chart.
+      */
+     private JFreeChart createCombinedChart() {
+ 
+         // create a default chart based on some sample data...
+         final TimeSeriesCollection dataset0 = new TimeSeriesCollection();
+         final TimeSeries eur = DemoDatasetFactory.createEURTimeSeries();
+         dataset0.addSeries(eur);
+ 
+         final TimeSeriesCollection dataset1 = new TimeSeriesCollection();
+         final TimeSeries mav = MovingAverage.createMovingAverage(
+             eur, "EUR/GBP (30 Day MA)", 30, 30
+         );
+         dataset1.addSeries(eur);
+         dataset1.addSeries(mav);
+ 
+         final TimeSeriesCollection dataset2 = new TimeSeriesCollection();
+         dataset2.addSeries(eur);
+ 
+         JFreeChart chart = null;
+ 
+         // make a common vertical axis for all the sub-plots
+         final NumberAxis valueAxis = new NumberAxis("Value");
+         valueAxis.setAutoRangeIncludesZero(false);  // override default
+ 
+         // make a horizontally combined plot
+         final CombinedRangeXYPlot parent = new CombinedRangeXYPlot(valueAxis);
+ 
+         // add subplot 1...
+         final XYPlot subplot1 = new XYPlot(dataset0, new DateAxis("Date 1"), null,
+                                      new StandardXYItemRenderer());
+         parent.add(subplot1, 1);
+ 
+         // add subplot 2...
+         final XYPlot subplot2 = new XYPlot(dataset1, new DateAxis("Date 2"), null,
+                                      new StandardXYItemRenderer());
+         parent.add(subplot2, 1);
+ 
+         // add subplot 3...
+         final XYPlot subplot3 = new XYPlot(dataset2, new DateAxis("Date 3"),
+                                      null, new XYBarRenderer(0.20));
+         parent.add(subplot3, 1);
+ 
+         // now make the top level JFreeChart
+         chart = new JFreeChart("Demo Chart", JFreeChart.DEFAULT_TITLE_FONT, parent, true);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle("This is a subtitle",
+                                            new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CombinedXYPlotDemo3 demo = new CombinedXYPlotDemo3("Combined XY Plot Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo4.java jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo4.java	2004-11-07 15:45:13.000000000 +0100
***************
*** 0 ****
--- 1,236 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * CombinedXYPlotDemo4.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id $
+  *
+  * Changes
+  * -------
+  * 29-Jul-2003 : Version 1 (DG);
+  * 27-Apr-2004 : Modified for changes to XYPlot (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.annotations.XYTextAnnotation;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CombinedDomainXYPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing how to create a vertical combined chart.
+  *
+  */
+ public class CombinedXYPlotDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public CombinedXYPlotDemo4(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createCombinedChart();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, false, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(panel);
+ 
+     }
+ 
+     /**
+      * Creates a combined chart.
+      *
+      * @return The combined chart.
+      */
+     private JFreeChart createCombinedChart() {
+ 
+         // create subplot 1...
+         final XYDataset data1 = createDataset1();
+         final XYItemRenderer renderer1 = new StandardXYItemRenderer();
+         final NumberAxis rangeAxis1 = new NumberAxis("Range 1");
+         final XYPlot subplot1 = new XYPlot(data1, null, rangeAxis1, renderer1);
+         subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
+ 
+         // add secondary axis
+         subplot1.setDataset(1, createDataset2());
+         final NumberAxis axis2 = new NumberAxis("Range Axis 2");
+         axis2.setAutoRangeIncludesZero(false);
+         subplot1.setRangeAxis(1, axis2);
+         subplot1.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_RIGHT);
+         subplot1.setRenderer(1, new StandardXYItemRenderer());       
+         subplot1.mapDatasetToRangeAxis(1, 1);
+ 
+         final XYTextAnnotation annotation = new XYTextAnnotation("Hello!", 50.0, 10000.0);
+         annotation.setFont(new Font("SansSerif", Font.PLAIN, 9));
+         annotation.setRotationAngle(Math.PI / 4.0);
+         subplot1.addAnnotation(annotation);
+         
+         // create subplot 2...
+         final XYDataset data2 = createDataset2();
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer();
+         final NumberAxis rangeAxis2 = new NumberAxis("Range 2");
+         rangeAxis2.setAutoRangeIncludesZero(false);
+         final XYPlot subplot2 = new XYPlot(data2, null, rangeAxis2, renderer2);
+         subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);
+ 
+         // parent plot...
+         final CombinedDomainXYPlot plot = new CombinedDomainXYPlot(new NumberAxis("Domain"));
+         plot.setGap(10.0);
+         
+         // add the subplots...
+         plot.add(subplot1, 1);
+         plot.add(subplot2, 1);
+         plot.setOrientation(PlotOrientation.VERTICAL);
+ 
+         // return a new chart containing the overlaid plot...
+         return new JFreeChart("CombinedDomainXYPlot Demo",
+                               JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return Series 1.
+      */
+     private XYDataset createDataset1() {
+ 
+         // create dataset 1...
+         final XYSeries series1 = new XYSeries("Series 1a");
+         series1.add(10.0, 12353.3);
+         series1.add(20.0, 13734.4);
+         series1.add(30.0, 14525.3);
+         series1.add(40.0, 13984.3);
+         series1.add(50.0, 12999.4);
+         series1.add(60.0, 14274.3);
+         series1.add(70.0, 15943.5);
+         series1.add(80.0, 14845.3);
+         series1.add(90.0, 14645.4);
+         series1.add(100.0, 16234.6);
+         series1.add(110.0, 17232.3);
+         series1.add(120.0, 14232.2);
+         series1.add(130.0, 13102.2);
+         series1.add(140.0, 14230.2);
+         series1.add(150.0, 11235.2);
+ 
+         final XYSeries series1b = new XYSeries("Series 1b");
+         series1b.add(10.0, 15000.3);
+         series1b.add(20.0, 11000.4);
+         series1b.add(30.0, 17000.3);
+         series1b.add(40.0, 15000.3);
+         series1b.add(50.0, 14000.4);
+         series1b.add(60.0, 12000.3);
+         series1b.add(70.0, 11000.5);
+         series1b.add(80.0, 12000.3);
+         series1b.add(90.0, 13000.4);
+         series1b.add(100.0, 12000.6);
+         series1b.add(110.0, 13000.3);
+         series1b.add(120.0, 17000.2);
+         series1b.add(130.0, 18000.2);
+         series1b.add(140.0, 16000.2);
+         series1b.add(150.0, 17000.2);
+ 
+         final XYSeriesCollection collection = new XYSeriesCollection();
+         collection.addSeries(series1);
+         collection.addSeries(series1b);
+         return collection;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return A sample dataset.
+      */
+     private XYDataset createDataset2() {
+ 
+         // create dataset 2...
+         final XYSeries series2 = new XYSeries("Series 2");
+ 
+         series2.add(10.0, 16853.2);
+         series2.add(20.0, 19642.3);
+         series2.add(30.0, 18253.5);
+         series2.add(40.0, 15352.3);
+         series2.add(50.0, 13532.0);
+         series2.add(100.0, 12635.3);
+         series2.add(110.0, 13998.2);
+         series2.add(120.0, 11943.2);
+         series2.add(130.0, 16943.9);
+         series2.add(140.0, 17843.2);
+         series2.add(150.0, 16495.3);
+         series2.add(160.0, 17943.6);
+         series2.add(170.0, 18500.7);
+         series2.add(180.0, 19595.9);
+ 
+         return new XYSeriesCollection(series2);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CombinedXYPlotDemo4 demo = new CombinedXYPlotDemo4("CombinedDomainXYPlot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo5.java jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo5.java
*** jfreechart-orig/source/org/jfree/chart/demo/CombinedXYPlotDemo5.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CombinedXYPlotDemo5.java	2004-11-07 15:45:09.000000000 +0100
***************
*** 0 ****
--- 1,171 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * CombinedXYPlotDemo5.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id $
+  *
+  * Changes
+  * -------
+  * 15-Sep-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CombinedRangeXYPlot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.time.MovingAverage;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing how to create a combined chart using...
+  *
+  */
+ public class CombinedXYPlotDemo5 extends ApplicationFrame {
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public CombinedXYPlotDemo5(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createCombinedChart();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, false, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(panel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+ 
+     /**
+      * Creates a combined XYPlot chart.
+      *
+      * @return the combined chart.
+      */
+     private JFreeChart createCombinedChart() {
+ 
+         // create a default chart based on some sample data...
+         final TimeSeriesCollection dataset0 = new TimeSeriesCollection();
+         final TimeSeries eur = DemoDatasetFactory.createEURTimeSeries();
+         dataset0.addSeries(eur);
+ 
+         final TimeSeriesCollection dataset1 = new TimeSeriesCollection();
+         final TimeSeries mav = MovingAverage.createMovingAverage(
+             eur, "EUR/GBP (30 Day MA)", 30, 30
+         );
+         dataset1.addSeries(eur);
+         dataset1.addSeries(mav);
+ 
+         final TimeSeriesCollection dataset2 = new TimeSeriesCollection();
+         dataset2.addSeries(eur);
+ 
+         JFreeChart chart = null;
+ 
+         // make a common vertical axis for all the sub-plots
+         final NumberAxis valueAxis = new NumberAxis("Value");
+         valueAxis.setAutoRangeIncludesZero(false);  // override default
+ 
+         // make a horizontally combined plot
+         final CombinedRangeXYPlot parent = new CombinedRangeXYPlot(valueAxis);
+ 
+         // add subplot 1...
+         final XYPlot subplot1 = new XYPlot(dataset0, new DateAxis("Date 1"), null,
+                                      new StandardXYItemRenderer());
+         subplot1.setDomainCrosshairVisible(true);
+         subplot1.setRangeCrosshairVisible(true);
+         parent.add(subplot1, 1);
+ 
+         // add subplot 2...
+         final XYPlot subplot2 = new XYPlot(dataset1, new DateAxis("Date 2"), null,
+                                      new StandardXYItemRenderer());
+         subplot2.setDomainCrosshairVisible(true);
+         subplot2.setRangeCrosshairVisible(true);
+         parent.add(subplot2, 1);
+ 
+         // add subplot 3...
+         final XYPlot subplot3 = new XYPlot(dataset2, new DateAxis("Date 3"),
+                                      null, new XYBarRenderer(0.20));
+         subplot3.setDomainCrosshairVisible(true);
+         subplot3.setRangeCrosshairVisible(true);
+         parent.add(subplot3, 1);
+ 
+         // now make the top level JFreeChart
+         chart = new JFreeChart("Demo Chart", JFreeChart.DEFAULT_TITLE_FONT, parent, true);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle("This is a subtitle",
+                                            new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CombinedXYPlotDemo5 demo = new CombinedXYPlotDemo5("Combined XY Plot Demo 5");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CompassDemo2.java jfreechart/source/org/jfree/chart/demo/CompassDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/CompassDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CompassDemo2.java	2004-11-07 15:44:59.000000000 +0100
***************
*** 0 ****
--- 1,121 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * CompassDemo2.java
+  * -----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: CompassDemo2.java,v 1.7 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 04-Aug-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.CompassPlot;
+ import org.jfree.data.general.DefaultValueDataset;
+ import org.jfree.data.general.ValueDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to...
+  *
+  */
+ public class CompassDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo application.
+      *
+      * @param title  the frame title.
+      */
+     public CompassDemo2(final String title) {
+ 
+         super(title);
+ 
+         final ValueDataset dataset = new DefaultValueDataset(new Double(45.0));
+         final JFreeChart chart = createChart(dataset);
+         
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setEnforceFileExtensions(false);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final ValueDataset dataset) {
+         
+         final CompassPlot plot = new CompassPlot(dataset);
+         plot.setSeriesNeedle(7);
+         plot.setSeriesPaint(0, Color.red);
+         plot.setSeriesOutlinePaint(0, Color.red);
+         final JFreeChart chart = new JFreeChart(plot);
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CompassDemo2 demo = new CompassDemo2("Compass Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CompassDemo.java jfreechart/source/org/jfree/chart/demo/CompassDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/CompassDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CompassDemo.java	2004-11-07 15:45:04.000000000 +0100
***************
*** 0 ****
--- 1,432 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
+  * in the United States and other countries.]
+  *
+  * ----------------
+  * CompassDemo.java
+  * ----------------
+  * (C) Copyright 2002-2004, by the Australian Antarctic Division and Contributors.
+  *
+  * Original Author:  Bryan Scott (for the Australian Antarctic Division);
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: CompassDemo.java,v 1.15 2004/04/26 19:11:53 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 25-Sep-2002 : Version 1, contributed by Bryan Scott (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 27-Mar-2003 : Changed dataset to ValueDataset (DG);
+  * 16-Mar-2004 : Fixed null data display issue (BRS);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.awt.GridBagConstraints;
+ import java.awt.GridBagLayout;
+ import java.awt.GridLayout;
+ import java.awt.Insets;
+ import java.awt.Toolkit;
+ import java.awt.event.ActionEvent;
+ import java.beans.PropertyChangeEvent;
+ import java.beans.PropertyChangeListener;
+ 
+ import javax.swing.JCheckBox;
+ import javax.swing.JComboBox;
+ import javax.swing.JFrame;
+ import javax.swing.JPanel;
+ import javax.swing.SwingConstants;
+ import javax.swing.border.TitledBorder;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.CompassPlot;
+ import org.jfree.data.general.DefaultValueDataset;
+ import org.jfree.ui.Spinner;
+ 
+ /**
+  * A demo application showing how to use the {@link CompassPlot} class.
+  *
+  * @author Bryan Scott
+  */
+ public class CompassDemo extends JPanel {
+ 
+     /** Whether to output messages to the console **/
+     public static final boolean DEBUG = true;
+ 
+     /** The available needle types. */
+     public static final String[] NEEDLE_TYPES
+         = {"Arrow", "Line", "Long", "Pin", "Plum", "Pointer", "Ship", "Wind", "Arrow"};
+ 
+     /** Dataset 1. */
+     private DefaultValueDataset compassData = new DefaultValueDataset(new Double(0.0));
+ 
+     /** Dataset 2. */
+     private DefaultValueDataset shipData = new DefaultValueDataset(new Double(0.0));
+ 
+     /** The compass plot. */
+     private CompassPlot compassPlot = new CompassPlot(this.compassData);
+ 
+     /** The chart. */
+     private JFreeChart compassChart = new JFreeChart("Compass Test",
+                                                      JFreeChart.DEFAULT_TITLE_FONT,
+                                                      this.compassPlot, false);
+ 
+     /** The chart panel. */
+     private ChartPanel panelCompass = new ChartPanel(this.compassChart);
+ 
+     /** A grid layout. */
+     private GridLayout gridLayout1 = new GridLayout();
+ 
+     /** A panel. */
+     private JPanel panelCompassHolder = new JPanel();
+ 
+     /** A border layout. */
+     private BorderLayout borderLayout = new BorderLayout();
+ 
+     /** A panel. */
+     private JPanel jPanel12 = new JPanel();
+ 
+     /** A checkbox. */
+     private JCheckBox windNullCheckBox = new JCheckBox();
+ 
+     /** A checkbox. */
+     private JCheckBox shipNullCheckBox = new JCheckBox();
+ 
+     // SpinnerNumberModel modelWind = new SpinnerNumberModel(0, -1, 361, 1);
+     // SpinnerNumberModel modelShip = new SpinnerNumberModel(0, -1, 361, 1);
+     // JSpinner spinWind = new JSpinner(modelWind);
+     // JSpinner spinShip = new JSpinner(modelShip);
+ 
+     /** The wind spinner control. */
+     private Spinner spinWind = new Spinner(270);
+ 
+     /** The ship spinner control. */
+     private Spinner spinShip = new Spinner(45);
+ 
+     /** A panel. */
+     private JPanel jPanel1 = new JPanel();
+ 
+     /** A combo box. */
+     private JComboBox pick1Pointer = new JComboBox(NEEDLE_TYPES);
+ 
+     /** A panel. */
+     private JPanel jPanel2 = new JPanel();
+ 
+     /** A combo box. */
+     private JComboBox pick2Pointer = new JComboBox(NEEDLE_TYPES);
+ 
+     /** A titled border. */
+     private TitledBorder titledBorder1;
+ 
+     /** A titled border. */
+     private TitledBorder titledBorder2;
+ 
+     /** A grid bag layout. */
+     private GridBagLayout gridBagLayout1 = new GridBagLayout();
+ 
+     /** A grid bag layout. */
+     private GridBagLayout gridBagLayout2 = new GridBagLayout();
+ 
+     /** A titled border. */
+     private TitledBorder titledBorder3;
+ 
+     /** A grid layout. */
+     private GridLayout gridLayout2 = new GridLayout();
+ 
+     /**
+      * Default constructor.
+      */
+     public CompassDemo() {
+         try {
+             //this.compassPlot.addData(this.compassData);
+             this.compassPlot.addData(this.shipData);
+             this.compassPlot.setSeriesNeedle(0, 7);
+             this.compassPlot.setSeriesNeedle(1, 5);
+             this.compassPlot.setSeriesPaint(0, Color.blue);
+             this.compassPlot.setSeriesOutlinePaint(0, Color.blue);
+             this.compassPlot.setSeriesPaint(1, Color.red);
+             this.compassPlot.setSeriesOutlinePaint(1, Color.red);
+             this.pick1Pointer.setSelectedIndex(7);
+             this.pick2Pointer.setSelectedIndex(5);
+             jbInit();
+         }
+         catch (Exception ex) {
+             ex.printStackTrace();
+         }
+     }
+ 
+     /**
+      * Initialises the user interface.
+      *
+      * @throws Exception if there are any exceptions.
+      */
+     void jbInit() throws Exception {
+         this.titledBorder1 = new TitledBorder("");
+         this.titledBorder2 = new TitledBorder("");
+         this.titledBorder3 = new TitledBorder("");
+         setLayout(this.gridLayout1);
+         this.panelCompassHolder.setLayout(this.borderLayout);
+         this.windNullCheckBox.setHorizontalTextPosition(SwingConstants.LEADING);
+         this.windNullCheckBox.setText("Null");
+         this.windNullCheckBox.addActionListener(new java.awt.event.ActionListener() {
+             public void actionPerformed(final ActionEvent e) {
+                 checkWindNullActionPerformed(e);
+             }
+         });
+         this.shipNullCheckBox.setHorizontalTextPosition(SwingConstants.LEFT);
+         this.shipNullCheckBox.setText("Null");
+         this.shipNullCheckBox.addActionListener(new java.awt.event.ActionListener() {
+             public void actionPerformed(final ActionEvent e) {
+                 checkShipNullActionPerformed(e);
+             }
+         });
+ 
+         this.spinShip.addPropertyChangeListener(new PropertyChangeListener() {
+             public void propertyChange(final PropertyChangeEvent evt) {
+               if (DEBUG) {
+                 System.out.println("compassDemo:spinShipPropertyChange");
+               }
+               final Spinner spinner = (Spinner) evt.getSource();
+               if (spinner.isEnabled()) {
+                 shipData.setValue(new Double(spinner.getValue()));
+               }
+             }
+         });
+ 
+         this.spinWind.addPropertyChangeListener(new PropertyChangeListener() {
+             public void propertyChange(final PropertyChangeEvent evt) {
+                 if (DEBUG) {
+                   System.out.println("compassDemo:spinWindPropertyChange");
+                 }  
+                 final Spinner spinner = (Spinner) evt.getSource();
+                 if (spinner.isEnabled()) {
+                   compassData.setValue(new Double(spinner.getValue()));
+                 }
+             }
+         });
+         this.jPanel12.setLayout(this.gridLayout2);
+         this.jPanel2.setBorder(this.titledBorder1);
+         this.jPanel2.setLayout(this.gridBagLayout2);
+         this.jPanel1.setBorder(this.titledBorder2);
+         this.jPanel1.setLayout(this.gridBagLayout1);
+         this.titledBorder1.setTitle("Second Pointer");
+         this.titledBorder2.setTitle("First Pointer");
+         this.titledBorder3.setTitle("Plot Options");
+         this.pick2Pointer.addActionListener(new java.awt.event.ActionListener() {
+             public void actionPerformed(final ActionEvent e) {
+                 pick2PointerActionPerformed(e);
+             }
+         });
+         this.pick1Pointer.addActionListener(new java.awt.event.ActionListener() {
+             public void actionPerformed(final ActionEvent e) {
+                 pick1PointerActionPerformed(e);
+             }
+         });
+         add(this.panelCompassHolder, null);
+         this.panelCompassHolder.add(this.jPanel12, BorderLayout.SOUTH);
+         this.jPanel12.add(this.jPanel1, null);
+ 
+         this.jPanel1.add(this.pick1Pointer,
+                     new GridBagConstraints(0, 0, 1, 1, 1.0, 0.0,
+                                            GridBagConstraints.CENTER,
+                                            GridBagConstraints.HORIZONTAL,
+                                            new Insets(0, 0, 0, 0),
+                                            0, 0));
+ 
+         this.jPanel1.add(this.windNullCheckBox,
+                     new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0,
+                                            GridBagConstraints.CENTER,
+                                            GridBagConstraints.NONE,
+                                            new Insets(0, 0, 0, 0),
+                                            0, 0));
+ 
+         this.jPanel1.add(this.spinWind,
+                     new GridBagConstraints(2, 0, 1, 1, 1.0, 0.0,
+                                            GridBagConstraints.CENTER,
+                                            GridBagConstraints.BOTH,
+                                            new Insets(0, 0, 0, 0),
+                                            0, 0));
+ 
+         this.jPanel12.add(this.jPanel2, null);
+ 
+         this.jPanel2.add(this.pick2Pointer,
+                     new GridBagConstraints(0, 0, 1, 1, 1.0, 0.0,
+                                            GridBagConstraints.CENTER,
+                                            GridBagConstraints.HORIZONTAL,
+                                            new Insets(0, 0, 0, 0),
+                                            0, 0));
+ 
+         this.jPanel2.add(this.shipNullCheckBox,
+                     new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0,
+                                            GridBagConstraints.CENTER,
+                                            GridBagConstraints.NONE,
+                                            new Insets(0, 0, 0, 0),
+                                            0, 0));
+ 
+         this.jPanel2.add(this.spinShip,
+                     new GridBagConstraints(2, 0, 1, 1, 1.0, 0.0,
+                     GridBagConstraints.CENTER,
+                     GridBagConstraints.BOTH,
+                     new Insets(0, 0, 0, 0),
+                     0, 0));
+ 
+         this.panelCompassHolder.add(this.panelCompass, BorderLayout.CENTER);
+ 
+     }
+ 
+     /**
+      * Entry point for the demo application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CompassDemo panel = new CompassDemo();
+ 
+         final JFrame frame = new JFrame();
+         frame.getContentPane().setLayout(new BorderLayout(5, 5));
+         frame.setDefaultCloseOperation(3);
+         frame.setTitle("Compass Demo");
+         frame.getContentPane().add(panel, BorderLayout.CENTER);
+         frame.setSize(700, 400);
+         final Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
+         frame.setLocation((d.width - frame.getSize().width) / 2,
+                           (d.height - frame.getSize().height) / 2);
+         frame.setVisible(true);
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    *
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+ 
+     /**
+      * Updates the data.
+      *
+      * @param value  the value.
+      */
+     public void adjustData(final double value) {
+ 
+         final Number val = this.compassData.getValue();
+         double newVal = value;
+ 
+         if (val != null) {
+             newVal += val.doubleValue();
+         }
+ 
+         if (newVal > 360) {
+             newVal = 0;
+         }
+ 
+         if (newVal < 0) {
+             newVal = 360;
+         }
+ 
+         this.compassData.setValue(new Double(newVal));
+ 
+     }
+ 
+     /**
+      * Handles an action event.
+      *
+      * @param e  the event.
+      */
+     void checkWindNullActionPerformed(final ActionEvent e) {
+         if (CompassDemo.DEBUG) {
+             System.out.println("CompassDemo:checkWindNull: " + this.windNullCheckBox.isSelected());
+         }
+         if (this.windNullCheckBox.isSelected()) {
+             this.compassData.setValue(null);
+             this.spinWind.setEnabled(false);
+         }
+         else {
+             //  compassData.setValue((new Double(((Integer)spinWind.getValue()).intValue())));
+             this.compassData.setValue(new Double(this.spinWind.getValue()));
+             this.spinWind.setEnabled(true);
+         }
+         if (CompassDemo.DEBUG) {
+           System.out.println("CompassDemo:checkWindNull: " + this.compassData.getValue());
+         }
+           
+     }
+ 
+     /**
+      * Handles an action event.
+      *
+      * @param e  the event.
+      */
+     void checkShipNullActionPerformed(final ActionEvent e) {
+         if (CompassDemo.DEBUG) {
+             System.out.println("CompassDemo:checkShipNull: " + this.shipNullCheckBox.isSelected());
+         }
+         if (this.shipNullCheckBox.isSelected()) {
+             this.shipData.setValue(null);
+             this.spinShip.setEnabled(false);
+         }
+         else {
+            // shipData.setValue((new Double(((Integer)spinShip.getValue()).intValue())));
+             this.shipData.setValue(new Double(this.spinShip.getValue()));
+             this.spinShip.setEnabled(true);
+         }
+     }
+ 
+     /**
+      * Handles an action event.
+      *
+      * @param e  the event.
+      */
+     void pick2PointerActionPerformed(final ActionEvent e) {
+       if (CompassDemo.DEBUG) {
+         System.out.println("compassDemo:pick2PointActionPerformed " + e.getActionCommand() + ",");
+       }
+       this.compassPlot.setSeriesNeedle(1, this.pick2Pointer.getSelectedIndex());
+       this.compassPlot.setSeriesPaint(1, Color.red);
+       this.compassPlot.setSeriesOutlinePaint(1, Color.red);
+     }
+ 
+     /**
+      * Handles an action event.
+      *
+      * @param e  the event.
+      */
+     void pick1PointerActionPerformed(final ActionEvent e) {
+         if (CompassDemo.DEBUG) {
+           System.out.println("compassDemo:pick1PointActionPerformed " + e.getActionCommand() + ",");
+         }
+         
+         this.compassPlot.setSeriesNeedle(0, this.pick1Pointer.getSelectedIndex());
+         this.compassPlot.setSeriesPaint(0, Color.blue);
+         this.compassPlot.setSeriesOutlinePaint(0, Color.blue);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CompassFormatDemo.java jfreechart/source/org/jfree/chart/demo/CompassFormatDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/CompassFormatDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CompassFormatDemo.java	2004-11-07 15:44:53.000000000 +0100
***************
*** 0 ****
--- 1,198 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * CompassFormatDemo.java
+  * ----------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: CompassFormatDemo.java,v 1.4 2004/04/27 14:53:09 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 18-Feb-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CompassFormat;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.NumberTickUnit;
+ import org.jfree.chart.axis.TickUnits;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYAreaRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.RegularTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo of the {@link CompassFormat} class.
+  *
+  */
+ public class CompassFormatDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public CompassFormatDemo(final String title) {
+         super(title);
+         final JFreeChart chart = createChart();
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @param count  the item count.
+      * 
+      * @return the dataset.
+      */
+     private XYDataset createDirectionDataset(final int count) {
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         final TimeSeries s1 = new TimeSeries("Wind Direction", Minute.class);
+         RegularTimePeriod start = new Minute();
+         double direction = 180.0;
+         for (int i = 0; i < count; i++) {
+             s1.add(start, direction);
+             start = start.next();
+             direction = direction + (Math.random() - 0.5) * 15.0;
+             if (direction < 0.0) {
+                 direction = direction + 360.0;
+             }
+             else if (direction > 360.0) {
+                 direction = direction - 360.0;
+             }
+         }
+         dataset.addSeries(s1);
+         return dataset;
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @param count  the item count.
+      * 
+      * @return the dataset.
+      */
+     private XYDataset createForceDataset(final int count) {
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         final TimeSeries s1 = new TimeSeries("Wind Force", Minute.class);
+         RegularTimePeriod start = new Minute();
+         double force = 3.0;
+         for (int i = 0; i < count; i++) {
+             s1.add(start, force);
+             start = start.next();
+             force = Math.max(0.5, force + (Math.random() - 0.5) * 0.5);
+         }
+         dataset.addSeries(s1);
+         return dataset;
+     }
+ 
+     /**
+      * Creates a sample chart.
+      * 
+      * @return a sample chart.
+      */
+     private JFreeChart createChart() {
+         final XYDataset direction = createDirectionDataset(600);
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Time", 
+             "Date", 
+             "Direction",
+             direction,
+             true,
+             true,
+             false
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.getDomainAxis().setLowerMargin(0.0);
+         plot.getDomainAxis().setUpperMargin(0.0);
+         
+         // configure the range axis to display directions...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setAutoRangeIncludesZero(false);
+         final TickUnits units = new TickUnits();
+         units.add(new NumberTickUnit(180.0, new CompassFormat()));
+         units.add(new NumberTickUnit(90.0, new CompassFormat()));
+         units.add(new NumberTickUnit(45.0, new CompassFormat()));
+         units.add(new NumberTickUnit(22.5, new CompassFormat()));
+         rangeAxis.setStandardTickUnits(units);
+         
+         // add the wind force with a secondary dataset/renderer/axis
+         plot.setRangeAxis(rangeAxis);
+         final XYItemRenderer renderer2 = new XYAreaRenderer();
+         final ValueAxis axis2 = new NumberAxis("Force");
+         axis2.setRange(0.0, 12.0);
+         renderer2.setSeriesPaint(0, new Color(0, 0, 255, 128));
+         plot.setDataset(1, createForceDataset(600));
+         plot.setRenderer(1, renderer2);
+         plot.setRangeAxis(1, axis2);
+         plot.mapDatasetToRangeAxis(1, 1);
+         
+         return chart;
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final CompassFormatDemo demo = new CompassFormatDemo("Compass Format Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ContourPlotDemo2.java jfreechart/source/org/jfree/chart/demo/ContourPlotDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/ContourPlotDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ContourPlotDemo2.java	2004-11-07 15:44:42.000000000 +0100
***************
*** 0 ****
--- 1,647 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * ContourPlotDemo2.java
+  * ---------------------
+  * (C) Copyright 2003, 2004, by David M. O'Donnell and Contributors.
+  *
+  * Original Author:  David M. O'Donnell;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: ContourPlotDemo2.java,v 1.18 2004/04/30 08:05:59 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 22-Apr-2003 : Added standard header (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.awt.GradientPaint;
+ import java.util.Date;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.ClipPath;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.annotations.XYTextAnnotation;
+ import org.jfree.chart.axis.ColorBar;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.LogarithmicAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.ContourPlot;
+ import org.jfree.data.contour.ContourDataset;
+ import org.jfree.data.contour.DefaultContourDataset;
+ import org.jfree.data.contour.NonGridContourDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application to illustrate ContourPlot.
+  * Command line options exist to control different plot properties
+  * such as colorbar orientation, etc.  List of options are available
+  * by launching with the -? option, e.g., ContourPlotDemo -?
+  *
+  * @author DMO
+  */
+ public class ContourPlotDemo2 extends ApplicationFrame {
+ 
+     /** The x axis. */
+     private ValueAxis xAxis = null;
+ 
+     /** The y axis. */    
+     private NumberAxis yAxis = null;
+     
+     /** The z axis. */
+     private ColorBar zColorBar = null;
+ 
+     /** A flag controlling the orientation of the z axis. */
+     //private static boolean zIsVertical = false;
+ 
+     /** A flag indicating whether or not the x-values are dates. */
+     private static boolean xIsDate = false;
+     
+     /** ??. */
+     private static boolean asPoints = false;
+ 
+     /** Logarithmic x-axis? */
+     private static boolean xIsLog = false;
+     
+     /** Logarithmic y axis? */
+     private static boolean yIsLog = false;
+     
+     /** Logarithmic z axis? */
+     private static boolean zIsLog = false;
+ 
+     /** Inverted x axis? */
+     private static boolean xIsInverted = true;
+     
+     /** Inverted y axis? */
+     private static boolean yIsInverted = false;
+     
+     /** Inverted z axis? */
+     private static boolean zIsInverted = false;
+ 
+     /** Annotate? */
+     private static boolean annotate = false;
+ 
+     /** Number of x intervals. */
+     private static int numX = 10;
+     
+     /** Number of y intervals. */
+     private static int numY = 20;
+ 
+     /** The plot ratio. */
+     private static double ratio = 0.0;
+ 
+     /** Temp data storage. */
+     private double[] tmpDoubleY = null;
+     
+     /** Temp data storage. */
+     private double[] tmpDoubleX = null;
+     
+     /** Temp data storage. */
+     private double[] tmpDoubleZ = null;
+ 
+     /** X outline. */
+     private double[] xOutline = null;
+ 
+     /** Y outline. */
+     private double[] yOutline = null;
+ 
+     /** Draw the outline? */
+     static boolean drawOutline = false;
+     
+     /** Fill the outline? */
+     static boolean fillOutline = false;
+     
+     /** ??. */
+     static int power = 4;
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public ContourPlotDemo2(final String title) {
+ 
+         super(title);
+ 
+         final JFreeChart chart = createContourPlot();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, true, true);
+         panel.setPreferredSize(new java.awt.Dimension(1000, 800));
+         panel.setMaximumDrawHeight(100000); //stop chartpanel from scaling
+         panel.setMaximumDrawWidth(100000); //stop chartpanel from scaling
+         panel.setHorizontalZoom(true);
+         panel.setVerticalZoom(true);
+         panel.setFillZoomRectangle(true);
+         setContentPane(panel);
+ 
+     }
+ 
+     /**
+      * Creates a ContourPlot chart.
+      *
+      * @return the ContourPlot chart.
+      */
+     private JFreeChart createContourPlot() {
+ 
+         final String title = "Contour Plot";
+         final String xAxisLabel = "X Values";
+         final String yAxisLabel = "Y Values";
+         final String zAxisLabel = "Color Values";
+ 
+         if (xIsDate) {
+             this.xAxis = new DateAxis(xAxisLabel);
+             xIsLog = false; // force axis to be linear when displaying dates
+         }
+         else {
+             if (xIsLog) {
+                 this.xAxis = new LogarithmicAxis(xAxisLabel);
+             }
+             else {
+                 this.xAxis = new NumberAxis(xAxisLabel);
+             }
+         }
+ 
+         if (yIsLog) {
+             this.yAxis = new LogarithmicAxis(yAxisLabel);
+         }
+         else {
+             this.yAxis = new NumberAxis(yAxisLabel);
+         }
+ 
+         if (zIsLog) {
+             this.zColorBar = new ColorBar(zAxisLabel);
+         }
+         else {
+             this.zColorBar = new ColorBar(zAxisLabel);
+         }
+ 
+         if (this.xAxis instanceof NumberAxis) {
+             ((NumberAxis) this.xAxis).setAutoRangeIncludesZero(false);
+             ((NumberAxis) this.xAxis).setInverted(xIsInverted);
+         }
+ 
+         this.yAxis.setAutoRangeIncludesZero(false);
+ 
+         this.yAxis.setInverted(yIsInverted);
+ 
+         if (!xIsDate) {
+             ((NumberAxis) this.xAxis).setLowerMargin(0.0);
+             ((NumberAxis) this.xAxis).setUpperMargin(0.0);
+         }
+ 
+         this.yAxis.setLowerMargin(0.0);
+         this.yAxis.setUpperMargin(0.0);
+ 
+         if (!xIsDate) {
+             this.xAxis.setRange(10.5, 15.0);
+         } 
+         this.yAxis.setRange(3.5, 7.0);
+ 
+         this.zColorBar.getAxis().setInverted(zIsInverted);
+         this.zColorBar.getAxis().setTickMarksVisible(true);
+ 
+         final ContourDataset data = createDataset();
+ 
+         final ContourPlot plot = new ContourPlot(data, this.xAxis, this.yAxis, this.zColorBar);
+ 
+         if (xIsDate) {
+             ratio = Math.abs(ratio); // don't use plot units for ratios when x axis is date
+         }
+         
+         if (asPoints) {
+             plot.setRenderAsPoints(true);
+         } 
+         plot.setDataAreaRatio(ratio);
+ 
+ 
+         if (annotate) {
+             if (asPoints) {
+                 final Number[] xValues = data.getXValues();
+                 final Number[] yValues = data.getYValues();
+                 //Number[] zValues = data.getZValues();
+ 
+                 final Font font = new Font("SansSerif", Font.PLAIN, 20);
+ 
+                 for (int i = 0; i < xValues.length; i++) {
+                     final XYTextAnnotation xyAnn = new XYTextAnnotation(Integer.toString(i),
+                                                xValues[i].doubleValue(), yValues[i].doubleValue());
+                     xyAnn.setFont(font);
+                     plot.addAnnotation(xyAnn);
+                 }
+             } 
+             else {
+                 final Font font = new Font("SansSerif", Font.PLAIN, 20);
+ 
+                 for (int i = 0; i < this.tmpDoubleX.length; i++) {
+                     final XYTextAnnotation xyAnn = new XYTextAnnotation(Integer.toString(i),
+                             this.tmpDoubleX[i], this.tmpDoubleY[i]);
+                     xyAnn.setFont(font);
+                     plot.addAnnotation(xyAnn);
+                 }
+             }
+ 
+         }
+ 
+         if (fillOutline || drawOutline) {
+             initShoreline();
+             plot.setClipPath(
+                 new ClipPath(this.xOutline, this.yOutline, true, fillOutline, drawOutline)
+             );
+         }
+ 
+         final JFreeChart chart = new JFreeChart(title, null, plot, false);
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.green));
+ 
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a ContourDataset.
+      *
+      * @return ContourDataset.
+      */
+     private ContourDataset createDataset() {
+         initData();
+ 
+         final Double[] oDoubleX = (Double[]) DefaultContourDataset.formObjectArray(this.tmpDoubleX);
+         final Double[] oDoubleY = (Double[]) DefaultContourDataset.formObjectArray(this.tmpDoubleY);
+         final Double[] oDoubleZ = (Double[]) DefaultContourDataset.formObjectArray(this.tmpDoubleZ);
+ 
+         final Date[] tmpDateX = new Date[this.tmpDoubleX.length];
+         for (int i = 0; i < this.tmpDoubleX.length; i++) {
+             tmpDateX[i] = new Date((long) (1000.0 * this.tmpDoubleX[i]));
+         }
+ 
+         ContourDataset data = null;
+ 
+         if (xIsDate) {
+             if (asPoints) {
+                 data = new DefaultContourDataset("Contouring", tmpDateX, oDoubleY, oDoubleZ);
+             }
+             else {
+                 data = new NonGridContourDataset("Contouring", tmpDateX, oDoubleY, oDoubleZ);
+             }
+         }
+         else if (!asPoints) {
+             data = new NonGridContourDataset("Contouring", oDoubleX, oDoubleY, oDoubleZ,
+                                              numX, numY, power);
+         }
+         else {
+             data = new DefaultContourDataset("Contouring", oDoubleX, oDoubleY, oDoubleZ);
+         }
+         return data;
+ 
+     }
+ 
+     /**
+      * Sets options passed via the command line
+      *
+      * @param args  the arguments.
+      * 
+      * @return Flag indicating whether program should continue.
+      */
+     protected static boolean processArgs(final String[] args) {
+         final String[] options = {
+             "-?", "-date", "-vertical", "-points", "-outline", "-filled", "-ratio:",
+             "-numX:", "-numY:", "-power:", "-annotate"
+         };
+ 
+         for (int i = 0; i < args.length; i++) {
+             boolean foundOption = false;
+             for (int j = 0; j < options.length; j++) {
+                 if (args[i].startsWith(options[j])) {
+                     foundOption = true;
+                     int index = 0;
+                     String tmpStr = null;
+                     switch (j) {
+                         case 0: // -?
+                             usage();
+                             return false;
+                         case 1:
+                             xIsDate = true;
+                             break;
+                         case 2:
+                             //zIsVertical = true;
+                             break;
+                         case 3:
+                             asPoints = true;
+                             break;
+                         case 4:
+                             drawOutline = true;
+                             break;
+                         case 5:
+                             fillOutline = true;
+                             break;
+                         case 6:
+                             index = args[i].indexOf(':');
+                             tmpStr = args[i].substring(index + 1);
+                             ratio = Double.parseDouble(tmpStr);
+                             break;
+                         case 7:
+                             index = args[i].indexOf(':');
+                             tmpStr = args[i].substring(index + 1);
+                             numX = Integer.parseInt(tmpStr);
+                             break;
+                         case 8:
+                             index = args[i].indexOf(':');
+                             tmpStr = args[i].substring(index + 1);
+                             numY = Integer.parseInt(tmpStr);
+                             break;
+                         case 9:
+                             index = args[i].indexOf(':');
+                             tmpStr = args[i].substring(index + 1);
+                             power = Integer.parseInt(tmpStr);
+                             break;
+                         case 10:
+                             annotate = true;
+                             break;
+                         default:
+                             System.out.println("Only 11 options available, update options array");
+                     }
+                 }
+             }
+             if (!foundOption) {
+                 System.out.println("Unknown option: " + args[i]);
+                 usage();
+                 return false;
+             }
+         }
+ 
+         return true; // continue running application
+     }
+ 
+     /**
+      * Prints usage options.
+      */
+     public static void usage() {
+         System.out.println("Usage:");
+         System.out.println("ContourPlotDemo2 -? -date -vertical -points -outline -filled "
+                            + "-ratio:value -numX:value -numY:value");
+         System.out.println("Where:");
+         System.out.println("-? displays usage and exits");
+         System.out.println("-date the X axis will be a date");
+         System.out.println("-vertical the colorbar will be drawn vertically");
+         System.out.println("-points demos plotting data as point (not grid)");
+         System.out.println("-outline draws shoreline outline and clips dataArea");
+         System.out.println("-filled fills shoreline and clips dataArea");
+         System.out.println("-ratio forces plot to maintain aspect ratio (Y/X) indicated by value");
+         System.out.println("       positive values are in pixels, while negative is in plot units");
+         System.out.println("-numX number of values to generate along the X axis");
+         System.out.println("-numY number of values to generate along the Y axis");
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  command line options, launch ContourDemoPlot -? for listing of options.
+      */
+     public static void main(final String[] args) {
+ 
+         if (!processArgs(args)) {
+             System.exit(1);
+         }
+         final ContourPlotDemo2 demo = new ContourPlotDemo2("ContourPlot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+     /**
+      * Initialise data.
+      */
+     private void initData() {
+ 
+         final double[] tmpDoubleYY = {
+             6.782, 6.79, 6.882, 6.289, 6.339,
+             6.426, 6.584, 5.532, 5.788, 5.922, 6.053, 4.008, 4.185, 4.456, 4.801, 4.779,
+             4.572, 5.202, 5.613, 5.893
+         }; //3.5,7}; // add values to fill entire lake surface
+ 
+         final double[] tmpDoubleXX = {
+             14.508, 14.413, 14.329, 14.512, 14.284, 14.085, 13.793,
+             13.603, 13.492, 13.229, 12.956, 11.087, 11.062, 10.937, 11.169, 11.837, 12.182,
+             12.802, 12.782, 12.687
+         }; //10.5,15}; // add values to fill entire lake surface
+ 
+         final double[] tmpDoubleZZ = {
+             2.03, 1.23, 0.86, 3.99, 2.38, 3, 3.08, 6.63, 6.84, 7.38,
+             6.99, 10.4, 11.11, 10.97, 11.22, 11.25, 10.68, 7.93, 8.17, 7.4
+         }; //12.0, 0.0};  // add values to fill entire lake surface
+ 
+         this.tmpDoubleY = new double[tmpDoubleYY.length];
+         this.tmpDoubleX = new double[tmpDoubleXX.length];
+         this.tmpDoubleZ = new double[tmpDoubleZZ.length];
+ 
+         for (int i = 0; i < this.tmpDoubleX.length; i++) {
+             this.tmpDoubleX[i] = tmpDoubleXX[i];
+             this.tmpDoubleY[i] = tmpDoubleYY[i];
+             this.tmpDoubleZ[i] = tmpDoubleZZ[i];
+         }
+     }
+ 
+     /**
+      * Initialise data.
+      */
+     private void initShoreline() {
+         final double[] yyOutline = {6.93E+00, 6.91E+00, 6.90E+00, 6.88E+00, 6.86E+00,
+             6.85E+00, 6.83E+00, 6.85E+00, 6.86E+00, 6.88E+00, 6.90E+00, 6.90E+00, 6.90E+00,
+             6.89E+00, 6.88E+00, 6.86E+00, 6.84E+00, 6.83E+00, 6.81E+00, 6.79E+00, 6.78E+00,
+             6.76E+00, 6.74E+00, 6.73E+00, 6.71E+00, 6.69E+00, 6.68E+00, 6.66E+00, 6.64E+00,
+             6.63E+00, 6.61E+00, 6.59E+00, 6.58E+00, 6.56E+00, 6.54E+00, 6.53E+00, 6.52E+00,
+             6.50E+00, 6.49E+00, 6.47E+00, 6.45E+00, 6.44E+00, 6.42E+00, 6.40E+00, 6.39E+00,
+             6.37E+00, 6.35E+00, 6.34E+00, 6.32E+00, 6.30E+00, 6.29E+00, 6.27E+00, 6.25E+00,
+             6.24E+00, 6.22E+00, 6.20E+00, 6.19E+00, 6.17E+00, 6.15E+00, 6.14E+00, 6.12E+00,
+             6.10E+00, 6.08E+00, 6.07E+00, 6.05E+00, 6.04E+00, 6.02E+00, 6.00E+00, 5.98E+00,
+             5.97E+00, 5.95E+00, 5.93E+00, 5.92E+00, 5.90E+00, 5.88E+00, 5.87E+00, 5.85E+00,
+             5.83E+00, 5.82E+00, 5.80E+00, 5.78E+00, 5.77E+00, 5.76E+00, 5.74E+00, 5.73E+00,
+             5.71E+00, 5.70E+00, 5.68E+00, 5.66E+00, 5.65E+00, 5.63E+00, 5.62E+00, 5.60E+00,
+             5.59E+00, 5.59E+00, 5.57E+00, 5.56E+00, 5.54E+00, 5.52E+00, 5.51E+00, 5.49E+00,
+             5.47E+00, 5.46E+00, 5.44E+00, 5.42E+00, 5.41E+00, 5.39E+00, 5.37E+00, 5.36E+00,
+             5.34E+00, 5.34E+00, 5.33E+00, 5.32E+00, 5.31E+00, 5.30E+00, 5.30E+00, 5.30E+00,
+             5.29E+00, 5.29E+00, 5.29E+00, 5.29E+00, 5.29E+00, 5.30E+00, 5.31E+00, 5.32E+00,
+             5.34E+00, 5.35E+00, 5.36E+00, 5.36E+00, 5.38E+00, 5.39E+00, 5.40E+00, 5.42E+00,
+             5.42E+00, 5.42E+00, 5.42E+00, 5.42E+00, 5.42E+00, 5.41E+00, 5.41E+00, 5.41E+00,
+             5.40E+00, 5.38E+00, 5.37E+00, 5.35E+00, 5.33E+00, 5.32E+00, 5.30E+00, 5.28E+00,
+             5.27E+00, 5.25E+00, 5.23E+00, 5.22E+00, 5.21E+00, 5.19E+00, 5.17E+00, 5.16E+00,
+             5.14E+00, 5.12E+00, 5.11E+00, 5.09E+00, 5.07E+00, 5.06E+00, 5.06E+00, 5.05E+00,
+             5.04E+00, 5.04E+00, 5.03E+00, 5.02E+00, 5.00E+00, 4.99E+00, 4.97E+00, 4.95E+00,
+             4.93E+00, 4.92E+00, 4.91E+00, 4.90E+00, 4.89E+00, 4.87E+00, 4.86E+00, 4.84E+00,
+             4.82E+00, 4.80E+00, 4.79E+00, 4.77E+00, 4.75E+00, 4.74E+00, 4.72E+00, 4.70E+00,
+             4.69E+00, 4.67E+00, 4.65E+00, 4.64E+00, 4.62E+00, 4.60E+00, 4.58E+00, 4.57E+00,
+             4.55E+00, 4.54E+00, 4.52E+00, 4.50E+00, 4.49E+00, 4.47E+00, 4.46E+00, 4.44E+00,
+             4.42E+00, 4.41E+00, 4.39E+00, 4.38E+00, 4.37E+00, 4.36E+00, 4.34E+00, 4.32E+00,
+             4.31E+00, 4.29E+00, 4.27E+00, 4.26E+00, 4.25E+00, 4.24E+00, 4.22E+00, 4.21E+00,
+             4.19E+00, 4.18E+00, 4.17E+00, 4.15E+00, 4.14E+00, 4.12E+00, 4.10E+00, 4.08E+00,
+             4.07E+00, 4.05E+00, 4.04E+00, 4.02E+00, 4.01E+00, 4.01E+00, 4.01E+00, 4.00E+00,
+             4.00E+00, 4.00E+00, 3.99E+00, 3.99E+00, 3.98E+00, 3.98E+00, 3.97E+00, 3.97E+00,
+             3.97E+00, 3.96E+00, 3.96E+00, 3.94E+00, 3.93E+00, 3.91E+00, 3.90E+00, 3.89E+00,
+             3.89E+00, 3.88E+00, 3.86E+00, 3.85E+00, 3.84E+00, 3.83E+00, 3.82E+00, 3.80E+00,
+             3.79E+00, 3.77E+00, 3.75E+00, 3.74E+00, 3.72E+00, 3.71E+00, 3.69E+00, 3.69E+00,
+             3.69E+00, 3.69E+00, 3.69E+00, 3.69E+00, 3.71E+00, 3.72E+00, 3.72E+00, 3.74E+00,
+             3.75E+00, 3.77E+00, 3.78E+00, 3.80E+00, 3.81E+00, 3.83E+00, 3.85E+00, 3.86E+00,
+             3.88E+00, 3.90E+00, 3.91E+00, 3.93E+00, 3.95E+00, 3.96E+00, 3.98E+00, 4.00E+00,
+             4.01E+00, 4.03E+00, 4.04E+00, 4.06E+00, 4.08E+00, 4.09E+00, 4.11E+00, 4.13E+00,
+             4.14E+00, 4.16E+00, 4.18E+00, 4.19E+00, 4.21E+00, 4.23E+00, 4.24E+00, 4.26E+00,
+             4.28E+00, 4.29E+00, 4.31E+00, 4.33E+00, 4.34E+00, 4.36E+00, 4.38E+00, 4.39E+00,
+             4.41E+00, 4.43E+00, 4.44E+00, 4.46E+00, 4.48E+00, 4.49E+00, 4.51E+00, 4.53E+00,
+             4.54E+00, 4.56E+00, 4.58E+00, 4.59E+00, 4.61E+00, 4.62E+00, 4.64E+00, 4.66E+00,
+             4.67E+00, 4.69E+00, 4.70E+00, 4.72E+00, 4.73E+00, 4.75E+00, 4.76E+00, 4.78E+00,
+             4.79E+00, 4.81E+00, 4.82E+00, 4.83E+00, 4.84E+00, 4.86E+00, 4.87E+00, 4.88E+00,
+             4.90E+00, 4.91E+00, 4.93E+00, 4.94E+00, 4.95E+00, 4.97E+00, 4.98E+00, 5.00E+00,
+             5.01E+00, 5.02E+00, 5.04E+00, 5.06E+00, 5.07E+00, 5.09E+00, 5.10E+00, 5.12E+00,
+             5.14E+00, 5.15E+00, 5.17E+00, 5.19E+00, 5.20E+00, 5.22E+00, 5.24E+00, 5.25E+00,
+             5.27E+00, 5.29E+00, 5.30E+00, 5.32E+00, 5.34E+00, 5.36E+00, 5.37E+00, 5.39E+00,
+             5.41E+00, 5.42E+00, 5.44E+00, 5.45E+00, 5.47E+00, 5.48E+00, 5.50E+00, 5.51E+00,
+             5.52E+00, 5.54E+00, 5.55E+00, 5.57E+00, 5.58E+00, 5.60E+00, 5.61E+00, 5.63E+00,
+             5.65E+00, 5.66E+00, 5.68E+00, 5.69E+00, 5.70E+00, 5.71E+00, 5.73E+00, 5.74E+00,
+             5.76E+00, 5.75E+00, 5.75E+00, 5.76E+00, 5.77E+00, 5.79E+00, 5.80E+00, 5.82E+00,
+             5.84E+00, 5.85E+00, 5.87E+00, 5.88E+00, 5.90E+00, 5.91E+00, 5.93E+00, 5.94E+00,
+             5.96E+00, 5.97E+00, 5.99E+00, 5.99E+00, 6.00E+00, 6.00E+00, 5.98E+00, 5.98E+00,
+             5.97E+00, 5.98E+00, 6.00E+00, 5.98E+00, 5.98E+00, 6.00E+00, 6.02E+00, 6.03E+00,
+             6.05E+00, 6.06E+00, 6.07E+00, 6.07E+00, 6.06E+00, 6.04E+00, 6.03E+00, 6.01E+00,
+             6.03E+00, 6.04E+00, 6.06E+00, 6.08E+00, 6.09E+00, 6.10E+00, 6.11E+00, 6.13E+00,
+             6.13E+00, 6.14E+00, 6.15E+00, 6.16E+00, 6.17E+00, 6.18E+00, 6.18E+00, 6.18E+00,
+             6.19E+00, 6.21E+00, 6.22E+00, 6.23E+00, 6.24E+00, 6.25E+00, 6.25E+00, 6.26E+00,
+             6.27E+00, 6.29E+00, 6.31E+00, 6.32E+00, 6.34E+00, 6.35E+00, 6.36E+00, 6.38E+00,
+             6.39E+00, 6.41E+00, 6.43E+00, 6.45E+00, 6.46E+00, 6.48E+00, 6.49E+00, 6.51E+00,
+             6.52E+00, 6.54E+00, 6.55E+00, 6.56E+00, 6.57E+00, 6.59E+00, 6.60E+00, 6.62E+00,
+             6.63E+00, 6.65E+00, 6.66E+00, 6.67E+00, 6.69E+00, 6.70E+00, 6.72E+00, 6.73E+00,
+             6.75E+00, 6.76E+00, 6.77E+00, 6.79E+00, 6.80E+00, 6.81E+00, 6.83E+00, 6.83E+00,
+             6.85E+00, 6.86E+00, 6.87E+00, 6.88E+00, 6.88E+00, 6.89E+00, 6.90E+00, 6.90E+00,
+             6.91E+00, 6.91E+00, 6.91E+00, 6.90E+00, 6.91E+00, 6.92E+00, 6.92E+00, 6.93E+00,
+             6.93E+00, 6.93E+00, 6.91E+00, 6.90E+00, 6.88E+00, 6.87E+00, 6.88E+00, 6.90E+00,
+             6.90E+00, 6.92E+00, 6.94E+00, 6.95E+00, 6.96E+00};
+ 
+         final double[] xxOutline = {1.46171E+01, 1.45984E+01, 1.45883E+01, 1.45818E+01,
+             1.45626E+01, 1.45435E+01, 1.45257E+01, 1.45462E+01, 1.45653E+01, 1.45854E+01,
+             1.46027E+01, 1.46256E+01, 1.46482E+01, 1.46707E+01, 1.46934E+01, 1.47161E+01,
+             1.47312E+01, 1.47494E+01, 1.47604E+01, 1.47746E+01, 1.47856E+01, 1.47939E+01,
+             1.48040E+01, 1.48141E+01, 1.48175E+01, 1.48199E+01, 1.48247E+01, 1.48244E+01,
+             1.48255E+01, 1.48258E+01, 1.48215E+01, 1.48172E+01, 1.48084E+01, 1.47978E+01,
+             1.47836E+01, 1.47604E+01, 1.47376E+01, 1.47193E+01, 1.47142E+01, 1.47117E+01,
+             1.47074E+01, 1.47017E+01, 1.46952E+01, 1.46828E+01, 1.46722E+01, 1.46621E+01,
+             1.46461E+01, 1.46378E+01, 1.46313E+01, 1.46252E+01, 1.46186E+01, 1.46013E+01,
+             1.45813E+01, 1.45770E+01, 1.45736E+01, 1.45725E+01, 1.45632E+01, 1.45513E+01,
+             1.45470E+01, 1.45391E+01, 1.45335E+01, 1.45152E+01, 1.44961E+01, 1.44738E+01,
+             1.44619E+01, 1.44387E+01, 1.44209E+01, 1.44031E+01, 1.43934E+01, 1.43847E+01,
+             1.43768E+01, 1.43698E+01, 1.43628E+01, 1.43500E+01, 1.43353E+01, 1.43148E+01,
+             1.43029E+01, 1.42950E+01, 1.42826E+01, 1.42694E+01, 1.42633E+01, 1.42409E+01,
+             1.42222E+01, 1.42017E+01, 1.41789E+01, 1.41566E+01, 1.41406E+01, 1.41336E+01,
+             1.41249E+01, 1.41174E+01, 1.41050E+01, 1.40822E+01, 1.40599E+01, 1.40371E+01,
+             1.40146E+01, 1.40009E+01, 1.39939E+01, 1.39878E+01, 1.39777E+01, 1.39662E+01,
+             1.39525E+01, 1.39306E+01, 1.39156E+01, 1.39023E+01, 1.38917E+01, 1.38806E+01,
+             1.38692E+01, 1.38586E+01, 1.38412E+01, 1.38189E+01, 1.37965E+01, 1.37741E+01,
+             1.37509E+01, 1.37280E+01, 1.37047E+01, 1.36809E+01, 1.36580E+01, 1.36351E+01,
+             1.36126E+01, 1.35896E+01, 1.35667E+01, 1.35437E+01, 1.35207E+01, 1.34981E+01,
+             1.34781E+01, 1.34716E+01, 1.34480E+01, 1.34250E+01, 1.34015E+01, 1.33788E+01,
+             1.33561E+01, 1.33335E+01, 1.33099E+01, 1.32865E+01, 1.32631E+01, 1.32406E+01,
+             1.32176E+01, 1.31952E+01, 1.31727E+01, 1.31503E+01, 1.31278E+01, 1.31054E+01,
+             1.31042E+01, 1.31121E+01, 1.31155E+01, 1.31301E+01, 1.31393E+01, 1.31449E+01,
+             1.31510E+01, 1.31494E+01, 1.31465E+01, 1.31426E+01, 1.31202E+01, 1.31070E+01,
+             1.30968E+01, 1.30835E+01, 1.30640E+01, 1.30547E+01, 1.30558E+01, 1.30479E+01,
+             1.30297E+01, 1.30115E+01, 1.29891E+01, 1.29667E+01, 1.29442E+01, 1.29205E+01,
+             1.28972E+01, 1.28748E+01, 1.28520E+01, 1.28337E+01, 1.28173E+01, 1.27973E+01,
+             1.27880E+01, 1.27757E+01, 1.27534E+01, 1.27310E+01, 1.27086E+01, 1.26863E+01,
+             1.26635E+01, 1.26412E+01, 1.26212E+01, 1.26115E+01, 1.26054E+01, 1.25980E+01,
+             1.25933E+01, 1.25813E+01, 1.25717E+01, 1.25584E+01, 1.25460E+01, 1.25345E+01,
+             1.25239E+01, 1.25205E+01, 1.25140E+01, 1.25061E+01, 1.25000E+01, 1.24971E+01,
+             1.24937E+01, 1.24791E+01, 1.24662E+01, 1.24511E+01, 1.24284E+01, 1.24061E+01,
+             1.23874E+01, 1.23804E+01, 1.23739E+01, 1.23723E+01, 1.23720E+01, 1.23628E+01,
+             1.23395E+01, 1.23171E+01, 1.23015E+01, 1.22964E+01, 1.23105E+01, 1.23121E+01,
+             1.23010E+01, 1.22837E+01, 1.22614E+01, 1.22382E+01, 1.22153E+01, 1.21931E+01,
+             1.21707E+01, 1.21480E+01, 1.21252E+01, 1.21024E+01, 1.20805E+01, 1.20713E+01,
+             1.20513E+01, 1.20294E+01, 1.20103E+01, 1.19939E+01, 1.19711E+01, 1.19488E+01,
+             1.19265E+01, 1.19041E+01, 1.18817E+01, 1.18592E+01, 1.18368E+01, 1.18143E+01,
+             1.17905E+01, 1.17680E+01, 1.17443E+01, 1.17218E+01, 1.16989E+01, 1.16756E+01,
+             1.16527E+01, 1.16302E+01, 1.16078E+01, 1.15849E+01, 1.15720E+01, 1.15808E+01,
+             1.15576E+01, 1.15343E+01, 1.15119E+01, 1.14891E+01, 1.14667E+01, 1.14443E+01,
+             1.14202E+01, 1.13969E+01, 1.13745E+01, 1.13517E+01, 1.13349E+01, 1.13324E+01,
+             1.13267E+01, 1.13198E+01, 1.13110E+01, 1.12886E+01, 1.12663E+01, 1.12467E+01,
+             1.12239E+01, 1.12000E+01, 1.11761E+01, 1.11527E+01, 1.11297E+01, 1.11070E+01,
+             1.10831E+01, 1.10605E+01, 1.10378E+01, 1.10142E+01, 1.09969E+01, 1.09733E+01,
+             1.09507E+01, 1.09320E+01, 1.09129E+01, 1.08996E+01, 1.08899E+01, 1.08803E+01,
+             1.08625E+01, 1.08398E+01, 1.08207E+01, 1.08083E+01, 1.07928E+01, 1.07836E+01,
+             1.07717E+01, 1.07503E+01, 1.07357E+01, 1.07126E+01, 1.06989E+01, 1.07027E+01,
+             1.06908E+01, 1.06807E+01, 1.06764E+01, 1.06767E+01, 1.06832E+01, 1.06974E+01,
+             1.06976E+01, 1.06902E+01, 1.06904E+01, 1.06970E+01, 1.07013E+01, 1.06911E+01,
+             1.06878E+01, 1.06763E+01, 1.06734E+01, 1.06723E+01, 1.06734E+01, 1.06701E+01,
+             1.06690E+01, 1.06597E+01, 1.06519E+01, 1.06467E+01, 1.06379E+01, 1.06224E+01,
+             1.06213E+01, 1.06279E+01, 1.06339E+01, 1.06378E+01, 1.06448E+01, 1.06607E+01,
+             1.06830E+01, 1.07058E+01, 1.07214E+01, 1.07419E+01, 1.07587E+01, 1.07815E+01,
+             1.08011E+01, 1.08234E+01, 1.08448E+01, 1.08675E+01, 1.08903E+01, 1.09126E+01,
+             1.09349E+01, 1.09581E+01, 1.09805E+01, 1.10033E+01, 1.10261E+01, 1.10484E+01,
+             1.10716E+01, 1.10939E+01, 1.11172E+01, 1.11400E+01, 1.11600E+01, 1.11823E+01,
+             1.12046E+01, 1.12270E+01, 1.12493E+01, 1.12702E+01, 1.12930E+01, 1.13153E+01,
+             1.13377E+01, 1.13609E+01, 1.13805E+01, 1.14009E+01, 1.14233E+01, 1.14438E+01,
+             1.14620E+01, 1.14784E+01, 1.14944E+01, 1.15162E+01, 1.15318E+01, 1.15460E+01,
+             1.15584E+01, 1.15703E+01, 1.15804E+01, 1.15897E+01, 1.16020E+01, 1.16099E+01,
+             1.16178E+01, 1.16230E+01, 1.16349E+01, 1.16446E+01, 1.16498E+01, 1.16577E+01,
+             1.16777E+01, 1.17005E+01, 1.17232E+01, 1.17455E+01, 1.17678E+01, 1.17906E+01,
+             1.18116E+01, 1.18339E+01, 1.18562E+01, 1.18786E+01, 1.18999E+01, 1.19227E+01,
+             1.19450E+01, 1.19678E+01, 1.19856E+01, 1.20024E+01, 1.20166E+01, 1.20304E+01,
+             1.20531E+01, 1.20755E+01, 1.20984E+01, 1.21207E+01, 1.21344E+01, 1.21567E+01,
+             1.21793E+01, 1.22023E+01, 1.22247E+01, 1.22470E+01, 1.22652E+01, 1.22740E+01,
+             1.22941E+01, 1.23042E+01, 1.23265E+01, 1.23488E+01, 1.23716E+01, 1.23939E+01,
+             1.24162E+01, 1.24394E+01, 1.24612E+01, 1.24844E+01, 1.25067E+01, 1.25300E+01,
+             1.25524E+01, 1.25753E+01, 1.25983E+01, 1.26209E+01, 1.26434E+01, 1.26504E+01,
+             1.26434E+01, 1.26549E+01, 1.26443E+01, 1.26214E+01, 1.26045E+01, 1.25962E+01,
+             1.25978E+01, 1.26201E+01, 1.26425E+01, 1.26653E+01, 1.26877E+01, 1.27086E+01,
+             1.27147E+01, 1.27189E+01, 1.27074E+01, 1.27180E+01, 1.27277E+01, 1.27383E+01,
+             1.27498E+01, 1.27707E+01, 1.27931E+01, 1.28155E+01, 1.28382E+01, 1.28611E+01,
+             1.28835E+01, 1.29059E+01, 1.29287E+01, 1.29510E+01, 1.29743E+01, 1.29968E+01,
+             1.30207E+01, 1.30440E+01, 1.30640E+01, 1.30836E+01, 1.31068E+01, 1.31302E+01,
+             1.31531E+01, 1.31764E+01, 1.31997E+01, 1.32220E+01, 1.32443E+01, 1.32576E+01,
+             1.32695E+01, 1.32873E+01, 1.33105E+01, 1.33329E+01, 1.33552E+01, 1.33784E+01,
+             1.33944E+01, 1.34113E+01, 1.34344E+01, 1.34568E+01, 1.34781E+01, 1.35004E+01,
+             1.35228E+01, 1.35415E+01, 1.35610E+01, 1.35834E+01, 1.36058E+01, 1.36282E+01,
+             1.36450E+01, 1.36583E+01, 1.36806E+01, 1.37030E+01, 1.37239E+01, 1.37472E+01,
+             1.37695E+01, 1.37864E+01, 1.38092E+01, 1.38328E+01, 1.38538E+01, 1.38761E+01,
+             1.38984E+01, 1.39212E+01, 1.39449E+01, 1.39672E+01, 1.39913E+01, 1.40141E+01,
+             1.40365E+01, 1.40589E+01, 1.40816E+01, 1.41049E+01, 1.41273E+01, 1.41502E+01,
+             1.41725E+01, 1.41950E+01, 1.42179E+01, 1.42408E+01, 1.42637E+01, 1.42889E+01,
+             1.43115E+01, 1.43339E+01, 1.43563E+01, 1.43787E+01, 1.44021E+01, 1.44245E+01,
+             1.44475E+01, 1.44702E+01, 1.44924E+01, 1.44868E+01, 1.44644E+01, 1.44868E+01,
+             1.45073E+01, 1.45297E+01, 1.45515E+01, 1.45662E+01, 1.45885E+01, 1.45938E+01};
+ 
+ 
+         this.xOutline = new double[xxOutline.length];
+         this.yOutline = new double[yyOutline.length];
+ 
+         for (int i = 0; i < this.xOutline.length; i++) {
+             this.xOutline[i] = xxOutline[i];
+             this.yOutline[i] = yyOutline[i];
+         }
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ContourPlotDemo.java jfreechart/source/org/jfree/chart/demo/ContourPlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/ContourPlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ContourPlotDemo.java	2004-11-07 15:44:47.000000000 +0100
***************
*** 0 ****
--- 1,396 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * ContourPlotDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by David M. O'Donnell and Contributors.
+  *
+  * Original Author:  David M. O'Donnell;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: ContourPlotDemo.java,v 1.16 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 26-Nov-2002 : Version 1, contributed by David M. O'Donnell (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ import java.util.Date;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.ColorBar;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.LogarithmicAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.ContourPlot;
+ import org.jfree.data.contour.ContourDataset;
+ import org.jfree.data.contour.DefaultContourDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application to illustrate ContourPlot.
+  * Command line options exist to control different plot properties
+  * such as colorbar orientation, etc.  List of options are available
+  * by launching with the -? option, e.g., ContourPlotDemo -?
+  *
+  * @author David M. O'Donnell
+  */
+ public class ContourPlotDemo extends ApplicationFrame {
+ 
+     /** The x-axis. */
+     private ValueAxis xAxis = null;
+ 
+     /** The y-axis. */
+     private NumberAxis yAxis = null;
+ 
+     /** The z-axis. */
+     private ColorBar zColorBar = null;
+ 
+     /** Flag for vertical z-axis. */
+     //private static boolean zIsVertical = false;
+ 
+     /** Flag for x is date axis. */
+     private static boolean xIsDate = false;
+ 
+     /** Flag for x is log. */
+     private static boolean xIsLog = false;
+ 
+     /** Flag for y is log. */
+     private static boolean yIsLog = false;
+ 
+     /** Flag for z is log. */
+     private static boolean zIsLog = false;
+ 
+     /** Flag for x is inverted. */
+     private static boolean xIsInverted = false;
+ 
+     /** Flag for y is inverted. */
+     private static boolean yIsInverted = false;
+ 
+     /** Flag for z is inverted. */
+     private static boolean zIsInverted = false;
+ 
+     /** Flag for make holes. */
+     private static boolean makeHoles = false;
+ 
+     /** The number of x values in the dataset. */
+     private static int numX = 10;
+ 
+     /** The number of y values in the dataset. */
+     private static int numY = 20;
+ 
+     /** The ratio. */
+     private static double ratio = 0.0;
+     
+     /** The panel. */
+     public ChartPanel panel = null;
+ 
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public ContourPlotDemo(final String title) {
+ 
+         super(title);
+ 
+         final JFreeChart chart = createContourPlot();
+         this.panel = new ChartPanel(chart, true, true, true, true, true);
+         this.panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         this.panel.setMaximumDrawHeight(100000); //stop ChartPanel from scaling output
+         this.panel.setMaximumDrawWidth(100000); //stop ChartPanel from scaling output
+         this.panel.setHorizontalZoom(true);
+         this.panel.setVerticalZoom(true);
+         this.panel.setFillZoomRectangle(true);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * COMMERCIAL SUPPORT / JFREECHART DEVELOPER GUIDE                          *
+     // * Please note that commercial support and documentation is available from: *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/support.html                   *
+     // *                                                                          *
+     // * This is not only a great service for developers, but is a VERY IMPORTANT *
+     // * source of funding for the JFreeChart project.  Please support us so that *
+     // * we can continue developing free software.                                *
+     // ****************************************************************************
+ 
+     /**
+      * Creates a ContourPlot chart.
+      *
+      * @return the chart.
+      */
+     private JFreeChart createContourPlot() {
+ 
+         final String title = "Contour Plot";
+         final String xAxisLabel = "X Values";
+         final String yAxisLabel = "Y Values";
+         final String zAxisLabel = "Color Values";
+ 
+         if (xIsDate) {
+             this.xAxis = new DateAxis(xAxisLabel);
+             xIsLog = false; // force axis to be linear when displaying dates
+         }
+         else {
+             if (xIsLog) {
+                 this.xAxis = new LogarithmicAxis(xAxisLabel);
+             }
+             else {
+                 this.xAxis = new NumberAxis(xAxisLabel);
+             }
+         }
+ 
+         if (yIsLog) {
+             this.yAxis = new LogarithmicAxis(yAxisLabel);
+         }
+         else {
+             this.yAxis = new NumberAxis(yAxisLabel);
+         }
+ 
+         if (zIsLog) {
+             this.zColorBar = new ColorBar(zAxisLabel);
+         }
+         else {
+             this.zColorBar = new ColorBar(zAxisLabel);
+         }
+  
+         if (this.xAxis instanceof NumberAxis) {
+             ((NumberAxis) this.xAxis).setAutoRangeIncludesZero(false);
+             ((NumberAxis) this.xAxis).setInverted(xIsInverted);
+         }
+ 
+         this.yAxis.setAutoRangeIncludesZero(false);
+ 
+         this.yAxis.setInverted(yIsInverted);
+ 
+         if (!xIsDate) {
+             ((NumberAxis) this.xAxis).setLowerMargin(0.0);
+             ((NumberAxis) this.xAxis).setUpperMargin(0.0);
+         }
+ 
+         this.yAxis.setLowerMargin(0.0);
+         this.yAxis.setUpperMargin(0.0);
+ 
+         this.zColorBar.getAxis().setInverted(zIsInverted);
+         this.zColorBar.getAxis().setTickMarksVisible(true);
+ 
+         final ContourDataset data = createDataset();
+ 
+         final ContourPlot plot = new ContourPlot(data, this.xAxis, this.yAxis, this.zColorBar);
+ 
+         if (xIsDate) {
+             ratio = Math.abs(ratio); // don't use plot units for ratios when x axis is date
+         }
+         plot.setDataAreaRatio(ratio);
+ 
+         final JFreeChart chart = new JFreeChart(title, null, plot, false);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.green));
+ 
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a ContourDataset.
+      *
+      * @return ContourDataset.
+      */
+     private ContourDataset createDataset() {
+ 
+         final int numValues = numX * numY;
+         final Date[] tmpDateX = new Date[numValues];
+         final double[] tmpDoubleX = new double[numValues];
+         final double[] tmpDoubleY = new double[numValues];
+ 
+         final Double[] oDoubleX = new Double[numValues];
+         final Double[] oDoubleY = new Double[numValues];
+         final Double[] oDoubleZ = new Double[numValues];
+ 
+         int j = 0;
+         int z = 0;
+         int i = 0;
+         int last = 0;
+         double zmult = 1.0;
+         for (int k = 0; k < numValues; k++) {
+             i = k / numX;
+             if (last != i) {
+                 last = i;
+                 z = 0;
+                 zmult = 1.005 * zmult;
+             }
+             tmpDateX[k] = new Date((long) ((i + 100) * 1.e8));
+             tmpDoubleX[k] = i + 2;
+             tmpDoubleY[k] = zmult * (z++);
+             oDoubleX[k] = new Double(tmpDoubleX[k]);
+             oDoubleY[k] = new Double(tmpDoubleY[k]);
+             final double rad = Math.random();
+             if (makeHoles && (rad > 0.4 && rad < 0.6)) {
+                 oDoubleZ[k] = null;
+             }
+             else {
+ //                tmpDoubleZ[k] = 3.0 * ((tmpDoubleX[k] + 1) * (tmpDoubleY[k] + 1) + 100);
+                 oDoubleZ[k] = new Double(3.0 * ((tmpDoubleX[k] + 1) * (tmpDoubleY[k] + 1) + 100));
+             }
+             j++;
+         }
+         ContourDataset data = null;
+ 
+         if (xIsDate) {
+             data = new DefaultContourDataset("Contouring", tmpDateX, oDoubleY, oDoubleZ);
+         }
+         else {
+             data = new DefaultContourDataset("Contouring", oDoubleX, oDoubleY, oDoubleZ);
+         }
+         return data;
+ 
+     }
+ 
+     /**
+      * Sets options passed via the command line
+      *
+      * @param args  the command line arguments.
+      *
+      * @return Flag indicating whether program should continue.
+      */
+     protected static boolean processArgs(final String[] args) {
+ 
+         final String[] options = {"-?",
+                             "-invert",
+                             "-log",
+                             "-date",
+                             "-vertical",
+                             "-holes",
+                             "-ratio:",
+                             "-numX:",
+                             "-numY:"};
+ 
+         for (int i = 0; i < args.length; i++) {
+             boolean foundOption = false;
+             for (int j = 0; j < options.length; j++) {
+                 if (args[i].startsWith(options[j])) {
+                     foundOption = true;
+                     int index = 0;
+                     String tmpStr = null;
+                     switch (j) {
+                         case 0: // -?
+                             usage();
+                             return false;
+                         case 1:
+                             xIsInverted = true;
+                             yIsInverted = true;
+                             zIsInverted = true;
+                             break;
+                         case 2:
+                             xIsLog = true;
+                             yIsLog = true;
+                             zIsLog = true;
+                             break;
+                         case 3:
+                             xIsDate = true;
+                             break;
+                         case 4:
+                             //zIsVertical = true;
+                             break;
+                         case 5:
+                             makeHoles = true;
+                             break;
+                         case 6:
+                             index = args[i].indexOf(':');
+                             tmpStr = args[i].substring(index + 1);
+                             ratio = Double.parseDouble(tmpStr);
+                             break;
+                         case 7:
+                             index = args[i].indexOf(':');
+                             tmpStr = args[i].substring(index + 1);
+                             numX = Integer.parseInt(tmpStr);
+                             break;
+                         case 8:
+                             index = args[i].indexOf(':');
+                             tmpStr = args[i].substring(index + 1);
+                             numY = Integer.parseInt(tmpStr);
+                             break;
+                         default:
+                             System.out.println("Only 9 options available, update options array");
+                     }
+                 }
+             }
+             if (!foundOption) {
+                 System.out.println("Unknown option: " + args[i]);
+                 usage();
+                 return false;
+             }
+         }
+ 
+         return true; // continue running application
+     }
+ 
+     /**
+      * Prints usage information.
+      */
+     public static void usage() {
+         System.out.println("Usage:");
+         System.out.println("ContourPlotDemo -? -invert -log -date -vertical -holes -ratio:value "
+                            + "-numX:value -numY:value");
+         System.out.println("Where:");
+         System.out.println("-? displays usage and exits");
+         System.out.println("-invert cause axes to be inverted");
+         System.out.println("-log all axes will be logcale");
+         System.out.println("-date the X axis will be a date");
+         System.out.println("-vertical the colorbar will be drawn vertically");
+         System.out.println("-holes demos plotting data with missing values");
+         System.out.println("-ratio forces plot to maintain aspect ratio (Y/X) indicated by value");
+         System.out.println("       positive values are in pixels, while negative is in plot units");
+         System.out.println("-numX number of values to generate along the X axis");
+         System.out.println("-numY number of values to generate along the X axis");
+ 
+     }
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  command line options, launch ContourDemoPlot -? for listing of options.
+      */
+     public static void main(final String[] args) {
+ 
+         if (!processArgs(args)) {
+             System.exit(1);
+         }
+         final ContourPlotDemo demo = new ContourPlotDemo("ContourPlot Demo");
+         demo.setContentPane(demo.panel);
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CrosshairDemo1.java jfreechart/source/org/jfree/chart/demo/CrosshairDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/CrosshairDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CrosshairDemo1.java	2004-11-07 15:44:37.000000000 +0100
***************
*** 0 ****
--- 1,199 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * CrosshairDemo1.java
+  * -------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: CrosshairDemo1.java,v 1.7 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 25-Feb-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A simple demonstration of the crosshairs that can be displayed in an {@link XYPlot}.
+  *
+  */
+ public class CrosshairDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public CrosshairDemo1(final String title) {
+         super(title);
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private XYDataset createDataset() {
+         
+         final XYSeries series1 = new XYSeries("First");
+         series1.add(1.0, 1.0);
+         series1.add(2.0, 4.0);
+         series1.add(3.0, 3.0);
+         series1.add(4.0, 5.0);
+         series1.add(5.0, 5.0);
+         series1.add(6.0, 7.0);
+         series1.add(7.0, 7.0);
+         series1.add(8.0, 8.0);
+ 
+         final XYSeries series2 = new XYSeries("Second");
+         series2.add(1.0, 5.0);
+         series2.add(2.0, 7.0);
+         series2.add(3.0, 6.0);
+         series2.add(4.0, 8.0);
+         series2.add(5.0, 4.0);
+         series2.add(6.0, 4.0);
+         series2.add(7.0, 2.0);
+         series2.add(8.0, 1.0);
+ 
+         final XYSeries series3 = new XYSeries("Third");
+         series3.add(3.0, 4.0);
+         series3.add(4.0, 3.0);
+         series3.add(5.0, 2.0);
+         series3.add(6.0, 3.0);
+         series3.add(7.0, 6.0);
+         series3.add(8.0, 3.0);
+         series3.add(9.0, 4.0);
+         series3.add(10.0, 3.0);
+ 
+         final XYSeriesCollection dataset = new XYSeriesCollection();
+         dataset.addSeries(series1);
+         dataset.addSeries(series2);
+         dataset.addSeries(series3);
+                 
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the data for the chart.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Crosshair Demo 1",       // chart title
+             "X",                      // x axis label
+             "Y",                      // y axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+ 
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setDisplaySeriesShapes(true);
+         
+         final XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         plot.setDomainCrosshairVisible(true);
+         plot.setDomainCrosshairLockedOnData(true);
+         plot.setRangeCrosshairVisible(true);
+         plot.setRangeCrosshairLockedOnData(true);
+         
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPlotShapes(true);
+         renderer.setShapesFilled(true);
+ 
+         // change the auto tick unit selection to integer units only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         // OPTIONAL CUSTOMISATION COMPLETED.
+                 
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CrosshairDemo1 demo = new CrosshairDemo1("Crosshair Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/CyclicXYPlotDemo.java jfreechart/source/org/jfree/chart/demo/CyclicXYPlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/CyclicXYPlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/CyclicXYPlotDemo.java	2004-11-07 15:44:31.000000000 +0100
***************
*** 0 ****
--- 1,182 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * CyclicXYPlotDemo.java
+  * ---------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  Nicolas Brodu
+  * Contributor(s):   -;
+  *
+  * $Id: CyclicXYPlotDemo.java,v 1.7 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 20-Nov-2003 : Creation Date (NB)
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.FlowLayout;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.JButton;
+ import javax.swing.JPanel;
+ import javax.swing.Timer;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CyclicNumberAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * Demo for an XY plot, with a cyclic axis and renderer  
+  *
+  * @author Nicolas Brodu
+  */
+ public class CyclicXYPlotDemo extends ApplicationFrame implements ActionListener {
+ 
+     /** The series. */
+     XYSeries series;
+     
+     /** The x value. */
+     long x = 0;
+     
+     /** The y value. */
+     double y = 50;
+     
+     /** A timer. */
+     Timer timer;
+     
+     /**
+      * A demonstration application showing an XY plot, with a cyclic axis and renderer
+      *
+      * @param title  the frame title.
+      */
+     public CyclicXYPlotDemo(final String title) {
+ 
+         super(title);
+ 
+         this.series = new XYSeries("Random Data");
+         this.series.setMaximumItemCount(50); // Only 50 items are visible at the same time. 
+                                              // Keep more as a mean to test this.
+         final XYSeriesCollection data = new XYSeriesCollection(this.series);
+         
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Cyclic XY Plot Demo",
+             "X", 
+             "Y", 
+             data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setDomainAxis(new CyclicNumberAxis(10, 0));
+         plot.setRenderer(new CyclicXYItemRenderer());
+ 
+         final NumberAxis axis = (NumberAxis) plot.getRangeAxis();
+         axis.setAutoRangeIncludesZero(false);
+         axis.setAutoRangeMinimumSize(1.0);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(400, 300));
+         final JPanel content = new JPanel(new BorderLayout());
+         content.add(chartPanel, BorderLayout.CENTER);
+ 
+         final JButton button1 = new JButton("Start");
+         button1.addActionListener(new ActionListener() {
+             public void actionPerformed(final ActionEvent e) {
+                 timer.start();
+             }
+         });
+         
+         final JButton button2 = new JButton("Stop");
+         button2.addActionListener(new ActionListener() {
+             public void actionPerformed(final ActionEvent e) {
+                 timer.stop();
+             }
+         });
+ 
+         final JButton button3 = new JButton("Step by step");
+         button3.addActionListener(new ActionListener() {
+             public void actionPerformed(final ActionEvent e) {
+                 CyclicXYPlotDemo.this.actionPerformed(null);
+             }
+         });
+ 
+         final JPanel buttonPanel = new JPanel(new FlowLayout());
+         buttonPanel.add(button1);
+         buttonPanel.add(button2);
+         buttonPanel.add(button3);
+         
+         content.add(buttonPanel, BorderLayout.SOUTH);
+         setContentPane(content);
+ 
+         this.timer = new Timer(200, this);            
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final CyclicXYPlotDemo demo = new CyclicXYPlotDemo("Cyclic XY Plot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+         //.start(); // Calls ourselves each half of a second
+     }
+ 
+     /**
+      * Receives notification of an action event.
+      * 
+      * @param e  the event.
+      */
+     public void actionPerformed(final ActionEvent e) {
+         double delta = Math.random() * 10 - 5;
+         if (delta == -5.0) {
+             delta = 0; // balance chances
+         }
+         this.y += delta;
+         this.series.add(this.x++ / 4.0, this.y);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DemoDatasetFactory.java jfreechart/source/org/jfree/chart/demo/DemoDatasetFactory.java
*** jfreechart-orig/source/org/jfree/chart/demo/DemoDatasetFactory.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DemoDatasetFactory.java	2004-11-07 15:43:17.000000000 +0100
***************
*** 0 ****
--- 1,1615 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * DemoDatasetFactory.java
+  * -----------------------
+  * (C) Copyright 2001-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Bryan Scott;
+  *                   Bill Kelemen;
+  *                   David Browning;
+  *                   Robert Redburn;
+  *
+  * $Id: DemoDatasetFactory.java,v 1.27 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 10-Dec-2001 : Version 1 (DG);
+  * 15-Mar-2002 : Added createHighLowOpenCloseDataset() method (DG);
+  * 20-Jun-2002 : Added createMeterDataset() method (BRS);
+  * 24-Jun-2002 : Moved createGanttDataset() method from GanttDemo (BRS);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 24-May-2003 : Added createSegmentedHighLowDataset(..) (BK);
+  * 05-Aug-2003 : Added createBoxAndWhiskerDataset() method (DB);
+  * 08-Aug-2003 : Refined createBoxAndWhiskerDataset() method (DB);
+  * 19-Jan-2004 : Added createWaferMapDataset() and
+  *                     createRandomWaferMapDataset() methods (RR);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.util.Date;
+ import java.util.Random;
+ 
+ import org.jfree.chart.axis.SegmentedTimeline;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.IntervalCategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.data.general.WaferMapDataset;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.FixedMillisecond;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.time.Year;
+ import org.jfree.data.xy.DefaultHighLowDataset;
+ import org.jfree.data.xy.DefaultWindDataset;
+ import org.jfree.data.xy.SignalsDataset;
+ import org.jfree.data.xy.WindDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.date.DateUtilities;
+ import org.jfree.date.MonthConstants;
+ 
+ /**
+  * A utility class for generating sample datasets for the demos.
+  * <p>
+  * These datasets are hard-coded so that they are easily accessible for the demonstration
+  * applications.  In a real application, you would create datasets dynamically by reading data from
+  * a file, a database, or some other source.
+  *
+  */
+ public abstract class DemoDatasetFactory {
+     
+     /**
+      * Creates and returns a {@link CategoryDataset} for the demo charts.
+      *
+      * @return a sample dataset.
+      */
+     public static CategoryDataset createCategoryDataset() {
+ 
+         final double[][] data = new double[][]
+             {{10.0, 4.0, 15.0, 14.0},
+              {-5.0, -7.0, 14.0, -3.0},
+              {6.0, 17.0, -12.0, 7.0},
+              {7.0, 15.0, 11.0, 0.0},
+              {-8.0, -6.0, 10.0, -9.0},
+              {9.0, 8.0, 0.0, 6.0},
+              {-10.0, 9.0, 7.0, 7.0},
+              {11.0, 13.0, 9.0, 9.0},
+              {-3.0, 7.0, 11.0, -10.0}};
+ 
+         return DatasetUtilities.createCategoryDataset("Series ", "Category ", data);
+ 
+     }
+ 
+     /**
+      * Creates and returns a category dataset with JUST ONE CATEGORY for the demo charts.
+      *
+      * @return a sample category dataset.
+      */
+     public static CategoryDataset createSingleCategoryDataset() {
+ 
+         final Number[][] data = new Integer[][]
+             {{new Integer(10)},
+              {new Integer(-5)},
+              {new Integer(6)},
+              {new Integer(7)},
+              {new Integer(-8)},
+              {new Integer(9)},
+              {new Integer(-10)},
+              {new Integer(11)},
+              {new Integer(-3)}};
+ 
+         return DatasetUtilities.createCategoryDataset("Series ", "Category ", data);
+ 
+     }
+ 
+     /**
+      * Creates and returns a category dataset for the demo charts.
+      *
+      * @return a sample category dataset.
+      */
+     public static CategoryDataset createSingleSeriesCategoryDataset() {
+ 
+         final double[][] data = new double[][] {{10.0, -4.0, 15.0, 14.0}};
+ 
+         return DatasetUtilities.createCategoryDataset("Series ", "Category ", data);
+ 
+     }
+ 
+     /**
+      * Returns a null interval category dataset.
+      *
+      * @return null.
+      */
+     public static IntervalCategoryDataset createIntervalCategoryDataset() {
+ 
+         return null;
+ 
+     }
+ 
+     /**
+      * Returns a sample XY dataset.
+      *
+      * @return a sample XY dataset.
+      */
+     public static XYDataset createSampleXYDataset() {
+         return new SampleXYDataset();
+     }
+ 
+     /**
+      * Returns a dataset consisting of one annual series.
+      *
+      * @return a sample time series collection.
+      */
+     public static TimeSeriesCollection createTimeSeriesCollection1() {
+ 
+         final TimeSeries t1 = new TimeSeries("Annual", "Year", "Value", Year.class);
+         try {
+             t1.add(new Year(1990), new Double(50.1));
+             t1.add(new Year(1991), new Double(12.3));
+             t1.add(new Year(1992), new Double(23.9));
+             t1.add(new Year(1993), new Double(83.4));
+             t1.add(new Year(1994), new Double(-34.7));
+             t1.add(new Year(1995), new Double(76.5));
+             t1.add(new Year(1996), new Double(10.0));
+             t1.add(new Year(1997), new Double(-14.7));
+             t1.add(new Year(1998), new Double(43.9));
+             t1.add(new Year(1999), new Double(49.6));
+             t1.add(new Year(2000), new Double(37.2));
+             t1.add(new Year(2001), new Double(17.1));
+         }
+         catch (Exception e) {
+             System.err.println(e.getMessage());
+         }
+ 
+         return new TimeSeriesCollection(t1);
+ 
+     }
+ 
+     /**
+      * Creates a time series collection containing JPY/GBP exchange rates.
+      *
+      * @return a sample time series collection.
+      */
+     public static TimeSeriesCollection createTimeSeriesCollection2() {
+ 
+         final TimeSeriesCollection data = new TimeSeriesCollection();
+         data.addSeries(createJPYTimeSeries());
+         return data;
+ 
+     }
+ 
+     /**
+      * Creates a time series collection containing USD/GBP and EUR/GBP exchange rates.
+      *
+      * @return a sample time series collection.
+      */
+     public static TimeSeriesCollection createTimeSeriesCollection3() {
+ 
+         final TimeSeriesCollection collection = new TimeSeriesCollection();
+         collection.addSeries(createUSDTimeSeries());
+         collection.addSeries(createEURTimeSeries());
+         return collection;
+ 
+     }
+ 
+     /**
+      * Returns a time series dataset using millisecond data.
+      *
+      * @return a sample time series collection.
+      */
+     public static TimeSeriesCollection createTimeSeriesCollection4() {
+ 
+         final TimeSeries t4 = new TimeSeries("Test",
+                                                  "Millisecond", "Value", FixedMillisecond.class);
+         final Date now = new Date();
+         try {
+             t4.add(new FixedMillisecond(now.getTime() + 0), new Double(50.1));
+             t4.add(new FixedMillisecond(now.getTime() + 1), new Double(12.3));
+             t4.add(new FixedMillisecond(now.getTime() + 2), new Double(23.9));
+             t4.add(new FixedMillisecond(now.getTime() + 3), new Double(83.4));
+             t4.add(new FixedMillisecond(now.getTime() + 4), new Double(34.7));
+             t4.add(new FixedMillisecond(now.getTime() + 5), new Double(76.5));
+             t4.add(new FixedMillisecond(now.getTime() + 6), new Double(150.0));
+             t4.add(new FixedMillisecond(now.getTime() + 7), new Double(414.7));
+             t4.add(new FixedMillisecond(now.getTime() + 8), new Double(1500.9));
+             t4.add(new FixedMillisecond(now.getTime() + 9), new Double(4530.6));
+             t4.add(new FixedMillisecond(now.getTime() + 10), new Double(7337.2));
+             t4.add(new FixedMillisecond(now.getTime() + 11), new Double(9117.1));
+         }
+         catch (Exception e) {
+             System.err.println(e.getMessage());
+         }
+ 
+         return new TimeSeriesCollection(t4);
+ 
+     }
+ 
+     /**
+      * Returns a time series of the daily USD/GBP exchange rates in 2001 (to date), for use in
+      * the JFreeChart demonstration application.
+      * <P>
+      * You wouldn't normally create a time series in this way.  Typically, values would
+      * be read from a database.
+      *
+      * @return a time series.
+      *
+      */
+     public static TimeSeries createUSDTimeSeries() {
+ 
+         final TimeSeries t1 = new TimeSeries("USD/GBP");
+         try {
+             t1.add(new Day(2, MonthConstants.JANUARY, 2001), 1.4956);
+             t1.add(new Day(3, MonthConstants.JANUARY, 2001), new Double(1.5047));
+             t1.add(new Day(4, MonthConstants.JANUARY, 2001), new Double(1.4931));
+             t1.add(new Day(5, MonthConstants.JANUARY, 2001), new Double(1.4955));
+             t1.add(new Day(8, MonthConstants.JANUARY, 2001), new Double(1.4994));
+             t1.add(new Day(9, MonthConstants.JANUARY, 2001), new Double(1.4911));
+             t1.add(new Day(10, MonthConstants.JANUARY, 2001), new Double(1.4903));
+             t1.add(new Day(11, MonthConstants.JANUARY, 2001), new Double(1.4947));
+             t1.add(new Day(12, MonthConstants.JANUARY, 2001), new Double(1.4784));
+             t1.add(new Day(15, MonthConstants.JANUARY, 2001), new Double(1.4787));
+             t1.add(new Day(16, MonthConstants.JANUARY, 2001), new Double(1.4702));
+             t1.add(new Day(17, MonthConstants.JANUARY, 2001), new Double(1.4729));
+             t1.add(new Day(18, MonthConstants.JANUARY, 2001), new Double(1.4760));
+             t1.add(new Day(19, MonthConstants.JANUARY, 2001), new Double(1.4685));
+             t1.add(new Day(22, MonthConstants.JANUARY, 2001), new Double(1.4609));
+             t1.add(new Day(23, MonthConstants.JANUARY, 2001), new Double(1.4709));
+             t1.add(new Day(24, MonthConstants.JANUARY, 2001), new Double(1.4576));
+             t1.add(new Day(25, MonthConstants.JANUARY, 2001), new Double(1.4589));
+             t1.add(new Day(26, MonthConstants.JANUARY, 2001), new Double(1.4568));
+             t1.add(new Day(29, MonthConstants.JANUARY, 2001), new Double(1.4566));
+             t1.add(new Day(30, MonthConstants.JANUARY, 2001), new Double(1.4604));
+             t1.add(new Day(31, MonthConstants.JANUARY, 2001), new Double(1.4616));
+             t1.add(new Day(1, MonthConstants.FEBRUARY, 2001), new Double(1.4777));
+             t1.add(new Day(2, MonthConstants.FEBRUARY, 2001), new Double(1.4687));
+             t1.add(new Day(5, MonthConstants.FEBRUARY, 2001), new Double(1.4753));
+             t1.add(new Day(6, MonthConstants.FEBRUARY, 2001), new Double(1.4605));
+             t1.add(new Day(7, MonthConstants.FEBRUARY, 2001), new Double(1.4619));
+             t1.add(new Day(8, MonthConstants.FEBRUARY, 2001), new Double(1.4453));
+             t1.add(new Day(9, MonthConstants.FEBRUARY, 2001), new Double(1.4463));
+             t1.add(new Day(12, MonthConstants.FEBRUARY, 2001), new Double(1.4521));
+             t1.add(new Day(13, MonthConstants.FEBRUARY, 2001), new Double(1.4517));
+             t1.add(new Day(14, MonthConstants.FEBRUARY, 2001), new Double(1.4601));
+             t1.add(new Day(15, MonthConstants.FEBRUARY, 2001), new Double(1.4500));
+             t1.add(new Day(16, MonthConstants.FEBRUARY, 2001), new Double(1.4517));
+             t1.add(new Day(19, MonthConstants.FEBRUARY, 2001), new Double(1.4459));
+             t1.add(new Day(20, MonthConstants.FEBRUARY, 2001), new Double(1.4449));
+             t1.add(new Day(21, MonthConstants.FEBRUARY, 2001), new Double(1.4447));
+             t1.add(new Day(22, MonthConstants.FEBRUARY, 2001), new Double(1.4465));
+             t1.add(new Day(23, MonthConstants.FEBRUARY, 2001), new Double(1.4487));
+             t1.add(new Day(26, MonthConstants.FEBRUARY, 2001), new Double(1.4417));
+             t1.add(new Day(27, MonthConstants.FEBRUARY, 2001), new Double(1.4420));
+             t1.add(new Day(28, MonthConstants.FEBRUARY, 2001), new Double(1.4421));
+             t1.add(new Day(1, MonthConstants.MARCH, 2001), new Double(1.4547));
+             t1.add(new Day(2, MonthConstants.MARCH, 2001), new Double(1.4741));
+             t1.add(new Day(5, MonthConstants.MARCH, 2001), new Double(1.4686));
+             t1.add(new Day(6, MonthConstants.MARCH, 2001), new Double(1.4667));
+             t1.add(new Day(7, MonthConstants.MARCH, 2001), new Double(1.4618));
+             t1.add(new Day(8, MonthConstants.MARCH, 2001), new Double(1.4685));
+             t1.add(new Day(9, MonthConstants.MARCH, 2001), new Double(1.4677));
+             t1.add(new Day(12, MonthConstants.MARCH, 2001), new Double(1.4660));
+             t1.add(new Day(13, MonthConstants.MARCH, 2001), new Double(1.4526));
+             t1.add(new Day(14, MonthConstants.MARCH, 2001), new Double(1.4483));
+             t1.add(new Day(15, MonthConstants.MARCH, 2001), new Double(1.4441));
+             t1.add(new Day(16, MonthConstants.MARCH, 2001), new Double(1.4303));
+             t1.add(new Day(19, MonthConstants.MARCH, 2001), new Double(1.4259));
+             t1.add(new Day(20, MonthConstants.MARCH, 2001), new Double(1.4283));
+             t1.add(new Day(21, MonthConstants.MARCH, 2001), new Double(1.4293));
+             t1.add(new Day(22, MonthConstants.MARCH, 2001), new Double(1.4192));
+             t1.add(new Day(23, MonthConstants.MARCH, 2001), new Double(1.4293));
+             t1.add(new Day(26, MonthConstants.MARCH, 2001), new Double(1.4334));
+             t1.add(new Day(27, MonthConstants.MARCH, 2001), new Double(1.4371));
+             t1.add(new Day(28, MonthConstants.MARCH, 2001), new Double(1.4347));
+             t1.add(new Day(29, MonthConstants.MARCH, 2001), new Double(1.4362));
+             t1.add(new Day(30, MonthConstants.MARCH, 2001), new Double(1.4217));
+             t1.add(new Day(2, MonthConstants.APRIL, 2001), new Double(1.4205));
+             t1.add(new Day(3, MonthConstants.APRIL, 2001), new Double(1.4270));
+             t1.add(new Day(4, MonthConstants.APRIL, 2001), new Double(1.4333));
+             t1.add(new Day(5, MonthConstants.APRIL, 2001), new Double(1.4287));
+             t1.add(new Day(6, MonthConstants.APRIL, 2001), new Double(1.4395));
+             t1.add(new Day(9, MonthConstants.APRIL, 2001), new Double(1.4494));
+             t1.add(new Day(10, MonthConstants.APRIL, 2001), new Double(1.4385));
+             t1.add(new Day(11, MonthConstants.APRIL, 2001), new Double(1.4348));
+             t1.add(new Day(12, MonthConstants.APRIL, 2001), new Double(1.4402));
+             t1.add(new Day(17, MonthConstants.APRIL, 2001), new Double(1.4314));
+             t1.add(new Day(18, MonthConstants.APRIL, 2001), new Double(1.4197));
+             t1.add(new Day(19, MonthConstants.APRIL, 2001), new Double(1.4365));
+             t1.add(new Day(20, MonthConstants.APRIL, 2001), new Double(1.4416));
+             t1.add(new Day(23, MonthConstants.APRIL, 2001), new Double(1.4396));
+             t1.add(new Day(24, MonthConstants.APRIL, 2001), new Double(1.4360));
+             t1.add(new Day(25, MonthConstants.APRIL, 2001), new Double(1.4397));
+             t1.add(new Day(26, MonthConstants.APRIL, 2001), new Double(1.4402));
+             t1.add(new Day(27, MonthConstants.APRIL, 2001), new Double(1.4366));
+             t1.add(new Day(30, MonthConstants.APRIL, 2001), new Double(1.4309));
+             t1.add(new Day(1, MonthConstants.MAY, 2001), new Double(1.4324));
+             t1.add(new Day(2, MonthConstants.MAY, 2001), new Double(1.4336));
+             t1.add(new Day(3, MonthConstants.MAY, 2001), new Double(1.4329));
+             t1.add(new Day(4, MonthConstants.MAY, 2001), new Double(1.4375));
+             t1.add(new Day(8, MonthConstants.MAY, 2001), new Double(1.4321));
+             t1.add(new Day(9, MonthConstants.MAY, 2001), new Double(1.4219));
+             t1.add(new Day(10, MonthConstants.MAY, 2001), new Double(1.4226));
+             t1.add(new Day(11, MonthConstants.MAY, 2001), new Double(1.4199));
+             t1.add(new Day(14, MonthConstants.MAY, 2001), new Double(1.4183));
+             t1.add(new Day(15, MonthConstants.MAY, 2001), new Double(1.4218));
+             t1.add(new Day(16, MonthConstants.MAY, 2001), new Double(1.4295));
+             t1.add(new Day(17, MonthConstants.MAY, 2001), new Double(1.4296));
+             t1.add(new Day(18, MonthConstants.MAY, 2001), new Double(1.4296));
+             t1.add(new Day(21, MonthConstants.MAY, 2001), new Double(1.4366));
+             t1.add(new Day(22, MonthConstants.MAY, 2001), new Double(1.4283));
+             t1.add(new Day(23, MonthConstants.MAY, 2001), new Double(1.4244));
+             t1.add(new Day(24, MonthConstants.MAY, 2001), new Double(1.4102));
+             t1.add(new Day(25, MonthConstants.MAY, 2001), new Double(1.4205));
+             t1.add(new Day(29, MonthConstants.MAY, 2001), new Double(1.4183));
+             t1.add(new Day(30, MonthConstants.MAY, 2001), new Double(1.4230));
+             t1.add(new Day(31, MonthConstants.MAY, 2001), new Double(1.4201));
+             t1.add(new Day(1, MonthConstants.JUNE, 2001), new Double(1.4148));
+             t1.add(new Day(4, MonthConstants.JUNE, 2001), new Double(1.4142));
+             t1.add(new Day(5, MonthConstants.JUNE, 2001), new Double(1.4095));
+             t1.add(new Day(6, MonthConstants.JUNE, 2001), new Double(1.3938));
+             t1.add(new Day(7, MonthConstants.JUNE, 2001), new Double(1.3886));
+             t1.add(new Day(8, MonthConstants.JUNE, 2001), new Double(1.3798));
+             t1.add(new Day(11, MonthConstants.JUNE, 2001), new Double(1.3726));
+             t1.add(new Day(12, MonthConstants.JUNE, 2001), new Double(1.3788));
+             t1.add(new Day(13, MonthConstants.JUNE, 2001), new Double(1.3878));
+             t1.add(new Day(14, MonthConstants.JUNE, 2001), new Double(1.4002));
+             t1.add(new Day(15, MonthConstants.JUNE, 2001), new Double(1.4033));
+             t1.add(new Day(18, MonthConstants.JUNE, 2001), new Double(1.4038));
+             t1.add(new Day(19, MonthConstants.JUNE, 2001), new Double(1.4023));
+             t1.add(new Day(20, MonthConstants.JUNE, 2001), new Double(1.3952));
+             t1.add(new Day(21, MonthConstants.JUNE, 2001), new Double(1.4142));
+             t1.add(new Day(22, MonthConstants.JUNE, 2001), new Double(1.4114));
+             t1.add(new Day(25, MonthConstants.JUNE, 2001), new Double(1.4141));
+             t1.add(new Day(26, MonthConstants.JUNE, 2001), new Double(1.4157));
+             t1.add(new Day(27, MonthConstants.JUNE, 2001), new Double(1.4136));
+             t1.add(new Day(28, MonthConstants.JUNE, 2001), new Double(1.4089));
+             t1.add(new Day(29, MonthConstants.JUNE, 2001), new Double(1.4066));
+             t1.add(new Day(2, MonthConstants.JULY, 2001), new Double(1.4154));
+             t1.add(new Day(3, MonthConstants.JULY, 2001), new Double(1.4072));
+             t1.add(new Day(4, MonthConstants.JULY, 2001), new Double(1.4064));
+             t1.add(new Day(5, MonthConstants.JULY, 2001), new Double(1.3995));
+             t1.add(new Day(6, MonthConstants.JULY, 2001), new Double(1.4070));
+             t1.add(new Day(9, MonthConstants.JULY, 2001), new Double(1.4094));
+             t1.add(new Day(10, MonthConstants.JULY, 2001), new Double(1.4113));
+             t1.add(new Day(11, MonthConstants.JULY, 2001), new Double(1.4143));
+             t1.add(new Day(12, MonthConstants.JULY, 2001), new Double(1.4061));
+             t1.add(new Day(13, MonthConstants.JULY, 2001), new Double(1.4008));
+             t1.add(new Day(16, MonthConstants.JULY, 2001), new Double(1.3999));
+             t1.add(new Day(17, MonthConstants.JULY, 2001), new Double(1.4003));
+             t1.add(new Day(18, MonthConstants.JULY, 2001), new Double(1.4155));
+             t1.add(new Day(19, MonthConstants.JULY, 2001), new Double(1.4165));
+             t1.add(new Day(20, MonthConstants.JULY, 2001), new Double(1.4282));
+             t1.add(new Day(23, MonthConstants.JULY, 2001), new Double(1.4190));
+             t1.add(new Day(24, MonthConstants.JULY, 2001), new Double(1.4200));
+             t1.add(new Day(25, MonthConstants.JULY, 2001), new Double(1.4276));
+             t1.add(new Day(26, MonthConstants.JULY, 2001), new Double(1.4275));
+             t1.add(new Day(27, MonthConstants.JULY, 2001), new Double(1.4233));
+             t1.add(new Day(30, MonthConstants.JULY, 2001), new Double(1.4246));
+             t1.add(new Day(31, MonthConstants.JULY, 2001), new Double(1.4254));
+             t1.add(new Day(1, MonthConstants.AUGUST, 2001), new Double(1.4319));
+             t1.add(new Day(2, MonthConstants.AUGUST, 2001), new Double(1.4321));
+             t1.add(new Day(3, MonthConstants.AUGUST, 2001), new Double(1.4293));
+             t1.add(new Day(6, MonthConstants.AUGUST, 2001), new Double(1.4190));
+             t1.add(new Day(7, MonthConstants.AUGUST, 2001), new Double(1.4176));
+             t1.add(new Day(8, MonthConstants.AUGUST, 2001), new Double(1.4139));
+             t1.add(new Day(9, MonthConstants.AUGUST, 2001), new Double(1.4214));
+             t1.add(new Day(10, MonthConstants.AUGUST, 2001), new Double(1.4266));
+             t1.add(new Day(11, MonthConstants.AUGUST, 2001), new Double(1.4220));
+             t1.add(new Day(12, MonthConstants.AUGUST, 2001), new Double(1.4210));
+             t1.add(new Day(15, MonthConstants.AUGUST, 2001), new Double(1.4383));
+             t1.add(new Day(16, MonthConstants.AUGUST, 2001), new Double(1.4431));
+             t1.add(new Day(17, MonthConstants.AUGUST, 2001), new Double(1.4445));
+             t1.add(new Day(20, MonthConstants.AUGUST, 2001), new Double(1.4444));
+             t1.add(new Day(21, MonthConstants.AUGUST, 2001), new Double(1.4483));
+             t1.add(new Day(22, MonthConstants.AUGUST, 2001), new Double(1.4556));
+             t1.add(new Day(23, MonthConstants.AUGUST, 2001), new Double(1.4468));
+             t1.add(new Day(24, MonthConstants.AUGUST, 2001), new Double(1.4464));
+             t1.add(new Day(28, MonthConstants.AUGUST, 2001), new Double(1.4483));
+             t1.add(new Day(29, MonthConstants.AUGUST, 2001), new Double(1.4519));
+             t1.add(new Day(30, MonthConstants.AUGUST, 2001), new Double(1.4494));
+             t1.add(new Day(31, MonthConstants.AUGUST, 2001), new Double(1.4505));
+             t1.add(new Day(3, MonthConstants.SEPTEMBER, 2001), new Double(1.4519));
+             t1.add(new Day(4, MonthConstants.SEPTEMBER, 2001), new Double(1.4460));
+             t1.add(new Day(5, MonthConstants.SEPTEMBER, 2001), new Double(1.4526));
+             t1.add(new Day(6, MonthConstants.SEPTEMBER, 2001), new Double(1.4527));
+             t1.add(new Day(7, MonthConstants.SEPTEMBER, 2001), new Double(1.4617));
+             t1.add(new Day(10, MonthConstants.SEPTEMBER, 2001), new Double(1.4583));
+             t1.add(new Day(11, MonthConstants.SEPTEMBER, 2001), new Double(1.4693));
+             t1.add(new Day(12, MonthConstants.SEPTEMBER, 2001), new Double(1.4633));
+             t1.add(new Day(13, MonthConstants.SEPTEMBER, 2001), new Double(1.4690));
+             t1.add(new Day(14, MonthConstants.SEPTEMBER, 2001), new Double(1.4691));
+             t1.add(new Day(17, MonthConstants.SEPTEMBER, 2001), new Double(1.4668));
+             t1.add(new Day(18, MonthConstants.SEPTEMBER, 2001), new Double(1.4624));
+             t1.add(new Day(19, MonthConstants.SEPTEMBER, 2001), new Double(1.4678));
+             t1.add(new Day(20, MonthConstants.SEPTEMBER, 2001), new Double(1.4657));
+             t1.add(new Day(21, MonthConstants.SEPTEMBER, 2001), new Double(1.4575));
+             t1.add(new Day(24, MonthConstants.SEPTEMBER, 2001), new Double(1.4646));
+             t1.add(new Day(25, MonthConstants.SEPTEMBER, 2001), new Double(1.4699));
+             t1.add(new Day(26, MonthConstants.SEPTEMBER, 2001), new Double(1.4749));
+             t1.add(new Day(27, MonthConstants.SEPTEMBER, 2001), new Double(1.4756));
+             t1.add(new Day(28, MonthConstants.SEPTEMBER, 2001), new Double(1.4699));
+             t1.add(new Day(1, MonthConstants.OCTOBER, 2001), new Double(1.4784));
+             t1.add(new Day(2, MonthConstants.OCTOBER, 2001), new Double(1.4661));
+             t1.add(new Day(3, MonthConstants.OCTOBER, 2001), new Double(1.4767));
+             t1.add(new Day(4, MonthConstants.OCTOBER, 2001), new Double(1.4770));
+             t1.add(new Day(5, MonthConstants.OCTOBER, 2001), new Double(1.4810));
+             t1.add(new Day(8, MonthConstants.OCTOBER, 2001), new Double(1.4743));
+             t1.add(new Day(9, MonthConstants.OCTOBER, 2001), new Double(1.4667));
+             t1.add(new Day(10, MonthConstants.OCTOBER, 2001), new Double(1.4505));
+             t1.add(new Day(11, MonthConstants.OCTOBER, 2001), new Double(1.4434));
+             t1.add(new Day(12, MonthConstants.OCTOBER, 2001), new Double(1.4504));
+             t1.add(new Day(15, MonthConstants.OCTOBER, 2001), new Double(1.4471));
+             t1.add(new Day(16, MonthConstants.OCTOBER, 2001), new Double(1.4474));
+             t1.add(new Day(17, MonthConstants.OCTOBER, 2001), new Double(1.4512));
+             t1.add(new Day(18, MonthConstants.OCTOBER, 2001), new Double(1.4445));
+             t1.add(new Day(19, MonthConstants.OCTOBER, 2001), new Double(1.4384));
+             t1.add(new Day(22, MonthConstants.OCTOBER, 2001), new Double(1.4275));
+             t1.add(new Day(23, MonthConstants.OCTOBER, 2001), new Double(1.4212));
+             t1.add(new Day(24, MonthConstants.OCTOBER, 2001), new Double(1.4233));
+             t1.add(new Day(25, MonthConstants.OCTOBER, 2001), new Double(1.4297));
+             t1.add(new Day(26, MonthConstants.OCTOBER, 2001), new Double(1.4328));
+             t1.add(new Day(29, MonthConstants.OCTOBER, 2001), new Double(1.4515));
+             t1.add(new Day(30, MonthConstants.OCTOBER, 2001), new Double(1.4564));
+             t1.add(new Day(31, MonthConstants.OCTOBER, 2001), new Double(1.4541));
+             t1.add(new Day(1, MonthConstants.NOVEMBER, 2001), new Double(1.4624));
+             t1.add(new Day(2, MonthConstants.NOVEMBER, 2001), new Double(1.4632));
+             t1.add(new Day(5, MonthConstants.NOVEMBER, 2001), new Double(1.4570));
+             t1.add(new Day(6, MonthConstants.NOVEMBER, 2001), new Double(1.4588));
+             t1.add(new Day(7, MonthConstants.NOVEMBER, 2001), new Double(1.4646));
+             t1.add(new Day(8, MonthConstants.NOVEMBER, 2001), new Double(1.4552));
+             t1.add(new Day(9, MonthConstants.NOVEMBER, 2001), new Double(1.4579));
+             t1.add(new Day(12, MonthConstants.NOVEMBER, 2001), new Double(1.4575));
+             t1.add(new Day(13, MonthConstants.NOVEMBER, 2001), new Double(1.4429));
+             t1.add(new Day(14, MonthConstants.NOVEMBER, 2001), new Double(1.4425));
+             t1.add(new Day(15, MonthConstants.NOVEMBER, 2001), new Double(1.4318));
+             t1.add(new Day(16, MonthConstants.NOVEMBER, 2001), new Double(1.4291));
+             t1.add(new Day(19, MonthConstants.NOVEMBER, 2001), new Double(1.4140));
+             t1.add(new Day(20, MonthConstants.NOVEMBER, 2001), new Double(1.4173));
+             t1.add(new Day(21, MonthConstants.NOVEMBER, 2001), new Double(1.4132));
+             t1.add(new Day(22, MonthConstants.NOVEMBER, 2001), new Double(1.4131));
+             t1.add(new Day(23, MonthConstants.NOVEMBER, 2001), new Double(1.4083));
+             t1.add(new Day(26, MonthConstants.NOVEMBER, 2001), new Double(1.4122));
+             t1.add(new Day(27, MonthConstants.NOVEMBER, 2001), new Double(1.4136));
+             t1.add(new Day(28, MonthConstants.NOVEMBER, 2001), new Double(1.4239));
+             t1.add(new Day(29, MonthConstants.NOVEMBER, 2001), new Double(1.4225));
+             t1.add(new Day(30, MonthConstants.NOVEMBER, 2001), new Double(1.4260));
+         }
+         catch (Exception e) {
+             System.err.println(e.getMessage());
+         }
+         return t1;
+     }
+ 
+     /**
+      * Returns a time series of the daily EUR/GBP exchange rates in 2001 (to date), for use in
+      * the JFreeChart demonstration application.
+      * <P>
+      * You wouldn't normally create a time series in this way.  Typically, values would
+      * be read from a database.
+      *
+      * @return a time series.
+      *
+      */
+     public static TimeSeries createEURTimeSeries() {
+ 
+         final TimeSeries t1 = new TimeSeries("EUR/GBP");
+         try {
+             t1.add(new Day(2, MonthConstants.JANUARY, 2001), new Double(1.5788));
+             t1.add(new Day(3, MonthConstants.JANUARY, 2001), new Double(1.5913));
+             t1.add(new Day(4, MonthConstants.JANUARY, 2001), new Double(1.5807));
+             t1.add(new Day(5, MonthConstants.JANUARY, 2001), new Double(1.5711));
+             t1.add(new Day(8, MonthConstants.JANUARY, 2001), new Double(1.5778));
+             t1.add(new Day(9, MonthConstants.JANUARY, 2001), new Double(1.5851));
+             t1.add(new Day(10, MonthConstants.JANUARY, 2001), new Double(1.5846));
+             t1.add(new Day(11, MonthConstants.JANUARY, 2001), new Double(1.5727));
+             t1.add(new Day(12, MonthConstants.JANUARY, 2001), new Double(1.5585));
+             t1.add(new Day(15, MonthConstants.JANUARY, 2001), new Double(1.5694));
+             t1.add(new Day(16, MonthConstants.JANUARY, 2001), new Double(1.5629));
+             t1.add(new Day(17, MonthConstants.JANUARY, 2001), new Double(1.5831));
+             t1.add(new Day(18, MonthConstants.JANUARY, 2001), new Double(1.5624));
+             t1.add(new Day(19, MonthConstants.JANUARY, 2001), new Double(1.5694));
+             t1.add(new Day(22, MonthConstants.JANUARY, 2001), new Double(1.5615));
+             t1.add(new Day(23, MonthConstants.JANUARY, 2001), new Double(1.5656));
+             t1.add(new Day(24, MonthConstants.JANUARY, 2001), new Double(1.5795));
+             t1.add(new Day(25, MonthConstants.JANUARY, 2001), new Double(1.5852));
+             t1.add(new Day(26, MonthConstants.JANUARY, 2001), new Double(1.5797));
+             t1.add(new Day(29, MonthConstants.JANUARY, 2001), new Double(1.5862));
+             t1.add(new Day(30, MonthConstants.JANUARY, 2001), new Double(1.5803));
+             t1.add(new Day(31, MonthConstants.JANUARY, 2001), new Double(1.5714));
+             t1.add(new Day(1, MonthConstants.FEBRUARY, 2001), new Double(1.5717));
+             t1.add(new Day(2, MonthConstants.FEBRUARY, 2001), new Double(1.5735));
+             t1.add(new Day(5, MonthConstants.FEBRUARY, 2001), new Double(1.5691));
+             t1.add(new Day(6, MonthConstants.FEBRUARY, 2001), new Double(1.5676));
+             t1.add(new Day(7, MonthConstants.FEBRUARY, 2001), new Double(1.5677));
+             t1.add(new Day(8, MonthConstants.FEBRUARY, 2001), new Double(1.5737));
+             t1.add(new Day(9, MonthConstants.FEBRUARY, 2001), new Double(1.5654));
+             t1.add(new Day(12, MonthConstants.FEBRUARY, 2001), new Double(1.5621));
+             t1.add(new Day(13, MonthConstants.FEBRUARY, 2001), new Double(1.5761));
+             t1.add(new Day(14, MonthConstants.FEBRUARY, 2001), new Double(1.5898));
+             t1.add(new Day(15, MonthConstants.FEBRUARY, 2001), new Double(1.6045));
+             t1.add(new Day(16, MonthConstants.FEBRUARY, 2001), new Double(1.5852));
+             t1.add(new Day(19, MonthConstants.FEBRUARY, 2001), new Double(1.5704));
+             t1.add(new Day(20, MonthConstants.FEBRUARY, 2001), new Double(1.5892));
+             t1.add(new Day(21, MonthConstants.FEBRUARY, 2001), new Double(1.5844));
+             t1.add(new Day(22, MonthConstants.FEBRUARY, 2001), new Double(1.5934));
+             t1.add(new Day(23, MonthConstants.FEBRUARY, 2001), new Double(1.5951));
+             t1.add(new Day(26, MonthConstants.FEBRUARY, 2001), new Double(1.5848));
+             t1.add(new Day(27, MonthConstants.FEBRUARY, 2001), new Double(1.5706));
+             t1.add(new Day(28, MonthConstants.FEBRUARY, 2001), new Double(1.5680));
+             t1.add(new Day(1, MonthConstants.MARCH, 2001), new Double(1.5645));
+             t1.add(new Day(2, MonthConstants.MARCH, 2001), new Double(1.5754));
+             t1.add(new Day(5, MonthConstants.MARCH, 2001), new Double(1.5808));
+             t1.add(new Day(6, MonthConstants.MARCH, 2001), new Double(1.5766));
+             t1.add(new Day(7, MonthConstants.MARCH, 2001), new Double(1.5756));
+             t1.add(new Day(8, MonthConstants.MARCH, 2001), new Double(1.5760));
+             t1.add(new Day(9, MonthConstants.MARCH, 2001), new Double(1.5748));
+             t1.add(new Day(12, MonthConstants.MARCH, 2001), new Double(1.5779));
+             t1.add(new Day(13, MonthConstants.MARCH, 2001), new Double(1.5837));
+             t1.add(new Day(14, MonthConstants.MARCH, 2001), new Double(1.5886));
+             t1.add(new Day(15, MonthConstants.MARCH, 2001), new Double(1.5931));
+             t1.add(new Day(16, MonthConstants.MARCH, 2001), new Double(1.5945));
+             t1.add(new Day(19, MonthConstants.MARCH, 2001), new Double(1.5880));
+             t1.add(new Day(20, MonthConstants.MARCH, 2001), new Double(1.5817));
+             t1.add(new Day(21, MonthConstants.MARCH, 2001), new Double(1.5927));
+             t1.add(new Day(22, MonthConstants.MARCH, 2001), new Double(1.6065));
+             t1.add(new Day(23, MonthConstants.MARCH, 2001), new Double(1.6006));
+             t1.add(new Day(26, MonthConstants.MARCH, 2001), new Double(1.6007));
+             t1.add(new Day(27, MonthConstants.MARCH, 2001), new Double(1.5989));
+             t1.add(new Day(28, MonthConstants.MARCH, 2001), new Double(1.6135));
+             t1.add(new Day(29, MonthConstants.MARCH, 2001), new Double(1.6282));
+             t1.add(new Day(30, MonthConstants.MARCH, 2001), new Double(1.6090));
+             t1.add(new Day(2, MonthConstants.APRIL, 2001), new Double(1.6107));
+             t1.add(new Day(3, MonthConstants.APRIL, 2001), new Double(1.6093));
+             t1.add(new Day(4, MonthConstants.APRIL, 2001), new Double(1.5880));
+             t1.add(new Day(5, MonthConstants.APRIL, 2001), new Double(1.5931));
+             t1.add(new Day(6, MonthConstants.APRIL, 2001), new Double(1.5968));
+             t1.add(new Day(9, MonthConstants.APRIL, 2001), new Double(1.6072));
+             t1.add(new Day(10, MonthConstants.APRIL, 2001), new Double(1.6167));
+             t1.add(new Day(11, MonthConstants.APRIL, 2001), new Double(1.6214));
+             t1.add(new Day(12, MonthConstants.APRIL, 2001), new Double(1.6120));
+             t1.add(new Day(17, MonthConstants.APRIL, 2001), new Double(1.6229));
+             t1.add(new Day(18, MonthConstants.APRIL, 2001), new Double(1.6298));
+             t1.add(new Day(19, MonthConstants.APRIL, 2001), new Double(1.6159));
+             t1.add(new Day(20, MonthConstants.APRIL, 2001), new Double(1.5996));
+             t1.add(new Day(23, MonthConstants.APRIL, 2001), new Double(1.6042));
+             t1.add(new Day(24, MonthConstants.APRIL, 2001), new Double(1.6061));
+             t1.add(new Day(25, MonthConstants.APRIL, 2001), new Double(1.6045));
+             t1.add(new Day(26, MonthConstants.APRIL, 2001), new Double(1.5970));
+             t1.add(new Day(27, MonthConstants.APRIL, 2001), new Double(1.6095));
+             t1.add(new Day(30, MonthConstants.APRIL, 2001), new Double(1.6141));
+             t1.add(new Day(1, MonthConstants.MAY, 2001), new Double(1.6076));
+             t1.add(new Day(2, MonthConstants.MAY, 2001), new Double(1.6077));
+             t1.add(new Day(3, MonthConstants.MAY, 2001), new Double(1.6035));
+             t1.add(new Day(4, MonthConstants.MAY, 2001), new Double(1.6060));
+             t1.add(new Day(8, MonthConstants.MAY, 2001), new Double(1.6178));
+             t1.add(new Day(9, MonthConstants.MAY, 2001), new Double(1.6083));
+             t1.add(new Day(10, MonthConstants.MAY, 2001), new Double(1.6107));
+             t1.add(new Day(11, MonthConstants.MAY, 2001), new Double(1.6209));
+             t1.add(new Day(14, MonthConstants.MAY, 2001), new Double(1.6228));
+             t1.add(new Day(15, MonthConstants.MAY, 2001), new Double(1.6184));
+             t1.add(new Day(16, MonthConstants.MAY, 2001), new Double(1.6167));
+             t1.add(new Day(17, MonthConstants.MAY, 2001), new Double(1.6223));
+             t1.add(new Day(18, MonthConstants.MAY, 2001), new Double(1.6305));
+             t1.add(new Day(21, MonthConstants.MAY, 2001), new Double(1.6420));
+             t1.add(new Day(22, MonthConstants.MAY, 2001), new Double(1.6484));
+             t1.add(new Day(23, MonthConstants.MAY, 2001), new Double(1.6547));
+             t1.add(new Day(24, MonthConstants.MAY, 2001), new Double(1.6444));
+             t1.add(new Day(25, MonthConstants.MAY, 2001), new Double(1.6577));
+             t1.add(new Day(29, MonthConstants.MAY, 2001), new Double(1.6606));
+             t1.add(new Day(30, MonthConstants.MAY, 2001), new Double(1.6604));
+             t1.add(new Day(31, MonthConstants.MAY, 2001), new Double(1.6772));
+             t1.add(new Day(1, MonthConstants.JUNE, 2001), new Double(1.6717));
+             t1.add(new Day(4, MonthConstants.JUNE, 2001), new Double(1.6685));
+             t1.add(new Day(5, MonthConstants.JUNE, 2001), new Double(1.6621));
+             t1.add(new Day(6, MonthConstants.JUNE, 2001), new Double(1.6460));
+             t1.add(new Day(7, MonthConstants.JUNE, 2001), new Double(1.6333));
+             t1.add(new Day(8, MonthConstants.JUNE, 2001), new Double(1.6265));
+             t1.add(new Day(11, MonthConstants.JUNE, 2001), new Double(1.6311));
+             t1.add(new Day(12, MonthConstants.JUNE, 2001), new Double(1.6238));
+             t1.add(new Day(13, MonthConstants.JUNE, 2001), new Double(1.6300));
+             t1.add(new Day(14, MonthConstants.JUNE, 2001), new Double(1.6289));
+             t1.add(new Day(15, MonthConstants.JUNE, 2001), new Double(1.6276));
+             t1.add(new Day(18, MonthConstants.JUNE, 2001), new Double(1.6299));
+             t1.add(new Day(19, MonthConstants.JUNE, 2001), new Double(1.6353));
+             t1.add(new Day(20, MonthConstants.JUNE, 2001), new Double(1.6378));
+             t1.add(new Day(21, MonthConstants.JUNE, 2001), new Double(1.6567));
+             t1.add(new Day(22, MonthConstants.JUNE, 2001), new Double(1.6523));
+             t1.add(new Day(25, MonthConstants.JUNE, 2001), new Double(1.6418));
+             t1.add(new Day(26, MonthConstants.JUNE, 2001), new Double(1.6429));
+             t1.add(new Day(27, MonthConstants.JUNE, 2001), new Double(1.6439));
+             t1.add(new Day(28, MonthConstants.JUNE, 2001), new Double(1.6605));
+             t1.add(new Day(29, MonthConstants.JUNE, 2001), new Double(1.6599));
+             t1.add(new Day(2, MonthConstants.JULY, 2001), new Double(1.6727));
+             t1.add(new Day(3, MonthConstants.JULY, 2001), new Double(1.6620));
+             t1.add(new Day(4, MonthConstants.JULY, 2001), new Double(1.6628));
+             t1.add(new Day(5, MonthConstants.JULY, 2001), new Double(1.6730));
+             t1.add(new Day(6, MonthConstants.JULY, 2001), new Double(1.6649));
+             t1.add(new Day(9, MonthConstants.JULY, 2001), new Double(1.6603));
+             t1.add(new Day(10, MonthConstants.JULY, 2001), new Double(1.6489));
+             t1.add(new Day(11, MonthConstants.JULY, 2001), new Double(1.6421));
+             t1.add(new Day(12, MonthConstants.JULY, 2001), new Double(1.6498));
+             t1.add(new Day(13, MonthConstants.JULY, 2001), new Double(1.6447));
+             t1.add(new Day(16, MonthConstants.JULY, 2001), new Double(1.6373));
+             t1.add(new Day(17, MonthConstants.JULY, 2001), new Double(1.6443));
+             t1.add(new Day(18, MonthConstants.JULY, 2001), new Double(1.6246));
+             t1.add(new Day(19, MonthConstants.JULY, 2001), new Double(1.6295));
+             t1.add(new Day(20, MonthConstants.JULY, 2001), new Double(1.6362));
+             t1.add(new Day(23, MonthConstants.JULY, 2001), new Double(1.6348));
+             t1.add(new Day(24, MonthConstants.JULY, 2001), new Double(1.6242));
+             t1.add(new Day(25, MonthConstants.JULY, 2001), new Double(1.6241));
+             t1.add(new Day(26, MonthConstants.JULY, 2001), new Double(1.6281));
+             t1.add(new Day(27, MonthConstants.JULY, 2001), new Double(1.6296));
+             t1.add(new Day(30, MonthConstants.JULY, 2001), new Double(1.6279));
+             t1.add(new Day(31, MonthConstants.JULY, 2001), new Double(1.6300));
+             t1.add(new Day(1, MonthConstants.AUGUST, 2001), new Double(1.6290));
+             t1.add(new Day(2, MonthConstants.AUGUST, 2001), new Double(1.6237));
+             t1.add(new Day(3, MonthConstants.AUGUST, 2001), new Double(1.6138));
+             t1.add(new Day(6, MonthConstants.AUGUST, 2001), new Double(1.6121));
+             t1.add(new Day(7, MonthConstants.AUGUST, 2001), new Double(1.6170));
+             t1.add(new Day(8, MonthConstants.AUGUST, 2001), new Double(1.6135));
+             t1.add(new Day(9, MonthConstants.AUGUST, 2001), new Double(1.5996));
+             t1.add(new Day(10, MonthConstants.AUGUST, 2001), new Double(1.5931));
+             t1.add(new Day(13, MonthConstants.AUGUST, 2001), new Double(1.5828));
+             t1.add(new Day(14, MonthConstants.AUGUST, 2001), new Double(1.5824));
+             t1.add(new Day(15, MonthConstants.AUGUST, 2001), new Double(1.5783));
+             t1.add(new Day(16, MonthConstants.AUGUST, 2001), new Double(1.5810));
+             t1.add(new Day(17, MonthConstants.AUGUST, 2001), new Double(1.5761));
+             t1.add(new Day(20, MonthConstants.AUGUST, 2001), new Double(1.5831));
+             t1.add(new Day(21, MonthConstants.AUGUST, 2001), new Double(1.5870));
+             t1.add(new Day(22, MonthConstants.AUGUST, 2001), new Double(1.5808));
+             t1.add(new Day(23, MonthConstants.AUGUST, 2001), new Double(1.5845));
+             t1.add(new Day(24, MonthConstants.AUGUST, 2001), new Double(1.5844));
+             t1.add(new Day(28, MonthConstants.AUGUST, 2001), new Double(1.5924));
+             t1.add(new Day(29, MonthConstants.AUGUST, 2001), new Double(1.5950));
+             t1.add(new Day(30, MonthConstants.AUGUST, 2001), new Double(1.5941));
+             t1.add(new Day(31, MonthConstants.AUGUST, 2001), new Double(1.5968));
+             t1.add(new Day(3, MonthConstants.SEPTEMBER, 2001), new Double(1.6020));
+             t1.add(new Day(4, MonthConstants.SEPTEMBER, 2001), new Double(1.6236));
+             t1.add(new Day(5, MonthConstants.SEPTEMBER, 2001), new Double(1.6352));
+             t1.add(new Day(6, MonthConstants.SEPTEMBER, 2001), new Double(1.6302));
+             t1.add(new Day(7, MonthConstants.SEPTEMBER, 2001), new Double(1.6180));
+             t1.add(new Day(10, MonthConstants.SEPTEMBER, 2001), new Double(1.6218));
+             t1.add(new Day(11, MonthConstants.SEPTEMBER, 2001), new Double(1.6182));
+             t1.add(new Day(12, MonthConstants.SEPTEMBER, 2001), new Double(1.6157));
+             t1.add(new Day(13, MonthConstants.SEPTEMBER, 2001), new Double(1.6171));
+             t1.add(new Day(14, MonthConstants.SEPTEMBER, 2001), new Double(1.5960));
+             t1.add(new Day(17, MonthConstants.SEPTEMBER, 2001), new Double(1.5952));
+             t1.add(new Day(18, MonthConstants.SEPTEMBER, 2001), new Double(1.5863));
+             t1.add(new Day(19, MonthConstants.SEPTEMBER, 2001), new Double(1.5790));
+             t1.add(new Day(20, MonthConstants.SEPTEMBER, 2001), new Double(1.5811));
+             t1.add(new Day(21, MonthConstants.SEPTEMBER, 2001), new Double(1.5917));
+             t1.add(new Day(24, MonthConstants.SEPTEMBER, 2001), new Double(1.6005));
+             t1.add(new Day(25, MonthConstants.SEPTEMBER, 2001), new Double(1.5915));
+             t1.add(new Day(26, MonthConstants.SEPTEMBER, 2001), new Double(1.6012));
+             t1.add(new Day(27, MonthConstants.SEPTEMBER, 2001), new Double(1.6032));
+             t1.add(new Day(28, MonthConstants.SEPTEMBER, 2001), new Double(1.6133));
+             t1.add(new Day(1, MonthConstants.OCTOBER, 2001), new Double(1.6147));
+             t1.add(new Day(2, MonthConstants.OCTOBER, 2001), new Double(1.6002));
+             t1.add(new Day(3, MonthConstants.OCTOBER, 2001), new Double(1.6041));
+             t1.add(new Day(4, MonthConstants.OCTOBER, 2001), new Double(1.6172));
+             t1.add(new Day(5, MonthConstants.OCTOBER, 2001), new Double(1.6121));
+             t1.add(new Day(8, MonthConstants.OCTOBER, 2001), new Double(1.6044));
+             t1.add(new Day(9, MonthConstants.OCTOBER, 2001), new Double(1.5974));
+             t1.add(new Day(10, MonthConstants.OCTOBER, 2001), new Double(1.5915));
+             t1.add(new Day(11, MonthConstants.OCTOBER, 2001), new Double(1.6022));
+             t1.add(new Day(12, MonthConstants.OCTOBER, 2001), new Double(1.6014));
+             t1.add(new Day(15, MonthConstants.OCTOBER, 2001), new Double(1.5942));
+             t1.add(new Day(16, MonthConstants.OCTOBER, 2001), new Double(1.5925));
+             t1.add(new Day(17, MonthConstants.OCTOBER, 2001), new Double(1.6007));
+             t1.add(new Day(18, MonthConstants.OCTOBER, 2001), new Double(1.6000));
+             t1.add(new Day(19, MonthConstants.OCTOBER, 2001), new Double(1.6030));
+             t1.add(new Day(22, MonthConstants.OCTOBER, 2001), new Double(1.6014));
+             t1.add(new Day(23, MonthConstants.OCTOBER, 2001), new Double(1.5995));
+             t1.add(new Day(24, MonthConstants.OCTOBER, 2001), new Double(1.5951));
+             t1.add(new Day(25, MonthConstants.OCTOBER, 2001), new Double(1.5953));
+             t1.add(new Day(26, MonthConstants.OCTOBER, 2001), new Double(1.6057));
+             t1.add(new Day(29, MonthConstants.OCTOBER, 2001), new Double(1.6051));
+             t1.add(new Day(30, MonthConstants.OCTOBER, 2001), new Double(1.6027));
+             t1.add(new Day(31, MonthConstants.OCTOBER, 2001), new Double(1.6144));
+             t1.add(new Day(1, MonthConstants.NOVEMBER, 2001), new Double(1.6139));
+             t1.add(new Day(2, MonthConstants.NOVEMBER, 2001), new Double(1.6189));
+             t1.add(new Day(5, MonthConstants.NOVEMBER, 2001), new Double(1.6248));
+             t1.add(new Day(6, MonthConstants.NOVEMBER, 2001), new Double(1.6267));
+             t1.add(new Day(7, MonthConstants.NOVEMBER, 2001), new Double(1.6281));
+             t1.add(new Day(8, MonthConstants.NOVEMBER, 2001), new Double(1.6310));
+             t1.add(new Day(9, MonthConstants.NOVEMBER, 2001), new Double(1.6313));
+             t1.add(new Day(12, MonthConstants.NOVEMBER, 2001), new Double(1.6272));
+             t1.add(new Day(13, MonthConstants.NOVEMBER, 2001), new Double(1.6361));
+             t1.add(new Day(14, MonthConstants.NOVEMBER, 2001), new Double(1.6323));
+             t1.add(new Day(15, MonthConstants.NOVEMBER, 2001), new Double(1.6252));
+             t1.add(new Day(16, MonthConstants.NOVEMBER, 2001), new Double(1.6141));
+             t1.add(new Day(19, MonthConstants.NOVEMBER, 2001), new Double(1.6086));
+             t1.add(new Day(20, MonthConstants.NOVEMBER, 2001), new Double(1.6055));
+             t1.add(new Day(21, MonthConstants.NOVEMBER, 2001), new Double(1.6132));
+             t1.add(new Day(22, MonthConstants.NOVEMBER, 2001), new Double(1.6074));
+             t1.add(new Day(23, MonthConstants.NOVEMBER, 2001), new Double(1.6065));
+             t1.add(new Day(26, MonthConstants.NOVEMBER, 2001), new Double(1.6061));
+             t1.add(new Day(27, MonthConstants.NOVEMBER, 2001), new Double(1.6039));
+             t1.add(new Day(28, MonthConstants.NOVEMBER, 2001), new Double(1.6069));
+             t1.add(new Day(29, MonthConstants.NOVEMBER, 2001), new Double(1.6044));
+             t1.add(new Day(30, MonthConstants.NOVEMBER, 2001), new Double(1.5928));
+         }
+         catch (Exception e) {
+             System.err.println(e.getMessage());
+         }
+         return t1;
+     }
+ 
+     /**
+      * Returns a time series of the daily EUR/GBP exchange rates in 2001 (to date), for use in
+      * the JFreeChart demonstration application.
+      * <P>
+      * You wouldn't normally create a time series in this way.  Typically, values would
+      * be read from a database.
+      *
+      * @return a sample time series.
+      */
+     public static TimeSeries createJPYTimeSeries() {
+ 
+         final TimeSeries t1 = new TimeSeries("JPY/GBP Exchange Rate");
+         try {
+             t1.add(new Day(2, MonthConstants.JANUARY, 2001), new Double(171.2612));
+             t1.add(new Day(3, MonthConstants.JANUARY, 2001), new Double(172.1076));
+             t1.add(new Day(4, MonthConstants.JANUARY, 2001), new Double(172.3485));
+             t1.add(new Day(5, MonthConstants.JANUARY, 2001), new Double(173.7023));
+             t1.add(new Day(8, MonthConstants.JANUARY, 2001), new Double(174.1253));
+             t1.add(new Day(9, MonthConstants.JANUARY, 2001), new Double(173.6386));
+             t1.add(new Day(10, MonthConstants.JANUARY, 2001), new Double(173.2623));
+             t1.add(new Day(11, MonthConstants.JANUARY, 2001), new Double(175.7319));
+             t1.add(new Day(12, MonthConstants.JANUARY, 2001), new Double(174.2442));
+             t1.add(new Day(15, MonthConstants.JANUARY, 2001), new Double(175.7583));
+             t1.add(new Day(16, MonthConstants.JANUARY, 2001), new Double(173.0719));
+             t1.add(new Day(17, MonthConstants.JANUARY, 2001), new Double(173.0805));
+             t1.add(new Day(18, MonthConstants.JANUARY, 2001), new Double(174.1975));
+             t1.add(new Day(19, MonthConstants.JANUARY, 2001), new Double(172.3138));
+             t1.add(new Day(22, MonthConstants.JANUARY, 2001), new Double(170.5016));
+             t1.add(new Day(23, MonthConstants.JANUARY, 2001), new Double(172.1836));
+             t1.add(new Day(24, MonthConstants.JANUARY, 2001), new Double(172.2154));
+             t1.add(new Day(25, MonthConstants.JANUARY, 2001), new Double(170.1515));
+             t1.add(new Day(26, MonthConstants.JANUARY, 2001), new Double(170.3728));
+             t1.add(new Day(29, MonthConstants.JANUARY, 2001), new Double(170.2911));
+             t1.add(new Day(30, MonthConstants.JANUARY, 2001), new Double(170.3995));
+             t1.add(new Day(31, MonthConstants.JANUARY, 2001), new Double(169.9110));
+             t1.add(new Day(1, MonthConstants.FEBRUARY, 2001), new Double(170.4084));
+             t1.add(new Day(2, MonthConstants.FEBRUARY, 2001), new Double(169.8845));
+             t1.add(new Day(5, MonthConstants.FEBRUARY, 2001), new Double(169.5120));
+             t1.add(new Day(6, MonthConstants.FEBRUARY, 2001), new Double(167.9429));
+             t1.add(new Day(7, MonthConstants.FEBRUARY, 2001), new Double(169.6096));
+             t1.add(new Day(8, MonthConstants.FEBRUARY, 2001), new Double(167.8282));
+             t1.add(new Day(9, MonthConstants.FEBRUARY, 2001), new Double(170.1427));
+             t1.add(new Day(12, MonthConstants.FEBRUARY, 2001), new Double(170.8250));
+             t1.add(new Day(13, MonthConstants.FEBRUARY, 2001), new Double(170.4005));
+             t1.add(new Day(14, MonthConstants.FEBRUARY, 2001), new Double(170.1455));
+             t1.add(new Day(15, MonthConstants.FEBRUARY, 2001), new Double(167.6925));
+             t1.add(new Day(16, MonthConstants.FEBRUARY, 2001), new Double(167.6133));
+             t1.add(new Day(19, MonthConstants.FEBRUARY, 2001), new Double(167.7099));
+             t1.add(new Day(20, MonthConstants.FEBRUARY, 2001), new Double(166.9004));
+             t1.add(new Day(21, MonthConstants.FEBRUARY, 2001), new Double(168.4231));
+             t1.add(new Day(22, MonthConstants.FEBRUARY, 2001), new Double(168.3292));
+             t1.add(new Day(23, MonthConstants.FEBRUARY, 2001), new Double(168.6142));
+             t1.add(new Day(26, MonthConstants.FEBRUARY, 2001), new Double(168.2608));
+             t1.add(new Day(27, MonthConstants.FEBRUARY, 2001), new Double(167.6325));
+             t1.add(new Day(28, MonthConstants.FEBRUARY, 2001), new Double(169.1728));
+             t1.add(new Day(1, MonthConstants.MARCH, 2001), new Double(170.5199));
+             t1.add(new Day(2, MonthConstants.MARCH, 2001), new Double(175.5211));
+             t1.add(new Day(5, MonthConstants.MARCH, 2001), new Double(174.9543));
+             t1.add(new Day(6, MonthConstants.MARCH, 2001), new Double(174.4053));
+             t1.add(new Day(7, MonthConstants.MARCH, 2001), new Double(175.1675));
+             t1.add(new Day(8, MonthConstants.MARCH, 2001), new Double(175.7501));
+             t1.add(new Day(9, MonthConstants.MARCH, 2001), new Double(175.5956));
+             t1.add(new Day(12, MonthConstants.MARCH, 2001), new Double(176.6677));
+             t1.add(new Day(13, MonthConstants.MARCH, 2001), new Double(174.4282));
+             t1.add(new Day(14, MonthConstants.MARCH, 2001), new Double(175.1140));
+             t1.add(new Day(15, MonthConstants.MARCH, 2001), new Double(175.8914));
+             t1.add(new Day(16, MonthConstants.MARCH, 2001), new Double(175.7124));
+             t1.add(new Day(19, MonthConstants.MARCH, 2001), new Double(174.2307));
+             t1.add(new Day(20, MonthConstants.MARCH, 2001), new Double(175.0382));
+             t1.add(new Day(21, MonthConstants.MARCH, 2001), new Double(176.1183));
+             t1.add(new Day(22, MonthConstants.MARCH, 2001), new Double(176.2646));
+             t1.add(new Day(23, MonthConstants.MARCH, 2001), new Double(175.3608));
+             t1.add(new Day(26, MonthConstants.MARCH, 2001), new Double(176.5805));
+             t1.add(new Day(27, MonthConstants.MARCH, 2001), new Double(176.8495));
+             t1.add(new Day(28, MonthConstants.MARCH, 2001), new Double(174.7895));
+             t1.add(new Day(29, MonthConstants.MARCH, 2001), new Double(176.6957));
+             t1.add(new Day(30, MonthConstants.MARCH, 2001), new Double(178.1106));
+             t1.add(new Day(2, MonthConstants.APRIL, 2001), new Double(179.5654));
+             t1.add(new Day(3, MonthConstants.APRIL, 2001), new Double(179.7021));
+             t1.add(new Day(4, MonthConstants.APRIL, 2001), new Double(179.5065));
+             t1.add(new Day(5, MonthConstants.APRIL, 2001), new Double(177.9874));
+             t1.add(new Day(6, MonthConstants.APRIL, 2001), new Double(178.3541));
+             t1.add(new Day(9, MonthConstants.APRIL, 2001), new Double(181.0301));
+             t1.add(new Day(10, MonthConstants.APRIL, 2001), new Double(179.0357));
+             t1.add(new Day(11, MonthConstants.APRIL, 2001), new Double(178.8478));
+             t1.add(new Day(12, MonthConstants.APRIL, 2001), new Double(177.7927));
+             t1.add(new Day(17, MonthConstants.APRIL, 2001), new Double(177.1644));
+             t1.add(new Day(18, MonthConstants.APRIL, 2001), new Double(174.1972));
+             t1.add(new Day(19, MonthConstants.APRIL, 2001), new Double(174.9370));
+             t1.add(new Day(20, MonthConstants.APRIL, 2001), new Double(176.8555));
+             t1.add(new Day(23, MonthConstants.APRIL, 2001), new Double(175.3433));
+             t1.add(new Day(24, MonthConstants.APRIL, 2001), new Double(175.4792));
+             t1.add(new Day(25, MonthConstants.APRIL, 2001), new Double(175.7154));
+             t1.add(new Day(26, MonthConstants.APRIL, 2001), new Double(176.1797));
+             t1.add(new Day(27, MonthConstants.APRIL, 2001), new Double(177.7074));
+             t1.add(new Day(30, MonthConstants.APRIL, 2001), new Double(176.8592));
+             t1.add(new Day(1, MonthConstants.MAY, 2001), new Double(174.9104));
+             t1.add(new Day(2, MonthConstants.MAY, 2001), new Double(174.8992));
+             t1.add(new Day(3, MonthConstants.MAY, 2001), new Double(173.4239));
+             t1.add(new Day(4, MonthConstants.MAY, 2001), new Double(173.9663));
+             t1.add(new Day(8, MonthConstants.MAY, 2001), new Double(174.4871));
+             t1.add(new Day(9, MonthConstants.MAY, 2001), new Double(173.6851));
+             t1.add(new Day(10, MonthConstants.MAY, 2001), new Double(174.5957));
+             t1.add(new Day(11, MonthConstants.MAY, 2001), new Double(173.6254));
+             t1.add(new Day(14, MonthConstants.MAY, 2001), new Double(174.7913));
+             t1.add(new Day(15, MonthConstants.MAY, 2001), new Double(175.3932));
+             t1.add(new Day(16, MonthConstants.MAY, 2001), new Double(176.7291));
+             t1.add(new Day(17, MonthConstants.MAY, 2001), new Double(175.8551));
+             t1.add(new Day(18, MonthConstants.MAY, 2001), new Double(176.8558));
+             t1.add(new Day(21, MonthConstants.MAY, 2001), new Double(176.6443));
+             t1.add(new Day(22, MonthConstants.MAY, 2001), new Double(175.1953));
+             t1.add(new Day(23, MonthConstants.MAY, 2001), new Double(171.6117));
+             t1.add(new Day(24, MonthConstants.MAY, 2001), new Double(169.0407));
+             t1.add(new Day(25, MonthConstants.MAY, 2001), new Double(171.3975));
+             t1.add(new Day(29, MonthConstants.MAY, 2001), new Double(170.2811));
+             t1.add(new Day(30, MonthConstants.MAY, 2001), new Double(171.2154));
+             t1.add(new Day(31, MonthConstants.MAY, 2001), new Double(168.6795));
+             t1.add(new Day(1, MonthConstants.JUNE, 2001), new Double(168.2339));
+             t1.add(new Day(4, MonthConstants.JUNE, 2001), new Double(169.2090));
+             t1.add(new Day(5, MonthConstants.JUNE, 2001), new Double(169.4501));
+             t1.add(new Day(6, MonthConstants.JUNE, 2001), new Double(167.8414));
+             t1.add(new Day(7, MonthConstants.JUNE, 2001), new Double(166.6042));
+             t1.add(new Day(8, MonthConstants.JUNE, 2001), new Double(166.5005));
+             t1.add(new Day(11, MonthConstants.JUNE, 2001), new Double(167.2925));
+             t1.add(new Day(12, MonthConstants.JUNE, 2001), new Double(168.1171));
+             t1.add(new Day(13, MonthConstants.JUNE, 2001), new Double(168.9091));
+             t1.add(new Day(14, MonthConstants.JUNE, 2001), new Double(169.8863));
+             t1.add(new Day(15, MonthConstants.JUNE, 2001), new Double(171.5254));
+             t1.add(new Day(18, MonthConstants.JUNE, 2001), new Double(172.6955));
+             t1.add(new Day(19, MonthConstants.JUNE, 2001), new Double(172.3427));
+             t1.add(new Day(20, MonthConstants.JUNE, 2001), new Double(172.0421));
+             t1.add(new Day(21, MonthConstants.JUNE, 2001), new Double(175.9830));
+             t1.add(new Day(22, MonthConstants.JUNE, 2001), new Double(175.5076));
+             t1.add(new Day(25, MonthConstants.JUNE, 2001), new Double(175.1080));
+             t1.add(new Day(26, MonthConstants.JUNE, 2001), new Double(175.5043));
+             t1.add(new Day(27, MonthConstants.JUNE, 2001), new Double(175.3712));
+             t1.add(new Day(28, MonthConstants.JUNE, 2001), new Double(175.9575));
+             t1.add(new Day(29, MonthConstants.JUNE, 2001), new Double(175.4734));
+             t1.add(new Day(2, MonthConstants.JULY, 2001), new Double(175.9908));
+             t1.add(new Day(3, MonthConstants.JULY, 2001), new Double(175.2386));
+             t1.add(new Day(4, MonthConstants.JULY, 2001), new Double(175.0405));
+             t1.add(new Day(5, MonthConstants.JULY, 2001), new Double(175.9451));
+             t1.add(new Day(6, MonthConstants.JULY, 2001), new Double(177.3383));
+             t1.add(new Day(9, MonthConstants.JULY, 2001), new Double(176.6965));
+             t1.add(new Day(10, MonthConstants.JULY, 2001), new Double(177.0476));
+             t1.add(new Day(11, MonthConstants.JULY, 2001), new Double(175.6136));
+             t1.add(new Day(12, MonthConstants.JULY, 2001), new Double(174.1736));
+             t1.add(new Day(13, MonthConstants.JULY, 2001), new Double(174.8619));
+             t1.add(new Day(16, MonthConstants.JULY, 2001), new Double(175.4915));
+             t1.add(new Day(17, MonthConstants.JULY, 2001), new Double(175.1916));
+             t1.add(new Day(18, MonthConstants.JULY, 2001), new Double(176.0599));
+             t1.add(new Day(19, MonthConstants.JULY, 2001), new Double(174.8244));
+             t1.add(new Day(20, MonthConstants.JULY, 2001), new Double(175.8257));
+             t1.add(new Day(23, MonthConstants.JULY, 2001), new Double(176.2682));
+             t1.add(new Day(24, MonthConstants.JULY, 2001), new Double(176.1794));
+             t1.add(new Day(25, MonthConstants.JULY, 2001), new Double(176.4514));
+             t1.add(new Day(26, MonthConstants.JULY, 2001), new Double(176.7673));
+             t1.add(new Day(27, MonthConstants.JULY, 2001), new Double(176.1476));
+             t1.add(new Day(30, MonthConstants.JULY, 2001), new Double(178.3029));
+             t1.add(new Day(31, MonthConstants.JULY, 2001), new Double(178.0895));
+             t1.add(new Day(1, MonthConstants.AUGUST, 2001), new Double(178.6438));
+             t1.add(new Day(2, MonthConstants.AUGUST, 2001), new Double(177.1364));
+             t1.add(new Day(3, MonthConstants.AUGUST, 2001), new Double(176.4042));
+             t1.add(new Day(6, MonthConstants.AUGUST, 2001), new Double(175.7999));
+             t1.add(new Day(7, MonthConstants.AUGUST, 2001), new Double(175.5131));
+             t1.add(new Day(8, MonthConstants.AUGUST, 2001), new Double(173.9804));
+             t1.add(new Day(9, MonthConstants.AUGUST, 2001), new Double(174.9459));
+             t1.add(new Day(10, MonthConstants.AUGUST, 2001), new Double(173.8883));
+             t1.add(new Day(13, MonthConstants.AUGUST, 2001), new Double(173.8253));
+             t1.add(new Day(14, MonthConstants.AUGUST, 2001), new Double(173.0352));
+             t1.add(new Day(15, MonthConstants.AUGUST, 2001), new Double(172.4666));
+             t1.add(new Day(16, MonthConstants.AUGUST, 2001), new Double(173.4173));
+             t1.add(new Day(17, MonthConstants.AUGUST, 2001), new Double(173.6289));
+             t1.add(new Day(20, MonthConstants.AUGUST, 2001), new Double(174.3824));
+             t1.add(new Day(21, MonthConstants.AUGUST, 2001), new Double(173.5063));
+             t1.add(new Day(22, MonthConstants.AUGUST, 2001), new Double(174.3372));
+             t1.add(new Day(23, MonthConstants.AUGUST, 2001), new Double(173.8620));
+             t1.add(new Day(24, MonthConstants.AUGUST, 2001), new Double(173.5825));
+             t1.add(new Day(28, MonthConstants.AUGUST, 2001), new Double(174.7664));
+             t1.add(new Day(29, MonthConstants.AUGUST, 2001), new Double(173.5166));
+             t1.add(new Day(30, MonthConstants.AUGUST, 2001), new Double(173.8555));
+             t1.add(new Day(31, MonthConstants.AUGUST, 2001), new Double(172.6675));
+             t1.add(new Day(3, MonthConstants.SEPTEMBER, 2001), new Double(172.3986));
+             t1.add(new Day(4, MonthConstants.SEPTEMBER, 2001), new Double(171.8860));
+             t1.add(new Day(5, MonthConstants.SEPTEMBER, 2001), new Double(174.8640));
+             t1.add(new Day(6, MonthConstants.SEPTEMBER, 2001), new Double(176.1399));
+             t1.add(new Day(7, MonthConstants.SEPTEMBER, 2001), new Double(175.7110));
+             t1.add(new Day(10, MonthConstants.SEPTEMBER, 2001), new Double(176.3085));
+             t1.add(new Day(11, MonthConstants.SEPTEMBER, 2001), new Double(174.6263));
+             t1.add(new Day(12, MonthConstants.SEPTEMBER, 2001), new Double(174.8058));
+             t1.add(new Day(13, MonthConstants.SEPTEMBER, 2001), new Double(174.8257));
+             t1.add(new Day(14, MonthConstants.SEPTEMBER, 2001), new Double(172.3107));
+             t1.add(new Day(17, MonthConstants.SEPTEMBER, 2001), new Double(172.5397));
+             t1.add(new Day(18, MonthConstants.SEPTEMBER, 2001), new Double(171.7004));
+             t1.add(new Day(19, MonthConstants.SEPTEMBER, 2001), new Double(172.1289));
+             t1.add(new Day(20, MonthConstants.SEPTEMBER, 2001), new Double(170.3143));
+             t1.add(new Day(21, MonthConstants.SEPTEMBER, 2001), new Double(169.9737));
+             t1.add(new Day(24, MonthConstants.SEPTEMBER, 2001), new Double(172.0319));
+             t1.add(new Day(25, MonthConstants.SEPTEMBER, 2001), new Double(172.5516));
+             t1.add(new Day(26, MonthConstants.SEPTEMBER, 2001), new Double(173.8612));
+             t1.add(new Day(27, MonthConstants.SEPTEMBER, 2001), new Double(176.5408));
+             t1.add(new Day(28, MonthConstants.SEPTEMBER, 2001), new Double(175.1092));
+             t1.add(new Day(1, MonthConstants.OCTOBER, 2001), new Double(177.6150));
+             t1.add(new Day(2, MonthConstants.OCTOBER, 2001), new Double(177.1049));
+             t1.add(new Day(3, MonthConstants.OCTOBER, 2001), new Double(178.2525));
+             t1.add(new Day(4, MonthConstants.OCTOBER, 2001), new Double(178.0819));
+             t1.add(new Day(5, MonthConstants.OCTOBER, 2001), new Double(178.1643));
+             t1.add(new Day(8, MonthConstants.OCTOBER, 2001), new Double(176.6654));
+             t1.add(new Day(9, MonthConstants.OCTOBER, 2001), new Double(176.0773));
+             t1.add(new Day(10, MonthConstants.OCTOBER, 2001), new Double(174.4806));
+             t1.add(new Day(11, MonthConstants.OCTOBER, 2001), new Double(175.1855));
+             t1.add(new Day(12, MonthConstants.OCTOBER, 2001), new Double(176.1221));
+             t1.add(new Day(15, MonthConstants.OCTOBER, 2001), new Double(175.1425));
+             t1.add(new Day(16, MonthConstants.OCTOBER, 2001), new Double(175.4683));
+             t1.add(new Day(17, MonthConstants.OCTOBER, 2001), new Double(175.4936));
+             t1.add(new Day(18, MonthConstants.OCTOBER, 2001), new Double(174.8134));
+             t1.add(new Day(19, MonthConstants.OCTOBER, 2001), new Double(174.4492));
+             t1.add(new Day(22, MonthConstants.OCTOBER, 2001), new Double(174.1978));
+             t1.add(new Day(23, MonthConstants.OCTOBER, 2001), new Double(174.8360));
+             t1.add(new Day(24, MonthConstants.OCTOBER, 2001), new Double(174.9378));
+             t1.add(new Day(25, MonthConstants.OCTOBER, 2001), new Double(175.4385));
+             t1.add(new Day(26, MonthConstants.OCTOBER, 2001), new Double(176.4207));
+             t1.add(new Day(29, MonthConstants.OCTOBER, 2001), new Double(177.0540));
+             t1.add(new Day(30, MonthConstants.OCTOBER, 2001), new Double(177.1128));
+             t1.add(new Day(31, MonthConstants.OCTOBER, 2001), new Double(177.9818));
+             t1.add(new Day(1, MonthConstants.NOVEMBER, 2001), new Double(177.9595));
+             t1.add(new Day(2, MonthConstants.NOVEMBER, 2001), new Double(177.9251));
+             t1.add(new Day(5, MonthConstants.NOVEMBER, 2001), new Double(177.2003));
+             t1.add(new Day(6, MonthConstants.NOVEMBER, 2001), new Double(176.6169));
+             t1.add(new Day(7, MonthConstants.NOVEMBER, 2001), new Double(177.3191));
+             t1.add(new Day(8, MonthConstants.NOVEMBER, 2001), new Double(175.7736));
+             t1.add(new Day(9, MonthConstants.NOVEMBER, 2001), new Double(175.2104));
+             t1.add(new Day(12, MonthConstants.NOVEMBER, 2001), new Double(175.0749));
+             t1.add(new Day(13, MonthConstants.NOVEMBER, 2001), new Double(175.2402));
+             t1.add(new Day(14, MonthConstants.NOVEMBER, 2001), new Double(175.3503));
+             t1.add(new Day(15, MonthConstants.NOVEMBER, 2001), new Double(175.2810));
+             t1.add(new Day(16, MonthConstants.NOVEMBER, 2001), new Double(175.4077));
+             t1.add(new Day(19, MonthConstants.NOVEMBER, 2001), new Double(174.3462));
+             t1.add(new Day(20, MonthConstants.NOVEMBER, 2001), new Double(173.8177));
+             t1.add(new Day(21, MonthConstants.NOVEMBER, 2001), new Double(174.0356));
+             t1.add(new Day(22, MonthConstants.NOVEMBER, 2001), new Double(175.0548));
+             t1.add(new Day(23, MonthConstants.NOVEMBER, 2001), new Double(175.2207));
+             t1.add(new Day(26, MonthConstants.NOVEMBER, 2001), new Double(175.4978));
+             t1.add(new Day(27, MonthConstants.NOVEMBER, 2001), new Double(175.2191));
+             t1.add(new Day(28, MonthConstants.NOVEMBER, 2001), new Double(175.4236));
+             t1.add(new Day(29, MonthConstants.NOVEMBER, 2001), new Double(176.2304));
+             t1.add(new Day(30, MonthConstants.NOVEMBER, 2001), new Double(175.6119));        }
+         catch (Exception e) {
+             System.err.println(e.getMessage());
+         }
+         return t1;
+     }
+ 
+     /**
+      * Returns a sample signal dataset.
+      *
+      * @return a sample signal dataset.
+      */
+     public static SignalsDataset createSampleSignalDataset() {
+         return new SampleSignalDataset();
+     }
+ 
+     /**
+      * Creates a sample high low dataset.
+      *
+      * @return a sample high low dataset.
+      */
+     public static DefaultHighLowDataset createHighLowDataset() {
+ 
+         final Date[] date = new Date[47];
+         final double[] high = new double[47];
+         final double[] low = new double[47];
+         final double[] open = new double[47];
+         final double[] close = new double[47];
+         final double[] volume = new double[47];
+ 
+         final int jan = 1;
+         final int feb = 2;
+ 
+         date[0]  = DateUtilities.createDate(2001, jan, 4, 12, 0);
+         high[0]  = 47.0;
+         low[0]   = 33.0;
+         open[0]  = 35.0;
+         close[0] = 33.0;
+         volume[0] = 100.0;
+ 
+         date[1]  = DateUtilities.createDate(2001, jan, 5, 12, 0);
+         high[1]  = 47.0;
+         low[1]   = 32.0;
+         open[1]  = 41.0;
+         close[1] = 37.0;
+         volume[1] = 150.0;
+ 
+         date[2]  = DateUtilities.createDate(2001, jan, 6, 12, 0);
+         high[2]  = 49.0;
+         low[2]   = 43.0;
+         open[2]  = 46.0;
+         close[2] = 48.0;
+         volume[2] = 70.0;
+ 
+         date[3]  = DateUtilities.createDate(2001, jan, 7, 12, 0);
+         high[3]  = 51.0;
+         low[3]   = 39.0;
+         open[3]  = 40.0;
+         close[3] = 47.0;
+         volume[3] = 200.0;
+ 
+         date[4]  = DateUtilities.createDate(2001, jan, 8, 12, 0);
+         high[4]  = 60.0;
+         low[4]   = 40.0;
+         open[4]  = 46.0;
+         close[4] = 53.0;
+         volume[4] = 120.0;
+ 
+         date[5]  = DateUtilities.createDate(2001, jan, 9, 12, 0);
+         high[5]  = 62.0;
+         low[5]   = 55.0;
+         open[5]  = 57.0;
+         close[5] = 61.0;
+         volume[5] = 110.0;
+ 
+         date[6]  = DateUtilities.createDate(2001, jan, 10, 12, 0);
+         high[6]  = 65.0;
+         low[6]   = 56.0;
+         open[6]  = 62.0;
+         close[6] = 59.0;
+         volume[6] = 70.0;
+ 
+         date[7]  = DateUtilities.createDate(2001, jan, 11, 12, 0);
+         high[7]  = 55.0;
+         low[7]   = 43.0;
+         open[7]  = 45.0;
+         close[7] = 47.0;
+         volume[7] = 20.0;
+ 
+         date[8]  = DateUtilities.createDate(2001, jan, 12, 12, 0);
+         high[8]  = 54.0;
+         low[8]   = 33.0;
+         open[8]  = 40.0;
+         close[8] = 51.0;
+         volume[8] = 30.0;
+ 
+         date[9]  = DateUtilities.createDate(2001, jan, 13, 12, 0);
+         high[9]  = 47.0;
+         low[9]   = 33.0;
+         open[9]  = 35.0;
+         close[9] = 33.0;
+         volume[9] = 100.0;
+ 
+         date[10]  = DateUtilities.createDate(2001, jan, 14, 12, 0);
+         high[10]  = 54.0;
+         low[10]   = 38.0;
+         open[10]  = 43.0;
+         close[10] = 52.0;
+         volume[10] = 50.0;
+ 
+         date[11]  = DateUtilities.createDate(2001, jan, 15, 12, 0);
+         high[11]  = 48.0;
+         low[11]   = 41.0;
+         open[11]  = 44.0;
+         close[11] = 41.0;
+         volume[11] = 80.0;
+ 
+         date[12]  = DateUtilities.createDate(2001, jan, 17, 12, 0);
+         high[12]  = 60.0;
+         low[12]   = 30.0;
+         open[12]  = 34.0;
+         close[12] = 44.0;
+         volume[12] = 90.0;
+ 
+         date[13]  = DateUtilities.createDate(2001, jan, 18, 12, 0);
+         high[13]  = 58.0;
+         low[13]   = 44.0;
+         open[13]  = 54.0;
+         close[13] = 56.0;
+         volume[13] = 20.0;
+ 
+         date[14]  = DateUtilities.createDate(2001, jan, 19, 12, 0);
+         high[14]  = 54.0;
+         low[14]   = 32.0;
+         open[14]  = 42.0;
+         close[14] = 53.0;
+         volume[14] = 70.0;
+ 
+         date[15]  = DateUtilities.createDate(2001, jan, 20, 12, 0);
+         high[15]  = 53.0;
+         low[15]   = 39.0;
+         open[15]  = 50.0;
+         close[15] = 49.0;
+         volume[15] = 60.0;
+ 
+         date[16]  = DateUtilities.createDate(2001, jan, 21, 12, 0);
+         high[16]  = 47.0;
+         low[16]   = 33.0;
+         open[16]  = 41.0;
+         close[16] = 40.0;
+         volume[16] = 30.0;
+ 
+         date[17]  = DateUtilities.createDate(2001, jan, 22, 12, 0);
+         high[17]  = 55.0;
+         low[17]   = 37.0;
+         open[17]  = 43.0;
+         close[17] = 45.0;
+         volume[17] = 90.0;
+ 
+         date[18]  = DateUtilities.createDate(2001, jan, 23, 12, 0);
+         high[18]  = 54.0;
+         low[18]   = 42.0;
+         open[18]  = 50.0;
+         close[18] = 42.0;
+         volume[18] = 150.0;
+ 
+         date[19]  = DateUtilities.createDate(2001, jan, 24, 12, 0);
+         high[19]  = 48.0;
+         low[19]   = 37.0;
+         open[19]  = 37.0;
+         close[19] = 47.0;
+         volume[19] = 120.0;
+ 
+         date[20]  = DateUtilities.createDate(2001, jan, 25, 12, 0);
+         high[20]  = 58.0;
+         low[20]   = 33.0;
+         open[20]  = 39.0;
+         close[20] = 41.0;
+         volume[20] = 80.0;
+ 
+         date[21]  = DateUtilities.createDate(2001, jan, 26, 12, 0);
+         high[21]  = 47.0;
+         low[21]   = 31.0;
+         open[21]  = 36.0;
+         close[21] = 41.0;
+         volume[21] = 40.0;
+ 
+         date[22]  = DateUtilities.createDate(2001, jan, 27, 12, 0);
+         high[22]  = 58.0;
+         low[22]   = 44.0;
+         open[22]  = 49.0;
+         close[22] = 44.0;
+         volume[22] = 20.0;
+ 
+         date[23]  = DateUtilities.createDate(2001, jan, 28, 12, 0);
+         high[23]  = 46.0;
+         low[23]   = 41.0;
+         open[23]  = 43.0;
+         close[23] = 44.0;
+         volume[23] = 60.0;
+ 
+         date[24]  = DateUtilities.createDate(2001, jan, 29, 12, 0);
+         high[24]  = 56.0;
+         low[24]   = 39.0;
+         open[24]  = 39.0;
+         close[24] = 51.0;
+         volume[24] = 40.0;
+ 
+         date[25]  = DateUtilities.createDate(2001, jan, 30, 12, 0);
+         high[25]  = 56.0;
+         low[25]   = 39.0;
+         open[25]  = 47.0;
+         close[25] = 49.0;
+         volume[25] = 70.0;
+ 
+         date[26]  = DateUtilities.createDate(2001, jan, 31, 12, 0);
+         high[26]  = 53.0;
+         low[26]   = 39.0;
+         open[26]  = 52.0;
+         close[26] = 47.0;
+         volume[26] = 60.0;
+ 
+         date[27]  = DateUtilities.createDate(2001, feb, 1, 12, 0);
+         high[27]  = 51.0;
+         low[27]   = 30.0;
+         open[27]  = 45.0;
+         close[27] = 47.0;
+         volume[27] = 90.0;
+ 
+         date[28]  = DateUtilities.createDate(2001, feb, 2, 12, 0);
+         high[28]  = 47.0;
+         low[28]   = 30.0;
+         open[28]  = 34.0;
+         close[28] = 46.0;
+         volume[28] = 100.0;
+ 
+         date[29]  = DateUtilities.createDate(2001, feb, 3, 12, 0);
+         high[29]  = 57.0;
+         low[29]   = 37.0;
+         open[29]  = 44.0;
+         close[29] = 56.0;
+         volume[29] = 20.0;
+ 
+         date[30]  = DateUtilities.createDate(2001, feb, 4, 12, 0);
+         high[30]  = 49.0;
+         low[30]   = 40.0;
+         open[30]  = 47.0;
+         close[30] = 44.0;
+         volume[30] = 50.0;
+ 
+         date[31]  = DateUtilities.createDate(2001, feb, 5, 12, 0);
+         high[31]  = 46.0;
+         low[31]   = 38.0;
+         open[31]  = 43.0;
+         close[31] = 40.0;
+         volume[31] = 70.0;
+ 
+         date[32]  = DateUtilities.createDate(2001, feb, 6, 12, 0);
+         high[32]  = 55.0;
+         low[32]   = 38.0;
+         open[32]  = 39.0;
+         close[32] = 53.0;
+         volume[32] = 120.0;
+ 
+         date[33]  = DateUtilities.createDate(2001, feb, 7, 12, 0);
+         high[33]  = 50.0;
+         low[33]   = 33.0;
+         open[33]  = 37.0;
+         close[33] = 37.0;
+         volume[33] = 140.0;
+ 
+         date[34]  = DateUtilities.createDate(2001, feb, 8, 12, 0);
+         high[34]  = 59.0;
+         low[34]   = 34.0;
+         open[34]  = 57.0;
+         close[34] = 43.0;
+         volume[34] = 70.0;
+ 
+         date[35]  = DateUtilities.createDate(2001, feb, 9, 12, 0);
+         high[35]  = 48.0;
+         low[35]   = 39.0;
+         open[35]  = 46.0;
+         close[35] = 47.0;
+         volume[35] = 70.0;
+ 
+         date[36]  = DateUtilities.createDate(2001, feb, 10, 12, 0);
+         high[36]  = 55.0;
+         low[36]   = 30.0;
+         open[36]  = 37.0;
+         close[36] = 30.0;
+         volume[36] = 30.0;
+ 
+         date[37]  = DateUtilities.createDate(2001, feb, 11, 12, 0);
+         high[37]  = 60.0;
+         low[37]   = 32.0;
+         open[37]  = 56.0;
+         close[37] = 36.0;
+         volume[37] = 70.0;
+ 
+         date[38]  = DateUtilities.createDate(2001, feb, 12, 12, 0);
+         high[38]  = 56.0;
+         low[38]   = 42.0;
+         open[38]  = 53.0;
+         close[38] = 54.0;
+         volume[38] = 40.0;
+ 
+         date[39]  = DateUtilities.createDate(2001, feb, 13, 12, 0);
+         high[39]  = 49.0;
+         low[39]   = 42.0;
+         open[39]  = 45.0;
+         close[39] = 42.0;
+         volume[39] = 90.0;
+ 
+         date[40]  = DateUtilities.createDate(2001, feb, 14, 12, 0);
+         high[40]  = 55.0;
+         low[40]   = 42.0;
+         open[40]  = 47.0;
+         close[40] = 54.0;
+         volume[40] = 70.0;
+ 
+         date[41]  = DateUtilities.createDate(2001, feb, 15, 12, 0);
+         high[41]  = 49.0;
+         low[41]   = 35.0;
+         open[41]  = 38.0;
+         close[41] = 35.0;
+         volume[41] = 20.0;
+ 
+         date[42]  = DateUtilities.createDate(2001, feb, 16, 12, 0);
+         high[42]  = 47.0;
+         low[42]   = 38.0;
+         open[42]  = 43.0;
+         close[42] = 42.0;
+         volume[42] = 10.0;
+ 
+         date[43]  = DateUtilities.createDate(2001, feb, 17, 12, 0);
+         high[43]  = 53.0;
+         low[43]   = 42.0;
+         open[43]  = 47.0;
+         close[43] = 48.0;
+         volume[43] = 20.0;
+ 
+         date[44]  = DateUtilities.createDate(2001, feb, 18, 12, 0);
+         high[44]  = 47.0;
+         low[44]   = 44.0;
+         open[44]  = 46.0;
+         close[44] = 44.0;
+         volume[44] = 30.0;
+ 
+         date[45]  = DateUtilities.createDate(2001, feb, 19, 12, 0);
+         high[45]  = 46.0;
+         low[45]   = 40.0;
+         open[45]  = 43.0;
+         close[45] = 44.0;
+         volume[45] = 50.0;
+ 
+         date[46]  = DateUtilities.createDate(2001, feb, 20, 12, 0);
+         high[46]  = 48.0;
+         low[46]   = 41.0;
+         open[46]  = 46.0;
+         close[46] = 41.0;
+         volume[46] = 100.0;
+ 
+         return new DefaultHighLowDataset("Series 1", date, high, low, open, close, volume);
+ 
+     }
+ 
+     /**
+      * Creates a sample high low dataset for a SegmentedTimeline
+      *
+      * @param timeline SegmenteTimeline that will use this dataset.
+      * @param start Date from where the dataset will be generated. Actual dates will
+      *        be generated dynamically based on the timeline.
+      *
+      * @return a sample high low dataset.
+      */
+     public static DefaultHighLowDataset createSegmentedHighLowDataset(
+         final SegmentedTimeline timeline, final Date start) {
+ 
+         // some open-high-low-close data
+         final double[][] data =
+                {{248.1999, 249.3999, 247.0499, 247.6999},
+                 {247.4999, 250.6499, 246.7999, 249.3999},
+                 {249.5999, 249.7499, 247.4999, 248.5999},
+                 {248.5999, 251.5499, 248.4999, 248.6499},
+                 {248.8499, 249.4499, 247.8499, 248.7999},
+                 {249.1999, 250.5499, 248.4999, 248.7999},
+                 {249.2999, 251.1499, 248.9499, 249.1499},
+                 {248.1499, 249.8999, 247.2999, 249.0499},
+                 {248.5999, 248.8999, 246.2999, 246.9499},
+                 {247.1999, 248.3999, 246.6499, 248.3499},
+                 {246.0999, 246.5999, 244.4999, 244.5999},
+                 {243.1999, 243.3999, 240.9499, 242.3499},
+                 {243.5999, 243.5999, 242.2499, 242.8999},
+                 {242.4999, 243.1499, 241.5999, 242.8499},
+                 {244.1999, 247.0499, 243.7499, 246.9999},
+                 {246.9499, 247.6499, 245.2999, 246.0499},
+                 {245.5999, 248.0999, 245.1999, 247.8999},
+                 {247.9499, 247.9499, 243.8499, 243.9499},
+                 {242.1999, 245.9499, 242.1999, 244.7499},
+                 {244.6499, 246.5999, 244.4999, 245.5999},
+                 {245.4499, 249.1999, 245.0999, 249.0999},
+                 {249.0999, 250.2999, 248.4499, 249.2499},
+                 {249.4999, 249.8499, 246.7499, 246.8499},
+                 {246.8499, 247.6499, 245.8999, 246.8499},
+                 {247.6999, 250.7999, 247.6999, 250.6999},
+                 {250.8999, 251.4499, 249.0999, 249.4999},
+                 {249.6499, 252.4999, 249.5999, 251.6499},
+                 {251.9499, 252.2999, 249.4999, 250.0499},
+                 {251.2499, 251.6999, 248.7999, 248.9499},
+                 {249.0999, 250.2499, 247.9499, 249.7499},
+                 {250.0499, 251.1499, 249.4499, 249.9499},
+                 {250.0499, 251.1499, 249.4499, 249.9499},
+                 {249.9999, 250.3499, 246.5999, 246.9499},
+                 {247.0999, 249.6999, 246.8999, 249.2999},
+                 {249.8999, 252.9499, 249.8499, 252.3999},
+                 {252.7999, 253.3499, 251.1999, 251.6999},
+                 {250.4999, 251.2999, 248.9499, 249.8999},
+                 {250.6999, 253.4499, 250.6999, 253.1999},
+                 {252.9999, 253.8999, 252.2999, 253.2499},
+                 {253.6999, 255.1999, 253.4999, 253.9499},
+                 {253.4499, 254.7999, 252.7999, 254.3499},
+                 {253.4499, 254.5999, 252.4999, 254.2999},
+                 {253.5999, 253.8999, 251.6999, 251.7999},
+                 {252.3499, 253.6999, 251.7999, 253.5499},
+                 {253.5499, 254.2499, 251.1999, 251.3499},
+                 {251.2499, 251.9499, 249.9999, 251.5999},
+                 {251.9499, 252.5999, 250.2499, 251.9999},
+                 {251.2499, 252.7499, 251.0999, 252.1999},
+                 {251.6499, 252.5499, 248.8499, 248.9499},
+                 {249.6499, 249.8999, 248.5499, 249.0999},
+                 {249.3499, 250.4499, 248.9499, 250.0999},
+                 {249.5499, 252.1499, 249.2999, 252.0499},
+                 {252.1499, 252.1499, 250.2499, 250.8499},
+                 {251.2499, 254.9499, 250.9999, 254.4499},
+                 {254.0999, 255.1999, 253.4499, 254.5999},
+                 {254.4999, 254.9499, 252.3999, 252.8999},
+                 {253.2999, 253.6499, 252.1499, 252.8999},
+                 {253.4999, 254.1499, 251.8999, 252.0499},
+                 {252.3499, 254.4499, 252.3499, 254.2999},
+                 {254.6499, 255.7499, 251.4499, 251.6499},
+                 {254.6499, 255.7499, 251.4499, 251.6499},
+                 {252.2499, 253.1499, 251.5999, 252.9499},
+                 {253.4499, 253.9499, 251.0999, 251.4999},
+                 {251.7499, 251.8499, 249.4499, 251.0999},
+                 {250.8499, 251.7999, 249.9499, 251.5499},
+                 {251.5499, 252.1499, 250.3499, 251.5999},
+                 {252.9999, 254.9499, 252.7999, 254.8499},
+                 {254.6999, 255.4499, 253.8999, 255.3499},
+                 {254.9999, 256.9500, 254.9999, 256.0999},
+                 {256.4500, 258.2499, 255.3499, 258.1499},
+                 {257.4500, 258.6499, 257.2499, 257.9500},
+                 {257.7499, 259.1499, 257.2000, 258.7999},
+                 {257.8999, 258.2000, 256.7499, 257.7000},
+                 {257.9500, 260.2999, 257.5999, 259.9500},
+                 {259.2499, 260.4500, 258.8499, 259.4999},
+                 {259.4500, 260.2499, 259.1499, 259.5499},
+                 {260.0499, 260.3499, 257.4999, 257.8999},
+                 {257.8999, 261.9999, 257.3999, 261.8999},
+                 {261.8999, 262.5499, 259.8499, 261.6499},
+                 {261.5499, 263.3499, 261.0999, 263.0499},
+                 {263.1499, 264.4500, 262.3499, 263.9999},
+                 {264.1499, 264.2999, 261.8499, 262.7999},
+                 {262.6499, 263.2499, 261.5499, 262.9500},
+                 {263.2999, 264.9500, 262.6499, 263.9500},
+                 {263.5999, 264.8499, 263.4500, 264.5999},
+                 {264.7499, 268.0999, 264.7499, 267.2499},
+                 {266.3499, 267.7499, 265.7000, 266.8499},
+                 {267.0999, 267.6499, 266.6499, 266.8499},
+                 {266.6499, 267.0499, 264.7499, 265.7499},
+                 {265.4500, 265.7499, 264.2499, 264.8999},
+                 {265.3499, 266.4500, 265.2999, 265.5999},
+                 {263.8499, 264.0499, 262.8499, 263.9999},
+                 {263.9500, 264.5499, 262.9500, 264.2999},
+                 {264.5999, 265.5499, 262.7499, 262.7999},
+                 {263.3999, 263.5499, 261.3999, 261.8999},
+                 {262.2000, 262.2000, 260.8499, 261.7000},
+                 {260.2499, 263.8499, 260.0999, 263.7000},
+                 {263.2999, 266.0999, 263.2999, 265.8999},
+                 {266.2000, 266.9999, 264.8499, 266.6499}};
+ 
+             final int m = data.length;
+ 
+             final Date[] date = new Date[m];
+             final double[] high = new double[m];
+             final double[] low = new double[m];
+             final double[] open = new double[m];
+             final double[] close = new double[m];
+             final double[] volume = new double[m];
+ 
+             final SegmentedTimeline.Segment segment = timeline.getSegment(start);
+             for (int i = 0; i < m; i++) {
+                 while (!segment.inIncludeSegments()) {
+                     segment.inc();
+                 }
+                 date[i] = segment.getDate();
+                 open[i] = data[i][0];
+                 high[i] = data[i][1];
+                 low[i] = data[i][2];
+                 close[i] = data[i][3];
+ 
+                 segment.inc();
+             }
+ 
+             return new DefaultHighLowDataset("Series 1", date, high, low, open, close, volume);
+ 
+     }
+ 
+     /**
+      * Creates a sample wind dataset.
+      *
+      * @return a sample wind dataset.
+      */
+     public static WindDataset createWindDataset1() {
+ 
+         final int jan = 1;
+         final Object[][][] data = new Object[][][] {{
+             {DateUtilities.createDate(1999, jan, 3), new Double(0.0), new Double(10.0)},
+             {DateUtilities.createDate(1999, jan, 4), new Double(1.0), new Double(8.5)},
+             {DateUtilities.createDate(1999, jan, 5), new Double(2.0), new Double(10.0)},
+             {DateUtilities.createDate(1999, jan, 6), new Double(3.0), new Double(10.0)},
+             {DateUtilities.createDate(1999, jan, 7), new Double(4.0), new Double(7.0)},
+             {DateUtilities.createDate(1999, jan, 8), new Double(5.0), new Double(10.0)},
+             {DateUtilities.createDate(1999, jan, 9), new Double(6.0), new Double(8.0)},
+             {DateUtilities.createDate(1999, jan, 10), new Double(7.0), new Double(11.0)},
+             {DateUtilities.createDate(1999, jan, 11), new Double(8.0), new Double(10.0)},
+             {DateUtilities.createDate(1999, jan, 12), new Double(9.0), new Double(11.0)},
+             {DateUtilities.createDate(1999, jan, 13), new Double(10.0), new Double(3.0)},
+             {DateUtilities.createDate(1999, jan, 14), new Double(11.0), new Double(9.0)},
+             {DateUtilities.createDate(1999, jan, 15), new Double(12.0), new Double(11.0)},
+             {DateUtilities.createDate(1999, jan, 16), new Double(0.0), new Double(0.0)} } };
+ 
+         return new DefaultWindDataset(new String[] {"Wind!!"}, data);
+     }
+ 
+     /**
+      * Creates a sample wafermap dataset.
+      * 
+      * @return a sample wafermap dataset
+      */
+     public static WaferMapDataset createWaferMapDataset() {
+         final WaferMapDataset data = new WaferMapDataset(30, 20);
+         data.addValue(1, 5, 14); // (value, chipx, chipy)
+         data.addValue(1, 5, 13);
+         data.addValue(1, 5, 12);
+         data.addValue(1, 5, 11);
+         data.addValue(1, 5, 10);
+         data.addValue(1, 5, 9);
+         data.addValue(7, 5, 8);
+         data.addValue(8, 5, 7);
+         data.addValue(9, 5, 6);
+         data.addValue(1, 6, 10);
+         data.addValue(1, 7, 10);
+         data.addValue(1, 8, 10);
+         data.addValue(1, 9, 10);
+         data.addValue(1, 10, 10);
+         data.addValue(1, 11, 10);
+         data.addValue(1, 11, 11);
+         data.addValue(1, 11, 12);
+         data.addValue(2, 11, 13);
+         data.addValue(1, 11, 14);
+         data.addValue(2, 11, 9);
+         data.addValue(2, 11, 8);
+         data.addValue(2, 11, 7);
+         data.addValue(2, 11, 6);
+ 
+         data.addValue(6, 16, 6);
+         data.addValue(6, 17, 6);
+         data.addValue(6, 18, 6);
+         data.addValue(6, 19, 6);
+         data.addValue(6, 20, 6);
+         data.addValue(6, 21, 6);
+         data.addValue(6, 22, 6);
+         data.addValue(3, 19, 7);
+         data.addValue(3, 19, 8);
+         data.addValue(3, 19, 9);
+         data.addValue(3, 19, 10);
+         data.addValue(3, 19, 11);
+         data.addValue(3, 19, 12);
+         data.addValue(3, 19, 13);
+         data.addValue(4, 19, 14);
+         data.addValue(4, 18, 14);
+         data.addValue(4, 17, 14);
+         data.addValue(4, 16, 14);
+         data.addValue(4, 20, 14);
+         data.addValue(4, 21, 14);
+         data.addValue(4, 22, 14);
+         return data;
+     } 
+ 
+     /**
+      * Creates a random wafermap dataset
+      * 
+      * @param values Maximum number of random values  
+      * @return a random wafermap dataset
+      */
+     public static WaferMapDataset createRandomWaferMapDataset(final int values) {
+         final int xdim = 30;
+         final int ydim = 20;
+         final Random random = new Random();
+         final WaferMapDataset data = new WaferMapDataset(xdim, ydim);
+         for (int x = 1; x <= xdim; x++) {
+             for (int y = 0; y < ydim; y++) {
+                 data.addValue(random.nextInt(values), x, y);
+             }
+         }
+         return data;
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DescriptionPanel.java jfreechart/source/org/jfree/chart/demo/DescriptionPanel.java
*** jfreechart-orig/source/org/jfree/chart/demo/DescriptionPanel.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DescriptionPanel.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,84 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * DescriptionPanel.java
+  * ---------------------
+  * (C) Copyright 2001-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DescriptionPanel.java,v 1.6 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 10-Dec-2001 : Version 1 (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Dimension;
+ 
+ import javax.swing.JPanel;
+ import javax.swing.JScrollPane;
+ import javax.swing.JTextArea;
+ 
+ /**
+  * A panel containing a chart description.
+  *
+  */
+ public class DescriptionPanel extends JPanel {
+ 
+     /** The preferred size for the panel. */
+     public static final Dimension PREFERRED_SIZE = new Dimension(150, 50);
+ 
+     /**
+      * Creates a new panel.
+      *
+      * @param text  the component containing the text.
+      */
+     public DescriptionPanel(final JTextArea text) {
+ 
+         setLayout(new BorderLayout());
+         text.setLineWrap(true);
+         text.setWrapStyleWord(true);
+         add(new JScrollPane(text,
+                             JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
+                             JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
+ 
+     }
+ 
+     /**
+      * Returns the preferred size.
+      *
+      * @return the preferred size.
+      */
+     public Dimension getPreferredSize() {
+         return PREFERRED_SIZE;
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DifferenceChartDemo2.java jfreechart/source/org/jfree/chart/demo/DifferenceChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/DifferenceChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DifferenceChartDemo2.java	2004-11-07 15:46:36.000000000 +0100
***************
*** 0 ****
--- 1,974 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * DifferenceChartDemo2.java
+  * -------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DifferenceChartDemo2.java,v 1.6 2004/04/30 08:06:36 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 09-Feb-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickMarkPosition;
+ import org.jfree.chart.plot.IntervalMarker;
+ import org.jfree.chart.plot.Marker;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.Layer;
+ import org.jfree.ui.RectangleAnchor;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * A simple demonstration of the {@link XYDifferenceRenderer}.  The sunrise and sunset times for
+  * this demo were obtained from: 
+  * 
+  *     http://www.sunrisesunset.com/
+  *
+  */
+ public class DifferenceChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public DifferenceChartDemo2(final String title) {
+ 
+         super(title);
+ 
+         final TimeSeries series1 = createSunriseSeries();
+         final TimeSeries series2 = createSunsetSeries();
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(series1);
+         dataset.addSeries(series2);
+ 
+         final JFreeChart chart = createChart(dataset);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+   
+     /**
+      * A utility method for creating a value based on a time.
+      *
+      * @param hour  the hour.
+      * @param min  the minute.
+      *
+      * @return a value.
+      */  
+     private Long time(final int hour, final int min) {
+         final Minute m = new Minute(min, hour, 1, 1, 1970);
+         return new Long(m.getFirstMillisecond());
+     }
+     
+     /**
+      * Creates a time series containing sunrise times for London in 2004.
+      *
+      * @return a time series containing sunrise times.
+      */
+     public TimeSeries createSunriseSeries() {
+         
+         final TimeSeries series = new TimeSeries("Sunrise");
+         
+         series.add(new Day(1, 1, 2004), time(8, 5));
+         series.add(new Day(2, 1, 2004), time(8, 5));
+         series.add(new Day(3, 1, 2004), time(8, 5));
+         series.add(new Day(4, 1, 2004), time(8, 5));
+         series.add(new Day(5, 1, 2004), time(8, 5));
+         series.add(new Day(6, 1, 2004), time(8, 4));
+         series.add(new Day(7, 1, 2004), time(8, 4));
+         series.add(new Day(8, 1, 2004), time(8, 4));
+         series.add(new Day(9, 1, 2004), time(8, 3));
+         series.add(new Day(10, 1, 2004), time(8, 3));
+         series.add(new Day(11, 1, 2004), time(8, 2));
+         series.add(new Day(12, 1, 2004), time(8, 1));
+         series.add(new Day(13, 1, 2004), time(8, 1));
+         series.add(new Day(14, 1, 2004), time(8, 0));
+         series.add(new Day(15, 1, 2004), time(7, 59));
+         series.add(new Day(16, 1, 2004), time(7, 58));
+         series.add(new Day(17, 1, 2004), time(7, 58));
+         series.add(new Day(18, 1, 2004), time(7, 57));
+         series.add(new Day(19, 1, 2004), time(7, 56));
+         series.add(new Day(20, 1, 2004), time(7, 55));
+         series.add(new Day(21, 1, 2004), time(7, 54));
+         series.add(new Day(22, 1, 2004), time(7, 53));
+         series.add(new Day(23, 1, 2004), time(7, 51));
+         series.add(new Day(24, 1, 2004), time(7, 50));
+         series.add(new Day(25, 1, 2004), time(7, 49));
+         series.add(new Day(26, 1, 2004), time(7, 48));
+         series.add(new Day(27, 1, 2004), time(7, 46));
+         series.add(new Day(28, 1, 2004), time(7, 45));
+         series.add(new Day(29, 1, 2004), time(7, 44));
+         series.add(new Day(30, 1, 2004), time(7, 42));
+         series.add(new Day(31, 1, 2004), time(7, 41));
+         
+         series.add(new Day(1, 2, 2004), time(7, 39));
+         series.add(new Day(2, 2, 2004), time(7, 38));
+         series.add(new Day(3, 2, 2004), time(7, 36));
+         series.add(new Day(4, 2, 2004), time(7, 35));
+         series.add(new Day(5, 2, 2004), time(7, 33));
+         series.add(new Day(6, 2, 2004), time(7, 31));
+         series.add(new Day(7, 2, 2004), time(7, 30));
+         series.add(new Day(8, 2, 2004), time(7, 28));
+         series.add(new Day(9, 2, 2004), time(7, 26));
+         series.add(new Day(10, 2, 2004), time(7, 25));
+         series.add(new Day(11, 2, 2004), time(7, 23));
+         series.add(new Day(12, 2, 2004), time(7, 21));
+         series.add(new Day(13, 2, 2004), time(7, 19));
+         series.add(new Day(14, 2, 2004), time(7, 17));
+         series.add(new Day(15, 2, 2004), time(7, 15));
+         series.add(new Day(16, 2, 2004), time(7, 13));
+         series.add(new Day(17, 2, 2004), time(7, 11));
+         series.add(new Day(18, 2, 2004), time(7, 10));
+         series.add(new Day(19, 2, 2004), time(7, 8));
+         series.add(new Day(20, 2, 2004), time(7, 6));
+         series.add(new Day(21, 2, 2004), time(7, 4));
+         series.add(new Day(22, 2, 2004), time(7, 2));
+         series.add(new Day(23, 2, 2004), time(6, 59));
+         series.add(new Day(24, 2, 2004), time(6, 57));
+         series.add(new Day(25, 2, 2004), time(6, 55));
+         series.add(new Day(26, 2, 2004), time(6, 53));
+         series.add(new Day(27, 2, 2004), time(6, 51));
+         series.add(new Day(28, 2, 2004), time(6, 49));
+         series.add(new Day(29, 2, 2004), time(6, 47));
+ 
+         series.add(new Day(1, 3, 2004), time(6, 45));
+         series.add(new Day(2, 3, 2004), time(6, 43));
+         series.add(new Day(3, 3, 2004), time(6, 40));
+         series.add(new Day(4, 3, 2004), time(6, 38));
+         series.add(new Day(5, 3, 2004), time(6, 36));
+         series.add(new Day(6, 3, 2004), time(6, 34));
+         series.add(new Day(7, 3, 2004), time(6, 32));
+         series.add(new Day(8, 3, 2004), time(6, 29));
+         series.add(new Day(9, 3, 2004), time(6, 27));
+         series.add(new Day(10, 3, 2004), time(6, 25));
+         series.add(new Day(11, 3, 2004), time(6, 23));
+         series.add(new Day(12, 3, 2004), time(6, 20));
+         series.add(new Day(13, 3, 2004), time(6, 18));
+         series.add(new Day(14, 3, 2004), time(6, 16));
+         series.add(new Day(15, 3, 2004), time(6, 14));
+         series.add(new Day(16, 3, 2004), time(6, 11));
+         series.add(new Day(17, 3, 2004), time(6, 9));
+         series.add(new Day(18, 3, 2004), time(6, 7));
+         series.add(new Day(19, 3, 2004), time(6, 5));
+         series.add(new Day(20, 3, 2004), time(6, 2));
+         series.add(new Day(21, 3, 2004), time(6, 0));
+         series.add(new Day(22, 3, 2004), time(5, 58));
+         series.add(new Day(23, 3, 2004), time(5, 55));
+         series.add(new Day(24, 3, 2004), time(5, 53));
+         series.add(new Day(25, 3, 2004), time(5, 51));
+         series.add(new Day(26, 3, 2004), time(5, 49));
+         series.add(new Day(27, 3, 2004), time(5, 46));
+         series.add(new Day(28, 3, 2004), time(6, 44));
+         series.add(new Day(29, 3, 2004), time(6, 42));
+         series.add(new Day(30, 3, 2004), time(6, 39));
+         series.add(new Day(31, 3, 2004), time(6, 37));
+         
+         series.add(new Day(1, 4, 2004), time(6, 35));
+         series.add(new Day(2, 4, 2004), time(6, 33));
+         series.add(new Day(3, 4, 2004), time(6, 30));
+         series.add(new Day(4, 4, 2004), time(6, 28));
+         series.add(new Day(5, 4, 2004), time(6, 26));
+         series.add(new Day(6, 4, 2004), time(6, 24));
+         series.add(new Day(7, 4, 2004), time(6, 21));
+         series.add(new Day(8, 4, 2004), time(6, 19));
+         series.add(new Day(9, 4, 2004), time(6, 17));
+         series.add(new Day(10, 4, 2004), time(6, 15));
+         series.add(new Day(11, 4, 2004), time(6, 12));
+         series.add(new Day(12, 4, 2004), time(6, 10));
+         series.add(new Day(13, 4, 2004), time(6, 8));
+         series.add(new Day(14, 4, 2004), time(6, 6));
+         series.add(new Day(15, 4, 2004), time(6, 4));
+         series.add(new Day(16, 4, 2004), time(6, 2));
+         series.add(new Day(17, 4, 2004), time(5, 59));
+         series.add(new Day(18, 4, 2004), time(5, 57));
+         series.add(new Day(19, 4, 2004), time(5, 55));
+         series.add(new Day(20, 4, 2004), time(5, 53));
+         series.add(new Day(21, 4, 2004), time(5, 51));
+         series.add(new Day(22, 4, 2004), time(5, 49));
+         series.add(new Day(23, 4, 2004), time(5, 47));
+         series.add(new Day(24, 4, 2004), time(5, 45));
+         series.add(new Day(25, 4, 2004), time(5, 43));
+         series.add(new Day(26, 4, 2004), time(5, 41));
+         series.add(new Day(27, 4, 2004), time(5, 39));
+         series.add(new Day(28, 4, 2004), time(5, 37));
+         series.add(new Day(29, 4, 2004), time(5, 35));
+         series.add(new Day(30, 4, 2004), time(5, 33));
+         
+         series.add(new Day(1, 5, 2004), time(5, 31));
+         series.add(new Day(2, 5, 2004), time(5, 29));
+         series.add(new Day(3, 5, 2004), time(5, 28));
+         series.add(new Day(4, 5, 2004), time(5, 26));
+         series.add(new Day(5, 5, 2004), time(5, 24));
+         series.add(new Day(6, 5, 2004), time(5, 22));
+         series.add(new Day(7, 5, 2004), time(5, 20));
+         series.add(new Day(8, 5, 2004), time(5, 19));
+         series.add(new Day(9, 5, 2004), time(5, 17));
+         series.add(new Day(10, 5, 2004), time(5, 15));
+         series.add(new Day(11, 5, 2004), time(5, 14));
+         series.add(new Day(12, 5, 2004), time(5, 12));
+         series.add(new Day(13, 5, 2004), time(5, 11));
+         series.add(new Day(14, 5, 2004), time(5, 9));
+         series.add(new Day(15, 5, 2004), time(5, 8));
+         series.add(new Day(16, 5, 2004), time(5, 6));
+         series.add(new Day(17, 5, 2004), time(5, 5));
+         series.add(new Day(18, 5, 2004), time(5, 3));
+         series.add(new Day(19, 5, 2004), time(5, 2));
+         series.add(new Day(20, 5, 2004), time(5, 1));
+         series.add(new Day(21, 5, 2004), time(4, 59));
+         series.add(new Day(22, 5, 2004), time(4, 58));
+         series.add(new Day(23, 5, 2004), time(4, 57));
+         series.add(new Day(24, 5, 2004), time(4, 56));
+         series.add(new Day(25, 5, 2004), time(4, 55));
+         series.add(new Day(26, 5, 2004), time(4, 53));
+         series.add(new Day(27, 5, 2004), time(4, 52));
+         series.add(new Day(28, 5, 2004), time(4, 51));
+         series.add(new Day(29, 5, 2004), time(4, 50));
+         series.add(new Day(30, 5, 2004), time(4, 50));
+         series.add(new Day(31, 5, 2004), time(4, 49));
+         
+         series.add(new Day(1, 6, 2004), time(4, 48));
+         series.add(new Day(2, 6, 2004), time(4, 47));
+         series.add(new Day(3, 6, 2004), time(4, 46));
+         series.add(new Day(4, 6, 2004), time(4, 46));
+         series.add(new Day(5, 6, 2004), time(4, 45));
+         series.add(new Day(6, 6, 2004), time(4, 45));
+         series.add(new Day(7, 6, 2004), time(4, 44));
+         series.add(new Day(8, 6, 2004), time(4, 44));
+         series.add(new Day(9, 6, 2004), time(4, 43));
+         series.add(new Day(10, 6, 2004), time(4, 43));
+         series.add(new Day(11, 6, 2004), time(4, 42));
+         series.add(new Day(12, 6, 2004), time(4, 42));
+         series.add(new Day(13, 6, 2004), time(4, 42));
+         series.add(new Day(14, 6, 2004), time(4, 42));
+         series.add(new Day(15, 6, 2004), time(4, 42));
+         series.add(new Day(16, 6, 2004), time(4, 42));
+         series.add(new Day(17, 6, 2004), time(4, 42));
+         series.add(new Day(18, 6, 2004), time(4, 42));
+         series.add(new Day(19, 6, 2004), time(4, 42));
+         series.add(new Day(20, 6, 2004), time(4, 42));
+         series.add(new Day(21, 6, 2004), time(4, 42));
+         series.add(new Day(22, 6, 2004), time(4, 42));
+         series.add(new Day(23, 6, 2004), time(4, 43));
+         series.add(new Day(24, 6, 2004), time(4, 43));
+         series.add(new Day(25, 6, 2004), time(4, 43));
+         series.add(new Day(26, 6, 2004), time(4, 44));
+         series.add(new Day(27, 6, 2004), time(4, 44));
+         series.add(new Day(28, 6, 2004), time(4, 45));
+         series.add(new Day(29, 6, 2004), time(4, 45));
+         series.add(new Day(30, 6, 2004), time(4, 46));
+         
+         series.add(new Day(1, 7, 2004), time(4, 47));
+         series.add(new Day(2, 7, 2004), time(4, 47));
+         series.add(new Day(3, 7, 2004), time(4, 48));
+         series.add(new Day(4, 7, 2004), time(4, 49));
+         series.add(new Day(5, 7, 2004), time(4, 50));
+         series.add(new Day(6, 7, 2004), time(4, 51));
+         series.add(new Day(7, 7, 2004), time(4, 51));
+         series.add(new Day(8, 7, 2004), time(4, 52));
+         series.add(new Day(9, 7, 2004), time(4, 53));
+         series.add(new Day(10, 7, 2004), time(4, 54));
+         series.add(new Day(11, 7, 2004), time(4, 55));
+         series.add(new Day(12, 7, 2004), time(4, 57));
+         series.add(new Day(13, 7, 2004), time(4, 58));
+         series.add(new Day(14, 7, 2004), time(4, 59));
+         series.add(new Day(15, 7, 2004), time(5, 0));
+         series.add(new Day(16, 7, 2004), time(5, 1));
+         series.add(new Day(17, 7, 2004), time(5, 2));
+         series.add(new Day(18, 7, 2004), time(5, 4));
+         series.add(new Day(19, 7, 2004), time(5, 5));
+         series.add(new Day(20, 7, 2004), time(5, 6));
+         series.add(new Day(21, 7, 2004), time(5, 8));
+         series.add(new Day(22, 7, 2004), time(5, 9));
+         series.add(new Day(23, 7, 2004), time(5, 10));
+         series.add(new Day(24, 7, 2004), time(5, 12));
+         series.add(new Day(25, 7, 2004), time(5, 13));
+         series.add(new Day(26, 7, 2004), time(5, 14));
+         series.add(new Day(27, 7, 2004), time(5, 16));
+         series.add(new Day(28, 7, 2004), time(5, 17));
+         series.add(new Day(29, 7, 2004), time(5, 19));
+         series.add(new Day(30, 7, 2004), time(5, 20));
+         series.add(new Day(31, 7, 2004), time(5, 22));
+ 
+         series.add(new Day(1, 8, 2004), time(5, 23));
+         series.add(new Day(2, 8, 2004), time(5, 25));
+         series.add(new Day(3, 8, 2004), time(5, 26));
+         series.add(new Day(4, 8, 2004), time(5, 28));
+         series.add(new Day(5, 8, 2004), time(5, 29));
+         series.add(new Day(6, 8, 2004), time(5, 31));
+         series.add(new Day(7, 8, 2004), time(5, 32));
+         series.add(new Day(8, 8, 2004), time(5, 34));
+         series.add(new Day(9, 8, 2004), time(5, 36));
+         series.add(new Day(10, 8, 2004), time(5, 37));
+         series.add(new Day(11, 8, 2004), time(5, 39));
+         series.add(new Day(12, 8, 2004), time(5, 40));
+         series.add(new Day(13, 8, 2004), time(5, 42));
+         series.add(new Day(14, 8, 2004), time(5, 43));
+         series.add(new Day(15, 8, 2004), time(5, 45));
+         series.add(new Day(16, 8, 2004), time(5, 47));
+         series.add(new Day(17, 8, 2004), time(5, 48));
+         series.add(new Day(18, 8, 2004), time(5, 50));
+         series.add(new Day(19, 8, 2004), time(5, 51));
+         series.add(new Day(20, 8, 2004), time(5, 53));
+         series.add(new Day(21, 8, 2004), time(5, 55));
+         series.add(new Day(22, 8, 2004), time(5, 56));
+         series.add(new Day(23, 8, 2004), time(5, 58));
+         series.add(new Day(24, 8, 2004), time(5, 59));
+         series.add(new Day(25, 8, 2004), time(6, 1));
+         series.add(new Day(26, 8, 2004), time(6, 3));
+         series.add(new Day(27, 8, 2004), time(6, 4));
+         series.add(new Day(28, 8, 2004), time(6, 6));
+         series.add(new Day(29, 8, 2004), time(6, 7));
+         series.add(new Day(30, 8, 2004), time(6, 9));
+         series.add(new Day(31, 8, 2004), time(6, 10));
+ 
+         series.add(new Day(1, 9, 2004), time(6, 12));
+         series.add(new Day(2, 9, 2004), time(6, 14));
+         series.add(new Day(3, 9, 2004), time(6, 15));
+         series.add(new Day(4, 9, 2004), time(6, 17));
+         series.add(new Day(5, 9, 2004), time(6, 18));
+         series.add(new Day(6, 9, 2004), time(6, 20));
+         series.add(new Day(7, 9, 2004), time(6, 22));
+         series.add(new Day(8, 9, 2004), time(6, 23));
+         series.add(new Day(9, 9, 2004), time(6, 25));
+         series.add(new Day(10, 9, 2004), time(6, 26));
+         series.add(new Day(11, 9, 2004), time(6, 28));
+         series.add(new Day(12, 9, 2004), time(6, 30));
+         series.add(new Day(13, 9, 2004), time(6, 31));
+         series.add(new Day(14, 9, 2004), time(6, 33));
+         series.add(new Day(15, 9, 2004), time(6, 34));
+         series.add(new Day(16, 9, 2004), time(6, 36));
+         series.add(new Day(17, 9, 2004), time(6, 38));
+         series.add(new Day(18, 9, 2004), time(6, 39));
+         series.add(new Day(19, 9, 2004), time(6, 41));
+         series.add(new Day(20, 9, 2004), time(6, 42));
+         series.add(new Day(21, 9, 2004), time(6, 44));
+         series.add(new Day(22, 9, 2004), time(6, 46));
+         series.add(new Day(23, 9, 2004), time(6, 47));
+         series.add(new Day(24, 9, 2004), time(6, 49));
+         series.add(new Day(25, 9, 2004), time(6, 50));
+         series.add(new Day(26, 9, 2004), time(6, 52));
+         series.add(new Day(27, 9, 2004), time(6, 54));
+         series.add(new Day(28, 9, 2004), time(6, 55));
+         series.add(new Day(29, 9, 2004), time(6, 57));
+         series.add(new Day(30, 9, 2004), time(6, 58));
+ 
+         series.add(new Day(1, 10, 2004), time(7, 0));
+         series.add(new Day(2, 10, 2004), time(7, 2));
+         series.add(new Day(3, 10, 2004), time(7, 3));
+         series.add(new Day(4, 10, 2004), time(7, 5));
+         series.add(new Day(5, 10, 2004), time(7, 7));
+         series.add(new Day(6, 10, 2004), time(7, 8));
+         series.add(new Day(7, 10, 2004), time(7, 10));
+         series.add(new Day(8, 10, 2004), time(7, 12));
+         series.add(new Day(9, 10, 2004), time(7, 13));
+         series.add(new Day(10, 10, 2004), time(7, 15));
+         series.add(new Day(11, 10, 2004), time(7, 17));
+         series.add(new Day(12, 10, 2004), time(7, 18));
+         series.add(new Day(13, 10, 2004), time(7, 20));
+         series.add(new Day(14, 10, 2004), time(7, 22));
+         series.add(new Day(15, 10, 2004), time(7, 23));
+         series.add(new Day(16, 10, 2004), time(7, 25));
+         series.add(new Day(17, 10, 2004), time(7, 27));
+         series.add(new Day(18, 10, 2004), time(7, 29));
+         series.add(new Day(19, 10, 2004), time(7, 30));
+         series.add(new Day(20, 10, 2004), time(7, 32));
+         series.add(new Day(21, 10, 2004), time(7, 34));
+         series.add(new Day(22, 10, 2004), time(7, 35));
+         series.add(new Day(23, 10, 2004), time(7, 37));
+         series.add(new Day(24, 10, 2004), time(7, 39));
+         series.add(new Day(25, 10, 2004), time(7, 41));
+         series.add(new Day(26, 10, 2004), time(7, 42));
+         series.add(new Day(27, 10, 2004), time(7, 44));
+         series.add(new Day(28, 10, 2004), time(7, 46));
+         series.add(new Day(29, 10, 2004), time(7, 48));
+         series.add(new Day(30, 10, 2004), time(7, 49));
+         series.add(new Day(31, 10, 2004), time(6, 51));
+ 
+         series.add(new Day(1, 11, 2004), time(6, 53));
+         series.add(new Day(2, 11, 2004), time(6, 55));
+         series.add(new Day(3, 11, 2004), time(6, 57));
+         series.add(new Day(4, 11, 2004), time(6, 58));
+         series.add(new Day(5, 11, 2004), time(7, 0));
+         series.add(new Day(6, 11, 2004), time(7, 2));
+         series.add(new Day(7, 11, 2004), time(7, 4));
+         series.add(new Day(8, 11, 2004), time(7, 5));
+         series.add(new Day(9, 11, 2004), time(7, 7));
+         series.add(new Day(10, 11, 2004), time(7, 9));
+         series.add(new Day(11, 11, 2004), time(7, 11));
+         series.add(new Day(12, 11, 2004), time(7, 12));
+         series.add(new Day(13, 11, 2004), time(7, 14));
+         series.add(new Day(14, 11, 2004), time(7, 16));
+         series.add(new Day(15, 11, 2004), time(7, 17));
+         series.add(new Day(16, 11, 2004), time(7, 19));
+         series.add(new Day(17, 11, 2004), time(7, 21));
+         series.add(new Day(18, 11, 2004), time(7, 23));
+         series.add(new Day(19, 11, 2004), time(7, 24));
+         series.add(new Day(20, 11, 2004), time(7, 26));
+         series.add(new Day(21, 11, 2004), time(7, 28));
+         series.add(new Day(22, 11, 2004), time(7, 29));
+         series.add(new Day(23, 11, 2004), time(7, 31));
+         series.add(new Day(24, 11, 2004), time(7, 32));
+         series.add(new Day(25, 11, 2004), time(7, 34));
+         series.add(new Day(26, 11, 2004), time(7, 35));
+         series.add(new Day(27, 11, 2004), time(7, 37));
+         series.add(new Day(28, 11, 2004), time(7, 38));
+         series.add(new Day(29, 11, 2004), time(7, 40));
+         series.add(new Day(30, 11, 2004), time(7, 41));
+ 
+         series.add(new Day(1, 12, 2004), time(7, 43));
+         series.add(new Day(2, 12, 2004), time(7, 44));
+         series.add(new Day(3, 12, 2004), time(7, 45));
+         series.add(new Day(4, 12, 2004), time(7, 47));
+         series.add(new Day(5, 12, 2004), time(7, 48));
+         series.add(new Day(6, 12, 2004), time(7, 49));
+         series.add(new Day(7, 12, 2004), time(7, 51));
+         series.add(new Day(8, 12, 2004), time(7, 52));
+         series.add(new Day(9, 12, 2004), time(7, 53));
+         series.add(new Day(10, 12, 2004), time(7, 54));
+         series.add(new Day(11, 12, 2004), time(7, 55));
+         series.add(new Day(12, 12, 2004), time(7, 56));
+         series.add(new Day(13, 12, 2004), time(7, 57));
+         series.add(new Day(14, 12, 2004), time(7, 58));
+         series.add(new Day(15, 12, 2004), time(7, 59));
+         series.add(new Day(16, 12, 2004), time(7, 59));
+         series.add(new Day(17, 12, 2004), time(8, 0));
+         series.add(new Day(18, 12, 2004), time(8, 1));
+         series.add(new Day(19, 12, 2004), time(8, 2));
+         series.add(new Day(20, 12, 2004), time(8, 2));
+         series.add(new Day(21, 12, 2004), time(8, 3));
+         series.add(new Day(22, 12, 2004), time(8, 3));
+         series.add(new Day(23, 12, 2004), time(8, 4));
+         series.add(new Day(24, 12, 2004), time(8, 4));
+         series.add(new Day(25, 12, 2004), time(8, 4));
+         series.add(new Day(26, 12, 2004), time(8, 5));
+         series.add(new Day(27, 12, 2004), time(8, 5));
+         series.add(new Day(28, 12, 2004), time(8, 5));
+         series.add(new Day(29, 12, 2004), time(8, 5));
+         series.add(new Day(30, 12, 2004), time(8, 5));
+         series.add(new Day(31, 12, 2004), time(8, 5));
+ 
+         return series;
+     }
+ 
+     /**
+      * Creates a time series containing sunset times for London in 2004.
+      *
+      * @return a time series containing sunset times.
+      */
+     public TimeSeries createSunsetSeries() {
+         final TimeSeries series = new TimeSeries("Sunset");
+ 
+         series.add(new Day(1, 1, 2004), time(16, 0));
+         series.add(new Day(2, 1, 2004), time(16, 1));
+         series.add(new Day(3, 1, 2004), time(16, 2));
+         series.add(new Day(4, 1, 2004), time(16, 3));
+         series.add(new Day(5, 1, 2004), time(16, 4));
+         series.add(new Day(6, 1, 2004), time(16, 5));
+         series.add(new Day(7, 1, 2004), time(16, 7));
+         series.add(new Day(8, 1, 2004), time(16, 8));
+         series.add(new Day(9, 1, 2004), time(16, 9));
+         series.add(new Day(10, 1, 2004), time(16, 11));
+         series.add(new Day(11, 1, 2004), time(16, 12));
+         series.add(new Day(12, 1, 2004), time(16, 13));
+         series.add(new Day(13, 1, 2004), time(16, 15));
+         series.add(new Day(14, 1, 2004), time(16, 16));
+         series.add(new Day(15, 1, 2004), time(16, 18));
+         series.add(new Day(16, 1, 2004), time(16, 19));
+         series.add(new Day(17, 1, 2004), time(16, 21));
+         series.add(new Day(18, 1, 2004), time(16, 22));
+         series.add(new Day(19, 1, 2004), time(16, 24));
+         series.add(new Day(20, 1, 2004), time(16, 26));
+         series.add(new Day(21, 1, 2004), time(16, 27));
+         series.add(new Day(22, 1, 2004), time(16, 29));
+         series.add(new Day(23, 1, 2004), time(16, 31));
+         series.add(new Day(24, 1, 2004), time(16, 32));
+         series.add(new Day(25, 1, 2004), time(16, 34));
+         series.add(new Day(26, 1, 2004), time(16, 36));
+         series.add(new Day(27, 1, 2004), time(16, 38));
+         series.add(new Day(28, 1, 2004), time(16, 39));
+         series.add(new Day(29, 1, 2004), time(16, 41));
+         series.add(new Day(30, 1, 2004), time(16, 43));
+         series.add(new Day(31, 1, 2004), time(16, 45));
+         
+         series.add(new Day(1, 2, 2004), time(16, 47));
+         series.add(new Day(2, 2, 2004), time(16, 48));
+         series.add(new Day(3, 2, 2004), time(16, 50));
+         series.add(new Day(4, 2, 2004), time(16, 52));
+         series.add(new Day(5, 2, 2004), time(16, 54));
+         series.add(new Day(6, 2, 2004), time(16, 56));
+         series.add(new Day(7, 2, 2004), time(16, 57));
+         series.add(new Day(8, 2, 2004), time(16, 59));
+         series.add(new Day(9, 2, 2004), time(17, 1));
+         series.add(new Day(10, 2, 2004), time(17, 3));
+         series.add(new Day(11, 2, 2004), time(17, 5));
+         series.add(new Day(12, 2, 2004), time(17, 7));
+         series.add(new Day(13, 2, 2004), time(17, 8));
+         series.add(new Day(14, 2, 2004), time(17, 10));
+         series.add(new Day(15, 2, 2004), time(17, 12));
+         series.add(new Day(16, 2, 2004), time(17, 14));
+         series.add(new Day(17, 2, 2004), time(17, 16));
+         series.add(new Day(18, 2, 2004), time(17, 17));
+         series.add(new Day(19, 2, 2004), time(17, 19));
+         series.add(new Day(20, 2, 2004), time(17, 21));
+         series.add(new Day(21, 2, 2004), time(17, 23));
+         series.add(new Day(22, 2, 2004), time(17, 25));
+         series.add(new Day(23, 2, 2004), time(17, 27));
+         series.add(new Day(24, 2, 2004), time(17, 28));
+         series.add(new Day(25, 2, 2004), time(17, 30));
+         series.add(new Day(26, 2, 2004), time(17, 32));
+         series.add(new Day(27, 2, 2004), time(17, 34));
+         series.add(new Day(28, 2, 2004), time(17, 35));
+         series.add(new Day(29, 2, 2004), time(17, 37));
+         
+         series.add(new Day(1, 3, 2004), time(17, 39));
+         series.add(new Day(2, 3, 2004), time(17, 41));
+         series.add(new Day(3, 3, 2004), time(17, 43));
+         series.add(new Day(4, 3, 2004), time(17, 44));
+         series.add(new Day(5, 3, 2004), time(17, 46));
+         series.add(new Day(6, 3, 2004), time(17, 48));
+         series.add(new Day(7, 3, 2004), time(17, 50));
+         series.add(new Day(8, 3, 2004), time(17, 51));
+         series.add(new Day(9, 3, 2004), time(17, 53));
+         series.add(new Day(10, 3, 2004), time(17, 55));
+         series.add(new Day(11, 3, 2004), time(17, 56));
+         series.add(new Day(12, 3, 2004), time(17, 58));
+         series.add(new Day(13, 3, 2004), time(18, 0));
+         series.add(new Day(14, 3, 2004), time(18, 2));
+         series.add(new Day(15, 3, 2004), time(18, 3));
+         series.add(new Day(16, 3, 2004), time(18, 5));
+         series.add(new Day(17, 3, 2004), time(18, 7));
+         series.add(new Day(18, 3, 2004), time(18, 8));
+         series.add(new Day(19, 3, 2004), time(18, 10));
+         series.add(new Day(20, 3, 2004), time(18, 12));
+         series.add(new Day(21, 3, 2004), time(18, 13));
+         series.add(new Day(22, 3, 2004), time(18, 15));
+         series.add(new Day(23, 3, 2004), time(18, 17));
+         series.add(new Day(24, 3, 2004), time(18, 19));
+         series.add(new Day(25, 3, 2004), time(18, 20));
+         series.add(new Day(26, 3, 2004), time(18, 22));
+         series.add(new Day(27, 3, 2004), time(18, 24));
+         series.add(new Day(28, 3, 2004), time(19, 25));
+         series.add(new Day(29, 3, 2004), time(19, 27));
+         series.add(new Day(30, 3, 2004), time(19, 29));
+         series.add(new Day(31, 3, 2004), time(19, 30));
+ 
+         series.add(new Day(1, 4, 2004), time(19, 32));
+         series.add(new Day(2, 4, 2004), time(19, 34));
+         series.add(new Day(3, 4, 2004), time(19, 35));
+         series.add(new Day(4, 4, 2004), time(19, 37));
+         series.add(new Day(5, 4, 2004), time(19, 39));
+         series.add(new Day(6, 4, 2004), time(19, 40));
+         series.add(new Day(7, 4, 2004), time(19, 42));
+         series.add(new Day(8, 4, 2004), time(19, 44));
+         series.add(new Day(9, 4, 2004), time(19, 45));
+         series.add(new Day(10, 4, 2004), time(19, 47));
+         series.add(new Day(11, 4, 2004), time(19, 49));
+         series.add(new Day(12, 4, 2004), time(19, 50));
+         series.add(new Day(13, 4, 2004), time(19, 52));
+         series.add(new Day(14, 4, 2004), time(19, 54));
+         series.add(new Day(15, 4, 2004), time(19, 55));
+         series.add(new Day(16, 4, 2004), time(19, 57));
+         series.add(new Day(17, 4, 2004), time(19, 59));
+         series.add(new Day(18, 4, 2004), time(20, 0));
+         series.add(new Day(19, 4, 2004), time(20, 2));
+         series.add(new Day(20, 4, 2004), time(20, 4));
+         series.add(new Day(21, 4, 2004), time(20, 5));
+         series.add(new Day(22, 4, 2004), time(20, 7));
+         series.add(new Day(23, 4, 2004), time(20, 9));
+         series.add(new Day(24, 4, 2004), time(20, 10));
+         series.add(new Day(25, 4, 2004), time(20, 12));
+         series.add(new Day(26, 4, 2004), time(20, 14));
+         series.add(new Day(27, 4, 2004), time(20, 15));
+         series.add(new Day(28, 4, 2004), time(20, 17));
+         series.add(new Day(29, 4, 2004), time(20, 19));
+         series.add(new Day(30, 4, 2004), time(20, 20));
+         
+         series.add(new Day(1, 5, 2004), time(20, 22));
+         series.add(new Day(2, 5, 2004), time(20, 24));
+         series.add(new Day(3, 5, 2004), time(20, 25));
+         series.add(new Day(4, 5, 2004), time(20, 27));
+         series.add(new Day(5, 5, 2004), time(20, 28));
+         series.add(new Day(6, 5, 2004), time(20, 30));
+         series.add(new Day(7, 5, 2004), time(20, 32));
+         series.add(new Day(8, 5, 2004), time(20, 33));
+         series.add(new Day(9, 5, 2004), time(20, 35));
+         series.add(new Day(10, 5, 2004), time(20, 36));
+         series.add(new Day(11, 5, 2004), time(20, 38));
+         series.add(new Day(12, 5, 2004), time(20, 40));
+         series.add(new Day(13, 5, 2004), time(20, 41));
+         series.add(new Day(14, 5, 2004), time(20, 43));
+         series.add(new Day(15, 5, 2004), time(20, 44));
+         series.add(new Day(16, 5, 2004), time(20, 46));
+         series.add(new Day(17, 5, 2004), time(20, 47));
+         series.add(new Day(18, 5, 2004), time(20, 49));
+         series.add(new Day(19, 5, 2004), time(20, 50));
+         series.add(new Day(20, 5, 2004), time(20, 51));
+         series.add(new Day(21, 5, 2004), time(20, 53));
+         series.add(new Day(22, 5, 2004), time(20, 54));
+         series.add(new Day(23, 5, 2004), time(20, 56));
+         series.add(new Day(24, 5, 2004), time(20, 57));
+         series.add(new Day(25, 5, 2004), time(20, 58));
+         series.add(new Day(26, 5, 2004), time(21, 0));
+         series.add(new Day(27, 5, 2004), time(21, 1));
+         series.add(new Day(28, 5, 2004), time(21, 2));
+         series.add(new Day(29, 5, 2004), time(21, 3));
+         series.add(new Day(30, 5, 2004), time(21, 4));
+         series.add(new Day(31, 5, 2004), time(21, 6));
+         
+         series.add(new Day(1, 6, 2004), time(21, 7));
+         series.add(new Day(2, 6, 2004), time(21, 8));
+         series.add(new Day(3, 6, 2004), time(21, 9));
+         series.add(new Day(4, 6, 2004), time(21, 10));
+         series.add(new Day(5, 6, 2004), time(21, 11));
+         series.add(new Day(6, 6, 2004), time(21, 12));
+         series.add(new Day(7, 6, 2004), time(21, 13));
+         series.add(new Day(8, 6, 2004), time(21, 13));
+         series.add(new Day(9, 6, 2004), time(21, 14));
+         series.add(new Day(10, 6, 2004), time(21, 15));
+         series.add(new Day(11, 6, 2004), time(21, 16));
+         series.add(new Day(12, 6, 2004), time(21, 16));
+         series.add(new Day(13, 6, 2004), time(21, 17));
+         series.add(new Day(14, 6, 2004), time(21, 18));
+         series.add(new Day(15, 6, 2004), time(21, 18));
+         series.add(new Day(16, 6, 2004), time(21, 19));
+         series.add(new Day(17, 6, 2004), time(21, 19));
+         series.add(new Day(18, 6, 2004), time(21, 19));
+         series.add(new Day(19, 6, 2004), time(21, 20));
+         series.add(new Day(20, 6, 2004), time(21, 20));
+         series.add(new Day(21, 6, 2004), time(21, 20));
+         series.add(new Day(22, 6, 2004), time(21, 21));
+         series.add(new Day(23, 6, 2004), time(21, 21));
+         series.add(new Day(24, 6, 2004), time(21, 21));
+         series.add(new Day(25, 6, 2004), time(21, 21));
+         series.add(new Day(26, 6, 2004), time(21, 21));
+         series.add(new Day(27, 6, 2004), time(21, 21));
+         series.add(new Day(28, 6, 2004), time(21, 21));
+         series.add(new Day(29, 6, 2004), time(21, 21));
+         series.add(new Day(30, 6, 2004), time(21, 21));
+         
+         series.add(new Day(1, 7, 2004), time(21, 20));
+         series.add(new Day(2, 7, 2004), time(21, 20));
+         series.add(new Day(3, 7, 2004), time(21, 19));
+         series.add(new Day(4, 7, 2004), time(21, 19));
+         series.add(new Day(5, 7, 2004), time(21, 18));
+         series.add(new Day(6, 7, 2004), time(21, 18));
+         series.add(new Day(7, 7, 2004), time(21, 17));
+         series.add(new Day(8, 7, 2004), time(21, 17));
+         series.add(new Day(9, 7, 2004), time(21, 16));
+         series.add(new Day(10, 7, 2004), time(21, 15));
+         series.add(new Day(11, 7, 2004), time(21, 14));
+         series.add(new Day(12, 7, 2004), time(21, 14));
+         series.add(new Day(13, 7, 2004), time(21, 13));
+         series.add(new Day(14, 7, 2004), time(21, 12));
+         series.add(new Day(15, 7, 2004), time(21, 11));
+         series.add(new Day(16, 7, 2004), time(21, 10));
+         series.add(new Day(17, 7, 2004), time(21, 9));
+         series.add(new Day(18, 7, 2004), time(21, 8));
+         series.add(new Day(19, 7, 2004), time(21, 7));
+         series.add(new Day(20, 7, 2004), time(21, 5));
+         series.add(new Day(21, 7, 2004), time(21, 4));
+         series.add(new Day(22, 7, 2004), time(21, 3));
+         series.add(new Day(23, 7, 2004), time(21, 2));
+         series.add(new Day(24, 7, 2004), time(21, 0));
+         series.add(new Day(25, 7, 2004), time(20, 59));
+         series.add(new Day(26, 7, 2004), time(20, 58));
+         series.add(new Day(27, 7, 2004), time(20, 56));
+         series.add(new Day(28, 7, 2004), time(20, 55));
+         series.add(new Day(29, 7, 2004), time(20, 53));
+         series.add(new Day(30, 7, 2004), time(20, 52));
+         series.add(new Day(31, 7, 2004), time(20, 50));
+ 
+         series.add(new Day(1, 8, 2004), time(20, 48));
+         series.add(new Day(2, 8, 2004), time(20, 47));
+         series.add(new Day(3, 8, 2004), time(20, 45));
+         series.add(new Day(4, 8, 2004), time(20, 43));
+         series.add(new Day(5, 8, 2004), time(20, 42));
+         series.add(new Day(6, 8, 2004), time(20, 40));
+         series.add(new Day(7, 8, 2004), time(20, 38));
+         series.add(new Day(8, 8, 2004), time(20, 36));
+         series.add(new Day(9, 8, 2004), time(20, 34));
+         series.add(new Day(10, 8, 2004), time(20, 33));
+         series.add(new Day(11, 8, 2004), time(20, 31));
+         series.add(new Day(12, 8, 2004), time(20, 29));
+         series.add(new Day(13, 8, 2004), time(20, 27));
+         series.add(new Day(14, 8, 2004), time(20, 25));
+         series.add(new Day(15, 8, 2004), time(20, 23));
+         series.add(new Day(16, 8, 2004), time(20, 21));
+         series.add(new Day(17, 8, 2004), time(20, 19));
+         series.add(new Day(18, 8, 2004), time(20, 17));
+         series.add(new Day(19, 8, 2004), time(20, 15));
+         series.add(new Day(20, 8, 2004), time(20, 13));
+         series.add(new Day(21, 8, 2004), time(20, 11));
+         series.add(new Day(22, 8, 2004), time(20, 9));
+         series.add(new Day(23, 8, 2004), time(20, 7));
+         series.add(new Day(24, 8, 2004), time(20, 4));
+         series.add(new Day(25, 8, 2004), time(20, 2));
+         series.add(new Day(26, 8, 2004), time(20, 0));
+         series.add(new Day(27, 8, 2004), time(19, 58));
+         series.add(new Day(28, 8, 2004), time(19, 56));
+         series.add(new Day(29, 8, 2004), time(19, 54));
+         series.add(new Day(30, 8, 2004), time(19, 51));
+         series.add(new Day(31, 8, 2004), time(19, 49));
+ 
+         series.add(new Day(1, 9, 2004), time(19, 47));
+         series.add(new Day(2, 9, 2004), time(19, 45));
+         series.add(new Day(3, 9, 2004), time(19, 42));
+         series.add(new Day(4, 9, 2004), time(19, 40));
+         series.add(new Day(5, 9, 2004), time(19, 38));
+         series.add(new Day(6, 9, 2004), time(19, 36));
+         series.add(new Day(7, 9, 2004), time(19, 33));
+         series.add(new Day(8, 9, 2004), time(19, 31));
+         series.add(new Day(9, 9, 2004), time(19, 29));
+         series.add(new Day(10, 9, 2004), time(19, 27));
+         series.add(new Day(11, 9, 2004), time(19, 24));
+         series.add(new Day(12, 9, 2004), time(19, 22));
+         series.add(new Day(13, 9, 2004), time(19, 20));
+         series.add(new Day(14, 9, 2004), time(19, 17));
+         series.add(new Day(15, 9, 2004), time(19, 15));
+         series.add(new Day(16, 9, 2004), time(19, 13));
+         series.add(new Day(17, 9, 2004), time(19, 11));
+         series.add(new Day(18, 9, 2004), time(19, 8));
+         series.add(new Day(19, 9, 2004), time(19, 6));
+         series.add(new Day(20, 9, 2004), time(19, 4));
+         series.add(new Day(21, 9, 2004), time(19, 1));
+         series.add(new Day(22, 9, 2004), time(18, 59));
+         series.add(new Day(23, 9, 2004), time(18, 57));
+         series.add(new Day(24, 9, 2004), time(18, 54));
+         series.add(new Day(25, 9, 2004), time(18, 52));
+         series.add(new Day(26, 9, 2004), time(18, 50));
+         series.add(new Day(27, 9, 2004), time(18, 47));
+         series.add(new Day(28, 9, 2004), time(18, 45));
+         series.add(new Day(29, 9, 2004), time(18, 43));
+         series.add(new Day(30, 9, 2004), time(18, 41));
+ 
+         series.add(new Day(1, 10, 2004), time(18, 38));
+         series.add(new Day(2, 10, 2004), time(18, 36));
+         series.add(new Day(3, 10, 2004), time(18, 34));
+         series.add(new Day(4, 10, 2004), time(18, 31));
+         series.add(new Day(5, 10, 2004), time(18, 29));
+         series.add(new Day(6, 10, 2004), time(18, 27));
+         series.add(new Day(7, 10, 2004), time(18, 25));
+         series.add(new Day(8, 10, 2004), time(18, 22));
+         series.add(new Day(9, 10, 2004), time(18, 20));
+         series.add(new Day(10, 10, 2004), time(18, 18));
+         series.add(new Day(11, 10, 2004), time(18, 16));
+         series.add(new Day(12, 10, 2004), time(18, 14));
+         series.add(new Day(13, 10, 2004), time(18, 11));
+         series.add(new Day(14, 10, 2004), time(18, 9));
+         series.add(new Day(15, 10, 2004), time(18, 7));
+         series.add(new Day(16, 10, 2004), time(18, 5));
+         series.add(new Day(17, 10, 2004), time(18, 3));
+         series.add(new Day(18, 10, 2004), time(18, 1));
+         series.add(new Day(19, 10, 2004), time(17, 59));
+         series.add(new Day(20, 10, 2004), time(17, 57));
+         series.add(new Day(21, 10, 2004), time(17, 55));
+         series.add(new Day(22, 10, 2004), time(17, 53));
+         series.add(new Day(23, 10, 2004), time(17, 50));
+         series.add(new Day(24, 10, 2004), time(17, 48));
+         series.add(new Day(25, 10, 2004), time(17, 46));
+         series.add(new Day(26, 10, 2004), time(17, 45));
+         series.add(new Day(27, 10, 2004), time(17, 43));
+         series.add(new Day(28, 10, 2004), time(17, 41));
+         series.add(new Day(29, 10, 2004), time(17, 39));
+         series.add(new Day(30, 10, 2004), time(17, 37));
+         series.add(new Day(31, 10, 2004), time(16, 35));
+ 
+         series.add(new Day(1, 11, 2004), time(16, 33));
+         series.add(new Day(2, 11, 2004), time(16, 31));
+         series.add(new Day(3, 11, 2004), time(16, 30));
+         series.add(new Day(4, 11, 2004), time(16, 28));
+         series.add(new Day(5, 11, 2004), time(16, 26));
+         series.add(new Day(6, 11, 2004), time(16, 24));
+         series.add(new Day(7, 11, 2004), time(16, 23));
+         series.add(new Day(8, 11, 2004), time(16, 21));
+         series.add(new Day(9, 11, 2004), time(16, 20));
+         series.add(new Day(10, 11, 2004), time(16, 18));
+         series.add(new Day(11, 11, 2004), time(16, 16));
+         series.add(new Day(12, 11, 2004), time(16, 15));
+         series.add(new Day(13, 11, 2004), time(16, 13));
+         series.add(new Day(14, 11, 2004), time(16, 12));
+         series.add(new Day(15, 11, 2004), time(16, 11));
+         series.add(new Day(16, 11, 2004), time(16, 9));
+         series.add(new Day(17, 11, 2004), time(16, 8));
+         series.add(new Day(18, 11, 2004), time(16, 7));
+         series.add(new Day(19, 11, 2004), time(16, 5));
+         series.add(new Day(20, 11, 2004), time(16, 4));
+         series.add(new Day(21, 11, 2004), time(16, 3));
+         series.add(new Day(22, 11, 2004), time(16, 2));
+         series.add(new Day(23, 11, 2004), time(16, 1));
+         series.add(new Day(24, 11, 2004), time(16, 0));
+         series.add(new Day(25, 11, 2004), time(15, 59));
+         series.add(new Day(26, 11, 2004), time(15, 58));
+         series.add(new Day(27, 11, 2004), time(15, 57));
+         series.add(new Day(28, 11, 2004), time(15, 56));
+         series.add(new Day(29, 11, 2004), time(15, 56));
+         series.add(new Day(30, 11, 2004), time(15, 55));
+ 
+         series.add(new Day(1, 12, 2004), time(15, 54));
+         series.add(new Day(2, 12, 2004), time(15, 54));
+         series.add(new Day(3, 12, 2004), time(15, 53));
+         series.add(new Day(4, 12, 2004), time(15, 53));
+         series.add(new Day(5, 12, 2004), time(15, 52));
+         series.add(new Day(6, 12, 2004), time(15, 52));
+         series.add(new Day(7, 12, 2004), time(15, 51));
+         series.add(new Day(8, 12, 2004), time(15, 51));
+         series.add(new Day(9, 12, 2004), time(15, 51));
+         series.add(new Day(10, 12, 2004), time(15, 51));
+         series.add(new Day(11, 12, 2004), time(15, 50));
+         series.add(new Day(12, 12, 2004), time(15, 50));
+         series.add(new Day(13, 12, 2004), time(15, 50));
+         series.add(new Day(14, 12, 2004), time(15, 50));
+         series.add(new Day(15, 12, 2004), time(15, 51));
+         series.add(new Day(16, 12, 2004), time(15, 51));
+         series.add(new Day(17, 12, 2004), time(15, 51));
+         series.add(new Day(18, 12, 2004), time(15, 51));
+         series.add(new Day(19, 12, 2004), time(15, 51));
+         series.add(new Day(20, 12, 2004), time(15, 52));
+         series.add(new Day(21, 12, 2004), time(15, 52));
+         series.add(new Day(22, 12, 2004), time(15, 53));
+         series.add(new Day(23, 12, 2004), time(15, 53));
+         series.add(new Day(24, 12, 2004), time(15, 54));
+         series.add(new Day(25, 12, 2004), time(15, 55));
+         series.add(new Day(26, 12, 2004), time(15, 55));
+         series.add(new Day(27, 12, 2004), time(15, 56));
+         series.add(new Day(28, 12, 2004), time(15, 57));
+         series.add(new Day(29, 12, 2004), time(15, 58));
+         series.add(new Day(30, 12, 2004), time(15, 59));
+         series.add(new Day(31, 12, 2004), time(16, 0));
+ 
+         return series;
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Daylight Hours - London, UK",
+             "Date", 
+             "Time",
+             dataset,
+             true,  // legend
+             true,  // tool tips
+             false  // URLs
+         );
+         chart.setBackgroundPaint(Color.white);
+        
+         final XYDifferenceRenderer renderer = new XYDifferenceRenderer(
+             Color.blue, Color.blue, false
+         );
+         renderer.setStroke(new BasicStroke(2.0f));
+         renderer.setSeriesPaint(0, Color.yellow);
+         renderer.setSeriesPaint(1, Color.red);
+         final XYPlot plot = chart.getXYPlot();
+         plot.setRenderer(renderer);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         
+         final DateAxis domainAxis = new DateAxis("Time");
+         domainAxis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+         plot.setDomainAxis(domainAxis);
+         plot.setForegroundAlpha(0.5f);  
+ 
+         final Color c = new Color(255, 60, 24, 63);
+         final Marker bst = new IntervalMarker(
+             new Day(28, 3, 2004).getFirstMillisecond(), new Day(30, 10, 2004).getFirstMillisecond(),
+             c, new BasicStroke(2.0f), null, null, 1.0f
+         );
+         bst.setLabel("British Summer Time");
+         bst.setLabelAnchor(RectangleAnchor.BOTTOM_RIGHT);
+         bst.setLabelFont(new Font("SansSerif", Font.ITALIC + Font.BOLD, 10));
+         bst.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT);
+         plot.addDomainMarker(bst, Layer.BACKGROUND);
+ 
+         final DateAxis rangeAxis = new DateAxis("Time");
+         rangeAxis.setLowerMargin(0.15);
+         rangeAxis.setUpperMargin(0.15);
+         plot.setRangeAxis(rangeAxis);
+         return chart;      
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DifferenceChartDemo2 demo = new DifferenceChartDemo2("Difference Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DifferenceChartDemo.java jfreechart/source/org/jfree/chart/demo/DifferenceChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/DifferenceChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DifferenceChartDemo.java	2004-11-07 15:46:41.000000000 +0100
***************
*** 0 ****
--- 1,157 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * DifferenceChartDemo.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DifferenceChartDemo.java,v 1.8 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 10-Jul-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A simple demonstration of the XYDifferenceRenderer.
+  *
+  */
+ public class DifferenceChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public DifferenceChartDemo(final String title) {
+ 
+         super(title);
+ 
+         final TimeSeries series1 = new TimeSeries("Random 1");
+         final TimeSeries series2 = new TimeSeries("Random 2");
+         double value1 = 0.0;
+         double value2 = 0.0;
+         Day day = new Day();
+         for (int i = 0; i < 200; i++) {
+             value1 = value1 + Math.random() - 0.5;
+             value2 = value2 + Math.random() - 0.5;
+             series1.add(day, value1);
+             series2.add(day, value2);
+             day = (Day) day.next();
+         }
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(series1);
+         dataset.addSeries(series2);
+ 
+         final JFreeChart chart = createChart(dataset);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Difference Chart Demo",
+             "Time", "Value",
+             dataset,
+             true,  // legend
+             true,  // tool tips
+             false  // URLs
+         );
+         chart.setBackgroundPaint(Color.white);
+        
+         final XYPlot plot = chart.getXYPlot();
+         plot.setRenderer(new XYDifferenceRenderer(Color.green, Color.red, false));
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         
+         final ValueAxis domainAxis = new DateAxis("Time");
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+         plot.setDomainAxis(domainAxis);
+         plot.setForegroundAlpha(0.5f);  
+         return chart;      
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DifferenceChartDemo demo = new DifferenceChartDemo("Difference Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo2.java jfreechart/source/org/jfree/chart/demo/DualAxisDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DualAxisDemo2.java	2004-11-07 15:46:25.000000000 +0100
***************
*** 0 ****
--- 1,219 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * DualAxisDemo2.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DualAxisDemo2.java,v 1.17 2004/05/21 10:09:10 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 19-Nov-2002 : Version 1 (DG);
+  * 27-Apr-2004 : Updated for changes to the XYPlot class (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Month;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * An example of a time series chart.  For the most part, default settings are used, except that
+  * the renderer is modified to show filled shapes (as well as lines) at each data point.
+  *
+  */
+ public class DualAxisDemo2 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a time series chart with dual axes.
+      *
+      * @param title  the frame title.
+      */
+     public DualAxisDemo2(final String title) {
+ 
+         super(title);
+ 
+         // create a title...
+         final String chartTitle = "Dual Axis Demo 2";
+         final XYDataset dataset = createDataset1();
+ 
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             chartTitle, 
+             "Date", 
+             "Price Per Unit",
+             dataset, 
+             true, 
+             true, 
+             false
+         );
+ 
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setDisplaySeriesShapes(true);
+         
+         final XYPlot plot = chart.getXYPlot();
+         final NumberAxis axis2 = new NumberAxis("Secondary");
+         axis2.setAutoRangeIncludesZero(false);
+         plot.setRangeAxis(1, axis2);
+         plot.setDataset(1, createDataset2());
+         plot.mapDatasetToRangeAxis(1, 1);
+         final XYItemRenderer renderer = plot.getRenderer();
+         renderer.setToolTipGenerator(StandardXYToolTipGenerator.getTimeSeriesInstance());
+         if (renderer instanceof StandardXYItemRenderer) {
+             final StandardXYItemRenderer rr = (StandardXYItemRenderer) renderer;
+             rr.setPlotShapes(true);
+             rr.setShapesFilled(true);
+         }
+         
+         final StandardXYItemRenderer renderer2 = new StandardXYItemRenderer();
+         renderer2.setSeriesPaint(0, Color.black);
+         renderer2.setPlotShapes(true);
+         renderer.setToolTipGenerator(StandardXYToolTipGenerator.getTimeSeriesInstance());
+         plot.setRenderer(1, renderer2);
+         
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));
+         
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset1() {
+ 
+         final TimeSeries s1 = new TimeSeries("Random Data 1", Month.class);
+         s1.add(new Month(2, 2001), 181.8);
+         s1.add(new Month(3, 2001), 167.3);
+         s1.add(new Month(4, 2001), 153.8);
+         s1.add(new Month(5, 2001), 167.6);
+         s1.add(new Month(6, 2001), 158.8);
+         s1.add(new Month(7, 2001), 148.3);
+         s1.add(new Month(8, 2001), 153.9);
+         s1.add(new Month(9, 2001), 142.7);
+         s1.add(new Month(10, 2001), 123.2);
+         s1.add(new Month(11, 2001), 131.8);
+         s1.add(new Month(12, 2001), 139.6);
+         s1.add(new Month(1, 2002), 142.9);
+         s1.add(new Month(2, 2002), 138.7);
+         s1.add(new Month(3, 2002), 137.3);
+         s1.add(new Month(4, 2002), 143.9);
+         s1.add(new Month(5, 2002), 139.8);
+         s1.add(new Month(6, 2002), 137.0);
+         s1.add(new Month(7, 2002), 132.8);
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(s1);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset2() {
+ 
+ 
+         final TimeSeries s2 = new TimeSeries("Random Data 2", Month.class);
+         s2.add(new Month(2, 2001), 429.6);
+         s2.add(new Month(3, 2001), 323.2);
+         s2.add(new Month(4, 2001), 417.2);
+         s2.add(new Month(5, 2001), 624.1);
+         s2.add(new Month(6, 2001), 422.6);
+         s2.add(new Month(7, 2001), 619.2);
+         s2.add(new Month(8, 2001), 416.5);
+         s2.add(new Month(9, 2001), 512.7);
+         s2.add(new Month(10, 2001), 501.5);
+         s2.add(new Month(11, 2001), 306.1);
+         s2.add(new Month(12, 2001), 410.3);
+         s2.add(new Month(1, 2002), 511.7);
+         s2.add(new Month(2, 2002), 611.0);
+         s2.add(new Month(3, 2002), 709.6);
+         s2.add(new Month(4, 2002), 613.2);
+         s2.add(new Month(5, 2002), 711.6);
+         s2.add(new Month(6, 2002), 708.8);
+         s2.add(new Month(7, 2002), 501.6);
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(s2);
+ 
+         return dataset;
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DualAxisDemo2 demo = new DualAxisDemo2("Dual Axis Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo3.java jfreechart/source/org/jfree/chart/demo/DualAxisDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DualAxisDemo3.java	2004-11-07 15:46:15.000000000 +0100
***************
*** 0 ****
--- 1,235 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * DualAxisDemo3.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DualAxisDemo3.java,v 1.19 2004/04/29 07:54:56 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 19-Nov-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a dual axis chart based on data
+  * from two {@link CategoryDataset} instances.
+  *
+  */
+ public class DualAxisDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public DualAxisDemo3(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset1 = createDataset1();
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Dual Axis Chart",           // chart title
+             "Category",                  // domain axis label
+             "Value",                     // range axis label
+             dataset1,                    // dataset
+             PlotOrientation.HORIZONTAL,  // orientation
+             true,                        // include legend
+             true,
+             false
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(new Color(0xCC, 0xFF, 0xCC));
+         chart.getLegend().setAnchor(Legend.WEST);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setDomainAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);
+         plot.getDomainAxis().setMaxCategoryLabelWidthRatio(10.0f);
+         final CategoryDataset dataset2 = createDataset2();
+         final ValueAxis axis2 = new NumberAxis("Secondary");
+         plot.setRangeAxis(1, axis2);
+         plot.setDataset(1, dataset2);
+         plot.mapDatasetToRangeAxis(1, 1);
+         plot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_RIGHT);
+         final CategoryItemRenderer renderer2 = new LineAndShapeRenderer();
+         plot.setRenderer(1, renderer2);
+ 
+         // OPTIONAL CUSTOMISATION COMPLETED.
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return  The dataset.
+      */
+     private CategoryDataset createDataset1() {
+ 
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+         final String series3 = "Third";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+         final String category6 = "Category 6";
+         final String category7 = "Category 7";
+         final String category8 = "Category 8";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(4.0, series1, category2);
+         dataset.addValue(3.0, series1, category3);
+         dataset.addValue(5.0, series1, category4);
+         dataset.addValue(5.0, series1, category5);
+         dataset.addValue(7.0, series1, category6);
+         dataset.addValue(7.0, series1, category7);
+         dataset.addValue(8.0, series1, category8);
+ 
+         dataset.addValue(5.0, series2, category1);
+         dataset.addValue(7.0, series2, category2);
+         dataset.addValue(6.0, series2, category3);
+         dataset.addValue(8.0, series2, category4);
+         dataset.addValue(4.0, series2, category5);
+         dataset.addValue(4.0, series2, category6);
+         dataset.addValue(2.0, series2, category7);
+         dataset.addValue(1.0, series2, category8);
+ 
+         dataset.addValue(4.0, series3, category1);
+         dataset.addValue(3.0, series3, category2);
+         dataset.addValue(2.0, series3, category3);
+         dataset.addValue(3.0, series3, category4);
+         dataset.addValue(6.0, series3, category5);
+         dataset.addValue(3.0, series3, category6);
+         dataset.addValue(4.0, series3, category7);
+         dataset.addValue(3.0, series3, category8);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return  The dataset.
+      */
+     private CategoryDataset createDataset2() {
+ 
+         // row keys...
+         final String series1 = "Fourth";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+         final String category6 = "Category 6";
+         final String category7 = "Category 7";
+         final String category8 = "Category 8";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(15.0, series1, category1);
+         dataset.addValue(24.0, series1, category2);
+         dataset.addValue(31.0, series1, category3);
+         dataset.addValue(25.0, series1, category4);
+         dataset.addValue(56.0, series1, category5);
+         dataset.addValue(37.0, series1, category6);
+         dataset.addValue(77.0, series1, category7);
+         dataset.addValue(18.0, series1, category8);
+ 
+         return dataset;
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DualAxisDemo3 demo = new DualAxisDemo3("Dual Axis Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo4.java jfreechart/source/org/jfree/chart/demo/DualAxisDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DualAxisDemo4.java	2004-11-07 15:46:10.000000000 +0100
***************
*** 0 ****
--- 1,223 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * DualAxisDemo4.java
+  * ------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DualAxisDemo4.java,v 1.12 2004/04/29 07:54:56 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 04-Jul-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis3D;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.DatasetRenderingOrder;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a dual axis chart based on data
+  * from two {@link CategoryDataset} instances.
+  *
+  */
+ public class DualAxisDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public DualAxisDemo4(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset1 = createDataset1();
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart3D(
+             "Dual Axis Chart",  // chart title
+             "Category",         // domain axis label
+             "Value",            // range axis label
+             dataset1,           // data
+             PlotOrientation.VERTICAL,
+             true,               // include legend
+             true,
+             false
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(new Color(0xCC, 0xFF, 0xCC));
+         chart.getLegend().setAnchor(Legend.SOUTH);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
+         plot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);
+         final CategoryItemRenderer renderer1 = plot.getRenderer();
+         renderer1.setSeriesPaint(0, Color.red);
+         renderer1.setSeriesPaint(1, Color.yellow);
+         renderer1.setSeriesPaint(2, Color.green);
+         final CategoryDataset dataset2 = createDataset2();
+         final ValueAxis axis2 = new NumberAxis3D("Secondary");
+         plot.setRangeAxis(1, axis2);
+         plot.setDataset(1, dataset2);
+         plot.mapDatasetToRangeAxis(1, 1);
+         final CategoryItemRenderer renderer2 = new LineAndShapeRenderer();
+         renderer2.setSeriesPaint(0, Color.blue);
+         plot.setRenderer(1, renderer2);
+ 
+         plot.setDatasetRenderingOrder(DatasetRenderingOrder.REVERSE);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return  The dataset.
+      */
+     private CategoryDataset createDataset1() {
+ 
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+         final String series3 = "Third";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(4.0, series1, category2);
+         dataset.addValue(3.0, series1, category3);
+         dataset.addValue(5.0, series1, category4);
+         dataset.addValue(5.0, series1, category5);
+ 
+         dataset.addValue(5.0, series2, category1);
+         dataset.addValue(7.0, series2, category2);
+         dataset.addValue(6.0, series2, category3);
+         dataset.addValue(8.0, series2, category4);
+         dataset.addValue(4.0, series2, category5);
+ 
+         dataset.addValue(4.0, series3, category1);
+         dataset.addValue(3.0, series3, category2);
+         dataset.addValue(2.0, series3, category3);
+         dataset.addValue(3.0, series3, category4);
+         dataset.addValue(6.0, series3, category5);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return  The dataset.
+      */
+     private CategoryDataset createDataset2() {
+ 
+         // row keys...
+         final String series1 = "Fourth";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(15.0, series1, category1);
+         dataset.addValue(24.0, series1, category2);
+         dataset.addValue(31.0, series1, category3);
+         dataset.addValue(25.0, series1, category4);
+         dataset.addValue(56.0, series1, category5);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DualAxisDemo4 demo = new DualAxisDemo4("Dual Axis Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo5.java jfreechart/source/org/jfree/chart/demo/DualAxisDemo5.java
*** jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo5.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DualAxisDemo5.java	2004-11-07 15:46:05.000000000 +0100
***************
*** 0 ****
--- 1,245 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * DualAxisDemo5.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DualAxisDemo5.java,v 1.12 2004/04/29 07:54:56 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 19-Sep-2003 : Version 1 (DG);
+  * 06-Feb-2004 : Modified to correct legend (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.LegendItem;
+ import org.jfree.chart.LegendItemCollection;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * This demo shows how to create a dual axis bar chart.  A workaround is used because the
+  * {@link BarRenderer} and {@link CategoryAxis} classes will overlap the bars for the two 
+  * datasets - to get around this, an an additional series (containing 'null' values) is added 
+  * to each dataset, and the getLegendItems() method in the plot is overridden.
+  *
+  */
+ public class DualAxisDemo5 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public DualAxisDemo5(final String title) {
+         super(title);
+         final CategoryDataset dataset1 = createDataset1();
+         final CategoryDataset dataset2 = createDataset2();
+         final JFreeChart chart = createChart(dataset1, dataset2);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return  The dataset.
+      */
+     private CategoryDataset createDataset1() {
+ 
+         // row keys...
+         final String series1 = "Series 1";
+         final String series2 = "Dummy 1";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(4.0, series1, category2);
+         dataset.addValue(3.0, series1, category3);
+         dataset.addValue(5.0, series1, category4);
+ 
+         dataset.addValue(null, series2, category1);
+         dataset.addValue(null, series2, category2);
+         dataset.addValue(null, series2, category3);
+         dataset.addValue(null, series2, category4);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return  The dataset.
+      */
+     private CategoryDataset createDataset2() {
+ 
+         // row keys...
+         final String series1 = "Dummy 2";
+         final String series2 = "Series 2";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(null, series1, category1);
+         dataset.addValue(null, series1, category2);
+         dataset.addValue(null, series1, category3);
+         dataset.addValue(null, series1, category4);
+ 
+         dataset.addValue(75.0, series2, category1);
+         dataset.addValue(87.0, series2, category2);
+         dataset.addValue(96.0, series2, category3);
+         dataset.addValue(68.0, series2, category4);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset1  the first dataset.
+      * @param dataset2  the second dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset1, final CategoryDataset dataset2) {
+ 
+         final CategoryAxis domainAxis = new CategoryAxis("Category");
+         final NumberAxis rangeAxis = new NumberAxis("Value");
+         final BarRenderer renderer1 = new BarRenderer();
+         final CategoryPlot plot = new CategoryPlot(dataset1, domainAxis, rangeAxis, renderer1) {
+             
+             /**
+              * Override the getLegendItems() method to handle special case.
+              *
+              * @return the legend items.
+              */
+             public LegendItemCollection getLegendItems() {
+ 
+                 final LegendItemCollection result = new LegendItemCollection();
+ 
+                 final CategoryDataset data = getDataset();
+                 if (data != null) {
+                     final CategoryItemRenderer r = getRenderer();
+                     if (r != null) {
+                         final LegendItem item = r.getLegendItem(0, 0);
+                         result.add(item);
+                     }
+                 }
+ 
+                 // the JDK 1.2.2 compiler complained about the name of this
+                 // variable 
+                 final CategoryDataset dset2 = getDataset(1);
+                 if (dset2 != null) {
+                     final CategoryItemRenderer renderer2 = getRenderer(1);
+                     if (renderer2 != null) {
+                         final LegendItem item = renderer2.getLegendItem(1, 1);
+                         result.add(item);
+                     }
+                 }
+ 
+                 return result;
+ 
+             }
+             
+         };
+         
+         final JFreeChart chart = new JFreeChart("Dual Axis Bar Chart", plot);
+         chart.setBackgroundPaint(Color.white);
+         chart.getLegend().setAnchor(Legend.SOUTH);
+         plot.setBackgroundPaint(new Color(0xEE, 0xEE, 0xFF));
+         plot.setDomainAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);
+         plot.setDataset(1, dataset2);
+         plot.mapDatasetToRangeAxis(1, 1);
+         final ValueAxis axis2 = new NumberAxis("Secondary");
+         plot.setRangeAxis(1, axis2);
+         plot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_RIGHT);
+         final BarRenderer renderer2 = new BarRenderer();
+         plot.setRenderer(1, renderer2);
+         
+         return chart;
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DualAxisDemo5 demo = new DualAxisDemo5("Dual Axis Demo 5");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo.java jfreechart/source/org/jfree/chart/demo/DualAxisDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/DualAxisDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DualAxisDemo.java	2004-11-07 15:46:30.000000000 +0100
***************
*** 0 ****
--- 1,241 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * DualAxisDemo.java
+  * -----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DualAxisDemo.java,v 1.21 2004/05/10 16:45:24 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 19-Nov-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.DatasetRenderingOrder;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a dual axis chart based on data
+  * from two {@link CategoryDataset} instances.
+  *
+  */
+ public class DualAxisDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public DualAxisDemo(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset1 = createDataset1();
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Dual Axis Chart",        // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset1,                 // data
+             PlotOrientation.VERTICAL,
+             true,                     // include legend
+             true,                     // tooltips?
+             false                     // URL generator?  Not required...
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         chart.setBackgroundPaint(Color.white);
+         chart.getLegend().setAnchor(Legend.SOUTH);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setBackgroundPaint(new Color(0xEE, 0xEE, 0xFF));
+         plot.setDomainAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);
+ 
+         final CategoryDataset dataset2 = createDataset2();
+         plot.setDataset(1, dataset2);
+         plot.mapDatasetToRangeAxis(1, 1);
+ 
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);
+         final ValueAxis axis2 = new NumberAxis("Secondary");
+         plot.setRangeAxis(1, axis2);
+ 
+         final LineAndShapeRenderer renderer2 = new LineAndShapeRenderer();
+         renderer2.setToolTipGenerator(new StandardCategoryToolTipGenerator());
+         plot.setRenderer(1, renderer2);
+         plot.setDatasetRenderingOrder(DatasetRenderingOrder.REVERSE);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return  The dataset.
+      */
+     private CategoryDataset createDataset1() {
+ 
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+         final String series3 = "Third";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+         final String category6 = "Category 6";
+         final String category7 = "Category 7";
+         final String category8 = "Category 8";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(4.0, series1, category2);
+         dataset.addValue(3.0, series1, category3);
+         dataset.addValue(5.0, series1, category4);
+         dataset.addValue(5.0, series1, category5);
+         dataset.addValue(7.0, series1, category6);
+         dataset.addValue(7.0, series1, category7);
+         dataset.addValue(8.0, series1, category8);
+ 
+         dataset.addValue(5.0, series2, category1);
+         dataset.addValue(7.0, series2, category2);
+         dataset.addValue(6.0, series2, category3);
+         dataset.addValue(8.0, series2, category4);
+         dataset.addValue(4.0, series2, category5);
+         dataset.addValue(4.0, series2, category6);
+         dataset.addValue(2.0, series2, category7);
+         dataset.addValue(1.0, series2, category8);
+ 
+         dataset.addValue(4.0, series3, category1);
+         dataset.addValue(3.0, series3, category2);
+         dataset.addValue(2.0, series3, category3);
+         dataset.addValue(3.0, series3, category4);
+         dataset.addValue(6.0, series3, category5);
+         dataset.addValue(3.0, series3, category6);
+         dataset.addValue(4.0, series3, category7);
+         dataset.addValue(3.0, series3, category8);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return  The dataset.
+      */
+     private CategoryDataset createDataset2() {
+ 
+         // row keys...
+         final String series1 = "Fourth";
+ 
+         // column keys...
+         final String category1 = "Category 1";
+         final String category2 = "Category 2";
+         final String category3 = "Category 3";
+         final String category4 = "Category 4";
+         final String category5 = "Category 5";
+         final String category6 = "Category 6";
+         final String category7 = "Category 7";
+         final String category8 = "Category 8";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(15.0, series1, category1);
+         dataset.addValue(24.0, series1, category2);
+         dataset.addValue(31.0, series1, category3);
+         dataset.addValue(25.0, series1, category4);
+         dataset.addValue(56.0, series1, category5);
+         dataset.addValue(37.0, series1, category6);
+         dataset.addValue(77.0, series1, category7);
+         dataset.addValue(18.0, series1, category8);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DualAxisDemo demo = new DualAxisDemo("Dual Axis Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DynamicDataDemo2.java jfreechart/source/org/jfree/chart/demo/DynamicDataDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/DynamicDataDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DynamicDataDemo2.java	2004-11-07 15:45:57.000000000 +0100
***************
*** 0 ****
--- 1,205 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * DynamicDataDemo2.java
+  * ---------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: DynamicDataDemo2.java,v 1.10 2004/04/27 14:53:09 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 01-Sep-2003 : Version 1, based on DynamicDataDemo (DG);
+  * 27-Apr-2004 : Updated for changes to the XYPlot class (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.FlowLayout;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.JButton;
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
+ import org.jfree.data.time.Millisecond;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A demonstration application showing a time series chart where you can dynamically add
+  * (random) data by clicking on a button.
+  *
+  */
+ public class DynamicDataDemo2 extends ApplicationFrame implements ActionListener {
+ 
+     /** Series 1. */
+     private TimeSeries series1;
+     
+     /** Series 2. */
+     private TimeSeries series2;
+ 
+     /** The most recent value added to series 1. */
+     private double lastValue1 = 100.0;
+ 
+     /** The most recent value added to series 2. */
+     private double lastValue2 = 500.0;
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public DynamicDataDemo2(final String title) {
+ 
+         super(title);
+         this.series1 = new TimeSeries("Random 1", Millisecond.class);
+         this.series2 = new TimeSeries("Random 2", Millisecond.class);
+         final TimeSeriesCollection dataset1 = new TimeSeriesCollection(this.series1);
+         final TimeSeriesCollection dataset2 = new TimeSeriesCollection(this.series2);
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Dynamic Data Demo 2", "Time", "Value", dataset1, true, true, false
+         );
+         chart.setBackgroundPaint(Color.white);
+         
+         final XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 4, 4, 4, 4));
+         final ValueAxis axis = plot.getDomainAxis();
+         axis.setAutoRange(true);
+         axis.setFixedAutoRange(60000.0);  // 60 seconds
+ 
+         plot.setDataset(1, dataset2);
+         final NumberAxis rangeAxis2 = new NumberAxis("Range Axis 2");
+         rangeAxis2.setAutoRangeIncludesZero(false);
+         plot.setRenderer(1, new DefaultXYItemRenderer());
+         plot.setRangeAxis(1, rangeAxis2);
+         plot.mapDatasetToRangeAxis(1, 1);
+         
+         final JPanel content = new JPanel(new BorderLayout());
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         content.add(chartPanel);
+         
+         final JButton button1 = new JButton("Add To Series 1");
+         button1.setActionCommand("ADD_DATA_1");
+         button1.addActionListener(this);
+         
+         final JButton button2 = new JButton("Add To Series 2");
+         button2.setActionCommand("ADD_DATA_2");
+         button2.addActionListener(this);
+ 
+         final JButton button3 = new JButton("Add To Both");
+         button3.setActionCommand("ADD_BOTH");
+         button3.addActionListener(this);
+ 
+         final JPanel buttonPanel = new JPanel(new FlowLayout());
+         buttonPanel.add(button1);
+         buttonPanel.add(button2);
+         buttonPanel.add(button3);
+         
+         content.add(buttonPanel, BorderLayout.SOUTH);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(content);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Handles a click on the button by adding new (random) data.
+      *
+      * @param e  the action event.
+      */
+     public void actionPerformed(final ActionEvent e) {
+         boolean add1 = false;
+         boolean add2 = false;
+         if (e.getActionCommand().equals("ADD_DATA_1")) {
+             add1 = true;
+         }
+         else if (e.getActionCommand().equals("ADD_DATA_2")) {
+             add2 = true;
+         }
+         else if (e.getActionCommand().equals("ADD_BOTH")) {
+             add1 = true;
+             add2 = true;
+         }
+         if (add1) {
+             final double factor = 0.90 + 0.2 * Math.random();
+             this.lastValue1 = this.lastValue1 * factor;
+             final Millisecond now = new Millisecond();
+             System.out.println("Now = " + now.toString());
+             this.series1.add(new Millisecond(), this.lastValue1);
+         }
+         if (add2) {
+             final double factor = 0.90 + 0.2 * Math.random();
+             this.lastValue2 = this.lastValue2 * factor;
+             final Millisecond now = new Millisecond();
+             System.out.println("Now = " + now.toString());
+             this.series2.add(new Millisecond(), this.lastValue2);
+         }
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DynamicDataDemo2 demo = new DynamicDataDemo2("Dynamic Data Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DynamicDataDemo3.java jfreechart/source/org/jfree/chart/demo/DynamicDataDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/DynamicDataDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DynamicDataDemo3.java	2004-11-07 15:45:52.000000000 +0100
***************
*** 0 ****
--- 1,202 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * DynamicDataDemo3.java
+  * ---------------------
+  * (C) Copyright 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: DynamicDataDemo3.java,v 1.5 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 02-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.FlowLayout;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.BorderFactory;
+ import javax.swing.JButton;
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.CombinedDomainXYPlot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.time.Millisecond;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A demonstration application showing a time series chart where you can dynamically add
+  * (random) data by clicking on a button.
+  *
+  */
+ public class DynamicDataDemo3 extends ApplicationFrame implements ActionListener {
+ 
+     /** The number of subplots. */
+     public static final int SUBPLOT_COUNT = 3;
+     
+     /** The datasets. */
+     private TimeSeriesCollection[] datasets;
+     
+     /** The most recent value added to series 1. */
+     private double[] lastValue = new double[SUBPLOT_COUNT];
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public DynamicDataDemo3(final String title) {
+ 
+         super(title);
+         
+         final CombinedDomainXYPlot plot = new CombinedDomainXYPlot(new DateAxis("Time"));
+         this.datasets = new TimeSeriesCollection[SUBPLOT_COUNT];
+         
+         for (int i = 0; i < SUBPLOT_COUNT; i++) {
+             this.lastValue[i] = 100.0;
+             final TimeSeries series = new TimeSeries("Random " + i, Millisecond.class);
+             this.datasets[i] = new TimeSeriesCollection(series);
+             final NumberAxis rangeAxis = new NumberAxis("Y" + i);
+             rangeAxis.setAutoRangeIncludesZero(false);
+             final XYPlot subplot = new XYPlot(
+                     this.datasets[i], null, rangeAxis, new StandardXYItemRenderer()
+             );
+             subplot.setBackgroundPaint(Color.lightGray);
+             subplot.setDomainGridlinePaint(Color.white);
+             subplot.setRangeGridlinePaint(Color.white);
+             plot.add(subplot);
+         }
+ 
+         final JFreeChart chart = new JFreeChart("Dynamic Data Demo 3", plot);
+         chart.getLegend().setAnchor(Legend.EAST);
+         chart.setBorderPaint(Color.black);
+         chart.setBorderVisible(true);
+         chart.setBackgroundPaint(Color.white);
+         
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 4, 4, 4, 4));
+         final ValueAxis axis = plot.getDomainAxis();
+         axis.setAutoRange(true);
+         axis.setFixedAutoRange(60000.0);  // 60 seconds
+         
+         final JPanel content = new JPanel(new BorderLayout());
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         content.add(chartPanel);
+ 
+         final JPanel buttonPanel = new JPanel(new FlowLayout());
+         
+         for (int i = 0; i < SUBPLOT_COUNT; i++) {
+             final JButton button = new JButton("Series " + i);
+             button.setActionCommand("ADD_DATA_" + i);
+             button.addActionListener(this);
+             buttonPanel.add(button);
+         }
+         final JButton buttonAll = new JButton("ALL");
+         buttonAll.setActionCommand("ADD_ALL");
+         buttonAll.addActionListener(this);
+         buttonPanel.add(buttonAll);
+         
+         content.add(buttonPanel, BorderLayout.SOUTH);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 470));
+         chartPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
+         setContentPane(content);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Handles a click on the button by adding new (random) data.
+      *
+      * @param e  the action event.
+      */
+     public void actionPerformed(final ActionEvent e) {
+  
+         for (int i = 0; i < SUBPLOT_COUNT; i++) {
+             if (e.getActionCommand().endsWith(String.valueOf(i))) {
+                 final Millisecond now = new Millisecond();
+                 System.out.println("Now = " + now.toString());
+                 this.lastValue[i] = this.lastValue[i] * (0.90 + 0.2 * Math.random());
+                 this.datasets[i].getSeries(0).add(new Millisecond(), this.lastValue[i]);       
+             }
+         }
+ 
+         if (e.getActionCommand().equals("ADD_ALL")) {
+             final Millisecond now = new Millisecond();
+             System.out.println("Now = " + now.toString());
+             for (int i = 0; i < SUBPLOT_COUNT; i++) {
+                 this.lastValue[i] = this.lastValue[i] * (0.90 + 0.2 * Math.random());
+                 this.datasets[i].getSeries(0).add(new Millisecond(), this.lastValue[i]);       
+             }
+         }
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DynamicDataDemo3 demo = new DynamicDataDemo3("Dynamic Data Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/DynamicDataDemo.java jfreechart/source/org/jfree/chart/demo/DynamicDataDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/DynamicDataDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/DynamicDataDemo.java	2004-11-07 15:46:01.000000000 +0100
***************
*** 0 ****
--- 1,172 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * DynamicDataDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: DynamicDataDemo.java,v 1.12 2004/05/07 16:09:03 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 28-Mar-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.JButton;
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.time.Millisecond;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing a time series chart where you can dynamically add
+  * (random) data by clicking on a button.
+  *
+  */
+ public class DynamicDataDemo extends ApplicationFrame implements ActionListener {
+ 
+     /** The time series data. */
+     private TimeSeries series;
+ 
+     /** The most recent value added. */
+     private double lastValue = 100.0;
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public DynamicDataDemo(final String title) {
+ 
+         super(title);
+         this.series = new TimeSeries("Random Data", Millisecond.class);
+         final TimeSeriesCollection dataset = new TimeSeriesCollection(this.series);
+         final JFreeChart chart = createChart(dataset);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         final JButton button = new JButton("Add New Data Item");
+         button.setActionCommand("ADD_DATA");
+         button.addActionListener(this);
+ 
+         final JPanel content = new JPanel(new BorderLayout());
+         content.add(chartPanel);
+         content.add(button, BorderLayout.SOUTH);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(content);
+ 
+     }
+ 
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart result = ChartFactory.createTimeSeriesChart(
+             "Dynamic Data Demo", 
+             "Time", 
+             "Value",
+             dataset, 
+             true, 
+             true, 
+             false
+         );
+         final XYPlot plot = result.getXYPlot();
+         ValueAxis axis = plot.getDomainAxis();
+         axis.setAutoRange(true);
+         axis.setFixedAutoRange(60000.0);  // 60 seconds
+         axis = plot.getRangeAxis();
+         axis.setRange(0.0, 200.0); 
+         return result;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Handles a click on the button by adding new (random) data.
+      *
+      * @param e  the action event.
+      */
+     public void actionPerformed(final ActionEvent e) {
+         if (e.getActionCommand().equals("ADD_DATA")) {
+             final double factor = 0.90 + 0.2 * Math.random();
+             this.lastValue = this.lastValue * factor;
+             final Millisecond now = new Millisecond();
+             System.out.println("Now = " + now.toString());
+             this.series.add(new Millisecond(), this.lastValue);
+         }
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final DynamicDataDemo demo = new DynamicDataDemo("Dynamic Data Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
+ 
+ 
+ 
+ 
+ 
+ 
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/EmptyXYDataset.java jfreechart/source/org/jfree/chart/demo/EmptyXYDataset.java
*** jfreechart-orig/source/org/jfree/chart/demo/EmptyXYDataset.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/EmptyXYDataset.java	2004-11-07 15:49:39.000000000 +0100
***************
*** 0 ****
--- 1,121 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * EmptyXYDataset.java
+  * -------------------
+  * (C) Copyright 2001-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: EmptyXYDataset.java,v 1.7 2004/05/06 07:53:50 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 22-Nov-2001 : Version 1 (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 05-May-2004 : Now extends AbstractXYDataset (DG);
+  * 
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.data.xy.AbstractXYDataset;
+ import org.jfree.data.xy.XYDataset;
+ 
+ /**
+  * An empty dataset for testing purposes.
+  *
+  */
+ public class EmptyXYDataset extends AbstractXYDataset implements XYDataset {
+ 
+     /**
+      * Default constructor.
+      */
+     public EmptyXYDataset() {
+         super();
+     }
+ 
+     /**
+      * Returns the x-value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return  the x-value (always null for this class).
+      */
+     public double getXValue(final int series, final int item) {
+         return 0.0;
+     }
+     public Number getX(final int series, final int item) {
+         return null;
+     }
+ 
+     /**
+      * Returns the y-value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return  the y-value (always null for this class).
+      */
+     public double getYValue(final int series, final int item) {
+         return 0.0;
+     }
+     public Number getY(final int series, final int item) {
+         return null;
+     }
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return the series count (always zero for this class).
+      */
+     public int getSeriesCount() {
+         return 0;
+     }
+ 
+     /**
+      * Returns the name of the series.
+      *
+      * @param series  the series (zero-based index).
+      *
+      * @return the name of the series (always null in this class).
+      */
+     public String getSeriesName(final int series) {
+         return null;
+     }
+ 
+     /**
+      * Returns the number of items in the specified series.
+      *
+      * @param series  the series (zero-based index).
+      *
+      * @return the item count (always zero in this class).
+      */
+     public int getItemCount(final int series) {
+         return 0;
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/EventFrequencyDemo.java jfreechart/source/org/jfree/chart/demo/EventFrequencyDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/EventFrequencyDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/EventFrequencyDemo.java	2004-11-07 15:48:24.000000000 +0100
***************
*** 0 ****
--- 1,162 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * EventFrequencyDemo.java
+  * -----------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: EventFrequencyDemo.java,v 1.19 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes (from 10-Oct-2002)
+  * --------------------------
+  * 10-Oct-2002 : Added standard header and Javadocs (DG);
+  * 11-Feb-2003 : Fixed 0.9.5 bug (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.text.DateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.labels.CategoryToolTipGenerator;
+ import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.data.time.Day;
+ import org.jfree.date.SerialDate;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo application showing how to display category data against a date axis.
+  *
+  */
+ public class EventFrequencyDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public EventFrequencyDemo(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         // initialise the data...
+         final Day d1 = new Day(12, SerialDate.JUNE, 2002);
+         final Day d2 = new Day(14, SerialDate.JUNE, 2002);
+         final Day d3 = new Day(15, SerialDate.JUNE, 2002);
+         final Day d4 = new Day(10, SerialDate.JULY, 2002);
+         final Day d5 = new Day(20, SerialDate.JULY, 2002);
+         final Day d6 = new Day(22, SerialDate.AUGUST, 2002);
+ 
+         dataset.setValue(new Long(d1.getMiddleMillisecond()), "Series 1", "Requirement 1");
+         dataset.setValue(new Long(d1.getMiddleMillisecond()), "Series 1", "Requirement 2");
+         dataset.setValue(new Long(d2.getMiddleMillisecond()), "Series 1", "Requirement 3");
+         dataset.setValue(new Long(d3.getMiddleMillisecond()), "Series 2", "Requirement 1");
+         dataset.setValue(new Long(d4.getMiddleMillisecond()), "Series 2", "Requirement 3");
+         dataset.setValue(new Long(d5.getMiddleMillisecond()), "Series 3", "Requirement 2");
+         dataset.setValue(new Long(d6.getMiddleMillisecond()), "Series 1", "Requirement 4");
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Event Frequency Demo",      // title
+             "Category",                  // domain axis label
+             "Value",                     // range axis label
+             dataset,                     // dataset
+             PlotOrientation.HORIZONTAL,  // orientation
+             true,                        // include legend
+             true,                        // tooltips
+             false                        // URLs
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(new Color(0xFF, 0xFF, 0xCC));
+ 
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setDisplaySeriesShapes(true);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.getDomainAxis().setMaxCategoryLabelWidthRatio(10.0f);
+         plot.setRangeAxis(new DateAxis("Date"));
+         final CategoryToolTipGenerator toolTipGenerator = new StandardCategoryToolTipGenerator(
+             "", DateFormat.getDateInstance()
+         );
+         final CategoryItemRenderer renderer = new LineAndShapeRenderer(LineAndShapeRenderer.SHAPES);
+         renderer.setToolTipGenerator(toolTipGenerator);
+         plot.setRenderer(renderer);
+                                                   
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // OPTIONAL CUSTOMISATION COMPLETED.
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final EventFrequencyDemo demo = new EventFrequencyDemo("Event Frequency Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ExtendedStackedBarRenderer.java jfreechart/source/org/jfree/chart/demo/ExtendedStackedBarRenderer.java
*** jfreechart-orig/source/org/jfree/chart/demo/ExtendedStackedBarRenderer.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ExtendedStackedBarRenderer.java	2004-11-07 15:48:19.000000000 +0100
***************
*** 0 ****
--- 1,367 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------------
+  * ExtendedStackedBarRenderer.java
+  * -------------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ExtendedStackedBarRenderer.java,v 1.12 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 27-Nov-2003 : Version 1 (DG);
+  * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
+  * 06-Feb-2004 : Added format attribute for totals (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.awt.Graphics2D;
+ import java.awt.Paint;
+ import java.awt.geom.Rectangle2D;
+ import java.text.NumberFormat;
+ 
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.entity.CategoryItemEntity;
+ import org.jfree.chart.entity.EntityCollection;
+ import org.jfree.chart.labels.CategoryLabelGenerator;
+ import org.jfree.chart.labels.CategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRendererState;
+ import org.jfree.chart.renderer.category.StackedBarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.ui.RectangleEdge;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * An extension of the {@link StackedBarRenderer} that can draw positive and negative totals at 
+  * the top and bottom of the stacked bars.
+  */
+ public class ExtendedStackedBarRenderer extends StackedBarRenderer {
+ 
+     /** Show positive label? */
+     private boolean showPositiveTotal = true;
+     
+     /** Show negative label? */
+     private boolean showNegativeTotal = true;
+     
+     /** Font for labels. */
+     private Font totalLabelFont = new Font("SansSerif", Font.PLAIN, 10);
+     
+     /** Formatter for total. */
+     private NumberFormat totalFormatter;
+     
+     /**
+      * Creates a new renderer.
+      */
+     public ExtendedStackedBarRenderer() {
+         super(); 
+         this.totalFormatter = NumberFormat.getInstance();
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Returns the total formatter.
+      * 
+      * @return the total formatter (never <code>null</code>).
+      */
+     public NumberFormat getTotalFormatter() {
+         return this.totalFormatter;
+     }
+     
+     /**
+      * Sets the total formatter.
+      * 
+      * @param format  the formatter (<code>null</code> not permitted).
+      */
+     public void setTotalFormatter(final NumberFormat format) {
+         if (format == null) {
+             throw new IllegalArgumentException("Null format not permitted.");
+         }
+         this.totalFormatter = format;
+     }
+     
+     /**
+      * Draws a stacked bar for a specific item.
+      *
+      * @param g2  the graphics device.
+      * @param state  the renderer state.
+      * @param dataArea  the plot area.
+      * @param plot  the plot.
+      * @param domainAxis  the domain (category) axis.
+      * @param rangeAxis  the range (value) axis.
+      * @param dataset  the data.
+      * @param row  the row index (zero-based).
+      * @param column  the column index (zero-based).
+      */
+     public void drawItem(final Graphics2D g2,
+                          final CategoryItemRendererState state,
+                          final Rectangle2D dataArea,
+                          final CategoryPlot plot,
+                          final CategoryAxis domainAxis,
+                          final ValueAxis rangeAxis,
+                          final CategoryDataset dataset,
+                          final int row,
+                          final int column) {
+      
+         // nothing is drawn for null values...
+         final Number dataValue = dataset.getValue(row, column);
+         if (dataValue == null) {
+             return;
+         }
+         
+         final double value = dataValue.doubleValue();
+         
+         final PlotOrientation orientation = plot.getOrientation();
+         final double barW0 = domainAxis.getCategoryMiddle(
+             column, getColumnCount(), dataArea, plot.getDomainAxisEdge()
+         ) - state.getBarWidth() / 2.0;
+ 
+         double positiveBase = 0.0;
+         double negativeBase = 0.0;
+ 
+         for (int i = 0; i < row; i++) {
+             final Number v = dataset.getValue(i, column);
+             if (v != null) {
+                 final double d = v.doubleValue();
+                 if (d > 0) {
+                     positiveBase = positiveBase + d;
+                 }
+                 else {
+                     negativeBase = negativeBase + d;
+                 }
+             }
+         }
+ 
+         final double translatedBase;
+         final double translatedValue;
+         final RectangleEdge location = plot.getRangeAxisEdge();
+         if (value > 0.0) {
+             translatedBase = rangeAxis.valueToJava2D(positiveBase, dataArea, location);
+             translatedValue = rangeAxis.valueToJava2D(positiveBase + value, dataArea, location);
+         }
+         else {
+             translatedBase = rangeAxis.valueToJava2D(negativeBase, dataArea, location);
+             translatedValue = rangeAxis.valueToJava2D(negativeBase + value, dataArea, location);
+         }
+         final double barL0 = Math.min(translatedBase, translatedValue);
+         final double barLength = Math.max(Math.abs(translatedValue - translatedBase),
+                                     getMinimumBarLength());
+ 
+         Rectangle2D bar = null;
+         if (orientation == PlotOrientation.HORIZONTAL) {
+             bar = new Rectangle2D.Double(barL0, barW0, barLength, state.getBarWidth());
+         }
+         else {
+             bar = new Rectangle2D.Double(barW0, barL0, state.getBarWidth(), barLength);
+         }
+         final Paint seriesPaint = getItemPaint(row, column);
+         g2.setPaint(seriesPaint);
+         g2.fill(bar);
+         if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
+             g2.setStroke(getItemStroke(row, column));
+             g2.setPaint(getItemOutlinePaint(row, column));
+             g2.draw(bar);
+         }
+ 
+         final CategoryLabelGenerator generator = getLabelGenerator(row, column);
+         if (generator != null && isItemLabelVisible(row, column)) {
+             drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
+         }       
+         
+         if (value > 0.0) {
+             if (this.showPositiveTotal) {
+                 if (isLastPositiveItem(dataset, row, column)) {
+                     g2.setPaint(Color.black);
+                     g2.setFont(this.totalLabelFont);
+                     final double total = calculateSumOfPositiveValuesForCategory(dataset, column);
+                     RefineryUtilities.drawRotatedString(
+                         this.totalFormatter.format(total), g2,
+                         (float) bar.getCenterX(),
+                         (float) (bar.getMinY() - 4.0), 
+                         TextAnchor.BOTTOM_CENTER, 
+                         TextAnchor.BOTTOM_CENTER, 
+                         0.0
+                     );              
+                 }
+             }
+         } 
+         else {
+             if (this.showNegativeTotal) {
+                 if (isLastNegativeItem(dataset, row, column)) {
+                     g2.setPaint(Color.black);
+                     g2.setFont(this.totalLabelFont);
+                     final double total = calculateSumOfNegativeValuesForCategory(dataset, column);
+                     RefineryUtilities.drawRotatedString(
+                         String.valueOf(total), g2,
+                         (float) bar.getCenterX(),
+                         (float) (bar.getMaxY() + 4.0), 
+                         TextAnchor.TOP_CENTER, 
+                         TextAnchor.TOP_CENTER, 
+                         0.0
+                     );              
+                 }
+             }            
+         }
+                 
+         // collect entity and tool tip information...
+         if (state.getInfo() != null) {
+             final EntityCollection entities = state.getInfo().getOwner().getEntityCollection();
+             if (entities != null) {
+                 String tip = null;
+                 final CategoryToolTipGenerator tipster = getToolTipGenerator(row, column);
+                 if (tipster != null) {
+                     tip = tipster.generateToolTip(dataset, row, column);
+                 }
+                 String url = null;
+                 if (getItemURLGenerator(row, column) != null) {
+                     url = getItemURLGenerator(row, column).generateURL(dataset, row, column);
+                 }
+                 final CategoryItemEntity entity = new CategoryItemEntity(
+                     bar, tip, url, dataset, row, dataset.getColumnKey(column), column
+                 );
+                 entities.addEntity(entity);
+             }
+         }
+         
+     }
+ 
+     /**
+      * Returns true if the specified item is the last positive value for that category.
+      * 
+      * @param dataset  the dataset.
+      * @param row  the row (series).
+      * @param column  the column (category).
+      * 
+      * @return a boolean.
+      */
+     private boolean isLastPositiveItem(final CategoryDataset dataset, 
+                                        final int row, 
+                                        final int column) {
+         boolean result = true;
+         Number dataValue = dataset.getValue(row, column);
+         if (dataValue == null) {
+             return false;  // value is null
+         }
+         for (int r = row + 1; r < dataset.getRowCount(); r++) {
+             dataValue = dataset.getValue(r, column);
+             if (dataValue != null) {
+                 result = result && (dataValue.doubleValue() <= 0.0);
+             }
+         }
+         return result;
+     }
+ 
+     /**
+      * Returns true if the specified item is the last negative value for that category.
+      * 
+      * @param dataset  the dataset.
+      * @param row  the row (series).
+      * @param column  the column (category).
+      * 
+      * @return a boolean.
+      */
+     private boolean isLastNegativeItem(final CategoryDataset dataset, 
+                                        final int row, 
+                                        final int column) {
+         boolean result = true;
+         Number dataValue = dataset.getValue(row, column);
+         if (dataValue == null) {
+             return false;  // value is null
+         }
+         for (int r = row + 1; r < dataset.getRowCount(); r++) {
+             dataValue = dataset.getValue(r, column);
+             if (dataValue != null) {
+                 result = result && (dataValue.doubleValue() >= 0.0);
+             }
+         }
+         return result;
+     }
+ 
+     /**
+      * Calculates the sum of the positive values within a category.
+      * 
+      * @param dataset  the dataset.
+      * @param column  the column (category).
+      * 
+      * @return the sum of the positive values.
+      */
+     private double calculateSumOfPositiveValuesForCategory(final CategoryDataset dataset, 
+                                                            final int column) {
+         double result = 0.0;
+         for (int r = 0; r < dataset.getRowCount(); r++) {
+             final Number dataValue = dataset.getValue(r, column);
+             if (dataValue != null) {
+                 final double v = dataValue.doubleValue();
+                 if (v > 0.0) {
+                     result = result + v;
+                 }
+             }
+         }
+         return result; 
+     }
+ 
+     /**
+      * Calculates the sum of the negative values within a category.
+      * 
+      * @param dataset  the dataset.
+      * @param column  the column (category).
+      * 
+      * @return the sum of the negative values.
+      */
+     private double calculateSumOfNegativeValuesForCategory(final CategoryDataset dataset, 
+                                                            final int column) {
+         double result = 0.0;
+         for (int r = 0; r < dataset.getRowCount(); r++) {
+             final Number dataValue = dataset.getValue(r, column);
+             if (dataValue != null) {
+                 final double v = dataValue.doubleValue();
+                 if (v < 0.0) {
+                     result = result + v;
+                 }
+             }
+         }
+         return result; 
+     }
+     
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/FastScatterPlotDemo.java jfreechart/source/org/jfree/chart/demo/FastScatterPlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/FastScatterPlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/FastScatterPlotDemo.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,136 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * FastScatterPlotDemo.java
+  * ------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: FastScatterPlotDemo.java,v 1.13 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes (from 29-Oct-2002)
+  * --------------------------
+  * 29-Oct-2002 : Added standard header and Javadocs (DG);
+  * 12-Nov-2003 : Enabled zooming (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.RenderingHints;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.FastScatterPlot;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo of the fast scatter plot.
+  *
+  */
+ public class FastScatterPlotDemo extends ApplicationFrame {
+ 
+     /** A constant for the number of items in the sample dataset. */
+     private static final int COUNT = 500000;
+ 
+     /** The data. */
+     private float[][] data = new float[2][COUNT];
+ 
+     /**
+      * Creates a new fast scatter plot demo.
+      *
+      * @param title  the frame title.
+      */
+     public FastScatterPlotDemo(final String title) {
+ 
+         super(title);
+         populateData();
+         final NumberAxis domainAxis = new NumberAxis("X");
+         domainAxis.setAutoRangeIncludesZero(false);
+         final NumberAxis rangeAxis = new NumberAxis("Y");
+         rangeAxis.setAutoRangeIncludesZero(false);
+         final FastScatterPlot plot = new FastScatterPlot(this.data, domainAxis, rangeAxis);
+         final JFreeChart chart = new JFreeChart("Fast Scatter Plot", plot);
+         chart.setLegend(null);
+ 
+         // force aliasing of the rendered content..
+         chart.getRenderingHints().put
+             (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
+ 
+         final ChartPanel panel = new ChartPanel(chart, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         panel.setHorizontalZoom(true);
+         panel.setVerticalZoom(true);
+         panel.setMinimumDrawHeight(10);
+         panel.setMaximumDrawHeight(2000);
+         panel.setMinimumDrawWidth(20);
+         panel.setMaximumDrawWidth(2000);
+         
+         setContentPane(panel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Populates the data array with random values.
+      */
+     private void populateData() {
+ 
+         for (int i = 0; i < this.data[0].length; i++) {
+             final float x = (float) i + 100000;
+             this.data[0][i] = x;
+             this.data[1][i] = 100000 + (float) Math.random() * COUNT;
+         }
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final FastScatterPlotDemo demo = new FastScatterPlotDemo("Fast Scatter Plot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/First.java jfreechart/source/org/jfree/chart/demo/First.java
*** jfreechart-orig/source/org/jfree/chart/demo/First.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/First.java	2004-11-07 15:48:15.000000000 +0100
***************
*** 0 ****
--- 1,85 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------
+  * First.java
+  * ----------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: First.java,v 1.7 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 16-Jan-2002 : Version 1 (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartFrame;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.data.general.DefaultPieDataset;
+ 
+ /**
+  * A simple introduction to using JFreeChart.  This demo is described in the
+  * JFreeChart Developer Guide, available to purchasers of commercial support 
+  * packages for JFreeChart.
+  *
+  */
+ public class First {
+ 
+     /**
+      * The starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         // create a dataset...
+         final DefaultPieDataset data = new DefaultPieDataset();
+         data.setValue("Category 1", 43.2);
+         data.setValue("Category 2", 27.9);
+         data.setValue("Category 3", 79.5);
+ 
+         // create a chart...
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Sample Pie Chart",
+             data,
+             true,    // legend?
+             true,    // tooltips?
+             false    // URLs?
+         );
+ 
+         // create and display a frame...
+         final ChartFrame frame = new ChartFrame("First", chart);
+         frame.pack();
+         frame.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/GanttDemo1.java jfreechart/source/org/jfree/chart/demo/GanttDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/GanttDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/GanttDemo1.java	2004-11-07 15:48:10.000000000 +0100
***************
*** 0 ****
--- 1,242 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------
+  * GanttDemo1.java
+  * ---------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: GanttDemo1.java,v 1.12 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 06-Jun-2002 : Version 1 (DG);
+  * 10-Oct-2002 : Modified to use DemoDatasetFactory (DG);
+  * 10-Jan-2003 : Renamed GanttDemo --> GanttDemo1 (DG);
+  * 16-Oct-2003 : Shifted dataset from DemoDatasetFactory to this class (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.util.Calendar;
+ import java.util.Date;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.data.category.IntervalCategoryDataset;
+ import org.jfree.data.gantt.Task;
+ import org.jfree.data.gantt.TaskSeries;
+ import org.jfree.data.gantt.TaskSeriesCollection;
+ import org.jfree.data.time.SimpleTimePeriod;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a Gantt chart.
+  * <P>
+  * This demo is intended to show the conceptual approach rather than being a polished
+  * implementation.
+  *
+  *
+  */
+ public class GanttDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public GanttDemo1(final String title) {
+ 
+         super(title);
+ 
+         final IntervalCategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset for a Gantt chart.
+      *
+      * @return The dataset.
+      */
+     public static IntervalCategoryDataset createDataset() {
+ 
+         final TaskSeries s1 = new TaskSeries("Scheduled");
+         s1.add(new Task("Write Proposal",
+                new SimpleTimePeriod(date(1, Calendar.APRIL, 2001),
+                                     date(5, Calendar.APRIL, 2001))));
+         s1.add(new Task("Obtain Approval",
+                new SimpleTimePeriod(date(9, Calendar.APRIL, 2001),
+                                     date(9, Calendar.APRIL, 2001))));
+         s1.add(new Task("Requirements Analysis",
+                new SimpleTimePeriod(date(10, Calendar.APRIL, 2001),
+                                     date(5, Calendar.MAY, 2001))));
+         s1.add(new Task("Design Phase",
+                new SimpleTimePeriod(date(6, Calendar.MAY, 2001),
+                                     date(30, Calendar.MAY, 2001))));
+         s1.add(new Task("Design Signoff",
+                new SimpleTimePeriod(date(2, Calendar.JUNE, 2001),
+                                     date(2, Calendar.JUNE, 2001))));
+         s1.add(new Task("Alpha Implementation",
+                new SimpleTimePeriod(date(3, Calendar.JUNE, 2001),
+                                     date(31, Calendar.JULY, 2001))));
+         s1.add(new Task("Design Review",
+                new SimpleTimePeriod(date(1, Calendar.AUGUST, 2001),
+                                     date(8, Calendar.AUGUST, 2001))));
+         s1.add(new Task("Revised Design Signoff",
+                new SimpleTimePeriod(date(10, Calendar.AUGUST, 2001),
+                                     date(10, Calendar.AUGUST, 2001))));
+         s1.add(new Task("Beta Implementation",
+                new SimpleTimePeriod(date(12, Calendar.AUGUST, 2001),
+                                     date(12, Calendar.SEPTEMBER, 2001))));
+         s1.add(new Task("Testing",
+                new SimpleTimePeriod(date(13, Calendar.SEPTEMBER, 2001),
+                                     date(31, Calendar.OCTOBER, 2001))));
+         s1.add(new Task("Final Implementation",
+                new SimpleTimePeriod(date(1, Calendar.NOVEMBER, 2001),
+                                     date(15, Calendar.NOVEMBER, 2001))));
+         s1.add(new Task("Signoff",
+                new SimpleTimePeriod(date(28, Calendar.NOVEMBER, 2001),
+                                     date(30, Calendar.NOVEMBER, 2001))));
+ 
+         final TaskSeries s2 = new TaskSeries("Actual");
+         s2.add(new Task("Write Proposal",
+                new SimpleTimePeriod(date(1, Calendar.APRIL, 2001),
+                                     date(5, Calendar.APRIL, 2001))));
+         s2.add(new Task("Obtain Approval",
+                new SimpleTimePeriod(date(9, Calendar.APRIL, 2001),
+                                     date(9, Calendar.APRIL, 2001))));
+         s2.add(new Task("Requirements Analysis",
+                new SimpleTimePeriod(date(10, Calendar.APRIL, 2001),
+                                     date(15, Calendar.MAY, 2001))));
+         s2.add(new Task("Design Phase",
+                new SimpleTimePeriod(date(15, Calendar.MAY, 2001),
+                                     date(17, Calendar.JUNE, 2001))));
+         s2.add(new Task("Design Signoff",
+                new SimpleTimePeriod(date(30, Calendar.JUNE, 2001),
+                                     date(30, Calendar.JUNE, 2001))));
+         s2.add(new Task("Alpha Implementation",
+                new SimpleTimePeriod(date(1, Calendar.JULY, 2001),
+                                     date(12, Calendar.SEPTEMBER, 2001))));
+         s2.add(new Task("Design Review",
+                new SimpleTimePeriod(date(12, Calendar.SEPTEMBER, 2001),
+                                     date(22, Calendar.SEPTEMBER, 2001))));
+         s2.add(new Task("Revised Design Signoff",
+                new SimpleTimePeriod(date(25, Calendar.SEPTEMBER, 2001),
+                                     date(27, Calendar.SEPTEMBER, 2001))));
+         s2.add(new Task("Beta Implementation",
+                new SimpleTimePeriod(date(27, Calendar.SEPTEMBER, 2001),
+                                     date(30, Calendar.OCTOBER, 2001))));
+         s2.add(new Task("Testing",
+                new SimpleTimePeriod(date(31, Calendar.OCTOBER, 2001),
+                                     date(17, Calendar.NOVEMBER, 2001))));
+         s2.add(new Task("Final Implementation",
+                new SimpleTimePeriod(date(18, Calendar.NOVEMBER, 2001),
+                                     date(5, Calendar.DECEMBER, 2001))));
+         s2.add(new Task("Signoff",
+                new SimpleTimePeriod(date(10, Calendar.DECEMBER, 2001),
+                                     date(11, Calendar.DECEMBER, 2001))));
+ 
+         final TaskSeriesCollection collection = new TaskSeriesCollection();
+         collection.add(s1);
+         collection.add(s2);
+ 
+         return collection;
+     }
+ 
+     /**
+      * Utility method for creating <code>Date</code> objects.
+      *
+      * @param day  the date.
+      * @param month  the month.
+      * @param year  the year.
+      *
+      * @return a date.
+      */
+     private static Date date(final int day, final int month, final int year) {
+ 
+         final Calendar calendar = Calendar.getInstance();
+         calendar.set(year, month, day);
+         final Date result = calendar.getTime();
+         return result;
+ 
+     }
+         
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final IntervalCategoryDataset dataset) {
+         final JFreeChart chart = ChartFactory.createGanttChart(
+             "Gantt Chart Demo",  // chart title
+             "Task",              // domain axis label
+             "Date",              // range axis label
+             dataset,             // data
+             true,                // include legend
+             true,                // tooltips
+             false                // urls
+         );    
+         chart.getCategoryPlot().getDomainAxis().setMaxCategoryLabelWidthRatio(10.0f);
+         return chart;    
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final GanttDemo1 demo = new GanttDemo1("Gantt Chart Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/GanttDemo2.java jfreechart/source/org/jfree/chart/demo/GanttDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/GanttDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/GanttDemo2.java	2004-11-07 15:48:06.000000000 +0100
***************
*** 0 ****
--- 1,265 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------
+  * GanttDemo2.java
+  * ---------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: GanttDemo2.java,v 1.12 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 10-Jan-2003 : Version 1 (based on GanttDemo1) (DG);
+  * 16-Sep-2003 : Transferred dataset creation from DemoDatasetFactory to this class (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.util.Calendar;
+ import java.util.Date;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.IntervalCategoryDataset;
+ import org.jfree.data.gantt.Task;
+ import org.jfree.data.gantt.TaskSeries;
+ import org.jfree.data.gantt.TaskSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a Gantt chart with multiple bars per
+  * task. 
+  *
+  */
+ public class GanttDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public GanttDemo2(final String title) {
+ 
+         super(title);
+ 
+         final IntervalCategoryDataset dataset = createSampleDataset();
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createGanttChart(
+             "Gantt Chart Demo",  // chart title
+             "Task",              // domain axis label
+             "Date",              // range axis label
+             dataset,             // data
+             true,                // include legend
+             true,                // tooltips
+             false                // urls
+         );
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         plot.getDomainAxis().setMaxCategoryLabelWidthRatio(10.0f);
+         final CategoryItemRenderer renderer = plot.getRenderer();
+         renderer.setSeriesPaint(0, Color.blue);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset for a Gantt chart, using sub-tasks.  In general, you won't 
+      * hard-code the dataset in this way - it's done here so that the demo is self-contained.
+      *
+      * @return The dataset.
+      */
+     private IntervalCategoryDataset createSampleDataset() {
+ 
+         final TaskSeries s1 = new TaskSeries("Scheduled");
+         
+         final Task t1 = new Task(
+             "Write Proposal", date(1, Calendar.APRIL, 2001), date(5, Calendar.APRIL, 2001)
+         );
+         t1.setPercentComplete(1.00);
+         s1.add(t1);
+         
+         final Task t2 = new Task(
+             "Obtain Approval", date(9, Calendar.APRIL, 2001), date(9, Calendar.APRIL, 2001)
+         );
+         t2.setPercentComplete(1.00);
+         s1.add(t2);
+ 
+         // here is a task split into two subtasks...
+         final Task t3 = new Task(
+             "Requirements Analysis", 
+             date(10, Calendar.APRIL, 2001), date(5, Calendar.MAY, 2001)
+         );
+         final Task st31 = new Task(
+             "Requirements 1", 
+             date(10, Calendar.APRIL, 2001), date(25, Calendar.APRIL, 2001)
+         );
+         st31.setPercentComplete(1.0);
+         final Task st32 = new Task(
+             "Requirements 2", 
+             date(1, Calendar.MAY, 2001), date(5, Calendar.MAY, 2001)
+         );
+         st32.setPercentComplete(1.0);
+         t3.addSubtask(st31);
+         t3.addSubtask(st32);
+         s1.add(t3);
+ 
+         // and another...
+         final Task t4 = new Task(
+             "Design Phase", 
+             date(6, Calendar.MAY, 2001), date(30, Calendar.MAY, 2001)
+         );
+         final Task st41 = new Task(
+              "Design 1", 
+              date(6, Calendar.MAY, 2001), date(10, Calendar.MAY, 2001)
+         );
+         st41.setPercentComplete(1.0);
+         final Task st42 = new Task(
+             "Design 2", 
+             date(15, Calendar.MAY, 2001), date(20, Calendar.MAY, 2001)
+         );
+         st42.setPercentComplete(1.0);
+         final Task st43 = new Task(
+             "Design 3", 
+             date(23, Calendar.MAY, 2001), date(30, Calendar.MAY, 2001)
+         );
+         st43.setPercentComplete(0.50);
+         t4.addSubtask(st41);
+         t4.addSubtask(st42);
+         t4.addSubtask(st43);
+         s1.add(t4);
+ 
+         final Task t5 = new Task(
+             "Design Signoff", date(2, Calendar.JUNE, 2001), date(2, Calendar.JUNE, 2001)
+         ); 
+         s1.add(t5);
+                         
+         final Task t6 = new Task(
+             "Alpha Implementation", date(3, Calendar.JUNE, 2001), date(31, Calendar.JULY, 2001)
+         );
+         t6.setPercentComplete(0.60);
+         
+         s1.add(t6);
+         
+         final Task t7 = new Task(
+             "Design Review", date(1, Calendar.AUGUST, 2001), date(8, Calendar.AUGUST, 2001)
+         );
+         t7.setPercentComplete(0.0);
+         s1.add(t7);
+         
+         final Task t8 = new Task(
+             "Revised Design Signoff", 
+             date(10, Calendar.AUGUST, 2001), date(10, Calendar.AUGUST, 2001)
+         );
+         t8.setPercentComplete(0.0);
+         s1.add(t8);
+         
+         final Task t9 = new Task(
+             "Beta Implementation", 
+             date(12, Calendar.AUGUST, 2001), date(12, Calendar.SEPTEMBER, 2001)
+         );
+         t9.setPercentComplete(0.0);
+         s1.add(t9);
+         
+         final Task t10 = new Task(
+             "Testing", date(13, Calendar.SEPTEMBER, 2001), date(31, Calendar.OCTOBER, 2001)
+         );
+         t10.setPercentComplete(0.0);
+         s1.add(t10);
+         
+         final Task t11 = new Task(
+             "Final Implementation", 
+             date(1, Calendar.NOVEMBER, 2001), date(15, Calendar.NOVEMBER, 2001)
+         );
+         t11.setPercentComplete(0.0);
+         s1.add(t11);
+         
+         final Task t12 = new Task(
+             "Signoff", date(28, Calendar.NOVEMBER, 2001), date(30, Calendar.NOVEMBER, 2001)
+         );
+         t12.setPercentComplete(0.0);
+         s1.add(t12);
+ 
+         final TaskSeriesCollection collection = new TaskSeriesCollection();
+         collection.add(s1);
+ 
+         return collection;
+     }
+ 
+     /**
+      * Utility method for creating <code>Date</code> objects.
+      *
+      * @param day  the date.
+      * @param month  the month.
+      * @param year  the year.
+      *
+      * @return a date.
+      */
+     private static Date date(final int day, final int month, final int year) {
+ 
+         final Calendar calendar = Calendar.getInstance();
+         calendar.set(year, month, day);
+         final Date result = calendar.getTime();
+         return result;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final GanttDemo2 demo = new GanttDemo2("Gantt Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/HighLowChartDemo2.java jfreechart/source/org/jfree/chart/demo/HighLowChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/HighLowChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/HighLowChartDemo2.java	2004-11-07 15:47:41.000000000 +0100
***************
*** 0 ****
--- 1,144 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * HighLowChartDemo2.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: HighLowChartDemo2.java,v 1.7 2004/04/27 14:53:10 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 03-Dec-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickMarkPosition;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.time.MovingAverage;
+ import org.jfree.data.xy.DefaultHighLowDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing a high-low-open-close chart with a moving average overlaid on top.
+  *
+  */
+ public class HighLowChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a high-low-open-close chart.
+      *
+      * @param title  the frame title.
+      */
+     public HighLowChartDemo2(final String title) {
+ 
+         super(title);
+ 
+         final DefaultHighLowDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private DefaultHighLowDataset createDataset() {
+         return  DemoDatasetFactory.createHighLowDataset();
+     }
+ 
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return a sample chart.
+      */
+     private JFreeChart createChart(final DefaultHighLowDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createHighLowChart(
+             "OHLC Demo 2",
+             "Time", 
+             "Value",
+             dataset, 
+             true
+         );
+         
+         final DateAxis axis = (DateAxis) chart.getXYPlot().getDomainAxis();
+         axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);
+ 
+         final XYDataset dataset2 = MovingAverage.createMovingAverage(
+             dataset, "-MAVG", 3 * 24 * 60 * 60 * 1000L, 0L
+         );
+         final XYPlot plot = (XYPlot) chart.getPlot();
+         plot.setDataset(1, dataset2);
+         plot.setRenderer(1, new StandardXYItemRenderer());
+         
+         return chart;
+             
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final HighLowChartDemo2 demo = new HighLowChartDemo2("OHLC Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/HighLowChartDemo.java jfreechart/source/org/jfree/chart/demo/HighLowChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/HighLowChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/HighLowChartDemo.java	2004-11-07 15:48:01.000000000 +0100
***************
*** 0 ****
--- 1,103 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * HighLowChartDemo.java
+  * ---------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: HighLowChartDemo.java,v 1.9 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 05-Feb-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickMarkPosition;
+ import org.jfree.data.xy.DefaultHighLowDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing a high-low-open-close chart.
+  *
+  */
+ public class HighLowChartDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a high-low-open-close chart.
+      *
+      * @param title  the frame title.
+      */
+     public HighLowChartDemo(final String title) {
+ 
+         super(title);
+ 
+         final DefaultHighLowDataset dataset = DemoDatasetFactory.createHighLowDataset();
+         final JFreeChart chart = ChartFactory.createHighLowChart("High-Low-Open-Close Demo",
+                                                            "Time", "Value",
+                                                            dataset, true);
+         final DateAxis axis = (DateAxis) chart.getXYPlot().getDomainAxis();
+         axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final HighLowChartDemo demo = new HighLowChartDemo("High-Low-Open-Close Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/HistogramDemo2.java jfreechart/source/org/jfree/chart/demo/HistogramDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/HistogramDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/HistogramDemo2.java	2004-11-07 15:47:06.000000000 +0100
***************
*** 0 ****
--- 1,133 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * HistogramDemo2.java
+  * -------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: HistogramDemo2.java,v 1.3 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 01-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.io.IOException;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.statistics.HistogramDataset;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo of the {@link HistogramDataset} class.
+  */
+ public class HistogramDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      * 
+      * @param title  the frame title.
+      */
+     public HistogramDemo2(final String title) {
+         super(title);    
+         final IntervalXYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample {@link HistogramDataset}.
+      * 
+      * @return the dataset.
+      */
+     private IntervalXYDataset createDataset() {
+         final HistogramDataset dataset = new HistogramDataset();
+         final double[] values = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
+         dataset.addSeries("H1", values, 10, 0.0, 10.0);
+         return dataset;     
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final IntervalXYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createHistogram(
+             "Histogram Demo", 
+             null, 
+             null, 
+             dataset, 
+             PlotOrientation.VERTICAL, 
+             true, 
+             false, 
+             false
+         );
+         chart.getXYPlot().setForegroundAlpha(0.75f);
+         return chart;
+     }
+         
+     /**
+      * The starting point for the demo.
+      * 
+      * @param args  ignored.
+      * 
+      * @throws IOException  if there is a problem saving the file.
+      */
+     public static void main(final String[] args) throws IOException {
+         
+         final HistogramDemo2 demo = new HistogramDemo2("Histogram Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+         
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/HistogramDemo.java jfreechart/source/org/jfree/chart/demo/HistogramDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/HistogramDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/HistogramDemo.java	2004-11-07 15:47:11.000000000 +0100
***************
*** 0 ****
--- 1,161 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * HistogramDemo.java
+  * ------------------
+  * (C) Copyright 2003, 2004, by Jelai Wang and Contributors.
+  *
+  * Original Author:  Jelai Wang (jelaiw AT mindspring.com);
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: HistogramDemo.java,v 1.8 2004/04/26 19:11:54 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 06-Jul-2003 : Version 1, contributed by Jelai Wang (DG);
+  * 07-Jul-2003 : Modified to display chart on screen, consistent with the other JFreeChart demo
+  *               applications (DG);
+  * 01-Mar-2004 : Modified for updates to HistogramDataset (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.io.IOException;
+ import java.util.Random;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.statistics.HistogramDataset;
+ import org.jfree.data.statistics.HistogramType;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo of the {@link HistogramDataset} class.
+  * 
+  * @author Jelai Wang, jelaiw AT mindspring.com
+  */
+ public class HistogramDemo extends ApplicationFrame {
+     
+     /** For generating random numbers. */ 
+     static Random random = new Random();
+ 
+     /**
+      * Creates a new demo.
+      * 
+      * @param title  the frame title.
+      */
+     public HistogramDemo(final String title) {
+         super(title);    
+         final IntervalXYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample {@link HistogramDataset}.
+      * 
+      * @return The dataset.
+      */
+     private IntervalXYDataset createDataset() {
+         final HistogramDataset dataset = new HistogramDataset();
+         dataset.setType(HistogramType.RELATIVE_FREQUENCY);
+         dataset.addSeries("H1", gaussianData(1000, 3.0), 20);
+         dataset.addSeries("H0", gaussianData(1000, 0), 20);   
+         return dataset;     
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final IntervalXYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createHistogram(
+             "Histogram Demo", 
+             null, 
+             null, 
+             dataset, 
+             PlotOrientation.VERTICAL, 
+             true, 
+             false, 
+             false
+         );
+         chart.getXYPlot().setForegroundAlpha(0.75f);
+         return chart;
+     }
+     
+     /**
+      * Generates an array of sample data.
+      * 
+      * @param size  the array size.
+      * @param shift  the shift from zero.
+      * 
+      * @return The array of sample data.
+      */
+     private static double[] gaussianData(final int size, final double shift) {
+         final double[] d = new double[size];
+         for (int i = 0; i < d.length; i++) {
+             d[i] = random.nextGaussian() + shift;
+         }
+         return d;
+     }
+     
+     /**
+      * The starting point for the demo.
+      * 
+      * @param args  ignored.
+      * 
+      * @throws IOException  if there is a problem saving the file.
+      */
+     public static void main(final String[] args) throws IOException {
+         
+         final HistogramDemo demo = new HistogramDemo("Histogram Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+         
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo1.java jfreechart/source/org/jfree/chart/demo/ImageMapDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ImageMapDemo1.java	2004-11-07 15:47:02.000000000 +0100
***************
*** 0 ****
--- 1,161 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * ImageMapDemo1.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Richard Atkinson (richard_c_atkinson@ntlworld.com);
+  *
+  * $Id: ImageMapDemo1.java,v 1.26 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 26-Jun-2002 : Version 1 (DG);
+  * 05-Aug-2002 : Modified to demonstrate hrefs and alt tags in image map (RA);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.io.BufferedOutputStream;
+ import java.io.File;
+ import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.OutputStream;
+ import java.io.PrintWriter;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartRenderingInfo;
+ import org.jfree.chart.ChartUtilities;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.entity.StandardEntityCollection;
+ import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.urls.StandardCategoryURLGenerator;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ 
+ /**
+  * A demo showing how to create an HTML image map for a bar chart.
+  */
+ public class ImageMapDemo1 {
+ 
+     /**
+      * Default constructor.
+      */
+     public ImageMapDemo1() {
+         super();
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         // create a chart
+         final double[][] data = new double[][] {
+             {56.0, -12.0, 34.0, 76.0, 56.0, 100.0, 67.0, 45.0},
+             {37.0, 45.0, 67.0, 25.0, 34.0, 34.0, 100.0, 53.0},
+             {43.0, 54.0, 34.0, 34.0, 87.0, 64.0, 73.0, 12.0}
+         };
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Series ", "Type ", data
+         );
+ 
+         JFreeChart chart = null;
+         final boolean drilldown = true;
+ 
+         if (drilldown) {
+             final CategoryAxis categoryAxis = new CategoryAxis("Category");
+             final ValueAxis valueAxis = new NumberAxis("Value");
+             final BarRenderer renderer = new BarRenderer();
+             renderer.setToolTipGenerator(new StandardCategoryToolTipGenerator());
+             renderer.setItemURLGenerator(new StandardCategoryURLGenerator("bar_chart_detail.jsp"));
+             final CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
+             plot.setOrientation(PlotOrientation.VERTICAL);
+             chart = new JFreeChart("Bar Chart", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+         }
+         else {
+             chart = ChartFactory.createBarChart(
+                 "Vertical Bar Chart",  // chart title
+                 "Category",            // domain axis label
+                 "Value",               // range axis label
+                 dataset,               // data
+                 PlotOrientation.VERTICAL,
+                 true,                  // include legend
+                 true,
+                 false
+             );
+         }
+         chart.setBackgroundPaint(java.awt.Color.white);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // save it to an image
+         try {
+             final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
+             final File file1 = new File("barchart100.png");
+             ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);
+ 
+             // write an HTML page incorporating the image with an image map
+             final File file2 = new File("barchart100.html");
+             final OutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
+             final PrintWriter writer = new PrintWriter(out);
+             writer.println("<HTML>");
+             writer.println("<HEAD><TITLE>JFreeChart Image Map Demo</TITLE></HEAD>");
+             writer.println("<BODY>");
+             ChartUtilities.writeImageMap(writer, "chart", info);
+             writer.println("<IMG SRC=\"barchart100.png\" "
+                            + "WIDTH=\"600\" HEIGHT=\"400\" BORDER=\"0\" USEMAP=\"#chart\">");
+             writer.println("</BODY>");
+             writer.println("</HTML>");
+             writer.close();
+ 
+         }
+         catch (IOException e) {
+             System.out.println(e.toString());
+         }
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo2.java jfreechart/source/org/jfree/chart/demo/ImageMapDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ImageMapDemo2.java	2004-11-07 15:56:58.000000000 +0100
***************
*** 0 ****
--- 1,151 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * ImageMapDemo2.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Richard Atkinson (richard_c_atkinson@ntlworld.com);
+  *
+  * $Id: ImageMapDemo2.java,v 1.15 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 26-Jun-2002 : Version 1 (DG);
+  * 05-Aug-2002 : Modified to demonstrate hrefs and alt tags in image map (RA);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Insets;
+ import java.io.BufferedOutputStream;
+ import java.io.File;
+ import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.OutputStream;
+ import java.io.PrintWriter;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartRenderingInfo;
+ import org.jfree.chart.ChartUtilities;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.entity.StandardEntityCollection;
+ import org.jfree.chart.labels.StandardPieItemLabelGenerator;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.chart.urls.StandardPieURLGenerator;
+ import org.jfree.data.general.DefaultPieDataset;
+ 
+ /**
+  * A demo showing how to create an HTML image map for a pie chart.
+  *
+  */
+ public class ImageMapDemo2 {
+ 
+     /**
+      * Default constructor.
+      */
+     public ImageMapDemo2() {
+         super();
+     }
+ 
+     /**
+      * The starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         // create a chart
+         final DefaultPieDataset data = new DefaultPieDataset();
+         data.setValue("One", new Double(43.2));
+         data.setValue("Two", new Double(10.0));
+         data.setValue("Three", new Double(27.5));
+         data.setValue("Four", new Double(17.5));
+         data.setValue("Five", new Double(11.0));
+         data.setValue("Six", new Double(19.4));
+ 
+         JFreeChart chart = null;
+         final boolean drilldown = true;
+ 
+         // create the chart...
+         if (drilldown) {
+             final PiePlot plot = new PiePlot(data);
+             plot.setInsets(new Insets(0, 5, 5, 5));
+             plot.setToolTipGenerator(new StandardPieItemLabelGenerator());
+             plot.setURLGenerator(new StandardPieURLGenerator("pie_chart_detail.jsp"));
+             chart = new JFreeChart("Pie Chart Demo 1", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+         }
+         else {
+             chart = ChartFactory.createPieChart(
+                 "Pie Chart Demo 1",  // chart title
+                 data,                // data
+                 true,                // include legend
+                 true,
+                 false
+             );
+         }
+         chart.setBackgroundPaint(java.awt.Color.white);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // save it to an image
+         try {
+             final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
+             final File file1 = new File("piechart100.png");
+             ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);
+ 
+             // write an HTML page incorporating the image with an image map
+             final File file2 = new File("piechart100.html");
+             final OutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
+             final PrintWriter writer = new PrintWriter(out);
+             writer.println("<HTML>");
+             writer.println("<HEAD><TITLE>JFreeChart Image Map Demo 2</TITLE></HEAD>");
+             writer.println("<BODY>");
+             ChartUtilities.writeImageMap(writer, "chart", info);
+             writer.println("<IMG SRC=\"piechart100.png\" "
+                            + "WIDTH=\"600\" HEIGHT=\"400\" BORDER=\"0\" USEMAP=\"#chart\">");
+             writer.println("</BODY>");
+             writer.println("</HTML>");
+             writer.close();
+ 
+         }
+         catch (IOException e) {
+             System.out.println(e.toString());
+         }
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo3.java jfreechart/source/org/jfree/chart/demo/ImageMapDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ImageMapDemo3.java	2004-11-07 15:56:52.000000000 +0100
***************
*** 0 ****
--- 1,164 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * ImageMapDemo3.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Richard Atkinson and Contributors.
+  *
+  * Original Author:  Richard Atkinson (richard_c_atkinson@ntlworld.com);
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: ImageMapDemo3.java,v 1.16 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 18-Jul-2002 : Version 1 (RA);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.io.BufferedOutputStream;
+ import java.io.File;
+ import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.OutputStream;
+ import java.io.PrintWriter;
+ import java.text.ParseException;
+ import java.text.SimpleDateFormat;
+ import java.util.ArrayList;
+ 
+ import org.jfree.chart.ChartRenderingInfo;
+ import org.jfree.chart.ChartUtilities;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.entity.StandardEntityCollection;
+ import org.jfree.chart.labels.CustomXYToolTipGenerator;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.urls.StandardXYURLGenerator;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ 
+ /**
+  * A demo showing the construction of HTML image maps for a time series chart.
+  *
+  * @author Richard Atkinson
+  */
+ public class ImageMapDemo3 {
+ 
+     /**
+      * Default constructor.
+      */
+     public ImageMapDemo3() {
+         super();
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      *
+      * @throws ParseException if there is a problem parsing dates.
+      */
+     public static void main(final String[] args) throws ParseException {
+ 
+         //  Create a sample dataset
+         final SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
+         final XYSeries dataSeries = new XYSeries("Curve data");
+         final ArrayList toolTips = new ArrayList();
+         dataSeries.add(sdf.parse("01-Jul-2002").getTime(), 5.22);
+         toolTips.add("1D - 5.22");
+         dataSeries.add(sdf.parse("02-Jul-2002").getTime(), 5.18);
+         toolTips.add("2D - 5.18");
+         dataSeries.add(sdf.parse("03-Jul-2002").getTime(), 5.23);
+         toolTips.add("3D - 5.23");
+         dataSeries.add(sdf.parse("04-Jul-2002").getTime(), 5.15);
+         toolTips.add("4D - 5.15");
+         dataSeries.add(sdf.parse("05-Jul-2002").getTime(), 5.22);
+         toolTips.add("5D - 5.22");
+         dataSeries.add(sdf.parse("06-Jul-2002").getTime(), 5.25);
+         toolTips.add("6D - 5.25");
+         dataSeries.add(sdf.parse("07-Jul-2002").getTime(), 5.31);
+         toolTips.add("7D - 5.31");
+         dataSeries.add(sdf.parse("08-Jul-2002").getTime(), 5.36);
+         toolTips.add("8D - 5.36");
+         final XYSeriesCollection xyDataset = new XYSeriesCollection(dataSeries);
+         final CustomXYToolTipGenerator ttg = new CustomXYToolTipGenerator();
+         ttg.addToolTipSeries(toolTips);
+ 
+         //  Create the chart
+         final StandardXYURLGenerator urlg = new StandardXYURLGenerator("xy_details.jsp");
+         final ValueAxis timeAxis = new DateAxis("");
+         final NumberAxis valueAxis = new NumberAxis("");
+         valueAxis.setAutoRangeIncludesZero(false);  // override default
+         final XYPlot plot = new XYPlot(xyDataset, timeAxis, valueAxis, null);
+         final StandardXYItemRenderer sxyir = new StandardXYItemRenderer(
+             StandardXYItemRenderer.LINES + StandardXYItemRenderer.SHAPES,
+             ttg, urlg);
+         sxyir.setShapesFilled(true);
+         plot.setRenderer(sxyir);
+         final JFreeChart chart = new JFreeChart("", JFreeChart.DEFAULT_TITLE_FONT, plot, false);
+         chart.setBackgroundPaint(java.awt.Color.white);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // save it to an image
+         try {
+             final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
+             final File file1 = new File("xychart100.png");
+             ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);
+ 
+             // write an HTML page incorporating the image with an image map
+             final File file2 = new File("xychart100.html");
+             final OutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
+             final PrintWriter writer = new PrintWriter(out);
+             writer.println("<HTML>");
+             writer.println("<HEAD><TITLE>JFreeChart Image Map Demo</TITLE></HEAD>");
+             writer.println("<BODY>");
+             ChartUtilities.writeImageMap(writer, "chart", info);
+             writer.println("<IMG SRC=\"xychart100.png\" "
+                            + "WIDTH=\"600\" HEIGHT=\"400\" BORDER=\"0\" USEMAP=\"#chart\">");
+             writer.println("</BODY>");
+             writer.println("</HTML>");
+             writer.close();
+ 
+         }
+         catch (IOException e) {
+             System.out.println(e.toString());
+         }
+         return;
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo4.java jfreechart/source/org/jfree/chart/demo/ImageMapDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ImageMapDemo4.java	2004-11-07 15:56:47.000000000 +0100
***************
*** 0 ****
--- 1,160 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * ImageMapDemo4.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Richard Atkinson (richard_c_atkinson@ntlworld.com);
+  *
+  * $Id: ImageMapDemo4.java,v 1.11 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 22-Dec-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.io.BufferedOutputStream;
+ import java.io.File;
+ import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.OutputStream;
+ import java.io.PrintWriter;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartRenderingInfo;
+ import org.jfree.chart.ChartUtilities;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis3D;
+ import org.jfree.chart.axis.NumberAxis3D;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.entity.StandardEntityCollection;
+ import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer3D;
+ import org.jfree.chart.urls.StandardCategoryURLGenerator;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ 
+ /**
+  * A demo showing how to create an HTML image map for a 3D bar chart.
+  *
+  */
+ public class ImageMapDemo4 {
+ 
+     /**
+      * Default constructor.
+      */
+     public ImageMapDemo4() {
+         super();
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         // create a chart
+         final double[][] data = new double[][] {
+             {56.0, -12.0, 34.0, 76.0, 56.0, 100.0, 67.0, 45.0},
+             {37.0, 45.0, 67.0, 25.0, 34.0, 34.0, 100.0, 53.0},
+             {43.0, 54.0, 34.0, 34.0, 87.0, 64.0, 73.0, 12.0}
+         };
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Series ", "Type ", data
+         );
+ 
+         JFreeChart chart = null;
+         final boolean drilldown = true;
+ 
+         if (drilldown) {
+             final CategoryAxis3D categoryAxis = new CategoryAxis3D("Category");
+             final ValueAxis valueAxis = new NumberAxis3D("Value");
+             final BarRenderer3D renderer = new BarRenderer3D();
+             renderer.setToolTipGenerator(new StandardCategoryToolTipGenerator());
+             renderer.setItemURLGenerator(new StandardCategoryURLGenerator("bar_chart_detail.jsp"));
+             final CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
+             plot.setOrientation(PlotOrientation.VERTICAL);
+             chart = new JFreeChart("Bar Chart", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+         }
+         else {
+             chart = ChartFactory.createBarChart3D(
+                 "Bar Chart",           // chart title
+                 "Category",            // domain axis label
+                 "Value",               // range axis label
+                 dataset,               // data
+                 PlotOrientation.VERTICAL,
+                 true,                  // include legend
+                 true,
+                 false
+             );
+         }
+         chart.setBackgroundPaint(java.awt.Color.white);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // save it to an image
+         try {
+             final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
+             final File file1 = new File("barchart101.png");
+             ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);
+ 
+             // write an HTML page incorporating the image with an image map
+             final File file2 = new File("barchart101.html");
+             final OutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
+             final PrintWriter writer = new PrintWriter(out);
+             writer.println("<HTML>");
+             writer.println("<HEAD><TITLE>JFreeChart Image Map Demo</TITLE></HEAD>");
+             writer.println("<BODY>");
+             ChartUtilities.writeImageMap(writer, "chart", info);
+             writer.println("<IMG SRC=\"barchart100.png\" "
+                            + "WIDTH=\"600\" HEIGHT=\"400\" BORDER=\"0\" USEMAP=\"#chart\">");
+             writer.println("</BODY>");
+             writer.println("</HTML>");
+             writer.close();
+ 
+         }
+         catch (IOException e) {
+             System.out.println(e.toString());
+         }
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo5.java jfreechart/source/org/jfree/chart/demo/ImageMapDemo5.java
*** jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo5.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ImageMapDemo5.java	2004-11-07 15:56:42.000000000 +0100
***************
*** 0 ****
--- 1,208 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * ImageMapDemo5.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ImageMapDemo5.java,v 1.7 2004/04/30 08:09:44 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 22-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.io.BufferedOutputStream;
+ import java.io.File;
+ import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.OutputStream;
+ import java.io.PrintWriter;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartRenderingInfo;
+ import org.jfree.chart.ChartUtilities;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.entity.StandardEntityCollection;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.RectangleEdge;
+ import org.jfree.ui.Spacer;
+ import org.jfree.ui.VerticalAlignment;
+ 
+ /**
+  * Creates an HTML image map for an area chart.  This demo was put together as a test for
+  * bug report 815817.
+  *
+  */
+ public class ImageMapDemo5 {
+ 
+     /**
+      * Default constructor.
+      */
+     public ImageMapDemo5() {
+         super();
+     }
+     
+     /**
+      * Saves the chart image and HTML.
+      */
+     public void saveImageAndHTML() {
+         
+         // create a dataset
+         final double[][] data = new double[][] {
+                 {56.0, -12.0, 34.0, 76.0, 56.0, 100.0, 67.0, 45.0},
+                 {37.0, 45.0, 67.0, 25.0, 34.0, 34.0, 100.0, 53.0},
+                 {43.0, 54.0, 34.0, 34.0, 87.0, 64.0, 73.0, 12.0}
+         };
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Series ", "Type ", data
+         );
+ 
+         final JFreeChart chart = createChart(dataset);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // save it to an image
+         try {
+             final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
+             final File file1 = new File("areachart100.png");
+             ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);
+ 
+             // write an HTML page incorporating the image with an image map
+             final File file2 = new File("areachart100.html");
+             final OutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
+             final PrintWriter writer = new PrintWriter(out);
+             writer.println("<HTML>");
+             writer.println("<HEAD><TITLE>JFreeChart Image Map Demo</TITLE></HEAD>");
+             writer.println("<BODY>");
+             ChartUtilities.writeImageMap(writer, "chart", info);
+             writer.println("<IMG SRC=\"areachart100.png\" "
+                     + "WIDTH=\"600\" HEIGHT=\"400\" BORDER=\"0\" USEMAP=\"#chart\">");
+             writer.println("</BODY>");
+             writer.println("</HTML>");
+             writer.close();
+ 
+         }
+         catch (IOException e) {
+             System.out.println(e.toString());
+         }
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createAreaChart(
+             "Area Chart",             // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+         
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setAnchor(StandardLegend.SOUTH);
+ 
+         chart.setBackgroundPaint(Color.white);
+         final TextTitle subtitle = new TextTitle(
+             "An area chart demonstration.  We use this subtitle "
+             + " as an example of what happens when you get a really long title or subtitle."
+         );
+         subtitle.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         subtitle.setPosition(RectangleEdge.TOP);
+         subtitle.setSpacer(new Spacer(Spacer.RELATIVE, 0.05, 0.05, 0.05, 0.05));
+         subtitle.setVerticalAlignment(VerticalAlignment.BOTTOM);
+         chart.addSubtitle(subtitle);
+ 
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setForegroundAlpha(0.5f);
+         
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinesVisible(true);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinesVisible(true);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+         
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         rangeAxis.setLabelAngle(0 * Math.PI / 2.0);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final ImageMapDemo5 demo = new ImageMapDemo5();
+         demo.saveImageAndHTML();
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo6.java jfreechart/source/org/jfree/chart/demo/ImageMapDemo6.java
*** jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo6.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ImageMapDemo6.java	2004-11-07 15:56:37.000000000 +0100
***************
*** 0 ****
--- 1,175 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * ImageMapDemo6.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ImageMapDemo6.java,v 1.2 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 31-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ import java.io.BufferedOutputStream;
+ import java.io.File;
+ import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.OutputStream;
+ import java.io.PrintWriter;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartRenderingInfo;
+ import org.jfree.chart.ChartUtilities;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.entity.StandardEntityCollection;
+ import org.jfree.chart.labels.StandardPieItemLabelGenerator;
+ import org.jfree.chart.plot.MultiplePiePlot;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.util.TableOrder;
+ 
+ /**
+  * Creates an HTML image map for a multiple pie chart.
+  */
+ public class ImageMapDemo6 {
+ 
+     /**
+      * Default constructor.
+      */
+     public ImageMapDemo6() {
+         super();
+     }
+     
+     /**
+      * Saves the chart image and HTML.
+      */
+     public void saveImageAndHTML() {
+         
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // save it to an image
+         try {
+             final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
+             final File file1 = new File("multipiechart100.png");
+             ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);
+ 
+             // write an HTML page incorporating the image with an image map
+             final File file2 = new File("multipiechart100.html");
+             final OutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
+             final PrintWriter writer = new PrintWriter(out);
+             writer.println("<HTML>");
+             writer.println("<HEAD><TITLE>JFreeChart Image Map Demo</TITLE></HEAD>");
+             writer.println("<BODY>");
+             ChartUtilities.writeImageMap(writer, "chart", info);
+             writer.println("<IMG SRC=\"multipiechart100.png\" "
+                     + "WIDTH=\"600\" HEIGHT=\"400\" BORDER=\"0\" USEMAP=\"#chart\">");
+             writer.println("</BODY>");
+             writer.println("</HTML>");
+             writer.close();
+ 
+         }
+         catch (IOException e) {
+             System.out.println(e.toString());
+         }
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         final double[][] data = new double[][] {
+             {3.0, 4.0, 3.0, 5.0},
+             {5.0, 7.0, 6.0, 8.0},
+             {5.0, 7.0, 3.0, 8.0},
+             {1.0, 2.0, 3.0, 4.0},
+             {2.0, 3.0, 2.0, 3.0}
+         };
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Region ",
+             "Sales/Q",
+             data
+         );
+         return dataset;
+     }
+     /**
+      * Creates a sample chart with the given dataset.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         final JFreeChart chart = ChartFactory.createMultiplePieChart(
+             "Multiple Pie Chart",  // chart title
+             dataset,               // dataset
+             TableOrder.BY_ROW,
+             true,                  // include legend
+             true,
+             true
+         );
+         final MultiplePiePlot plot = (MultiplePiePlot) chart.getPlot();
+         final JFreeChart subchart = plot.getPieChart();
+         final PiePlot p = (PiePlot) subchart.getPlot();
+         p.setLabelGenerator(new StandardPieItemLabelGenerator("{0}"));
+         p.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         p.setInteriorGap(0.30);
+         
+         return chart;
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final ImageMapDemo6 demo = new ImageMapDemo6();
+         demo.saveImageAndHTML();
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo7.java jfreechart/source/org/jfree/chart/demo/ImageMapDemo7.java
*** jfreechart-orig/source/org/jfree/chart/demo/ImageMapDemo7.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ImageMapDemo7.java	2004-11-07 15:56:31.000000000 +0100
***************
*** 0 ****
--- 1,137 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * ImageMapDemo7.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ImageMapDemo7.java,v 1.2 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 21-Apr-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.io.BufferedOutputStream;
+ import java.io.File;
+ import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.OutputStream;
+ import java.io.PrintWriter;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartRenderingInfo;
+ import org.jfree.chart.ChartUtilities;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.entity.StandardEntityCollection;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.xy.XYDataset;
+ 
+ /**
+  * A demo showing how to create an HTML image map for a scatter plot.
+  *
+  */
+ public class ImageMapDemo7 {
+ 
+     /**
+      * Default constructor.
+      */
+     public ImageMapDemo7() {
+         super();
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYDataset data = new SampleXYDataset2();
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Scatter Plot Demo",
+             "X", "Y", 
+             data, 
+             PlotOrientation.VERTICAL,
+             true, 
+             true, 
+             false
+         );
+         final Legend legend = chart.getLegend();
+         if (legend instanceof StandardLegend) {
+             final StandardLegend sl = (StandardLegend) legend;
+             sl.setDisplaySeriesShapes(true);
+         }
+         final NumberAxis domainAxis = (NumberAxis) chart.getXYPlot().getDomainAxis();
+         domainAxis.setAutoRangeIncludesZero(false);
+         chart.setBackgroundPaint(java.awt.Color.white);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // save it to an image
+         try {
+             final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
+             final File file1 = new File("scatter100.png");
+             ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);
+ 
+             // write an HTML page incorporating the image with an image map
+             final File file2 = new File("scatter100.html");
+             final OutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
+             final PrintWriter writer = new PrintWriter(out);
+             writer.println("<HTML>");
+             writer.println("<HEAD><TITLE>JFreeChart Image Map Demo</TITLE></HEAD>");
+             writer.println("<BODY>");
+             ChartUtilities.writeImageMap(writer, "chart", info);
+             writer.println("<IMG SRC=\"scatter100.png\" "
+                            + "WIDTH=\"600\" HEIGHT=\"400\" BORDER=\"0\" USEMAP=\"#chart\">");
+             writer.println("</BODY>");
+             writer.println("</HTML>");
+             writer.close();
+ 
+         }
+         catch (IOException e) {
+             System.out.println(e.toString());
+         }
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/InternalFrameDemo.java jfreechart/source/org/jfree/chart/demo/InternalFrameDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/InternalFrameDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/InternalFrameDemo.java	2004-11-07 15:56:20.000000000 +0100
***************
*** 0 ****
--- 1,193 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * InternalFrameDemo.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: InternalFrameDemo.java,v 1.9 2004/04/30 08:10:12 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 29-Jul-2003 : Version 1 (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Dimension;
+ 
+ import javax.swing.JDesktopPane;
+ import javax.swing.JInternalFrame;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.RegularTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple internal frame demo.
+  * 
+  */
+ public class InternalFrameDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new instance of the demo.
+      * 
+      * @param title  the title.
+      */
+     public InternalFrameDemo(final String title) {
+         super(title);
+         final JDesktopPane desktopPane = new JDesktopPane();
+         desktopPane.setPreferredSize(new Dimension(600, 400));
+         final JInternalFrame frame1 = createFrame1();
+         desktopPane.add(frame1);
+         frame1.pack();
+         frame1.setVisible(true);
+         final JInternalFrame frame2 = createFrame2();
+         desktopPane.add(frame2);
+         frame2.pack();
+         frame2.setLocation(100, 200);
+         frame2.setVisible(true);
+         getContentPane().add(desktopPane);
+     }
+     
+     /**
+      * Creates an internal frame.
+      * 
+      * @return An internal frame.
+      */
+     private JInternalFrame createFrame1() {
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(34.0, "Series 1", "Category 1");
+         dataset.addValue(23.0, "Series 1", "Category 2");
+         dataset.addValue(54.0, "Series 1", "Category 3");
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart", 
+             "Category",
+             "Series",
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(200, 100));
+         final JInternalFrame frame = new JInternalFrame("Frame 1", true);
+         frame.getContentPane().add(chartPanel);
+         return frame;
+         
+     }
+     
+     /**
+      * Creates an internal frame.
+      * 
+      * @return An internal frame.
+      */
+     private JInternalFrame createFrame2() {
+         final XYDataset dataset1 = createDataset("Series 1", 100.0, new Minute(), 200);
+         
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Time Series Chart", 
+             "Time of Day", 
+             "Value",
+             dataset1, 
+             true, 
+             true, 
+             false
+         );
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(200, 100));
+         final JInternalFrame frame = new JInternalFrame("Frame 2", true);
+         frame.getContentPane().add(chartPanel);
+         return frame;
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @param name  the dataset name.
+      * @param base  the starting value.
+      * @param start  the starting period.
+      * @param count  the number of values to generate.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset(final String name, 
+                                     final double base, 
+                                     final RegularTimePeriod start, 
+                                     final int count) {
+ 
+         final TimeSeries series = new TimeSeries(name, start.getClass());
+         RegularTimePeriod period = start;
+         double value = base;
+         for (int i = 0; i < count; i++) {
+             series.add(period, value);    
+             period = period.next();
+             value = value * (1 + (Math.random() - 0.495) / 10.0);
+         }
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(series);
+ 
+         return dataset;
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * The starting point for the demo.
+      * 
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final InternalFrameDemo demo = new InternalFrameDemo("Internal Frame Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+         
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/IntervalBarChartDemo1.java jfreechart/source/org/jfree/chart/demo/IntervalBarChartDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/IntervalBarChartDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/IntervalBarChartDemo1.java	2004-11-07 15:56:15.000000000 +0100
***************
*** 0 ****
--- 1,164 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * IntervalBarChartDemo1.java
+  * --------------------------
+  * (C) Copyright 2002-2004, by Jeremy Bowman and Contributors.
+  *
+  * Original Author:  Jeremy Bowman.
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: IntervalBarChartDemo1.java,v 1.16 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 29-Apr-2002 : Version 1, contributed by Jeremy Bowman.  Name changed to
+  *               IntervalBarChartDemo, and the chart is displayed in a frame rather than
+  *               saved to a file (DG);
+  * 25-Jun-2002 : Removed unnecessary imports (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.text.DecimalFormat;
+ 
+ import org.jfree.chart.ChartFrame;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.NumberTickUnit;
+ import org.jfree.chart.labels.IntervalCategoryLabelGenerator;
+ import org.jfree.chart.labels.ItemLabelAnchor;
+ import org.jfree.chart.labels.ItemLabelPosition;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.IntervalBarRenderer;
+ import org.jfree.data.category.DefaultIntervalCategoryDataset;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * An interval bar chart.
+  *
+  * @author Jeremy Bowman
+  */
+ public class IntervalBarChartDemo1 {
+ 
+     /** The categories. */
+     private static final String[] CATEGORIES = {"1", "3", "5", "10", "20"};
+ 
+     /** The label font. */
+     private static Font labelFont = null;
+ 
+     /** The title font. */
+     private static Font titleFont = null;
+ 
+     /** The chart. */
+     private JFreeChart chart = null;
+ 
+     static {
+         labelFont = new Font("Helvetica", Font.PLAIN, 10);
+         titleFont = new Font("Helvetica", Font.BOLD, 14);
+     }
+ 
+     /**
+      * Creates a new demo.
+      */
+     public IntervalBarChartDemo1() {
+ 
+         DefaultIntervalCategoryDataset data = null;
+         final double[][] lows = {{-.0315, .0159, .0306, .0453, .0557}};
+         final double[][] highs = {{.1931, .1457, .1310, .1163, .1059}};
+         data = new DefaultIntervalCategoryDataset(lows, highs);
+         data.setCategoryKeys(CATEGORIES);
+ 
+         final String title = "Strategie Sicherheit";
+         final String xTitle = "Zeitraum (in Jahren)";
+         final String yTitle = "Performance";
+         final CategoryAxis xAxis = new CategoryAxis(xTitle);
+         xAxis.setLabelFont(titleFont);
+         xAxis.setTickLabelFont(labelFont);
+         xAxis.setTickMarksVisible(false);
+         final NumberAxis yAxis = new NumberAxis(yTitle);
+         yAxis.setLabelFont(titleFont);
+         yAxis.setTickLabelFont(labelFont);
+         yAxis.setRange(-0.2, 0.40);
+         final DecimalFormat formatter = new DecimalFormat("0.##%");
+         yAxis.setTickUnit(new NumberTickUnit(0.05, formatter));
+ 
+         final IntervalBarRenderer renderer = new IntervalBarRenderer();
+         renderer.setSeriesPaint(0, new Color(51, 102, 153));
+         renderer.setLabelGenerator(new IntervalCategoryLabelGenerator());
+         renderer.setItemLabelsVisible(true);
+         renderer.setItemLabelPaint(Color.white);
+         final ItemLabelPosition p = new ItemLabelPosition(
+             ItemLabelAnchor.CENTER, TextAnchor.CENTER
+         );
+         renderer.setPositiveItemLabelPosition(p);
+         
+         final CategoryPlot plot = new CategoryPlot(data, xAxis, yAxis, renderer);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setOutlinePaint(Color.white);
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         
+         this.chart = new JFreeChart(title, titleFont, plot, false);
+         this.chart.setBackgroundPaint(Color.white);
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Returns the chart.
+      *
+      * @return the chart.
+      */
+     public JFreeChart getChart() {
+         return this.chart;
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final IntervalBarChartDemo1 sample = new IntervalBarChartDemo1();
+         final JFreeChart chart = sample.getChart();
+         final ChartFrame frame = new ChartFrame("Interval Bar Chart Demo", chart);
+         frame.pack();
+         frame.setVisible(true);
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ItemLabelDemo1.java jfreechart/source/org/jfree/chart/demo/ItemLabelDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/ItemLabelDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ItemLabelDemo1.java	2004-11-07 15:56:10.000000000 +0100
***************
*** 0 ****
--- 1,196 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * ItemLabelDemo1.java
+  * -------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ItemLabelDemo1.java,v 1.5 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 19-Feb-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Dimension;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.CategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demo showing a label generator that only displays labels for items 
+  * with a value that is greater than some threshold.
+  */
+ public class ItemLabelDemo1 extends ApplicationFrame {
+ 
+     /**
+      * A custom label generator.
+      */
+     static class LabelGenerator implements CategoryLabelGenerator {
+ 
+         /** The threshold. */
+         private double threshold;
+         
+         /**
+          * Creates a new generator that only displays labels that are greater 
+          * than or equal to the threshold value.
+          * 
+          * @param threshold  the threshold value.
+          */
+         public LabelGenerator(final double threshold) {
+             this.threshold = threshold;
+         }
+ 
+         /**
+          * Generates a label for the specified item. The label is typically a 
+          * formatted version of the data value, but any text can be used.
+          *
+          * @param dataset  the dataset (<code>null</code> not permitted).
+          * @param series  the series index (zero-based).
+          * @param category  the category index (zero-based).
+          *
+          * @return the label (possibly <code>null</code>).
+          */
+         public String generateLabel(final CategoryDataset dataset,
+                                     final int series,
+                                     final int category) {
+             
+             String result = null;
+             final Number value = dataset.getValue(series, category);
+             if (value != null) {
+                 final double v = value.doubleValue();
+                 if (v > this.threshold) {
+                     result = value.toString();  // could apply formatting here
+                 }
+             }
+             return result;
+             
+         }
+         
+     }
+     
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public ItemLabelDemo1(final String title) {
+         
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         setContentPane(chartPanel);
+         
+     }
+ 
+     /**
+      * Returns a sample dataset.
+      * 
+      * @return the dataset.
+      */
+     private CategoryDataset createDataset() {
+        
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(11.0, "S1", "C1");
+         dataset.addValue(44.3, "S1", "C2");
+         dataset.addValue(93.0, "S1", "C3");
+         dataset.addValue(35.6, "S1", "C4");
+         dataset.addValue(75.1, "S1", "C5");
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return the chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Item Label Demo 1",      // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             false,                    // include legend
+             true,                     // tooltips?
+             false                     // URLs?
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+ 
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setUpperMargin(0.15);
+         
+         final CategoryItemRenderer renderer = plot.getRenderer();
+         renderer.setLabelGenerator(new LabelGenerator(50.0));
+         renderer.setItemLabelsVisible(true);
+         
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ItemLabelDemo1 demo = new ItemLabelDemo1("Item Label Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ItemLabelDemo2.java jfreechart/source/org/jfree/chart/demo/ItemLabelDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/ItemLabelDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ItemLabelDemo2.java	2004-11-07 15:58:52.000000000 +0100
***************
*** 0 ****
--- 1,250 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * ItemLabelDemo2.java
+  * -------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ItemLabelDemo2.java,v 1.7 2004/05/10 16:45:24 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 19-Feb-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.text.NumberFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.CategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demo showing a label generator that displays labels that include 
+  * a percentage calculation.
+  */
+ public class ItemLabelDemo2 extends ApplicationFrame {
+ 
+     /**
+      * A custom label generator.
+      */
+     static class LabelGenerator implements CategoryLabelGenerator {
+ 
+         /** 
+          * The index of the category on which to base the percentage 
+          * (null = use series total). 
+          */
+         private Integer category;
+         
+         /** A percent formatter. */
+         private NumberFormat formatter = NumberFormat.getPercentInstance();
+ 
+         /**
+          * Creates a new label generator that displays the item value and a 
+          * percentage relative to the value in the same series for the 
+          * specified category.
+          * 
+          * @param category  the category index (zero-based).
+          */
+         public LabelGenerator(final int category) {
+             this(new Integer(category));
+         }
+         
+         /**
+          * Creates a new label generator that displays the item value and 
+          * a percentage relative to the value in the same series for the 
+          * specified category.  If the category index is <code>null</code>, 
+          * the total of all items in the series is used.
+          * 
+          * @param category  the category index (<code>null</code> permitted).
+          */
+         public LabelGenerator(final Integer category) {
+             this.category = category;
+         }
+ 
+         /**
+          * Generates a label for the specified item. The label is typically 
+          * a formatted version of the data value, but any text can be used.
+          *
+          * @param dataset  the dataset (<code>null</code> not permitted).
+          * @param series  the series index (zero-based).
+          * @param category  the category index (zero-based).
+          *
+          * @return the label (possibly <code>null</code>).
+          */
+         public String generateLabel(final CategoryDataset dataset,
+                                     final int series,
+                                     final int category) {
+             
+             String result = null;
+             double base = 0.0;
+             if (this.category != null) {
+                 final Number b = dataset.getValue(series, this.category.intValue());
+                 base = b.doubleValue();
+             }
+             else {
+                 base = calculateSeriesTotal(dataset, series);
+             }
+             final Number value = dataset.getValue(series, category);
+             if (value != null) {
+                 final double v = value.doubleValue();
+                 // you could apply some formatting here
+                 result = value.toString() 
+                        + " (" + this.formatter.format(v / base) + ")";  
+             }
+             return result;
+             
+         }
+         
+         /**
+          * Calculates a series total.
+          * 
+          * @param dataset  the dataset.
+          * @param series  the series index.
+          * 
+          * @return The total.
+          */
+         private double calculateSeriesTotal(final CategoryDataset dataset, final int series) {
+             double result = 0.0;
+             for (int i = 0; i < dataset.getColumnCount(); i++) {
+                 final Number value = dataset.getValue(series, i);
+                 if (value != null) {
+                     result = result + value.doubleValue();
+                 }
+             }
+             return result;
+         }
+         
+     }
+     
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public ItemLabelDemo2(final String title) {
+         
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         setContentPane(chartPanel);
+         
+     }
+ 
+     /**
+      * Returns a sample dataset.
+      * 
+      * @return the dataset.
+      */
+     private CategoryDataset createDataset() {
+        
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(100.0, "S1", "C1");
+         dataset.addValue(44.3, "S1", "C2");
+         dataset.addValue(93.0, "S1", "C3");
+         dataset.addValue(80.0, "S2", "C1");
+         dataset.addValue(75.1, "S2", "C2");
+         dataset.addValue(15.1, "S2", "C3");
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return the chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Item Label Demo 2",        // chart title
+             "Category",                 // domain axis label
+             "Value",                    // range axis label
+             dataset,                    // data
+             PlotOrientation.HORIZONTAL, // orientation
+             true,                       // include legend
+             true,                       // tooltips?
+             false                       // URLs?
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+ 
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
+         
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setUpperMargin(0.25);
+         
+         final CategoryItemRenderer renderer = plot.getRenderer();
+         renderer.setItemLabelsVisible(true);
+         
+         // use one or the other of the following lines to see the different modes for
+         // the label generator...
+         renderer.setLabelGenerator(new LabelGenerator(null));
+         //renderer.setLabelGenerator(new LabelGenerator(0));
+         
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ItemLabelDemo2 demo = new ItemLabelDemo2("Item Label Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/JFreeChartAppletDemo.java jfreechart/source/org/jfree/chart/demo/JFreeChartAppletDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/JFreeChartAppletDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/JFreeChartAppletDemo.java	2004-11-07 15:58:47.000000000 +0100
***************
*** 0 ****
--- 1,103 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * JFreeChartAppletDemo.java
+  * -------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: JFreeChartAppletDemo.java,v 1.10 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 11-Feb-2002 : Version 1 (DG);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import javax.swing.JApplet;
+ import javax.swing.JTabbedPane;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.xy.XYDataset;
+ 
+ /**
+  * A simple applet containing two sample charts in a JTabbedPane.
+  *
+  */
+ public class JFreeChartAppletDemo extends JApplet {
+ 
+     /**
+      * Constructs the demo applet.
+      */
+     public JFreeChartAppletDemo() {
+ 
+         final JTabbedPane tabs = new JTabbedPane();
+ 
+         final XYDataset data1 = DemoDatasetFactory.createTimeSeriesCollection1();
+         final JFreeChart chart1 = ChartFactory.createTimeSeriesChart(
+             "Time Series", 
+             "Date", 
+             "Rate",
+             data1, 
+             true, 
+             true, 
+             false
+         );
+         final ChartPanel panel1 = new ChartPanel(
+             chart1, 400, 300, 200, 100, 400, 200,
+             true, false, false, false, true, true
+         );
+         tabs.add("Chart 1", panel1);
+ 
+         final CategoryDataset data2 = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart2 = ChartFactory.createBarChart(
+             "Bar Chart",
+             "Categories", 
+             "Value",
+             data2,
+             PlotOrientation.HORIZONTAL,
+             true,
+             true,
+             false
+         );
+         final ChartPanel panel2 = new ChartPanel(
+             chart2, 400, 300, 200, 100, 400, 200,
+             true, false, false, false, true, true
+         );
+         tabs.add("Chart 2", panel2);
+ 
+         getContentPane().add(tabs);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/JFreeChartDemoBase.java jfreechart/source/org/jfree/chart/demo/JFreeChartDemoBase.java
*** jfreechart-orig/source/org/jfree/chart/demo/JFreeChartDemoBase.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/JFreeChartDemoBase.java	2004-11-07 15:58:41.000000000 +0100
***************
*** 0 ****
--- 1,1680 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * JFreeChartDemoBase.java
+  * -----------------------
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Andrzej Porebski;
+  *                   Matthew Wright;
+  *                   Serge V. Grachov;
+  *                   Bill Kelemen;
+  *                   Achilleus Mantzios;
+  *                   Bryan Scott;
+  *                   Robert Redburn;
+  *
+  * $Id: JFreeChartDemoBase.java,v 1.41 2004/05/24 16:14:52 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 27-Jul-2002 : Created (BRS);
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 19-Jan-2004 : Added createWaferMapChart(), createWaferMapChartValueIndexed(),
+  *                 createWaferMapChartPositionIndexed() methods (RR);
+  * 25-Feb-2004 : Renamed XYToolTipGenerator --> XYItemLabelGenerator (DG);
+  * 27-Apr-2004 : Modified for changes to XYPlot class (DG);
+  * 27-Apr-2004 : added createPieChartThree for comparable pie dataset (Benoit Xhenseval)
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.awt.GradientPaint;
+ import java.lang.reflect.Method;
+ import java.text.DecimalFormat;
+ import java.text.NumberFormat;
+ import java.text.SimpleDateFormat;
+ import java.util.Calendar;
+ import java.util.Date;
+ import java.util.ResourceBundle;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.LogarithmicAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.HighLowItemLabelGenerator;
+ import org.jfree.chart.labels.StandardPieItemLabelGenerator;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.CombinedDomainXYPlot;
+ import org.jfree.chart.plot.CombinedRangeXYPlot;
+ import org.jfree.chart.plot.CompassPlot;
+ import org.jfree.chart.plot.DialShape;
+ import org.jfree.chart.plot.MeterPlot;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.chart.plot.Plot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.ThermometerPlot;
+ import org.jfree.chart.plot.WaferMapPlot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.WaferMapRenderer;
+ import org.jfree.chart.renderer.xy.HighLowRenderer;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.IntervalCategoryDataset;
+ import org.jfree.data.gantt.Task;
+ import org.jfree.data.gantt.TaskSeries;
+ import org.jfree.data.gantt.TaskSeriesCollection;
+ import org.jfree.data.general.CombinedDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.data.general.DefaultValueDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.data.general.SubSeriesDataset;
+ import org.jfree.data.general.WaferMapDataset;
+ import org.jfree.data.time.MovingAverage;
+ import org.jfree.data.time.SimpleTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.DefaultHighLowDataset;
+ import org.jfree.data.xy.SignalsDataset;
+ import org.jfree.data.xy.WindDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.HorizontalAlignment;
+ import org.jfree.ui.RectangleEdge;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A simple class that allows the swing and servlet chart demonstrations
+  * to share chart generating code.
+  *
+  * If you would like to add a chart to the swing and/or servlet demo do so here.
+  *
+  */
+ public class JFreeChartDemoBase {
+ 
+     /**
+      * CHART_COMMANDS holds information on charts that can be created
+      * Format is
+      *   Name, Creation Method, Resource file prefix
+      *
+      * Steps To add a chart
+      * 1) Create a createChart method which returns a JFreeChart
+      * 2) Append details to CHART_COMMANDS
+      * 3) Append details to DemoResources
+      */
+     public static final String[][] CHART_COMMANDS = {
+         {"HORIZONTAL_BAR_CHART", "createHorizontalBarChart", "chart1"},
+         {"HORIZONTAL_STACKED_BAR_CHART", "createStackedHorizontalBarChart", "chart2"},
+         {"VERTICAL_BAR_CHART", "createVerticalBarChart", "chart3"},
+         {"VERTICAL_3D_BAR_CHART", "createVertical3DBarChart", "chart4"},
+         {"VERTICAL_STACKED_BAR_CHART", "createVerticalStackedBarChart", "chart5"},
+         {"VERTICAL_STACKED_3D_BAR_CHART", "createVerticalStacked3DBarChart", "chart6"},
+         {"PIE_CHART_1", "createPieChartOne", "chart7"},
+         {"PIE_CHART_2", "createPieChartTwo", "chart8"},
+         {"PIE_CHART_3", "createPieChartThree", "chart39"},
+         {"XY_PLOT", "createXYPlot", "chart9"},
+         {"TIME_SERIES_1_CHART", "createTimeSeries1Chart", "chart10"},
+         {"TIME_SERIES_2_CHART", "createTimeSeries2Chart", "chart11"},
+         {"TIME_SERIES_WITH_MA_CHART", "createTimeSeriesWithMAChart", "chart12"},
+         {"HIGH_LOW_CHART", "createHighLowChart", "chart13"},
+         {"CANDLESTICK_CHART", "createCandlestickChart", "chart14"},
+         {"SIGNAL_CHART", "createSignalChart", "chart15"},
+         {"WIND_PLOT", "createWindPlot", "chart16"},
+         {"SCATTER_PLOT", "createScatterPlot", "chart17"},
+         {"LINE_CHART", "createLineChart", "chart18"},
+         {"VERTICAL_XY_BAR_CHART", "createVerticalXYBarChart", "chart19"},
+         {"XY_PLOT_NULL", "createNullXYPlot", "chart20"},
+         {"XY_PLOT_ZERO", "createXYPlotZeroData", "chart21"},
+         {"TIME_SERIES_CHART_SCROLL", "createTimeSeriesChartInScrollPane", "chart22"},
+         {"SINGLE_SERIES_BAR_CHART", "createSingleSeriesBarChart", "chart23"},
+         {"DYNAMIC_CHART", "createDynamicXYChart", "chart24"},
+         {"OVERLAID_CHART", "createOverlaidChart", "chart25"},
+         {"HORIZONTALLY_COMBINED_CHART", "createHorizontallyCombinedChart", "chart26"},
+         {"VERTICALLY_COMBINED_CHART", "createVerticallyCombinedChart", "chart27"},
+         {"COMBINED_OVERLAID_CHART", "createCombinedAndOverlaidChart1", "chart28"},
+         {"COMBINED_OVERLAID_DYNAMIC_CHART", "createCombinedAndOverlaidDynamicXYChart", "chart29"},
+         {"THERMOMETER_CHART", "createThermometerChart", "chart30"},
+         {"METER_CHART", "createMeterChartCircle", "chart31"},
+         {"GANTT_CHART", "createGanttChart", "chart32"},
+         {"METER_CHART2", "createMeterChartPie", "chart33"},
+         {"METER_CHART3", "createMeterChartChord", "chart34"},
+         {"COMPASS_CHART", "createCompassChart", "chart35"},
+         {"WAFERMAP_CHART", "createWaferMapChart", "chart36"},
+         {"WAFERMAP_VALUE_CHART", "createWaferMapChartValueIndexed", "chart37"},
+         {"WAFERMAP_POSITION_CHART", "createWaferMapChartPositionIndexed", "chart38"},
+     };
+ 
+     /** Base class name for localised resources. */
+     public static final String BASE_RESOURCE_CLASS
+         = "org.jfree.chart.demo.resources.DemoResources";
+ 
+     /** Localised resources. */
+     private ResourceBundle resources;
+ 
+     /** An array of charts. */
+     private JFreeChart[] charts = new JFreeChart[CHART_COMMANDS.length];
+ 
+     /**
+      * Default constructor.
+      */
+     public JFreeChartDemoBase() {
+         this.resources = ResourceBundle.getBundle(BASE_RESOURCE_CLASS);
+     }
+ 
+     /**
+      * Returns a chart.
+      *
+      * @param i  the chart index.
+      *
+      * @return a chart.
+      */
+     public JFreeChart getChart(int i) {
+ 
+         if ((i < 0) && (i >= this.charts.length)) {
+             i = 0;
+         }
+ 
+         if (this.charts[i] == null) {
+             /// Utilise reflection to invoke method to create new chart if required.
+             try {
+                 final Method method = getClass().getDeclaredMethod(CHART_COMMANDS[i][1], null);
+                 this.charts[i] = (JFreeChart) method.invoke(this, null);
+             }
+             catch (Exception ex) {
+                 ex.printStackTrace();
+             }
+         }
+         return this.charts[i];
+     }
+ 
+     /**
+      * This makes the resources bundle available.  Basically an optimisation so
+      * the demo servlet can access the same resource file.
+      * @return the resources bundle.
+      */
+     public ResourceBundle getResources() {
+       return this.resources;
+     }
+ 
+     /**
+      * Create a horizontal bar chart.
+      *
+      * @return a horizontal bar chart.
+      */
+     public JFreeChart createHorizontalBarChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("bar.horizontal.title");
+         final String domain = this.resources.getString("bar.horizontal.domain");
+         final String range = this.resources.getString("bar.horizontal.range");
+ 
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart = ChartFactory.createBarChart(title, domain, range, data,
+                                                        PlotOrientation.HORIZONTAL,
+                                                        true,
+                                                        true,
+                                                        false);
+ 
+         // then customise it a little...
+         chart.getLegend().setAnchor(Legend.EAST);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.orange));
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setRangeCrosshairVisible(false);
+         final NumberAxis axis = (NumberAxis) plot.getRangeAxis();
+         axis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         axis.setInverted(true);
+ 
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample stacked horizontal bar chart.
+      *
+      * @return a sample stacked horizontal bar chart.
+      */
+     public JFreeChart createStackedHorizontalBarChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("bar.horizontal-stacked.title");
+         final String domain = this.resources.getString("bar.horizontal-stacked.domain");
+         final String range = this.resources.getString("bar.horizontal-stacked.range");
+ 
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart = ChartFactory.createStackedBarChart(title, domain, range,
+                                                               data,
+                                                               PlotOrientation.HORIZONTAL,
+                                                               true,
+                                                               true,
+                                                               false);
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample vertical bar chart.
+      *
+      * @return a sample vertical bar chart.
+      */
+     public JFreeChart createVerticalBarChart() {
+ 
+         final String title = this.resources.getString("bar.vertical.title");
+         final String domain = this.resources.getString("bar.vertical.domain");
+         final String range = this.resources.getString("bar.vertical.range");
+ 
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart = ChartFactory.createBarChart(title, domain, range, data,
+                                                        PlotOrientation.VERTICAL,
+                                                        true,
+                                                        true,
+                                                        false);
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         plot.setForegroundAlpha(0.9f);
+         final NumberAxis verticalAxis = (NumberAxis) plot.getRangeAxis();
+         verticalAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         return chart;
+     }
+ 
+     /**
+      * Creates and returns a sample vertical 3D bar chart.
+      *
+      * @return a sample vertical 3D bar chart.
+      */
+     public JFreeChart createVertical3DBarChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("bar.vertical3D.title");
+         final String domain = this.resources.getString("bar.vertical3D.domain");
+         final String range = this.resources.getString("bar.vertical3D.range");
+ 
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart = ChartFactory.createBarChart3D(
+             title,
+             domain,
+             range, data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         plot.setForegroundAlpha(0.75f);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample stacked vertical bar chart.
+      *
+      * @return a sample stacked vertical bar chart.
+      */
+     public JFreeChart createVerticalStackedBarChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("bar.vertical-stacked.title");
+         final String domain = this.resources.getString("bar.vertical-stacked.domain");
+         final String range = this.resources.getString("bar.vertical-stacked.range");
+ 
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart
+             = ChartFactory.createStackedBarChart(title, domain, range, data,
+                                                  PlotOrientation.VERTICAL,
+                                                  true,
+                                                  true,
+                                                  false);
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample stacked vertical 3D bar chart.
+      *
+      * @return a sample stacked vertical 3D bar chart.
+      */
+     public JFreeChart createVerticalStacked3DBarChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("bar.vertical-stacked3D.title");
+         final String domain = this.resources.getString("bar.vertical-stacked3D.domain");
+         final String range = this.resources.getString("bar.vertical-stacked3D.range");
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart = ChartFactory.createStackedBarChart3D(title, domain, range, data,
+                                                                 PlotOrientation.VERTICAL,
+                                                                 true, true, false);
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample pie chart.
+      *
+      * @return a sample pie chart.
+      */
+     public JFreeChart createPieChartOne() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("pie.pie1.title");
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final PieDataset extracted = DatasetUtilities.createPieDatasetForRow(data, 0);
+         final JFreeChart chart = ChartFactory.createPieChart(title, extracted, true, true, false);
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.orange));
+         final PiePlot plot = (PiePlot) chart.getPlot();
+         plot.setCircular(false);
+         // make section 1 explode by 100%...
+         plot.setExplodePercent(1, 1.00);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample pie chart.
+      *
+      * @return a sample pie chart.
+      */
+     public JFreeChart createPieChartTwo() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("pie.pie2.title");
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final Comparable category = (Comparable) data.getColumnKeys().get(1);
+         final PieDataset extracted = DatasetUtilities.createPieDatasetForColumn(data, category);
+         final JFreeChart chart = ChartFactory.createPieChart(title, extracted, true, true, false);
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(Color.lightGray);
+         final PiePlot pie = (PiePlot) chart.getPlot();
+         pie.setLabelGenerator(new StandardPieItemLabelGenerator(
+             "{0} = {2}", NumberFormat.getNumberInstance(), NumberFormat.getPercentInstance()
+         ));
+         pie.setBackgroundImage(JFreeChart.INFO.getLogo());
+         pie.setBackgroundPaint(Color.white);
+         pie.setBackgroundAlpha(0.6f);
+         pie.setForegroundAlpha(0.75f);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample pie chart which compares 2 datasets.
+      *
+      * @return a sample pie chart.
+      * @author <a href="mailto:opensource@objectlab.co.uk">Benoit Xhenseval</a>
+      * @since 0.9.18
+      */
+     public JFreeChart createPieChartThree() {
+ 
+         // create a default chart based on some sample data...
+         String title = this.resources.getString("pie.pie3.title");
+ 
+         final double[][] data = new double[][]
+             {{10.0, 4.0, 14.0, 12.0, 12.0},
+              {9.0, 7.0, 13.7, 15.0, 3.0}};
+ 
+         CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Series ", "Category ", data
+         );
+ 
+         PieDataset extracted = DatasetUtilities.createPieDatasetForRow(dataset, 0);
+         PieDataset extracted2 = DatasetUtilities.createPieDatasetForRow(dataset, 1);
+ 
+         // generate a basic pie chart with title
+         // comparing extracted with extracted2
+         // a difference of 40% or more will trigger maximum brightness in red or green
+         // true green is for increase
+         // true for legend
+         // true for tooltips
+         // false for urls
+         // true for subtitle
+         // true for showing the difference
+         JFreeChart chart = ChartFactory.createPieChart(
+             title, extracted, extracted2, 40, true, true, true, false, true, true
+         );
+ 
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample XY plot.
+      *
+      * @return a sample XY plot.
+      */
+     public JFreeChart createXYPlot() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("xyplot.sample1.title");
+         final String domain = this.resources.getString("xyplot.sample1.domain");
+         final String range = this.resources.getString("xyplot.sample1.range");
+         final XYDataset data = DemoDatasetFactory.createSampleXYDataset();
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             title,
+             domain, range, data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.green));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample time series chart.
+      *
+      * @return a sample time series chart.
+      */
+     public JFreeChart createTimeSeries1Chart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("timeseries.sample1.title");
+         final String subtitle = this.resources.getString("timeseries.sample1.subtitle");
+         final String domain = this.resources.getString("timeseries.sample1.domain");
+         final String range = this.resources.getString("timeseries.sample1.range");
+         final String copyrightStr = this.resources.getString("timeseries.sample1.copyright");
+         final XYDataset data = DemoDatasetFactory.createTimeSeriesCollection3();
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             title, domain, range, data, true, true, false
+         );
+ 
+         // then customise it a little...
+         final TextTitle title2 = new TextTitle(subtitle, new Font("SansSerif", Font.PLAIN, 12));
+         title2.setSpacer(new Spacer(Spacer.RELATIVE, 0.05, 0.05, 0.05, 0.0));
+         chart.addSubtitle(title2);
+ 
+         final TextTitle copyright = new TextTitle(
+             copyrightStr, new Font("SansSerif", Font.PLAIN, 9)
+         );
+         copyright.setPosition(RectangleEdge.BOTTOM);
+         copyright.setHorizontalAlignment(HorizontalAlignment.RIGHT);
+         chart.addSubtitle(copyright);
+ 
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         final XYPlot plot = chart.getXYPlot();
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setVerticalTickLabels(true);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample time series chart.
+      *
+      * @return a sample time series chart.
+      */
+     public JFreeChart createTimeSeries2Chart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("timeseries.sample2.title");
+         final String subtitleStr = this.resources.getString("timeseries.sample2.subtitle");
+         final String domain = this.resources.getString("timeseries.sample2.domain");
+         final String range = this.resources.getString("timeseries.sample2.range");
+         final XYDataset data = DemoDatasetFactory.createTimeSeriesCollection4();
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(title, domain, range, data,
+                                                               true, true, false);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         final XYPlot plot = chart.getXYPlot();
+         final LogarithmicAxis rangeAxis = new LogarithmicAxis(range);
+         plot.setRangeAxis(rangeAxis);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample time series chart.
+      *
+      * @return a sample time series chart.
+      */
+     public JFreeChart createTimeSeriesWithMAChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("timeseries.sample3.title");
+         final String domain = this.resources.getString("timeseries.sample3.domain");
+         final String range = this.resources.getString("timeseries.sample3.range");
+         final String subtitleStr = this.resources.getString("timeseries.sample3.subtitle");
+         final TimeSeries jpy = DemoDatasetFactory.createJPYTimeSeries();
+         final TimeSeries mav = MovingAverage.createMovingAverage(
+             jpy, "30 Day Moving Average", 30, 30
+         );
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(jpy);
+         dataset.addSeries(mav);
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(title, domain, range, dataset,
+                                                               true,
+                                                               true,
+                                                               false);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Displays a vertical bar chart in its own frame.
+      *
+      * @return a high low chart.
+      */
+     public JFreeChart createHighLowChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("timeseries.highlow.title");
+         final String domain = this.resources.getString("timeseries.highlow.domain");
+         final String range = this.resources.getString("timeseries.highlow.range");
+         final String subtitleStr = this.resources.getString("timeseries.highlow.subtitle");
+         final DefaultHighLowDataset data = DemoDatasetFactory.createHighLowDataset();
+         final JFreeChart chart = ChartFactory.createHighLowChart(title, domain, range, data, true);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.magenta));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a candlestick chart.
+      *
+      * @return a candlestick chart.
+      */
+     public JFreeChart createCandlestickChart() {
+ 
+       // create a default chart based on some sample data...
+       final String title = this.resources.getString("timeseries.candlestick.title");
+       final String domain = this.resources.getString("timeseries.candlestick.domain");
+       final String range = this.resources.getString("timeseries.candlestick.range");
+       final String subtitleStr = this.resources.getString("timeseries.candlestick.subtitle");
+       final DefaultHighLowDataset data = DemoDatasetFactory.createHighLowDataset();
+       final JFreeChart chart = ChartFactory.createCandlestickChart(
+           title, domain, range, data, false
+       );
+ 
+       // then customise it a little...
+       final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+       chart.addSubtitle(subtitle);
+       chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.green));
+       return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample signal chart.
+      *
+      * @return a sample chart.
+      */
+     public JFreeChart createSignalChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("timeseries.signal.title");
+         final String domain = this.resources.getString("timeseries.signal.domain");
+         final String range = this.resources.getString("timeseries.signal.range");
+         final String subtitleStr = this.resources.getString("timeseries.signal.subtitle");
+         final SignalsDataset data = DemoDatasetFactory.createSampleSignalDataset();
+         final JFreeChart chart = ChartFactory.createSignalChart(title, domain, range, data, true);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample thermometer chart.
+      *
+      * @return a sample thermometer chart.
+      */
+     public JFreeChart createThermometerChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("meter.thermo.title");
+         final String subtitleStr = this.resources.getString("meter.thermo.subtitle");
+         final String units = this.resources.getString("meter.thermo.units");
+ 
+         final DefaultValueDataset data = new DefaultValueDataset(new Double(34.0));
+         final ThermometerPlot plot = new ThermometerPlot(data);
+         plot.setUnits(units);
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, false);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample meter chart.
+      *
+      * @return a meter chart.
+      */
+     public JFreeChart createMeterChartCircle() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("meter.meter.title");
+         final String subtitleStr = this.resources.getString("meter.meter.subtitle");
+         //String units = resources.getString("meter.meter.units");
+         //DefaultMeterDataset data = DemoDatasetFactory.createMeterDataset();
+         final DefaultValueDataset data = new DefaultValueDataset(50.0);
+         //data.setUnits(units);
+         final MeterPlot plot = new MeterPlot(data);
+         plot.setMeterAngle(270);
+         plot.setDialShape(DialShape.CIRCLE);
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
+                                           plot, false);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+     }
+ 
+     /**
+      * Creates and returns a sample meter chart.
+      *
+      * @return a meter chart.
+      */
+     public JFreeChart createMeterChartPie() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("meter.meter.title");
+         final String subtitleStr = this.resources.getString("meter.meter.subtitle");
+         //String units = resources.getString("meter.meter.units");
+         //DefaultMeterDataset data = DemoDatasetFactory.createMeterDataset();
+         final DefaultValueDataset data = new DefaultValueDataset(50.0);
+         //data.setUnits(units);
+         final MeterPlot plot = new MeterPlot(data);
+         plot.setMeterAngle(270);
+         plot.setDialShape(DialShape.PIE);
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, false);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+     }
+ 
+     /**
+      * Creates and returns a sample meter chart.
+      *
+      * @return the meter chart.
+      */
+     public JFreeChart createMeterChartChord() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("meter.meter.title");
+         final String subtitleStr = this.resources.getString("meter.meter.subtitle");
+         //String units = resources.getString("meter.meter.units");
+         //DefaultMeterDataset data = DemoDatasetFactory.createMeterDataset();
+         final DefaultValueDataset data = new DefaultValueDataset(45.0);
+         //data.setUnits(units);
+         final MeterPlot plot = new MeterPlot(data);
+         plot.setMeterAngle(270);
+         plot.setDialShape(DialShape.CHORD);
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, false);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+     }
+ 
+     /**
+      * Creates a compass chart.
+      *
+      * @return a compass chart.
+      */
+     public JFreeChart createCompassChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("meter.compass.title");
+         final String subtitleStr = this.resources.getString("meter.compass.subtitle");
+         final DefaultValueDataset data = new DefaultValueDataset(new Double(45.0));
+ 
+         final Plot plot = new CompassPlot(data);
+         final JFreeChart chart = new JFreeChart(
+             title,
+             JFreeChart.DEFAULT_TITLE_FONT,
+             plot,
+             false
+         );
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+     }
+ 
+     /**
+      * Creates and returns a sample wind plot.
+      *
+      * @return a sample wind plot.
+      */
+     public JFreeChart createWindPlot() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("other.wind.title");
+         final String domain = this.resources.getString("other.wind.domain");
+         final String range = this.resources.getString("other.wind.range");
+         final WindDataset data = DemoDatasetFactory.createWindDataset1();
+         final JFreeChart chart = ChartFactory.createWindPlot(title, domain, range, data,
+                                                        true,
+                                                        false,
+                                                        false);
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.green));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample scatter plot.
+      *
+      * @return a sample scatter plot.
+      */
+     public JFreeChart createScatterPlot() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("other.scatter.title");
+         final String domain = this.resources.getString("other.scatter.domain");
+         final String range = this.resources.getString("other.scatter.range");
+         final XYDataset data = new SampleXYDataset2();
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             title,
+             domain,
+             range,
+             data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,  // tooltips
+             false  // urls
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.green));
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setDomainCrosshairVisible(true);
+         plot.setRangeCrosshairVisible(true);
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setAutoRangeIncludesZero(false);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample line chart.
+      *
+      * @return a line chart.
+      */
+     public JFreeChart createLineChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("other.line.title");
+         final String domain = this.resources.getString("other.line.domain");
+         final String range = this.resources.getString("other.line.range");
+         final CategoryDataset data = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart = ChartFactory.createLineChart(title, domain, range, data,
+                                                         PlotOrientation.VERTICAL,
+                                                         true,
+                                                         true,
+                                                         false);
+ 
+         // then customise it a little...
+         chart.setBackgroundImage(JFreeChart.INFO.getLogo());
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.green));
+ 
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         plot.setBackgroundAlpha(0.65f);
+         return chart;
+     }
+ 
+     /**
+      * Creates and returns a sample vertical XY bar chart.
+      *
+      * @return a sample vertical XY bar chart.
+      */
+     public JFreeChart createVerticalXYBarChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("other.xybar.title");
+         final String domain = this.resources.getString("other.xybar.domain");
+         final String range = this.resources.getString("other.xybar.range");
+         final TimeSeriesCollection data = DemoDatasetFactory.createTimeSeriesCollection1();
+         data.setDomainIsPointsInTime(false);
+         final JFreeChart chart = ChartFactory.createXYBarChart(
+             title,
+             domain,
+             true,
+             range,
+             data,
+             PlotOrientation.VERTICAL,
+             true,
+             false,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));
+ 
+         final XYItemRenderer renderer = chart.getXYPlot().getRenderer();
+         renderer.setToolTipGenerator(StandardXYToolTipGenerator.getTimeSeriesInstance());
+         return chart;
+     }
+ 
+     /**
+      * Creates and returns a sample XY chart with null data.
+      *
+      * @return a chart.
+      */
+     public JFreeChart createNullXYPlot() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("test.null.title");
+         final String domain = this.resources.getString("test.null.domain");
+         final String range = this.resources.getString("test.null.range");
+         final XYDataset data = null;
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             title, domain, range, data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a sample XY plot with an empty dataset.
+      *
+      * @return a sample XY plot with an empty dataset.
+      */
+     public JFreeChart createXYPlotZeroData() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("test.zero.title");
+         final String domain = this.resources.getString("test.zero.domain");
+         final String range = this.resources.getString("test.zero.range");
+         final XYDataset data = new EmptyXYDataset();
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             title, domain, range, data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));
+         return chart;
+     }
+ 
+     /**
+      * Creates and returns a sample time series chart that will be displayed in a scroll pane.
+      *
+      * @return a sample time series chart.
+      */
+     public JFreeChart createTimeSeriesChartInScrollPane() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("test.scroll.title");
+         final String domain = this.resources.getString("test.scroll.domain");
+         final String range = this.resources.getString("test.scroll.range");
+         final String subtitleStr = this.resources.getString("test.scroll.subtitle");
+         final XYDataset data = DemoDatasetFactory.createTimeSeriesCollection2();
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(title, domain, range, data,
+                                                               true,
+                                                               true,
+                                                               false);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.gray));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample bar chart with just one series.
+      *
+      * @return a sample bar chart.
+      */
+     public JFreeChart createSingleSeriesBarChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("test.single.title");
+         final String domain = this.resources.getString("test.single.domain");
+         final String range = this.resources.getString("test.single.range");
+         final String subtitle1Str = this.resources.getString("test.single.subtitle1");
+         final String subtitle2Str = this.resources.getString("test.single.subtitle2");
+ 
+         final CategoryDataset data = DemoDatasetFactory.createSingleSeriesCategoryDataset();
+ 
+         final JFreeChart chart = ChartFactory.createBarChart(title, domain, range, data,
+                                                        PlotOrientation.HORIZONTAL,
+                                                        true,
+                                                        true,
+                                                        false);
+         chart.addSubtitle(new TextTitle(subtitle1Str));
+         chart.addSubtitle(new TextTitle(subtitle2Str));
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.red));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Displays an XY chart that is periodically updated by a background thread.  This is to
+      * demonstrate the event notification system that automatically updates charts as required.
+      *
+      * @return a chart.
+      */
+     public JFreeChart createDynamicXYChart() {
+ 
+         final String title = this.resources.getString("test.dynamic.title");
+         final String domain = this.resources.getString("test.dynamic.domain");
+         final String range = this.resources.getString("test.dynamic.range");
+ 
+         final SampleXYDataset data = new SampleXYDataset();
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             title, domain, range, data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+         final SampleXYDatasetThread update = new SampleXYDatasetThread(data);
+ 
+         final Thread thread = new Thread(update);
+         thread.start();
+ 
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample overlaid chart.
+      * <P>
+      * Note:  with the introduction of multiple secondary datasets in JFreeChart version 0.9.10,
+      * the overlaid chart facility has been removed.  You can achieve the same results using
+      * a regular XYPlot with multiple datasets.
+      *
+      * @return an overlaid chart.
+      */
+     public JFreeChart createOverlaidChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("combined.overlaid.title");
+         final String subtitleStr = this.resources.getString("combined.overlaid.subtitle");
+         final String domainAxisLabel = this.resources.getString("combined.overlaid.domain");
+         final String rangeAxisLabel = this.resources.getString("combined.overlaid.range");
+ 
+         // create high-low and moving average dataset
+         final DefaultHighLowDataset highLowData = DemoDatasetFactory.createHighLowDataset();
+ 
+         // make an overlaid plot
+         final ValueAxis domainAxis = new DateAxis(domainAxisLabel);
+         final NumberAxis rangeAxis = new NumberAxis(rangeAxisLabel);
+         rangeAxis.setAutoRangeIncludesZero(false);
+         final XYItemRenderer renderer1 = new HighLowRenderer();
+         renderer1.setToolTipGenerator(new HighLowItemLabelGenerator());
+ 
+         final XYPlot plot = new XYPlot(highLowData, domainAxis, rangeAxis, renderer1);
+ 
+         // overlay a moving average dataset
+         final XYDataset maData = MovingAverage.createMovingAverage(
+             highLowData,
+             " (Moving Average)",
+             5 * 24 * 60 * 60 * 1000L,
+             5 * 24 * 60 * 60 * 1000L
+         );
+         plot.setDataset(1, maData);
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer();
+         renderer2.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0,000.0")
+             )
+         );
+         plot.setRenderer(1, renderer2);
+ 
+         // make the top level JFreeChart object
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a horizontally combined chart.
+      *
+      * @return a horizontally combined chart.
+      */
+     public JFreeChart createHorizontallyCombinedChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("combined.horizontal.title");
+         final String subtitleStr = this.resources.getString("combined.horizontal.subtitle");
+         final String[] domains = this.resources.getStringArray("combined.horizontal.domains");
+         final String rangeAxisLabel = this.resources.getString("combined.horizontal.range");
+ 
+         final TimeSeriesCollection dataset0 = new TimeSeriesCollection();
+         final TimeSeries eur = DemoDatasetFactory.createEURTimeSeries();
+         dataset0.addSeries(eur);
+ 
+         final TimeSeriesCollection dataset1 = new TimeSeriesCollection();
+         final TimeSeries mav = MovingAverage.createMovingAverage(
+             eur, "EUR/GBP (30 Day MA)", 30, 30
+         );
+         dataset1.addSeries(eur);
+         dataset1.addSeries(mav);
+ 
+         final TimeSeriesCollection dataset2 = new TimeSeriesCollection();
+         dataset2.addSeries(eur);
+ 
+         // make a combined range plot
+         final NumberAxis valueAxis = new NumberAxis(rangeAxisLabel);
+         valueAxis.setAutoRangeIncludesZero(false);  // override default
+         final CombinedRangeXYPlot parent = new CombinedRangeXYPlot(valueAxis);
+         parent.setRenderer(new StandardXYItemRenderer());
+ 
+         // add subplots
+         final int[] weight = {1, 1, 1}; // controls space assigned to each subplot
+ 
+         // add subplot 1...
+         final XYPlot subplot1 = new XYPlot(dataset0, new DateAxis(domains[0]), null,
+                                      new StandardXYItemRenderer());
+         parent.add(subplot1, weight[0]);
+ 
+         // add subplot 2...
+         final XYPlot subplot2 = new XYPlot(dataset1, new DateAxis(domains[1]), null,
+                                      new StandardXYItemRenderer());
+         parent.add(subplot2, weight[1]);
+ 
+         // add subplot 3...
+         final XYPlot subplot3 = new XYPlot(dataset2, new DateAxis(domains[2]),
+                                      null, new XYBarRenderer(0.20));
+         parent.add(subplot3, weight[2]);
+ 
+         // now make the top level JFreeChart
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, parent, true);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample vertically combined chart.
+      *
+      * @return a sample vertically combined chart.
+      */
+     public JFreeChart createVerticallyCombinedChart() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("combined.vertical.title");
+         final String subtitleStr = this.resources.getString("combined.vertical.subtitle");
+         final String domain = this.resources.getString("combined.vertical.domain");
+         final String[] ranges = this.resources.getStringArray("combined.vertical.ranges");
+ 
+ 
+         final TimeSeriesCollection dataset0 = new TimeSeriesCollection();
+         final TimeSeries eur = DemoDatasetFactory.createEURTimeSeries();
+         dataset0.addSeries(eur);
+ 
+         final TimeSeriesCollection dataset1 = new TimeSeriesCollection();
+         final TimeSeries jpy = DemoDatasetFactory.createJPYTimeSeries();
+         final TimeSeries mav = MovingAverage.createMovingAverage(
+             jpy, "JPY/GBP (30 Day MA)", 30, 30
+         );
+         dataset1.addSeries(jpy);
+         dataset1.addSeries(mav);
+ 
+         final XYDataset dataset2 = DemoDatasetFactory.createHighLowDataset();
+ 
+         final TimeSeriesCollection dataset3 = new TimeSeriesCollection();
+         dataset3.addSeries(eur);
+ 
+         // make one shared horizontal axis
+         final ValueAxis timeAxis = new DateAxis(domain);
+ 
+         // make a vertically CombinedPlot that will contain the sub-plots
+         final CombinedDomainXYPlot multiPlot = new CombinedDomainXYPlot(timeAxis);
+ 
+         final int[] weight = {1, 1, 1, 1}; // control vertical space allocated to each sub-plot
+ 
+         // add subplot1...
+         final XYPlot subplot1 = new XYPlot(dataset0, null, new NumberAxis(ranges[0]),
+                                      new StandardXYItemRenderer());
+         final NumberAxis range1 = (NumberAxis) subplot1.getRangeAxis();
+         range1.setTickLabelFont(new Font("Monospaced", Font.PLAIN, 7));
+         range1.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         range1.setAutoRangeIncludesZero(false);
+         multiPlot.add(subplot1, weight[0]);
+ 
+         // add subplot2...
+         final XYPlot subplot2 = new XYPlot(dataset1, null, new NumberAxis(ranges[1]),
+                                      new StandardXYItemRenderer());
+         final NumberAxis range2 = (NumberAxis) subplot2.getRangeAxis();
+         range2.setTickLabelFont(new Font("Monospaced", Font.PLAIN, 7));
+         range2.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         range2.setAutoRangeIncludesZero(false);
+         multiPlot.add(subplot2, weight[1]);
+ 
+         // add subplot3...
+         final XYPlot subplot3 = new XYPlot(dataset2, null, new NumberAxis(ranges[2]), null);
+         final XYItemRenderer renderer3 = new HighLowRenderer();
+         subplot3.setRenderer(renderer3);
+         final NumberAxis range3 = (NumberAxis) subplot3.getRangeAxis();
+         range3.setTickLabelFont(new Font("Monospaced", Font.PLAIN, 7));
+         range3.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         range3.setAutoRangeIncludesZero(false);
+         multiPlot.add(subplot3, weight[2]);
+ 
+         // add subplot4...
+         final XYPlot subplot4 = new XYPlot(dataset3, null, new NumberAxis(ranges[3]), null);
+         final XYItemRenderer renderer4 = new XYBarRenderer();
+         subplot4.setRenderer(renderer4);
+         final NumberAxis range4 = (NumberAxis) subplot4.getRangeAxis();
+         range4.setTickLabelFont(new Font("Monospaced", Font.PLAIN, 7));
+         range4.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         range4.setAutoRangeIncludesZero(false);
+         multiPlot.add(subplot4, weight[3]);
+ 
+         // now make the top level JFreeChart that contains the CombinedPlot
+         final JFreeChart chart = new JFreeChart(
+             title, JFreeChart.DEFAULT_TITLE_FONT, multiPlot, true
+         );
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a combined and overlaid chart.
+      * <p>
+      * Note: from version 0.9.10, the overlaid chart is no longer supported (you can achieve
+      * the same result using a regular XYPlot with multiple datasets and renderers).
+      *
+      * @return a combined and overlaid chart.
+      */
+     public JFreeChart createCombinedAndOverlaidChart1() {
+ 
+         // create a default chart based on some sample data...
+         final String title = this.resources.getString("combined.combined-overlaid.title");
+         final String subtitleStr = this.resources.getString("combined.combined-overlaid.subtitle");
+         final String domain = this.resources.getString("combined.combined-overlaid.domain");
+         final String[] ranges = this.resources.getStringArray("combined.combined-overlaid.ranges");
+ 
+         final TimeSeries jpy = DemoDatasetFactory.createJPYTimeSeries();
+         final TimeSeries mav = MovingAverage.createMovingAverage(
+             jpy, "30 Day Moving Average", 30, 30
+         );
+ 
+         final TimeSeriesCollection dataset0 = new TimeSeriesCollection();
+         dataset0.addSeries(jpy);
+ 
+         final TimeSeriesCollection dataset1 = new TimeSeriesCollection();
+         dataset1.addSeries(jpy);
+         dataset1.addSeries(mav);
+ 
+         final DefaultHighLowDataset highLowDataset = DemoDatasetFactory.createHighLowDataset();
+         final XYDataset highLowDatasetMA = MovingAverage.createMovingAverage(
+             highLowDataset,
+             " (MA)",
+             5 * 24 * 60 * 60 * 1000L,
+             5 * 24 * 60 * 60 * 1000L
+         );
+ 
+         // make one vertical axis for each (vertical) chart
+         final NumberAxis[] valueAxis = new NumberAxis[3];
+         for (int i = 0; i < valueAxis.length; i++) {
+             valueAxis[i] = new NumberAxis(ranges[i]);
+             if (i <= 1) {
+                 valueAxis[i].setAutoRangeIncludesZero(false);  // override default
+             }
+         }
+ 
+         // create CombinedPlot...
+         final CombinedDomainXYPlot parent = new CombinedDomainXYPlot(new DateAxis(domain));
+ 
+         final int[] weight = {1, 2, 2};
+ 
+         // add subplot1...
+         final XYItemRenderer renderer1 = new StandardXYItemRenderer();
+         final XYPlot subplot1 = new XYPlot(dataset0, null, new NumberAxis(ranges[0]), renderer1);
+         final NumberAxis axis1 = (NumberAxis) subplot1.getRangeAxis();
+         axis1.setTickLabelFont(new Font("Monospaced", Font.PLAIN, 7));
+         axis1.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         axis1.setAutoRangeIncludesZero(false);
+         parent.add(subplot1, weight[0]);
+ 
+         // add subplot2 (an overlaid plot)...
+         final XYPlot subplot2 = new XYPlot(dataset0, null, new NumberAxis(ranges[1]),
+                                      new StandardXYItemRenderer());
+         final NumberAxis axis2 = (NumberAxis) subplot2.getRangeAxis();
+         axis2.setTickLabelFont(new Font("Monospaced", Font.PLAIN, 7));
+         axis2.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         axis2.setAutoRangeIncludesZero(false);
+         subplot2.setDataset(1, dataset1);
+         subplot2.setRenderer(1, new StandardXYItemRenderer());
+ 
+         parent.add(subplot2, weight[1]);
+ 
+         // add subplot3 (an overlaid plot)...
+         final XYItemRenderer renderer3 = new HighLowRenderer();
+         final XYPlot subplot3 = new XYPlot(
+             highLowDataset, null, new NumberAxis(ranges[2]), renderer3
+         );
+         final NumberAxis axis3 = (NumberAxis) subplot3.getRangeAxis();
+         axis3.setTickLabelFont(new Font("Monospaced", Font.PLAIN, 7));
+         axis3.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         axis3.setAutoRangeIncludesZero(false);
+         subplot3.setDataset(1, highLowDatasetMA);
+         subplot3.setRenderer(1, new StandardXYItemRenderer());
+ 
+         parent.add(subplot3, weight[2]);
+ 
+         // now create the master JFreeChart object
+         final JFreeChart chart = new JFreeChart(
+             title,
+             new Font("SansSerif", Font.BOLD, 12),
+             parent,
+             true
+         );
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 10));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Displays an XY chart that is periodically updated by a background thread.  This is to
+      * demonstrate the event notification system that automatically updates charts as required.
+      *
+      * @return a chart.
+      */
+     public JFreeChart createCombinedAndOverlaidDynamicXYChart() {
+ 
+         // chart title and axis labels...
+         final String title = this.resources.getString("combined.dynamic.title");
+         final String subtitleStr = this.resources.getString("combined.dynamic.subtitle");
+         final String domainAxisLabel = this.resources.getString("combined.dynamic.domain");
+         final String[] ranges = this.resources.getStringArray("combined.dynamic.ranges");
+ 
+         // setup sample base 2-series dataset
+         final SampleXYDataset data = new SampleXYDataset();
+ 
+         // create some SubSeriesDatasets and CombinedDatasets to test events
+         final XYDataset series0 = new SubSeriesDataset(data, 0);
+         final XYDataset series1 = new SubSeriesDataset(data, 1);
+ 
+         final CombinedDataset combinedData = new CombinedDataset();
+         combinedData.add(series0);
+         combinedData.add(series1);
+ 
+         // create common time axis
+         final NumberAxis timeAxis = new NumberAxis(domainAxisLabel);
+         timeAxis.setTickMarksVisible(true);
+         timeAxis.setAutoRangeIncludesZero(false);
+ 
+         // make one vertical axis for each (vertical) chart
+         final NumberAxis[] valueAxis = new NumberAxis[4];
+         for (int i = 0; i < valueAxis.length; i++) {
+             valueAxis[i] = new NumberAxis(ranges[i]);
+             valueAxis[i].setAutoRangeIncludesZero(false);
+         }
+ 
+         final CombinedDomainXYPlot plot = new CombinedDomainXYPlot(timeAxis);
+ 
+         // add subplot1...
+         final XYItemRenderer renderer0 = new StandardXYItemRenderer();
+         final XYPlot subplot0 = new XYPlot(series0, null, valueAxis[0], renderer0);
+         plot.add(subplot0, 1);
+ 
+         // add subplot2...
+         final XYItemRenderer renderer1 = new StandardXYItemRenderer();
+         final XYPlot subplot1 = new XYPlot(series1, null, valueAxis[1], renderer1);
+         plot.add(subplot1, 1);
+ 
+         // add subplot3...
+         final XYPlot subplot2 = new XYPlot(
+             series0, null, valueAxis[2], new StandardXYItemRenderer()
+         );
+         subplot2.setDataset(1, series1);
+         subplot2.setRenderer(1, new StandardXYItemRenderer());
+         plot.add(subplot2, 1);
+ 
+         // add subplot4...
+         final XYItemRenderer renderer3 = new StandardXYItemRenderer();
+         final XYPlot subplot3 = new XYPlot(data, null, valueAxis[3], renderer3);
+         plot.add(subplot3, 1);
+ 
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+ 
+         // then customise it a little...
+         final TextTitle subtitle = new TextTitle(subtitleStr, new Font("SansSerif", Font.BOLD, 12));
+         chart.addSubtitle(subtitle);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.cyan));
+ 
+         // setup thread to update base Dataset
+         final SampleXYDatasetThread update = new SampleXYDatasetThread(data);
+         final Thread thread = new Thread(update);
+         thread.start();
+ 
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a gantt chart.
+      *
+      * @return a gantt chart.
+      */
+     public JFreeChart createGanttChart() {
+ 
+         final String title = this.resources.getString("gantt.task.title");
+         final String domain = this.resources.getString("gantt.task.domain");
+         final String range = this.resources.getString("gantt.task.range");
+ 
+         final IntervalCategoryDataset data = createGanttDataset1();
+ 
+         final JFreeChart chart = ChartFactory.createGanttChart(
+             title, domain, range, data,
+             true,
+             true,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset for a Gantt chart.
+      *
+      * @return The dataset.
+      *
+      * @deprecated Moved to the demo applications that require it.
+      */
+     private static IntervalCategoryDataset createGanttDataset1() {
+ 
+         final TaskSeries s1 = new TaskSeries("Scheduled");
+         s1.add(new Task("Write Proposal",
+                new SimpleTimePeriod(date(1, Calendar.APRIL, 2001),
+                                     date(5, Calendar.APRIL, 2001))));
+         s1.add(new Task("Obtain Approval",
+                new SimpleTimePeriod(date(9, Calendar.APRIL, 2001),
+                                     date(9, Calendar.APRIL, 2001))));
+         s1.add(new Task("Requirements Analysis",
+                new SimpleTimePeriod(date(10, Calendar.APRIL, 2001),
+                                     date(5, Calendar.MAY, 2001))));
+         s1.add(new Task("Design Phase",
+                new SimpleTimePeriod(date(6, Calendar.MAY, 2001),
+                                     date(30, Calendar.MAY, 2001))));
+         s1.add(new Task("Design Signoff",
+                new SimpleTimePeriod(date(2, Calendar.JUNE, 2001),
+                                     date(2, Calendar.JUNE, 2001))));
+         s1.add(new Task("Alpha Implementation",
+                new SimpleTimePeriod(date(3, Calendar.JUNE, 2001),
+                                     date(31, Calendar.JULY, 2001))));
+         s1.add(new Task("Design Review",
+                new SimpleTimePeriod(date(1, Calendar.AUGUST, 2001),
+                                     date(8, Calendar.AUGUST, 2001))));
+         s1.add(new Task("Revised Design Signoff",
+                new SimpleTimePeriod(date(10, Calendar.AUGUST, 2001),
+                                     date(10, Calendar.AUGUST, 2001))));
+         s1.add(new Task("Beta Implementation",
+                new SimpleTimePeriod(date(12, Calendar.AUGUST, 2001),
+                                     date(12, Calendar.SEPTEMBER, 2001))));
+         s1.add(new Task("Testing",
+                new SimpleTimePeriod(date(13, Calendar.SEPTEMBER, 2001),
+                                     date(31, Calendar.OCTOBER, 2001))));
+         s1.add(new Task("Final Implementation",
+                new SimpleTimePeriod(date(1, Calendar.NOVEMBER, 2001),
+                                     date(15, Calendar.NOVEMBER, 2001))));
+         s1.add(new Task("Signoff",
+                new SimpleTimePeriod(date(28, Calendar.NOVEMBER, 2001),
+                                     date(30, Calendar.NOVEMBER, 2001))));
+ 
+         final TaskSeries s2 = new TaskSeries("Actual");
+         s2.add(new Task("Write Proposal",
+                new SimpleTimePeriod(date(1, Calendar.APRIL, 2001),
+                                     date(5, Calendar.APRIL, 2001))));
+         s2.add(new Task("Obtain Approval",
+                new SimpleTimePeriod(date(9, Calendar.APRIL, 2001),
+                                     date(9, Calendar.APRIL, 2001))));
+         s2.add(new Task("Requirements Analysis",
+                new SimpleTimePeriod(date(10, Calendar.APRIL, 2001),
+                                     date(15, Calendar.MAY, 2001))));
+         s2.add(new Task("Design Phase",
+                new SimpleTimePeriod(date(15, Calendar.MAY, 2001),
+                                     date(17, Calendar.JUNE, 2001))));
+         s2.add(new Task("Design Signoff",
+                new SimpleTimePeriod(date(30, Calendar.JUNE, 2001),
+                                     date(30, Calendar.JUNE, 2001))));
+         s2.add(new Task("Alpha Implementation",
+                new SimpleTimePeriod(date(1, Calendar.JULY, 2001),
+                                     date(12, Calendar.SEPTEMBER, 2001))));
+         s2.add(new Task("Design Review",
+                new SimpleTimePeriod(date(12, Calendar.SEPTEMBER, 2001),
+                                     date(22, Calendar.SEPTEMBER, 2001))));
+         s2.add(new Task("Revised Design Signoff",
+                new SimpleTimePeriod(date(25, Calendar.SEPTEMBER, 2001),
+                                     date(27, Calendar.SEPTEMBER, 2001))));
+         s2.add(new Task("Beta Implementation",
+                new SimpleTimePeriod(date(27, Calendar.SEPTEMBER, 2001),
+                                     date(30, Calendar.OCTOBER, 2001))));
+         s2.add(new Task("Testing",
+                new SimpleTimePeriod(date(31, Calendar.OCTOBER, 2001),
+                                     date(17, Calendar.NOVEMBER, 2001))));
+         s2.add(new Task("Final Implementation",
+                new SimpleTimePeriod(date(18, Calendar.NOVEMBER, 2001),
+                                     date(5, Calendar.DECEMBER, 2001))));
+         s2.add(new Task("Signoff",
+                new SimpleTimePeriod(date(10, Calendar.DECEMBER, 2001),
+                                     date(11, Calendar.DECEMBER, 2001))));
+ 
+         final TaskSeriesCollection collection = new TaskSeriesCollection();
+         collection.add(s1);
+         collection.add(s2);
+ 
+         return collection;
+     }
+ 
+     /**
+      * Utility method for creating <code>Date</code> objects.
+      *
+      * @param day  the date.
+      * @param month  the month.
+      * @param year  the year.
+      *
+      * @return a date.
+      */
+     private static Date date(final int day, final int month, final int year) {
+ 
+         final Calendar calendar = Calendar.getInstance();
+         calendar.set(year, month, day);
+         final Date result = calendar.getTime();
+         return result;
+ 
+     }
+ 
+     /**
+      * Creates a basic wafermap chart with a random dataset
+      *
+      * @return a wafermap chart
+      */
+     public JFreeChart createWaferMapChart() {
+         final WaferMapDataset dataset = DemoDatasetFactory.createRandomWaferMapDataset(5);
+         final JFreeChart chart = ChartFactory.createWaferMapChart(
+             "Wafer Map Demo",         // title
+             dataset,                  // wafermapdataset
+             PlotOrientation.VERTICAL, // vertical = notchdown
+             true,                     // legend
+             false,                    // tooltips
+             false
+         );
+ 
+         final Legend legend = chart.getLegend();
+         legend.setAnchor(Legend.EAST);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         final TextTitle copyright = new TextTitle(
+             "JFreeChart WaferMapPlot", new Font("SansSerif", Font.PLAIN, 9)
+         );
+         copyright.setPosition(RectangleEdge.BOTTOM);
+         copyright.setHorizontalAlignment(HorizontalAlignment.RIGHT);
+         chart.addSubtitle(copyright);
+ 
+         return chart;
+     }
+ 
+   /**
+    * Creates a basic wafermap chart with a random dataset
+    *
+    * @return a wafermap chart
+    */
+   public JFreeChart createWaferMapChartValueIndexed() {
+       final WaferMapDataset dataset = DemoDatasetFactory.createRandomWaferMapDataset(500);
+       final JFreeChart chart = ChartFactory.createWaferMapChart(
+           "Wafer Map Demo - Value Indexed",         // title
+           dataset,                  // wafermapdataset
+           PlotOrientation.VERTICAL, // vertical = notchdown
+           true,                     // legend
+           false,                    // tooltips
+           false
+       );
+ 
+       final Legend legend = chart.getLegend();
+       legend.setAnchor(Legend.EAST);
+       chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+       final TextTitle copyright = new TextTitle(
+           "JFreeChart WaferMapPlot", new Font("SansSerif", Font.PLAIN, 9)
+       );
+       copyright.setPosition(RectangleEdge.BOTTOM);
+       copyright.setHorizontalAlignment(HorizontalAlignment.RIGHT);
+       chart.addSubtitle(copyright);
+ 
+       return chart;
+   }
+ 
+     /**
+      * Creates a basic wafermap chart with a random dataset
+      *
+      * @return a wafermap chart
+      */
+     public JFreeChart createWaferMapChartPositionIndexed() {
+         final WaferMapDataset dataset = DemoDatasetFactory.createRandomWaferMapDataset(500);
+         final WaferMapPlot plot = new WaferMapPlot(dataset);
+         final WaferMapRenderer renderer = new WaferMapRenderer(35, WaferMapRenderer.POSITION_INDEX);
+         plot.setRenderer(renderer);
+ 
+         final JFreeChart chart = new JFreeChart(
+             "Wafer Map Demo - Position Indexed",
+             JFreeChart.DEFAULT_TITLE_FONT,
+             plot,
+             true
+         );
+ 
+         final Legend legend = chart.getLegend();
+         legend.setAnchor(Legend.EAST);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         final TextTitle copyright = new TextTitle(
+             "JFreeChart WaferMapPlot", new Font("SansSerif", Font.PLAIN, 9)
+         );
+         copyright.setPosition(RectangleEdge.BOTTOM);
+         copyright.setHorizontalAlignment(HorizontalAlignment.RIGHT);
+         chart.addSubtitle(copyright);
+ 
+         return chart;
+   }
+ 
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/JFreeChartDemo.java jfreechart/source/org/jfree/chart/demo/JFreeChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/JFreeChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/JFreeChartDemo.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,511 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * JFreeChartDemo.java
+  * -------------------
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Andrzej Porebski;
+  *                   Matthew Wright;
+  *                   Serge V. Grachov;
+  *                   Bill Kelemen;
+  *                   Achilleus Mantzios;
+  *                   Bryan Scott;
+  *
+  * $Id: JFreeChartDemo.java,v 1.10 2004/04/26 19:40:15 taqua Exp $
+  *
+  * Changes (from 22-Jun-2001)
+  * --------------------------
+  * 22-Jun-2001 : Modified to use new title code (DG);
+  * 23-Jun-2001 : Added null data source chart (DG);
+  * 24-Aug-2001 : Fixed DOS encoding problem (DG);
+  * 15-Oct-2001 : Data source classes moved to com.jrefinery.data.* (DG);
+  * 19-Oct-2001 : Implemented new ChartFactory class (DG);
+  * 22-Oct-2001 : Added panes for stacked bar charts and a scatter plot (DG);
+  *               Renamed DataSource.java --> Dataset.java etc. (DG);
+  * 31-Oct-2001 : Added some negative values to the sample CategoryDataset (DG);
+  *               Added 3D-effect bar plots by Serge V. Grachov (DG);
+  * 07-Nov-2001 : Separated the JCommon Class Library classes, JFreeChart now
+  *               requires jcommon.jar (DG);
+  *               New flag in ChartFactory to control whether or not a legend is
+  *               added to the chart (DG);
+  * 15-Nov-2001 : Changed TimeSeriesDataset to TimeSeriesCollection (DG);
+  * 17-Nov-2001 : For pie chart, changed dataset from CategoryDataset to PieDataset (DG);
+  * 26-Nov-2001 : Moved property editing, saving and printing to the JFreeChartPanel class (DG);
+  * 05-Dec-2001 : Added combined charts contributed by Bill Kelemen (DG);
+  * 10-Dec-2001 : Updated exchange rate demo data, and included a demo chart that shows multiple
+  *               time series together on one chart.  Removed some redundant code (DG);
+  * 12-Dec-2001 : Added Candlestick chart (DG);
+  * 23-Jan-2002 : Added a test chart for single series bar charts (DG);
+  * 06-Feb-2002 : Added sample wind plot (DG);
+  * 15-Mar-2002 : Now using ResourceBundle to fetch strings and other items displayed to the
+  *               user.  This will allow for localisation (DG);
+  * 09-Apr-2002 : Changed horizontal bar chart to use integer tick units (DG);
+  * 19-Apr-2002 : Renamed JRefineryUtilities-->RefineryUtilities (DG);
+  * 11-Jun-2002 : Changed createHorizontalStackedBarChart()
+  *               --> createStackedHorizontalBarChart() for consistency (DG);
+  * 25-Jun-2002 : Removed redundant code (DG);
+  * 02-Jul-2002 : Added Gantt chart demo, based on GanttDemo (BRS)
+  * 02-Jul-2002 : Added support for usage (null, All, Swing) in resource (BRS).
+  * 27-Jul-2002 : Made Resourceclass string public (BRS).
+  * 27-Jul-2002 : Move chart creation methods to JFreeChartDemoBase class to allow sharing
+  *               with servlet.  Servlet cannot share this class as a number of headless
+  *               exceptions are generated. (BRS).
+  * 10-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Dimension;
+ import java.awt.Font;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ import java.awt.event.WindowAdapter;
+ import java.awt.event.WindowEvent;
+ import java.awt.event.WindowListener;
+ import java.util.ResourceBundle;
+ import java.util.Vector;
+ 
+ import javax.swing.BorderFactory;
+ import javax.swing.JButton;
+ import javax.swing.JFrame;
+ import javax.swing.JMenu;
+ import javax.swing.JMenuBar;
+ import javax.swing.JMenuItem;
+ import javax.swing.JOptionPane;
+ import javax.swing.JPanel;
+ import javax.swing.JScrollPane;
+ import javax.swing.JTabbedPane;
+ import javax.swing.JTextArea;
+ 
+ import org.jfree.chart.ChartFrame;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.layout.LCBLayout;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.about.AboutFrame;
+ 
+ /**
+  * The main frame in the chart demonstration application.
+  *
+  */
+ public class JFreeChartDemo extends JFrame implements ActionListener, WindowListener {
+ 
+     /** Exit action command. */
+     public static final String EXIT_COMMAND = "EXIT";
+ 
+     /** About action command. */
+     public static final String ABOUT_COMMAND = "ABOUT";
+ 
+     /** The base demo class. */
+     private static final JFreeChartDemoBase DEMO = new JFreeChartDemoBase();
+ 
+     /** An array of chart commands. */
+     private static final String[][] CHART_COMMANDS = JFreeChartDemoBase.CHART_COMMANDS;
+ 
+     /** Localised resources. */
+     private ResourceBundle resources;
+ 
+     /** Chart frames. */
+     private ChartFrame[] frame = new ChartFrame[CHART_COMMANDS.length];
+ 
+     /** Panels. */
+     private JPanel[] panels = null;
+ 
+     /** The preferred size for the frame. */
+     public static final Dimension PREFERRED_SIZE = new Dimension(780, 400);
+ 
+     /** A frame for displaying information about the application. */
+     private AboutFrame aboutFrame;
+ 
+     /**
+      * Constructs a demonstration application for the JFreeChart Class Library.
+      */
+     public JFreeChartDemo() {
+         super(JFreeChart.INFO.getName() + " " + JFreeChart.INFO.getVersion() + " Demo");
+         addWindowListener(new WindowAdapter() {
+             public void windowClosing(final WindowEvent e) {
+                 dispose();
+                 System.exit(0);
+             }
+         });
+         this.resources = DEMO.getResources();
+         // set up the menu
+         final JMenuBar menuBar = createMenuBar(this.resources);
+         setJMenuBar(menuBar);
+ 
+         final JPanel content = new JPanel(new BorderLayout());
+         content.add(createTabbedPane(this.resources));
+         setContentPane(content);
+ 
+     }
+ 
+     /**
+      * Returns the preferred size for the frame.
+      *
+      * @return the preferred size.
+      */
+     public Dimension getPreferredSize() {
+         return PREFERRED_SIZE;
+     }
+ 
+     /**
+      * Handles menu selections by passing control to an appropriate method.
+      *
+      * @param event  the event.
+      */
+     public void actionPerformed(final ActionEvent event) {
+ 
+         final String command = event.getActionCommand();
+         if (command.equals(EXIT_COMMAND)) {
+             attemptExit();
+         }
+         else if (command.equals(ABOUT_COMMAND)) {
+             about();
+         }
+         else {
+             /// Loop through available commands to find index to current command.
+             int chartnum = -1;
+             int i = CHART_COMMANDS.length;
+             while (i > 0) {
+                 --i;
+                 if (command.equals(CHART_COMMANDS[i][0])) {
+                     chartnum = i;
+                     i = 0;
+                 }
+             }
+ 
+             /// check our index is valid
+             if ((chartnum >= 0) && (chartnum < this.frame.length)) {
+                 /// Check we have not already created chart.
+                 if (this.frame[chartnum] == null) {
+                     // setup the chart.
+                     DEMO.getChart(chartnum);
+ 
+                     // present it in a frame...
+                     String str = this.resources.getString(CHART_COMMANDS[chartnum][2] + ".title");
+                     this.frame[chartnum] = new ChartFrame(str, DEMO.getChart(chartnum));
+                     this.frame[chartnum].getChartPanel().setPreferredSize(
+                                                         new java.awt.Dimension(500, 270));
+                     this.frame[chartnum].pack();
+                     RefineryUtilities.positionFrameRandomly(this.frame[chartnum]);
+ 
+                     /// Set panel to zoomable if required
+                     try {
+                         str = this.resources.getString(CHART_COMMANDS[chartnum][2] + ".zoom");
+                         if ((str != null) && (str.toLowerCase().equals("true"))) {
+                             final ChartPanel panel = this.frame[chartnum].getChartPanel();
+                             panel.setMouseZoomable(true);
+                             panel.setHorizontalAxisTrace(true);
+                             panel.setVerticalAxisTrace(true);
+                         }
+                     }
+                     catch (Exception ex) {
+                         /// Filter out messages which for charts which do not have zoom
+                         /// specified.
+                         if (ex.getMessage().indexOf("MissingResourceException") == 0) {
+                             ex.printStackTrace();
+                         }
+                     }
+ 
+                     this.frame[chartnum].setVisible(true);
+ 
+                 }
+                 else {
+                     this.frame[chartnum].setVisible(true);
+                     this.frame[chartnum].requestFocus();
+                 }
+             }
+         }
+     }
+ 
+     /**
+      * Exits the application, but only if the user agrees.
+      */
+     private void attemptExit() {
+ 
+         final String title = this.resources.getString("dialog.exit.title");
+         final String message = this.resources.getString("dialog.exit.message");
+         final int result = JOptionPane.showConfirmDialog(this, message, title,
+                                                    JOptionPane.YES_NO_OPTION,
+                                                    JOptionPane.QUESTION_MESSAGE);
+         if (result == JOptionPane.YES_OPTION) {
+             dispose();
+             System.exit(0);
+         }
+     }
+ 
+     /**
+      * Displays information about the application.
+      */
+     private void about() {
+ 
+         final String title = this.resources.getString("about.title");
+         //String versionLabel = this.resources.getString("about.version.label");
+         if (this.aboutFrame == null) {
+             this.aboutFrame = new AboutFrame(title, JFreeChart.INFO);
+             this.aboutFrame.pack();
+             RefineryUtilities.centerFrameOnScreen(this.aboutFrame);
+         }
+         this.aboutFrame.setVisible(true);
+         this.aboutFrame.requestFocus();
+ 
+     }
+ 
+     /**
+      * The starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final JFreeChartDemo f = new JFreeChartDemo();
+         f.pack();
+         RefineryUtilities.centerFrameOnScreen(f);
+         f.setVisible(true);
+     }
+ 
+     /**
+      * Required for WindowListener interface, but not used by this class.
+      *
+      * @param e  the event.
+      */
+     public void windowActivated(final WindowEvent e) {
+         // not used
+     }
+ 
+     /**
+      * Clears the reference to the print preview frames when they are closed.
+      *
+      * @param e  the event.
+      */
+     public void windowClosed(final WindowEvent e) {
+ 
+         if (e.getWindow() == this.aboutFrame) {
+             this.aboutFrame = null;
+         }
+ 
+     }
+ 
+     /**
+      * Required for WindowListener interface, but not used by this class.
+      *
+      * @param e  the event.
+      */
+     public void windowClosing(final WindowEvent e) {
+         // ignored
+     }
+ 
+     /**
+      * Required for WindowListener interface, but not used by this class.
+      *
+      * @param e  the event.
+      */
+     public void windowDeactivated(final WindowEvent e) {
+         // ignored
+     }
+ 
+     /**
+      * Required for WindowListener interface, but not used by this class.
+      *
+      * @param e  the event.
+      */
+     public void windowDeiconified(final WindowEvent e) {
+         // ignored
+     }
+ 
+     /**
+      * Required for WindowListener interface, but not used by this class.
+      *
+      * @param e  the event.
+      */
+     public void windowIconified(final WindowEvent e) {
+         // ignored
+     }
+ 
+     /**
+      * Required for WindowListener interface, but not used by this class.
+      *
+      * @param e  the event.
+      */
+     public void windowOpened(final WindowEvent e) {
+         // ignored
+     }
+ 
+     /**
+      * Creates a menubar.
+      *
+      * @param resources  localised resources.
+      *
+      * @return the menu bar.
+      */
+     private JMenuBar createMenuBar(final ResourceBundle resources) {
+ 
+         // create the menus
+         final JMenuBar menuBar = new JMenuBar();
+ 
+         String label;
+         Character mnemonic;
+ 
+         // first the file menu
+         label = resources.getString("menu.file");
+         mnemonic = (Character) resources.getObject("menu.file.mnemonic");
+         final JMenu fileMenu = new JMenu(label, true);
+         fileMenu.setMnemonic(mnemonic.charValue());
+ 
+         label = resources.getString("menu.file.exit");
+         mnemonic = (Character) resources.getObject("menu.file.exit.mnemonic");
+         final JMenuItem exitItem = new JMenuItem(label, mnemonic.charValue());
+         exitItem.setActionCommand(EXIT_COMMAND);
+         exitItem.addActionListener(this);
+         fileMenu.add(exitItem);
+ 
+         // then the help menu
+         label = resources.getString("menu.help");
+         mnemonic = (Character) resources.getObject("menu.help.mnemonic");
+         final JMenu helpMenu = new JMenu(label);
+         helpMenu.setMnemonic(mnemonic.charValue());
+ 
+         label = resources.getString("menu.help.about");
+         mnemonic = (Character) resources.getObject("menu.help.about.mnemonic");
+         final JMenuItem aboutItem = new JMenuItem(label, mnemonic.charValue());
+         aboutItem.setActionCommand(ABOUT_COMMAND);
+         aboutItem.addActionListener(this);
+         helpMenu.add(aboutItem);
+ 
+         // finally, glue together the menu and return it
+         menuBar.add(fileMenu);
+         menuBar.add(helpMenu);
+ 
+         return menuBar;
+ 
+     }
+ 
+     /**
+      * Creates a tabbed pane containing descriptions of the demo charts.
+      *
+      * @param resources  localised resources.
+      *
+      * @return a tabbed pane.
+      */
+     private JTabbedPane createTabbedPane(final ResourceBundle resources) {
+ 
+         final Font font = new Font("Dialog", Font.PLAIN, 12);
+         final JTabbedPane tabs = new JTabbedPane();
+ 
+         int tab = 1;
+         final Vector titles = new Vector(0);
+         final String[] tabTitles;
+         String title = null;
+ 
+         while (tab > 0) {
+             try {
+                 title = resources.getString("tabs." + tab);
+                 if (title != null) {
+                     titles.add(title);
+                 }
+                 else {
+                     tab = -1;
+                 }
+                 ++tab;
+             }
+             catch (Exception ex) {
+                 tab = -1;
+             }
+         }
+ 
+         if (titles.size() == 0) {
+             titles.add("Default");
+         }
+ 
+         tab = titles.size();
+         this.panels = new JPanel[tab];
+         tabTitles = new String[tab];
+ 
+         --tab;
+         for (; tab >= 0; --tab) {
+             title = titles.get(tab).toString();
+             tabTitles[tab] = title;
+         }
+         titles.removeAllElements();
+ 
+         for (int i = 0; i < tabTitles.length; ++i) {
+             this.panels[i] = new JPanel();
+             this.panels[i].setLayout(new LCBLayout(20));
+             this.panels[i].setPreferredSize(new Dimension(360, 20));
+             this.panels[i].setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));
+             tabs.add(tabTitles[i], new JScrollPane(this.panels[i]));
+         }
+ 
+         String description;
+         final String buttonText = resources.getString("charts.display");
+         JButton b1;
+ 
+         // Load the CHARTS ...
+         String usage = null;
+         for (int i = 0; i <= CHART_COMMANDS.length - 1; ++i) {
+             try {
+                 usage = resources.getString(CHART_COMMANDS[i][2] + ".usage");
+             }
+             catch (Exception ex) {
+                 usage = null;
+             }
+ 
+             if ((usage == null) || usage.equalsIgnoreCase("All")
+                                 || usage.equalsIgnoreCase("Swing")) {
+ 
+                 title = resources.getString(CHART_COMMANDS[i][2] + ".title");
+                 description = resources.getString(CHART_COMMANDS[i][2] + ".description");
+                 try {
+                     tab = Integer.parseInt(resources.getString(CHART_COMMANDS[i][2] + ".tab"));
+                     --tab;
+                 }
+                 catch (Exception ex) {
+                     System.err.println("Demo : Error retrieving tab identifier for chart "
+                                        + CHART_COMMANDS[i][2]);
+                     System.err.println("Demo : Error = " + ex.getMessage());
+                     tab = 0;
+                 }
+                 if ((tab < 0) || (tab >= this.panels.length)) {
+                     tab = 0;
+                 }
+ 
+                 System.out.println("Demo : adding " + CHART_COMMANDS[i][0] + " to panel " + tab);
+                 this.panels[tab].add(RefineryUtilities.createJLabel(title, font));
+                 this.panels[tab].add(new DescriptionPanel(new JTextArea(description)));
+                 b1 = RefineryUtilities.createJButton(buttonText, font);
+                 b1.setActionCommand(CHART_COMMANDS[i][0]);
+                 b1.addActionListener(this);
+                 this.panels[tab].add(b1);
+             }
+         }
+ 
+         return tabs;
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LayeredBarChartDemo1.java jfreechart/source/org/jfree/chart/demo/LayeredBarChartDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/LayeredBarChartDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LayeredBarChartDemo1.java	2004-11-07 15:58:03.000000000 +0100
***************
*** 0 ****
--- 1,169 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * LayeredBarChartDemo1.java
+  * -------------------------
+  * (C) Copyright 2003, 2004, by Arnaud Lelievre and Contributors.
+  *
+  * Original Author:  Arnaud Lelievre (for Garden);
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: LayeredBarChartDemo1.java,v 1.10 2004/04/26 19:11:55 taqua Exp $
+  * 
+  * Changes
+  * -------
+  * 28-Aug-2003 : Version 1 (AL);
+  * 11-Nov-2003 : Minor changes (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.LayeredBarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a superimposed horizontal bar chart.
+  *
+  * @author Arnaud Lelievre
+  */
+ public class LayeredBarChartDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public LayeredBarChartDemo1(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Returns a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private CategoryDataset createDataset() {
+ 
+         // create a dataset...
+         final double[][] data = new double[][] {
+             {41.0, 33.0, 22.0, 64.0, 42.0, 62.0, 22.0, 14.0},
+             {55.0, 63.0, 55.0, 48.0, 54.0, 37.0, 41.0, 39.0},
+             {57.0, 75.0, 43.0, 33.0, 63.0, 46.0, 57.0, 33.0}
+         };
+ 
+         return DatasetUtilities.createCategoryDataset("Series ", "Factor ", data);
+         
+     }
+     
+     /**
+      * Creates a chart for the specified dataset.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final CategoryAxis categoryAxis = new CategoryAxis("Category");
+         categoryAxis.setMaxCategoryLabelWidthRatio(10.0f);
+         final ValueAxis valueAxis = new NumberAxis("Score (%)");
+ 
+ 
+         final CategoryPlot plot = new CategoryPlot(dataset,
+                                              categoryAxis,
+                                              valueAxis,
+                                              new LayeredBarRenderer());
+         
+         plot.setOrientation(PlotOrientation.HORIZONTAL);
+         final JFreeChart chart = new JFreeChart("Layered Bar Chart",
+                                           JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.lightGray);
+ 
+         final LayeredBarRenderer renderer = (LayeredBarRenderer) plot.getRenderer();
+ 
+         // we can set each series bar width individually or let the renderer manage a standard view.
+         // the width is set in percentage, where 1.0 is the maximum (100%).
+         renderer.setSeriesBarWidth(0, 1.0);
+         renderer.setSeriesBarWidth(1, 0.7);
+         renderer.setSeriesBarWidth(2, 0.4);
+ 
+         renderer.setItemMargin(0.01);
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryMargin(0.25);
+         domainAxis.setUpperMargin(0.05);
+         domainAxis.setLowerMargin(0.05);
+         
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final LayeredBarChartDemo1 demo = new LayeredBarChartDemo1("Layered Bar Chart Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LayeredBarChartDemo2.java jfreechart/source/org/jfree/chart/demo/LayeredBarChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/LayeredBarChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LayeredBarChartDemo2.java	2004-11-07 15:57:58.000000000 +0100
***************
*** 0 ****
--- 1,151 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * LayeredBarChartDemo2.java
+  * -------------------------
+  * (C) Copyright 2003, 2004, by Arnaud Lelievre and Contributors.
+  *
+  * Original Author:  Arnaud Lelievre (for Garden);
+  * Contributor(s):   -;
+  *
+  *
+  * Changes
+  * -------
+  * 28-Aug-2003 : Version 1 (AL);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.LayeredBarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a superimposed vertical bar chart.
+  *
+  * @author Arnaud Lelievre
+  */
+ public class LayeredBarChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public LayeredBarChartDemo2(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final double[][] data = new double[][] {
+             {41.0, 33.0, 22.0, 64.0, 42.0, 62.0, 22.0, 14.0},
+             {55.0, 63.0, 55.0, 48.0, 54.0, 37.0, 41.0, 39.0},
+             {57.0, 75.0, 43.0, 33.0, 63.0, 46.0, 57.0, 33.0}
+         };
+ 
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset("Series ",
+                                                                          "Factor ", 
+                                                                          data);
+ 
+         // create the chart...
+         final CategoryAxis categoryAxis = new CategoryAxis("Category");
+         final ValueAxis valueAxis = new NumberAxis("Score (%)");
+ 
+ 
+         final CategoryPlot plot = new CategoryPlot(dataset,
+                                              categoryAxis, 
+                                              valueAxis, 
+                                              new LayeredBarRenderer());
+         
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         final JFreeChart chart = new JFreeChart(
+             "Layered Bar Chart Demo 2", 
+             JFreeChart.DEFAULT_TITLE_FONT, 
+             plot, 
+             true
+         );
+         
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.lightGray);
+ 
+         final LayeredBarRenderer renderer = (LayeredBarRenderer) plot.getRenderer();
+ 
+         // we can set each series bar width individually or let the renderer manage a standard view.
+         // the width is set in percentage, where 1.0 is the maximum (100%).
+         renderer.setSeriesBarWidth(0, 1.0);
+         renderer.setSeriesBarWidth(1, 0.7);
+         renderer.setSeriesBarWidth(2, 0.5);
+ 
+         renderer.setItemMargin(0.01);
+ 
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryMargin(0.25);
+         domainAxis.setUpperMargin(0.05);
+         domainAxis.setLowerMargin(0.05);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final LayeredBarChartDemo2 demo = new LayeredBarChartDemo2("Layered Bar Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LegendManiaDemo.java jfreechart/source/org/jfree/chart/demo/LegendManiaDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/LegendManiaDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LegendManiaDemo.java	2004-11-07 15:57:54.000000000 +0100
***************
*** 0 ****
--- 1,286 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * LegendManiaDemo.java
+  * --------------------
+  * (C) Copyright 2004, by Barak Naveh and Contributors.
+  *
+  * Original Author:  Barak Naveh;
+  * Contributor(s):   -;
+  *
+  * $Id: LegendManiaDemo.java,v 1.6 2004/04/27 19:47:01 barak_naveh Exp $
+  *
+  * Changes
+  * -------
+  * 26-Mar-2004 : Version 1 contributed by Barak Naveh (BN);
+  * 27-Mar-2004 : Added showing off round corners of bounding box (BN);
+  * 21-Apr-2004 : Added showing off legend item word-wrap (BN);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.awt.Paint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo that shows legend positions and legend bounding box options.
+  *
+  * @author Barak Naveh
+  *
+  * @since March 26, 2004
+  */
+ public class LegendManiaDemo extends ApplicationFrame {
+ 
+     /** The chart title. */
+     private static final String CHART_TITLE = "Legend Mania Demo";
+     
+     /** The background paint. */
+     private static final Paint BACKGROUND_PAINT = new Color(255, 240, 240);
+     
+     /** The chart of this demo */
+     private JFreeChart demoChart;
+     
+     /**
+      * A demo application that shows legend positions and legend bounding box 
+      * options.
+      *
+      * @param title the frame title.
+      */
+     public LegendManiaDemo(final String title) {
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         this.demoChart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(this.demoChart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Returns a sample dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         // row keys...
+         final String series1 = "Birds";
+         final String series2 = "Beas";
+         final String series3 = "A very very very very very long snake";
+ 
+         // column keys...
+         final String category1 = "Shopping";
+         final String category2 = "Socializing";
+         final String category3 = "Sex";
+         final String category4 = "TV Watching";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, category1);
+         dataset.addValue(4.0, series1, category2);
+         dataset.addValue(3.0, series1, category3);
+         dataset.addValue(5.0, series1, category4);
+ 
+         dataset.addValue(5.0, series2, category1);
+         dataset.addValue(7.0, series2, category2);
+         dataset.addValue(6.0, series2, category3);
+         dataset.addValue(8.0, series2, category4);
+ 
+         dataset.addValue(4.0, series3, category1);
+         dataset.addValue(3.0, series3, category2);
+         dataset.addValue(2.0, series3, category3);
+         dataset.addValue(3.0, series3, category4);
+         
+         return dataset;
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             CHART_TITLE,              // chart title
+             "Activity",               // domain axis label
+             "Rate",                   // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             true,                     // include legend
+             true,                     // tooltips?
+             false                     // URLs?
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(new Color(255, 255, 180));
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setBackgroundPaint(BACKGROUND_PAINT);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+ 
+         // set the range axis to display integers only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+ 
+         // disable bar outlines...
+         final BarRenderer renderer = (BarRenderer) plot.getRenderer();
+         renderer.setDrawBarOutline(false);
+         
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setCategoryLabelPositions(
+             CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0));
+         
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setBackgroundPaint(Color.orange);
+         legend.setOutlinePaint(Color.orange);
+ 
+         // activate word wrapping when legend is vertical.
+         legend.setPreferredWidth(125);
+ 
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args ignored.
+      */
+     public static void main(final String[] args) {
+         final LegendManiaDemo demo = new LegendManiaDemo(CHART_TITLE);
+         demo.pack();
+         demo.setSize(800, 600);
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+         final Thread updater = demo.new UpdaterThread();
+         updater.setDaemon(true);
+         updater.start();
+     }
+ 
+     /**
+      * A thread for updating the legend position in a loop.
+      */
+     private class UpdaterThread extends Thread {
+         
+         /**
+          * @see java.lang.Runnable#run()
+          */
+         public void run() {
+             final int[] anchors = {
+                     Legend.NORTH_NORTHWEST,
+                     Legend.NORTH,
+                     Legend.NORTH_NORTHEAST,
+                     Legend.EAST_NORTHEAST,
+                     Legend.EAST,
+                     Legend.EAST_SOUTHEAST,
+                     Legend.SOUTH_SOUTHEAST,
+                     Legend.SOUTH,
+                     Legend.SOUTH_SOUTHWEST,
+                     Legend.WEST_SOUTHWEST,
+                     Legend.WEST,
+                     Legend.WEST_NORTHWEST
+             };
+             
+             final String[] anchorNames = {
+                     "NORTH_NORTHWEST",
+                     "NORTH",
+                     "NORTH_NORTHEAST",
+                     "EAST_NORTHEAST",
+                     "EAST",
+                     "EAST_SOUTHEAST",
+                     "SOUTH_SOUTHEAST",
+                     "SOUTH",
+                     "SOUTH_SOUTHWEST",
+                     "WEST_SOUTHWEST",
+                     "WEST",
+                     "WEST_NORTHWEST"
+             };
+             
+             setPriority(MIN_PRIORITY); // be nice
+             final StandardLegend legend = (StandardLegend) demoChart.getLegend();
+             
+             int i = 0;
+             while (true) {
+                 // set the next anchor point 
+                 legend.setTitle(anchorNames[i]);
+                 legend.setAnchor(anchors[i]);
+                 i = (i + 1) % anchors.length;
+ 
+                 // set rectangular corners of bounding box and wait for a second
+                 legend.setBoundingBoxArcHeight(0);
+                 legend.setBoundingBoxArcWidth(0);
+                 
+                 try {
+                     sleep(1000);
+                 }
+                 catch (InterruptedException e) {
+                     // ignored.
+                 }
+ 
+                 // set round corners of bounding box and wait for a second
+                 legend.setBoundingBoxArcHeight(10);
+                 legend.setBoundingBoxArcWidth(10);
+                 
+                 try {
+                     sleep(1000);
+                 }
+                 catch (InterruptedException e) {
+                     // ignored.
+                 }
+             }
+         }
+     }
+ }
+ 
+ 
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo1.java jfreechart/source/org/jfree/chart/demo/LineChartDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LineChartDemo1.java	2004-11-07 15:57:49.000000000 +0100
***************
*** 0 ****
--- 1,229 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * LineChartDemo1.java
+  * -------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: LineChartDemo1.java,v 1.27 2004/05/27 09:10:42 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1 (DG);
+  * 30-May-2002 : Modified to display values on the chart (DG);
+  * 25-Jun-2002 : Removed redundant import (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Dimension;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a line chart using data from a
+  * {@link CategoryDataset}.
+  */
+ public class LineChartDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public LineChartDemo1(final String title) {
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+         final String series3 = "Third";
+ 
+         // column keys...
+         final String type1 = "Type 1";
+         final String type2 = "Type 2";
+         final String type3 = "Type 3";
+         final String type4 = "Type 4";
+         final String type5 = "Type 5";
+         final String type6 = "Type 6";
+         final String type7 = "Type 7";
+         final String type8 = "Type 8";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, type1);
+         dataset.addValue(4.0, series1, type2);
+         dataset.addValue(3.0, series1, type3);
+         dataset.addValue(5.0, series1, type4);
+         dataset.addValue(5.0, series1, type5);
+         dataset.addValue(7.0, series1, type6);
+         dataset.addValue(7.0, series1, type7);
+         dataset.addValue(8.0, series1, type8);
+ 
+         dataset.addValue(5.0, series2, type1);
+         dataset.addValue(7.0, series2, type2);
+         dataset.addValue(6.0, series2, type3);
+         dataset.addValue(8.0, series2, type4);
+         dataset.addValue(4.0, series2, type5);
+         dataset.addValue(4.0, series2, type6);
+         dataset.addValue(2.0, series2, type7);
+         dataset.addValue(1.0, series2, type8);
+ 
+         dataset.addValue(4.0, series3, type1);
+         dataset.addValue(3.0, series3, type2);
+         dataset.addValue(2.0, series3, type3);
+         dataset.addValue(3.0, series3, type4);
+         dataset.addValue(6.0, series3, type5);
+         dataset.addValue(3.0, series3, type6);
+         dataset.addValue(4.0, series3, type7);
+         dataset.addValue(3.0, series3, type8);
+ 
+         return dataset;
+                 
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createLineChart(
+             "Line Chart Demo 1",       // chart title
+             "Type",                    // domain axis label
+             "Value",                   // range axis label
+             dataset,                   // data
+             PlotOrientation.VERTICAL,  // orientation
+             true,                      // include legend
+             true,                      // tooltips
+             false                      // urls
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setDisplaySeriesShapes(true);
+         legend.setShapeScaleX(1.5);
+         legend.setShapeScaleY(1.5);
+         legend.setDisplaySeriesLines(true);
+ 
+         chart.setBackgroundPaint(Color.white);
+ 
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setRangeGridlinePaint(Color.white);
+ 
+         // customise the range axis...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         rangeAxis.setAutoRangeIncludesZero(true);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // customise the renderer...
+         final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
+         renderer.setDrawShapes(true);
+ 
+         renderer.setSeriesStroke(
+             0, new BasicStroke(
+                 2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND,
+                 1.0f, new float[] {10.0f, 6.0f}, 0.0f
+             )
+         );
+         renderer.setSeriesStroke(
+             1, new BasicStroke(
+                 2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND,
+                 1.0f, new float[] {6.0f, 6.0f}, 0.0f
+             )
+         );
+         renderer.setSeriesStroke(
+             2, new BasicStroke(
+                 2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND,
+                 1.0f, new float[] {2.0f, 6.0f}, 0.0f
+             )
+         );
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         
+         return chart;
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final LineChartDemo1 demo = new LineChartDemo1("Line Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo2.java jfreechart/source/org/jfree/chart/demo/LineChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LineChartDemo2.java	2004-11-07 15:57:45.000000000 +0100
***************
*** 0 ****
--- 1,214 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * LineChartDemo2.java
+  * -------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: LineChartDemo2.java,v 1.18 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1 (DG);
+  * 10-Nov-2003 : Added axis offsets and changed colors (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.ItemLabelAnchor;
+ import org.jfree.chart.labels.ItemLabelPosition;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * A simple demonstration application showing how to create a line chart using data from an
+  * {@link XYDataset}.
+  *
+  */
+ public class LineChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public LineChartDemo2(final String title) {
+ 
+         super(title);
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private XYDataset createDataset() {
+         
+         final XYSeries series1 = new XYSeries("First");
+         series1.add(1.0, 1.0);
+         series1.add(2.0, 4.0);
+         series1.add(3.0, 3.0);
+         series1.add(4.0, 5.0);
+         series1.add(5.0, 5.0);
+         series1.add(6.0, 7.0);
+         series1.add(7.0, 7.0);
+         series1.add(8.0, 8.0);
+ 
+         final XYSeries series2 = new XYSeries("Second");
+         series2.add(1.0, 5.0);
+         series2.add(2.0, 7.0);
+         series2.add(3.0, 6.0);
+         series2.add(4.0, 8.0);
+         series2.add(5.0, 4.0);
+         series2.add(6.0, 4.0);
+         series2.add(7.0, 2.0);
+         series2.add(8.0, 1.0);
+ 
+         final XYSeries series3 = new XYSeries("Third");
+         series3.add(3.0, 4.0);
+         series3.add(4.0, 3.0);
+         series3.add(5.0, 2.0);
+         series3.add(6.0, 3.0);
+         series3.add(7.0, 6.0);
+         series3.add(8.0, 3.0);
+         series3.add(9.0, 4.0);
+         series3.add(10.0, 3.0);
+ 
+         final XYSeriesCollection dataset = new XYSeriesCollection();
+         dataset.addSeries(series1);
+         dataset.addSeries(series2);
+         dataset.addSeries(series3);
+                 
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the data for the chart.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Line Chart Demo 2",      // chart title
+             "X",                      // x axis label
+             "Y",                      // y axis label
+             dataset,                  // data
+             PlotOrientation.HORIZONTAL,
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         chart.setBackgroundPaint(Color.white);
+ 
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setDisplaySeriesShapes(true);
+         
+         // get a reference to the plot for further customisation...
+         final XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         plot.setDomainCrosshairLockedOnData(true);
+         plot.setDomainCrosshairVisible(true);
+         plot.setRangeCrosshairLockedOnData(true);
+         plot.setRangeCrosshairVisible(true);
+         
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPlotShapes(true);
+         renderer.setShapesFilled(true);
+         renderer.setItemLabelsVisible(true);
+         final ItemLabelPosition p = new ItemLabelPosition(
+             ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER, TextAnchor.CENTER, Math.PI / 4
+         );
+         renderer.setPositiveItemLabelPosition(p);
+ 
+         // change the auto tick unit selection to integer units only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         // OPTIONAL CUSTOMISATION COMPLETED.
+                 
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final LineChartDemo2 demo = new LineChartDemo2("Line Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo3.java jfreechart/source/org/jfree/chart/demo/LineChartDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LineChartDemo3.java	2004-11-07 15:57:39.000000000 +0100
***************
*** 0 ****
--- 1,148 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * LineChartDemo3.java
+  * -------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: LineChartDemo3.java,v 1.12 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 27-Jan-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * This line chart demo shows many series, each displaying a different shape.
+  *
+  */
+ public class LineChartDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public LineChartDemo3(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final XYSeriesCollection dataset = new XYSeriesCollection();
+         for (int i = 0; i < 10; i++) {
+             final XYSeries series = new XYSeries("S" + i);
+             for (int j = 0; j < 10; j++) {
+                 series.add(j, Math.random() * 100);
+             }
+             dataset.addSeries(series);
+         }
+ 
+         final JFreeChart chart = createChart(dataset);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return A chart based on the supplied dataset.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+     
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Line Chart Demo 3",      // chart title
+             "X",                      // x axis label
+             "Y",                      // y axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, 
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // get a reference to the plot for further customisation...
+         final XYPlot plot = chart.getXYPlot();
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPlotShapes(true);
+ 
+         // change the auto tick unit selection to integer units only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+     
+         return chart;
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final LineChartDemo3 demo = new LineChartDemo3("Line Chart Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo4.java jfreechart/source/org/jfree/chart/demo/LineChartDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LineChartDemo4.java	2004-11-07 15:57:34.000000000 +0100
***************
*** 0 ****
--- 1,117 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * LineChartDemo4.java
+  * -------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: LineChartDemo4.java,v 1.12 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 05-Feb-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple line chart using data from an {@link XYDataset}.
+  *
+  */
+ public class LineChartDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public LineChartDemo4(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final XYDataset dataset = new SampleXYDataset();
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Line Chart Demo 4",      // chart title
+             "X",                      // x axis label
+             "Y",                      // y axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,  
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.getDomainAxis().setLowerMargin(0.0);
+         plot.getDomainAxis().setUpperMargin(0.0);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final LineChartDemo4 demo = new LineChartDemo4("Line Chart Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo5.java jfreechart/source/org/jfree/chart/demo/LineChartDemo5.java
*** jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo5.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LineChartDemo5.java	2004-11-07 15:57:27.000000000 +0100
***************
*** 0 ****
--- 1,257 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * LineChartDemo5.java
+  * -------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: LineChartDemo5.java,v 1.20 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 23-Apr-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Polygon;
+ import java.awt.Shape;
+ import java.awt.geom.Rectangle2D;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.StandardCategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.DefaultDrawingSupplier;
+ import org.jfree.chart.plot.DrawingSupplier;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A line chart demo showing the use of a custom drawing supplier.
+  *
+  */
+ public class LineChartDemo5 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public LineChartDemo5(final String title) {
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         // row keys...
+         final String series1 = "First";
+         final String series2 = "Second";
+         final String series3 = "Third";
+ 
+         // column keys...
+         final String type1 = "Type 1";
+         final String type2 = "Type 2";
+         final String type3 = "Type 3";
+         final String type4 = "Type 4";
+         final String type5 = "Type 5";
+         final String type6 = "Type 6";
+         final String type7 = "Type 7";
+         final String type8 = "Type 8";
+ 
+         // create the dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+ 
+         dataset.addValue(1.0, series1, type1);
+         dataset.addValue(4.0, series1, type2);
+         dataset.addValue(3.0, series1, type3);
+         dataset.addValue(5.0, series1, type4);
+         dataset.addValue(5.0, series1, type5);
+         dataset.addValue(7.0, series1, type6);
+         dataset.addValue(7.0, series1, type7);
+         dataset.addValue(8.0, series1, type8);
+ 
+         dataset.addValue(5.0, series2, type1);
+         dataset.addValue(7.0, series2, type2);
+         dataset.addValue(6.0, series2, type3);
+         dataset.addValue(8.0, series2, type4);
+         dataset.addValue(4.0, series2, type5);
+         dataset.addValue(4.0, series2, type6);
+         dataset.addValue(2.0, series2, type7);
+         dataset.addValue(1.0, series2, type8);
+ 
+         dataset.addValue(4.0, series3, type1);
+         dataset.addValue(3.0, series3, type2);
+         dataset.addValue(2.0, series3, type3);
+         dataset.addValue(3.0, series3, type4);
+         dataset.addValue(6.0, series3, type5);
+         dataset.addValue(3.0, series3, type6);
+         dataset.addValue(4.0, series3, type7);
+         dataset.addValue(3.0, series3, type8);
+            
+         return dataset;
+         
+     }
+ 
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a chart.
+      */    
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createLineChart(
+             "Line Chart Demo 5",      // chart title
+             "Type",                   // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL, // orientation
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setDisplaySeriesShapes(true);
+ 
+         final Shape[] shapes = new Shape[3];
+         int[] xpoints;
+         int[] ypoints;
+ 
+         // right-pointing triangle
+         xpoints = new int[] {-3, 3, -3};
+         ypoints = new int[] {-3, 0, 3};
+         shapes[0] = new Polygon(xpoints, ypoints, 3);
+ 
+         // vertical rectangle
+         shapes[1] = new Rectangle2D.Double(-2, -3, 3, 6);
+ 
+         // left-pointing triangle
+         xpoints = new int[] {-3, 3, 3};
+         ypoints = new int[] {0, -3, 3};
+         shapes[2] = new Polygon(xpoints, ypoints, 3);
+ 
+         final DrawingSupplier supplier = new DefaultDrawingSupplier(
+             DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE,
+             DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE,
+             DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE,
+             DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE,
+             shapes
+         );
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setDrawingSupplier(supplier);
+ 
+         chart.setBackgroundPaint(Color.yellow);
+ 
+         // set the stroke for each series...
+         plot.getRenderer().setSeriesStroke(
+             0, 
+             new BasicStroke(
+                 2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 
+                 1.0f, new float[] {10.0f, 6.0f}, 0.0f
+             )
+         );
+         plot.getRenderer().setSeriesStroke(
+             1, 
+             new BasicStroke(
+                 2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND,
+                 1.0f, new float[] {6.0f, 6.0f}, 0.0f
+             )
+         );
+         plot.getRenderer().setSeriesStroke(
+             2, 
+             new BasicStroke(
+                 2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND,
+                 1.0f, new float[] {2.0f, 6.0f}, 0.0f
+             )
+         );
+ 
+         // customise the renderer...
+         final LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
+         renderer.setDrawShapes(true);
+         renderer.setItemLabelsVisible(true);
+         renderer.setLabelGenerator(new StandardCategoryLabelGenerator());
+ 
+         // customise the range axis...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         rangeAxis.setAutoRangeIncludesZero(false);
+         rangeAxis.setUpperMargin(0.12);
+ 
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+    /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final LineChartDemo5 demo = new LineChartDemo5("Line Chart Demo 5");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo6.java jfreechart/source/org/jfree/chart/demo/LineChartDemo6.java
*** jfreechart-orig/source/org/jfree/chart/demo/LineChartDemo6.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/LineChartDemo6.java	2004-11-07 15:57:21.000000000 +0100
***************
*** 0 ****
--- 1,202 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * LineChartDemo6.java
+  * -------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: LineChartDemo6.java,v 1.5 2004/04/26 19:11:55 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 27-Jan-2004 : Version 1 (DG);
+  * 
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A simple demonstration application showing how to create a line chart using data from an
+  * {@link XYDataset}.
+  *
+  */
+ public class LineChartDemo6 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public LineChartDemo6(final String title) {
+ 
+         super(title);
+ 
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private XYDataset createDataset() {
+         
+         final XYSeries series1 = new XYSeries("First");
+         series1.add(1.0, 1.0);
+         series1.add(2.0, 4.0);
+         series1.add(3.0, 3.0);
+         series1.add(4.0, 5.0);
+         series1.add(5.0, 5.0);
+         series1.add(6.0, 7.0);
+         series1.add(7.0, 7.0);
+         series1.add(8.0, 8.0);
+ 
+         final XYSeries series2 = new XYSeries("Second");
+         series2.add(1.0, 5.0);
+         series2.add(2.0, 7.0);
+         series2.add(3.0, 6.0);
+         series2.add(4.0, 8.0);
+         series2.add(5.0, 4.0);
+         series2.add(6.0, 4.0);
+         series2.add(7.0, 2.0);
+         series2.add(8.0, 1.0);
+ 
+         final XYSeries series3 = new XYSeries("Third");
+         series3.add(3.0, 4.0);
+         series3.add(4.0, 3.0);
+         series3.add(5.0, 2.0);
+         series3.add(6.0, 3.0);
+         series3.add(7.0, 6.0);
+         series3.add(8.0, 3.0);
+         series3.add(9.0, 4.0);
+         series3.add(10.0, 3.0);
+ 
+         final XYSeriesCollection dataset = new XYSeriesCollection();
+         dataset.addSeries(series1);
+         dataset.addSeries(series2);
+         dataset.addSeries(series3);
+                 
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the data for the chart.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Line Chart Demo 6",      // chart title
+             "X",                      // x axis label
+             "Y",                      // y axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         chart.setBackgroundPaint(Color.white);
+ 
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setDisplaySeriesShapes(true);
+         
+         // get a reference to the plot for further customisation...
+         final XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
+         renderer.setSeriesLinesVisible(0, false);
+         renderer.setSeriesShapesVisible(1, false);
+         plot.setRenderer(renderer);
+ 
+         // change the auto tick unit selection to integer units only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         // OPTIONAL CUSTOMISATION COMPLETED.
+                 
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final LineChartDemo6 demo = new LineChartDemo6("Line Chart Demo 6");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MarkerDemo1.java jfreechart/source/org/jfree/chart/demo/MarkerDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/MarkerDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MarkerDemo1.java	2004-11-07 16:00:28.000000000 +0100
***************
*** 0 ****
--- 1,267 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------
+  * MarkerDemo1.java
+  * ----------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MarkerDemo1.java,v 1.16 2004/05/11 14:56:17 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 21-May-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.annotations.XYAnnotation;
+ import org.jfree.chart.annotations.XYDrawableAnnotation;
+ import org.jfree.chart.annotations.XYPointerAnnotation;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.Marker;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.ValueMarker;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.Hour;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RectangleAnchor;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * A demo application.
+  *
+  */
+ public class MarkerDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new instance.
+      *
+      * @param title  the frame title.
+      */
+     public MarkerDemo1(final String title) {
+ 
+         super(title);
+         final XYDataset data = createDataset();
+         final JFreeChart chart = createChart(data);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setVerticalZoom(true);
+         chartPanel.setHorizontalZoom(true);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample chart.
+      *
+      * @param data  the sample data.
+      *
+      * @return A configured chart.
+      */
+     private JFreeChart createChart(final XYDataset data) {
+ 
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Marker Demo 1",
+             "X",
+             "Y", 
+             data, 
+             PlotOrientation.VERTICAL,
+             true, 
+             true, 
+             false
+         );
+         chart.getLegend().setAnchor(Legend.EAST);
+ 
+         // customise...
+         final XYPlot plot = chart.getXYPlot();
+         plot.getRenderer().setToolTipGenerator(StandardXYToolTipGenerator.getTimeSeriesInstance());
+ 
+         // set axis margins to allow space for marker labels...
+         final DateAxis domainAxis = new DateAxis("Time");
+         domainAxis.setUpperMargin(0.50);
+         plot.setDomainAxis(domainAxis);
+ 
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setUpperMargin(0.30);
+         rangeAxis.setLowerMargin(0.50);
+ 
+         // add a labelled marker for the bid start price...
+         final Marker start = new ValueMarker(200.0);
+         start.setPaint(Color.green);
+         start.setLabel("Bid Start Price");
+         start.setLabelAnchor(RectangleAnchor.BOTTOM_RIGHT);
+         start.setLabelTextAnchor(TextAnchor.TOP_RIGHT);
+         plot.addRangeMarker(start);
+ 
+         // add a labelled marker for the target price...
+         final Marker target = new ValueMarker(175.0);
+         target.setPaint(Color.red);
+         target.setLabel("Target Price");
+         target.setLabelAnchor(RectangleAnchor.TOP_RIGHT);
+         target.setLabelTextAnchor(TextAnchor.BOTTOM_RIGHT);
+         plot.addRangeMarker(target);
+ 
+         // add a labelled marker for the original closing time...
+         final Hour hour = new Hour(2, new Day(22, 5, 2003));
+         double millis = hour.getFirstMillisecond();
+         final Marker originalEnd = new ValueMarker(millis);
+         originalEnd.setPaint(Color.orange);
+         originalEnd.setLabel("Original Close (02:00)");
+         originalEnd.setLabelAnchor(RectangleAnchor.TOP_LEFT);
+         originalEnd.setLabelTextAnchor(TextAnchor.TOP_RIGHT);
+         plot.addDomainMarker(originalEnd);
+ 
+         // add a labelled marker for the current closing time...
+         final Minute min = new Minute(15, hour);
+         millis = min.getFirstMillisecond();
+         final Marker currentEnd = new ValueMarker(millis);
+         currentEnd.setPaint(Color.red);
+         currentEnd.setLabel("Close Date (02:15)");
+         currentEnd.setLabelAnchor(RectangleAnchor.TOP_RIGHT);
+         currentEnd.setLabelTextAnchor(TextAnchor.TOP_LEFT);
+         plot.addDomainMarker(currentEnd);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // label the best bid with an arrow and label...
+         final Hour h = new Hour(2, new Day(22, 5, 2003));
+         final Minute m = new Minute(10, h);
+         millis = m.getFirstMillisecond();
+         final CircleDrawer cd = new CircleDrawer(Color.red, new BasicStroke(1.0f), null);
+         final XYAnnotation bestBid = new XYDrawableAnnotation(millis, 163.0, 11, 11, cd);
+         plot.addAnnotation(bestBid);
+         final XYPointerAnnotation pointer = new XYPointerAnnotation("Best Bid", millis, 163.0,
+                                                               3.0 * Math.PI / 4.0);
+         pointer.setBaseRadius(35.0);
+         pointer.setTipRadius(10.0);
+         pointer.setFont(new Font("SansSerif", Font.PLAIN, 9));
+         pointer.setPaint(Color.blue);
+         pointer.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT);
+         plot.addAnnotation(pointer);
+ 
+         return chart;
+ 
+     }
+ 
+     /**
+      * Returns a sample dataset.
+      *
+      * @return A sample dataset.
+      */
+     private XYDataset createDataset() {
+ 
+         final TimeSeriesCollection result = new TimeSeriesCollection();
+         result.addSeries(createSupplier1Bids());
+         result.addSeries(createSupplier2Bids());
+         return result;
+ 
+     }
+ 
+     /**
+      * Returns a sample data series (for supplier 1).
+      *
+      * @return A sample data series.
+      */
+     private TimeSeries createSupplier1Bids() {
+ 
+         final Hour hour = new Hour(1, new Day(22, 5, 2003));
+ 
+         final TimeSeries series1 = new TimeSeries("Supplier 1", Minute.class);
+         series1.add(new Minute(13, hour), 200.0);
+         series1.add(new Minute(14, hour), 195.0);
+         series1.add(new Minute(45, hour), 190.0);
+         series1.add(new Minute(46, hour), 188.0);
+         series1.add(new Minute(47, hour), 185.0);
+         series1.add(new Minute(52, hour), 180.0);
+ 
+         return series1;
+ 
+     }
+ 
+     /**
+      * Returns a sample data series (for supplier 2).
+      *
+      * @return A sample data series.
+      */
+     private TimeSeries createSupplier2Bids() {
+ 
+         final Hour hour1 = new Hour(1, new Day(22, 5, 2003));
+         final Hour hour2 = (Hour) hour1.next();
+ 
+         final TimeSeries series2 = new TimeSeries("Supplier 2", Minute.class);
+         series2.add(new Minute(25, hour1), 185.0);
+         series2.add(new Minute(0, hour2), 175.0);
+         series2.add(new Minute(5, hour2), 170.0);
+         series2.add(new Minute(6, hour2), 168.0);
+         series2.add(new Minute(9, hour2), 165.0);
+         series2.add(new Minute(10, hour2), 163.0);
+ 
+         return series2;
+ 
+     }
+ 
+     /**
+      * Starting point for the demo application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MarkerDemo1 demo = new MarkerDemo1("Marker Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MeterChartDemo2.java jfreechart/source/org/jfree/chart/demo/MeterChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/MeterChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MeterChartDemo2.java	2004-11-07 16:00:18.000000000 +0100
***************
*** 0 ****
--- 1,102 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * MeterChartDemo2.java
+  * --------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MeterChartDemo2.java,v 1.5 2004/05/12 08:26:08 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 09-Feb-2004 : Version 1 (DG);
+  * 
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.image.BufferedImage;
+ import java.io.BufferedOutputStream;
+ import java.io.File;
+ import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.OutputStream;
+ 
+ import org.jfree.chart.ChartUtilities;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.MeterPlot;
+ import org.jfree.data.general.DefaultValueDataset;
+ import org.jfree.data.general.ValueDataset;
+ 
+ /**
+  * In this demo, a meter chart is saved to a scaled image file.
+  */
+ public class MeterChartDemo2 {
+ 
+     /**
+      * Default constructor.
+      */
+     public MeterChartDemo2() {
+         super();
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ValueDataset dataset = new DefaultValueDataset(75.0);
+         final MeterPlot plot = new MeterPlot(dataset);
+         final JFreeChart chart = new JFreeChart("Scaled Image Test", plot);
+         
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         // save it to an image
+         try {
+             final File file1 = new File("meterchart100.png");
+             final OutputStream out = new BufferedOutputStream(new FileOutputStream(file1));
+             final BufferedImage image = chart.createBufferedImage(200, 200, 400, 400, null);
+             ChartUtilities.writeBufferedImageAsPNG(out, image);
+         }
+         catch (IOException e) {
+             System.out.println(e.toString());
+         }
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MeterChartDemo.java jfreechart/source/org/jfree/chart/demo/MeterChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/MeterChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MeterChartDemo.java	2004-11-07 16:00:23.000000000 +0100
***************
*** 0 ****
--- 1,166 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * MeterChartDemo.java
+  * -------------------
+  * (C) Copyright 2002-2004, by Hari and Contributors.
+  *
+  * Original Author:  Hari;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: MeterChartDemo.java,v 1.8 2004/04/26 19:40:15 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1, contributed by Hari (DG);
+  * 19-Apr-2002 : Renamed JRefineryUtilities-->RefineryUtilities (DG);
+  * 25-Jun-2002 : Removed unnecessary imports (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.awt.GradientPaint;
+ import java.awt.Insets;
+ import java.awt.event.WindowAdapter;
+ import java.awt.event.WindowEvent;
+ 
+ import javax.swing.JFrame;
+ 
+ import org.jfree.chart.ChartFrame;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.MeterLegend;
+ import org.jfree.chart.plot.DialShape;
+ import org.jfree.chart.plot.MeterPlot;
+ import org.jfree.data.Range;
+ import org.jfree.data.general.DefaultValueDataset;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A meter chart demonstration application.
+  *
+  * @author Hari
+  */
+ public class MeterChartDemo {
+ 
+     /**
+      * Displays a meter chart.
+      *
+      * @param value  the value.
+      * @param shape  the dial shape.
+      */
+     void displayMeterChart(final double value, final DialShape shape) {
+ 
+         final DefaultValueDataset data = new DefaultValueDataset(75.0);
+         final MeterPlot plot = new MeterPlot(data);
+         plot.setUnits("Degrees");
+         plot.setRange(new Range(20.0, 140.0));
+         plot.setNormalRange(new Range(70.0, 100.0));
+         plot.setWarningRange(new Range(100.0, 120.0));
+         plot.setCriticalRange(new Range(120.0, 140.0));
+         
+         plot.setDialShape(shape);
+         plot.setNeedlePaint(Color.white);
+         plot.setTickLabelFont(new Font("SansSerif", Font.BOLD, 9));
+ 
+         plot.setInsets(new Insets(5, 5, 5, 5));
+         final JFreeChart chart = new JFreeChart(
+             "Meter Chart", 
+             JFreeChart.DEFAULT_TITLE_FONT, 
+             plot, 
+             false
+         );
+ 
+         final MeterLegend legend = new MeterLegend("Sample Meter");
+         chart.setLegend(legend);
+ 
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         final JFrame chartFrame = new ChartFrame("Meter Chart", chart);
+         chartFrame.addWindowListener(new WindowAdapter() {
+           /**
+            * Invoked when a window is in the process of being closed.
+            * The close operation can be overridden at this point.
+            */
+           public void windowClosing(final WindowEvent e) {
+             System.exit(0);
+           }
+         });
+         chartFrame.pack();
+         RefineryUtilities.positionFrameRandomly(chartFrame);
+         chartFrame.setSize(250, 250);
+         chartFrame.setVisible(true);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the meter plot demonstration application.
+      *
+      * @param args  used to specify the type and value.
+      */
+     public static void main(final String[] args) {
+ 
+         if (args.length == 0) {
+             System.err.println("Usage: java TestMeter <type> <value>");
+             System.err.println("Type:  0 = PIE");
+             System.err.println("Type:  1 = CIRCLE");
+             System.err.println("Type:  2 = CHORD");
+         }
+         final MeterChartDemo h = new MeterChartDemo();
+         double val = 85;
+         DialShape dialShape = DialShape.CIRCLE;
+         if (args.length > 0) {
+             final int type = Integer.parseInt(args[0]);
+             if (type == 0) {
+                 dialShape = DialShape.PIE;
+             }
+             else if (type == 1) {
+                 dialShape = DialShape.CIRCLE;
+             }
+             else if (type == 0) {
+                 dialShape = DialShape.CHORD;
+             }
+         }
+         if (args.length > 1) {
+             val = new Double(args[1]).doubleValue();
+         }
+         h.displayMeterChart(val, dialShape);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MinMaxCategoryPlotDemo.java jfreechart/source/org/jfree/chart/demo/MinMaxCategoryPlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/MinMaxCategoryPlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MinMaxCategoryPlotDemo.java	2004-11-07 16:00:14.000000000 +0100
***************
*** 0 ****
--- 1,153 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------------
+  * MinMaxCategoryPlotDemo.java
+  * ---------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MinMaxCategoryPlotDemo.java,v 1.12 2004/04/30 08:10:43 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 08-Aug-2002 : Demo for a renderer contributed by Tomer Peretz (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a min/max category plot.
+  *
+  */
+ public class MinMaxCategoryPlotDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public MinMaxCategoryPlotDemo(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(1.0, "First", "Category 1");
+         dataset.addValue(4.0, "First", "Category 2");
+         dataset.addValue(3.0, "First", "Category 3");
+         dataset.addValue(5.0, "First", "Category 4");
+         dataset.addValue(5.0, "First", "Category 5");
+         dataset.addValue(7.0, "First", "Category 6");
+         dataset.addValue(7.0, "First", "Category 7");
+         dataset.addValue(8.0, "First", "Category 8");
+         dataset.addValue(5.0, "Second", "Category 1");
+         dataset.addValue(7.0, "Second", "Category 2");
+         dataset.addValue(6.0, "Second", "Category 3");
+         dataset.addValue(8.0, "Second", "Category 4");
+         dataset.addValue(4.0, "Second", "Category 5");
+         dataset.addValue(4.0, "Second", "Category 6");
+         dataset.addValue(2.0, "Second", "Category 7");
+         dataset.addValue(1.0, "Second", "Category 8");
+         dataset.addValue(4.0, "Third", "Category 1");
+         dataset.addValue(3.0, "Third", "Category 2");
+         dataset.addValue(2.0, "Third", "Category 3");
+         dataset.addValue(3.0, "Third", "Category 4");
+         dataset.addValue(6.0, "Third", "Category 5");
+         dataset.addValue(3.0, "Third", "Category 6");
+         dataset.addValue(4.0, "Third", "Category 7");
+         dataset.addValue(3.0, "Third", "Category 8");
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Min/Max Category Plot",  // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,
+             true,                     // include legend
+             true,                     // tooltips
+             false                     // urls
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.yellow);
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setRenderer(new MinMaxCategoryRenderer());
+         // OPTIONAL CUSTOMISATION COMPLETED.
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+    /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MinMaxCategoryPlotDemo demo = new MinMaxCategoryPlotDemo(
+             "Min/Max Category Chart Demo"
+         );
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MouseZoomDemo.java jfreechart/source/org/jfree/chart/demo/MouseZoomDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/MouseZoomDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MouseZoomDemo.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,186 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * MouseZoomDemo.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Viktor Rajewski and Contributors.
+  *
+  * Original Author:  Viktor Rajewski;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: MouseZoomDemo.java,v 1.13 2004/06/03 08:52:15 mungady Exp $
+  * 
+  * Changes
+  * -------
+  * 12-Aug-2002 : Version 1, based on XYSeriesDemo (VR);
+  * 11-Oct-2002 : Renamed XYSeriesMouseZoomDemo --> MouseZoomDemo, altered layout, and fixed errors
+  *               reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.event.ItemEvent;
+ import java.awt.event.ItemListener;
+ 
+ import javax.swing.JCheckBox;
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.Log;
+ import org.jfree.util.PrintStreamLogTarget;
+ 
+ /**
+  * A simple demo showing mouse zooming.
+  *
+  * @author Viktor Rajewski
+  */
+ public class MouseZoomDemo extends ApplicationFrame {
+ 
+     /** The chart panel. */
+     private ChartPanel chartPanel;
+ 
+     /** X zoom. */
+     private JCheckBox xzoom;
+ 
+     /** Y zoom. */
+     private JCheckBox yzoom;
+ 
+     /**
+      * A demonstration of mouse zooming.
+      *
+      * @param title  the frame title.
+      */
+     public MouseZoomDemo(final String title) {
+ 
+         super(title);
+         final SampleXYDataset data = new SampleXYDataset();
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Mouse Zoom Demo",
+             "X", 
+             "Y", 
+             data, 
+             PlotOrientation.VERTICAL,
+             true, 
+             true, 
+             false
+         );
+ 
+         this.chartPanel = new ChartPanel(chart);
+         this.chartPanel.setHorizontalZoom(false);
+         this.chartPanel.setVerticalZoom(false);
+         this.chartPanel.setHorizontalAxisTrace(false);
+         this.chartPanel.setVerticalAxisTrace(false);
+         this.chartPanel.setFillZoomRectangle(true);
+         this.chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+ 
+         final JPanel main = new JPanel(new BorderLayout());
+         final JPanel checkpanel = new JPanel();
+         this.xzoom = new JCheckBox("Horizontal Mouse Zooming");
+         this.xzoom.setSelected(false);
+         this.yzoom = new JCheckBox("Vertical Mouse Zooming");
+         this.yzoom.setSelected(false);
+         final CheckListener clisten = new CheckListener();
+         this.xzoom.addItemListener(clisten);
+         this.yzoom.addItemListener(clisten);
+         checkpanel.add(this.xzoom);
+         checkpanel.add(this.yzoom);
+         main.add(checkpanel, BorderLayout.SOUTH);
+         main.add(this.chartPanel);
+         setContentPane(main);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         Log.getInstance().addTarget(new PrintStreamLogTarget(System.out));
+         final MouseZoomDemo demo = new MouseZoomDemo("Mouse Zoom Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+     /**
+      * An item listener.
+      *
+      * @author VR
+      */
+     class CheckListener implements ItemListener {
+ 
+         /**
+          * Receives change events.
+          *
+          * @param e  the event.
+          */
+         public void itemStateChanged(final ItemEvent e) {
+             final Object source = e.getItemSelectable();
+             if (source == xzoom) {
+                 if (e.getStateChange() == ItemEvent.DESELECTED) {
+                     chartPanel.setHorizontalZoom(false);
+                     chartPanel.setHorizontalAxisTrace(false);
+                     chartPanel.repaint();
+                 }
+                 else {
+                     chartPanel.setHorizontalZoom(true);
+                     chartPanel.setHorizontalAxisTrace(true);
+                 }
+             }
+             else if (source == yzoom) {
+                 if (e.getStateChange() == ItemEvent.DESELECTED) {
+                     chartPanel.setVerticalZoom(false);
+                     chartPanel.setVerticalAxisTrace(false);
+                     chartPanel.repaint();
+                 }
+                 else {
+                     chartPanel.setVerticalZoom(true);
+                     chartPanel.setVerticalAxisTrace(true);
+                 }
+             }
+        }
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MovingAverageDemo.java jfreechart/source/org/jfree/chart/demo/MovingAverageDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/MovingAverageDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MovingAverageDemo.java	2004-11-07 16:00:09.000000000 +0100
***************
*** 0 ****
--- 1,170 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * MovingAverageDemo.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MovingAverageDemo.java,v 1.14 2004/04/30 08:11:18 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 28-Jan-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Month;
+ import org.jfree.data.time.MovingAverage;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * An example showing the calculation of a moving average for a time series.
+  *
+  */
+ public class MovingAverageDemo extends ApplicationFrame {
+ 
+     /**
+      * A moving average demo.
+      *
+      * @param title  the frame title.
+      */
+     public MovingAverageDemo(final String title) {
+ 
+         super(title);
+ 
+         // create a title...
+         final String chartTitle = "Legal & General Unit Trust Prices";
+         final XYDataset dataset = createDataset();
+ 
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             chartTitle, 
+             "Date", 
+             "Price Per Unit",
+             dataset,
+             true,
+             true,
+             false
+         );
+ 
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setDisplaySeriesShapes(true);
+         final XYPlot plot = chart.getXYPlot();
+         final XYItemRenderer renderer = plot.getRenderer();
+         if (renderer instanceof StandardXYItemRenderer) {
+             final StandardXYItemRenderer rr = (StandardXYItemRenderer) renderer;
+             rr.setPlotShapes(true);
+             rr.setShapesFilled(true);
+         }
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a dataset, one series containing unit trust prices, the other a moving average.
+      *
+      * @return the dataset.
+      */
+     public XYDataset createDataset() {
+ 
+         final TimeSeries s1 = new TimeSeries("L&G European Index Trust", Month.class);
+         s1.add(new Month(2, 2001), 181.8);
+         s1.add(new Month(3, 2001), 167.3);
+         s1.add(new Month(4, 2001), 153.8);
+         s1.add(new Month(5, 2001), 167.6);
+         s1.add(new Month(6, 2001), 158.8);
+         s1.add(new Month(7, 2001), 148.3);
+         s1.add(new Month(8, 2001), 153.9);
+         s1.add(new Month(9, 2001), 142.7);
+         s1.add(new Month(10, 2001), 123.2);
+         s1.add(new Month(11, 2001), 131.8);
+         s1.add(new Month(12, 2001), 139.6);
+         s1.add(new Month(1, 2002), 142.9);
+         s1.add(new Month(2, 2002), 138.7);
+         s1.add(new Month(3, 2002), 137.3);
+         s1.add(new Month(4, 2002), 143.9);
+         s1.add(new Month(5, 2002), 139.8);
+         s1.add(new Month(6, 2002), 137.0);
+         s1.add(new Month(7, 2002), 132.8);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         final TimeSeries s2 = MovingAverage.createMovingAverage(
+             s1, "Six Month Moving Average", 6, 0
+         );
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(s1);
+         dataset.addSeries(s2);
+         
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MovingAverageDemo demo = new MovingAverageDemo("Moving Average Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultipleAxisDemo1.java jfreechart/source/org/jfree/chart/demo/MultipleAxisDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultipleAxisDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultipleAxisDemo1.java	2004-11-07 16:00:04.000000000 +0100
***************
*** 0 ****
--- 1,217 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * MultipleAxisDemo1.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MultipleAxisDemo1.java,v 1.15 2004/05/19 10:07:38 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 15-Jul-2002 : Version 1 (DG);
+  * 27-Apr-2004 : Updated for changes to XYPlot class (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.RegularTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * This demo shows a time series chart that has multiple range axes.
+  */
+ public class MultipleAxisDemo1 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a time series chart with muliple axes.
+      *
+      * @param title  the frame title.
+      */
+     public MultipleAxisDemo1(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createChart();
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 270));
+         chartPanel.setHorizontalZoom(true);
+         chartPanel.setVerticalZoom(true);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates the demo chart.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart() {
+ 
+         final XYDataset dataset1 = createDataset("Series 1", 100.0, new Minute(), 200);
+         
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Multiple Axis Demo 1", 
+             "Time of Day", 
+             "Primary Range Axis",
+             dataset1, 
+             true, 
+             true, 
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+         chart.addSubtitle(new TextTitle("Four datasets and four range axes."));  
+         final XYPlot plot = chart.getXYPlot();
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPaint(Color.black);
+        
+         // AXIS 2
+         final NumberAxis axis2 = new NumberAxis("Range Axis 2");
+         axis2.setAutoRangeIncludesZero(false);
+         axis2.setLabelPaint(Color.red);
+         axis2.setTickLabelPaint(Color.red);
+         plot.setRangeAxis(1, axis2);
+         plot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);
+ 
+         final XYDataset dataset2 = createDataset("Series 2", 1000.0, new Minute(), 170);
+         plot.setDataset(1, dataset2);
+         plot.mapDatasetToRangeAxis(1, 1);
+         XYItemRenderer renderer2 = new StandardXYItemRenderer();
+         renderer2.setSeriesPaint(0, Color.red);
+         plot.setRenderer(1, renderer2);
+         
+         // AXIS 3
+         final NumberAxis axis3 = new NumberAxis("Range Axis 3");
+         axis3.setLabelPaint(Color.blue);
+         axis3.setTickLabelPaint(Color.blue);
+         plot.setRangeAxis(2, axis3);
+ 
+         final XYDataset dataset3 = createDataset("Series 3", 10000.0, new Minute(), 170);
+         plot.setDataset(2, dataset3);
+         plot.mapDatasetToRangeAxis(2, 2);
+         XYItemRenderer renderer3 = new StandardXYItemRenderer();
+         renderer3.setSeriesPaint(0, Color.blue);
+         plot.setRenderer(2, renderer3);
+ 
+         // AXIS 4        
+         final NumberAxis axis4 = new NumberAxis("Range Axis 4");
+         axis4.setLabelPaint(Color.green);
+         axis4.setTickLabelPaint(Color.green);
+         plot.setRangeAxis(3, axis4);
+         
+         final XYDataset dataset4 = createDataset("Series 4", 25.0, new Minute(), 200);
+         plot.setDataset(3, dataset4);
+         plot.mapDatasetToRangeAxis(3, 3);
+         
+         XYItemRenderer renderer4 = new StandardXYItemRenderer();
+         renderer4.setSeriesPaint(0, Color.green);        
+         plot.setRenderer(3, renderer4);
+                 
+         return chart;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @param name  the dataset name.
+      * @param base  the starting value.
+      * @param start  the starting period.
+      * @param count  the number of values to generate.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset(final String name, final double base, 
+                                     final RegularTimePeriod start, final int count) {
+ 
+         final TimeSeries series = new TimeSeries(name, start.getClass());
+         RegularTimePeriod period = start;
+         double value = base;
+         for (int i = 0; i < count; i++) {
+             series.add(period, value);    
+             period = period.next();
+             value = value * (1 + (Math.random() - 0.495) / 10.0);
+         }
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(series);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultipleAxisDemo1 demo = new MultipleAxisDemo1("Multiple Axis Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultipleAxisDemo2.java jfreechart/source/org/jfree/chart/demo/MultipleAxisDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultipleAxisDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultipleAxisDemo2.java	2004-11-07 15:59:59.000000000 +0100
***************
*** 0 ****
--- 1,185 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * MultipleAxisDemo2.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MultipleAxisDemo2.java,v 1.12 2004/04/27 14:53:09 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 15-Jul-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.RegularTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * An example of....
+  *
+  */
+ public class MultipleAxisDemo2 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a time series chart with muliple axes.
+      *
+      * @param title  the frame title.
+      */
+     public MultipleAxisDemo2(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createChart();
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates the demo chart.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart() {
+ 
+         final XYDataset dataset1 = createDataset("Series 1", 100.0, new Minute(), 200);
+         
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Multiple Axis Demo 2", 
+             "Time of Day", 
+             "Primary Range Axis",
+             dataset1, 
+             true, 
+             true, 
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+         final XYPlot plot = chart.getXYPlot();
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPaint(Color.black);
+        
+         // DOMAIN AXIS 2
+         final NumberAxis xAxis2 = new NumberAxis("Domain Axis 2");
+         xAxis2.setAutoRangeIncludesZero(false);
+         plot.setDomainAxis(1, xAxis2);
+        
+         // RANGE AXIS 2
+         final NumberAxis yAxis2 = new NumberAxis("Range Axis 2");
+         plot.setRangeAxis(1, yAxis2);
+         plot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_RIGHT);
+ 
+         final XYDataset dataset2 = createDataset("Series 2", 1000.0, new Minute(), 170);
+         plot.setDataset(1, dataset2);    
+         plot.mapDatasetToDomainAxis(1, 1);
+         plot.mapDatasetToRangeAxis(1, 1);    
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @param name  the dataset name.
+      * @param base  the starting value.
+      * @param start  the starting period.
+      * @param count  the number of values to generate.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset(final String name, final double base, 
+                                     final RegularTimePeriod start, final int count) {
+ 
+         final TimeSeries series = new TimeSeries(name, start.getClass());
+         RegularTimePeriod period = start;
+         double value = base;
+         for (int i = 0; i < count; i++) {
+             series.add(period, value);    
+             period = period.next();
+             value = value * (1 + (Math.random() - 0.495) / 10.0);
+         }
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(series);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultipleAxisDemo2 demo = new MultipleAxisDemo2("Multiple Axis Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultipleAxisDemo3.java jfreechart/source/org/jfree/chart/demo/MultipleAxisDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultipleAxisDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultipleAxisDemo3.java	2004-11-07 15:59:52.000000000 +0100
***************
*** 0 ****
--- 1,192 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * MultipleAxisDemo3.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MultipleAxisDemo3.java,v 1.9 2004/04/27 14:53:09 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 16-Sep-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.RegularTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * An example of....
+  *
+  */
+ public class MultipleAxisDemo3 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a time series chart with muliple axes.
+      *
+      * @param title  the frame title.
+      */
+     public MultipleAxisDemo3(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createChart();
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates the demo chart.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart() {
+ 
+         final XYDataset dataset1 = createDataset("Series 1", 100.0, new Minute(), 200);
+         
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Multiple Axis Demo 3", 
+             "Time of Day", 
+             "Primary Range Axis",
+             dataset1, 
+             true, 
+             true, 
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+         final XYPlot plot = chart.getXYPlot();
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPaint(Color.black);
+        
+         // DOMAIN AXIS 2
+         final NumberAxis xAxis2 = new NumberAxis("Domain Axis 2");
+         xAxis2.setAutoRangeIncludesZero(false);
+         plot.setDomainAxis(1, xAxis2);
+         plot.setDomainAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);
+        
+         // DOMAIN AXIS 3
+         final NumberAxis xAxis3 = new NumberAxis("Domain Axis 3");
+         xAxis2.setAutoRangeIncludesZero(false);
+         plot.setDomainAxis(2, xAxis3);
+         plot.setDomainAxisLocation(2, AxisLocation.BOTTOM_OR_LEFT);
+ 
+         // RANGE AXIS 2
+         final NumberAxis yAxis2 = new NumberAxis("Range Axis 2");
+         plot.setRangeAxis(1, yAxis2);
+         plot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_RIGHT);
+ 
+         final XYDataset dataset2 = createDataset("Series 2", 1000.0, new Minute(), 170);
+         plot.setDataset(1, dataset2);    
+         plot.mapDatasetToDomainAxis(1, 1);
+         plot.mapDatasetToRangeAxis(1, 1);    
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @param name  the dataset name.
+      * @param base  the starting value.
+      * @param start  the starting period.
+      * @param count  the number of values to generate.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset(final String name, final double base, 
+                                     final RegularTimePeriod start, final int count) {
+ 
+         final TimeSeries series = new TimeSeries(name, start.getClass());
+         RegularTimePeriod period = start;
+         double value = base;
+         for (int i = 0; i < count; i++) {
+             series.add(period, value);    
+             period = period.next();
+             value = value * (1 + (Math.random() - 0.495) / 10.0);
+         }
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(series);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultipleAxisDemo3 demo = new MultipleAxisDemo3("Multiple Axis Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultipleDatasetDemo1.java jfreechart/source/org/jfree/chart/demo/MultipleDatasetDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultipleDatasetDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultipleDatasetDemo1.java	2004-11-07 15:59:44.000000000 +0100
***************
*** 0 ****
--- 1,195 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * SecondaryDatasetDemo1.java
+  * --------------------------
+  * (C) Copyright 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: MultipleDatasetDemo1.java,v 1.1 2004/05/21 14:22:35 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 30-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.FlowLayout;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.JButton;
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.RegularTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A demo showing the addition and removal of multiple datasets / renderers.
+  */
+ public class MultipleDatasetDemo1 extends ApplicationFrame implements ActionListener {
+ 
+     /** The plot. */
+     private XYPlot plot;
+    
+     /** The index of the last dataset added. */
+     private int datasetIndex = 0;
+     
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public MultipleDatasetDemo1(final String title) {
+ 
+         super(title);
+         final TimeSeriesCollection dataset1 = createRandomDataset("Series 1");
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Multiple Dataset Demo 1", "Time", "Value", dataset1, true, true, false
+         );
+         chart.setBackgroundPaint(Color.white);
+         
+         this.plot = chart.getXYPlot();
+         this.plot.setBackgroundPaint(Color.lightGray);
+         this.plot.setDomainGridlinePaint(Color.white);
+         this.plot.setRangeGridlinePaint(Color.white);
+         this.plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 4, 4, 4, 4));
+         final ValueAxis axis = this.plot.getDomainAxis();
+         axis.setAutoRange(true);
+ 
+         final NumberAxis rangeAxis2 = new NumberAxis("Range Axis 2");
+         rangeAxis2.setAutoRangeIncludesZero(false);
+         
+         final JPanel content = new JPanel(new BorderLayout());
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         content.add(chartPanel);
+         
+         final JButton button1 = new JButton("Add Dataset");
+         button1.setActionCommand("ADD_DATASET");
+         button1.addActionListener(this);
+         
+         final JButton button2 = new JButton("Remove Dataset");
+         button2.setActionCommand("REMOVE_DATASET");
+         button2.addActionListener(this);
+ 
+         final JPanel buttonPanel = new JPanel(new FlowLayout());
+         buttonPanel.add(button1);
+         buttonPanel.add(button2);
+         
+         content.add(buttonPanel, BorderLayout.SOUTH);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(content);
+ 
+     }
+ 
+     /**
+      * Creates a random dataset.
+      * 
+      * @param name  the series name.
+      * 
+      * @return The dataset.
+      */
+     private TimeSeriesCollection createRandomDataset(final String name) {
+         final TimeSeries series = new TimeSeries(name);
+         double value = 100.0;
+         RegularTimePeriod t = new Day();
+         for (int i = 0; i < 50; i++) {
+             series.add(t, value);
+             t = t.next();
+             value = value * (1.0 + Math.random() / 100);
+         }
+         return new TimeSeriesCollection(series);
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Handles a click on the button by adding new (random) data.
+      *
+      * @param e  the action event.
+      */
+     public void actionPerformed(final ActionEvent e) {
+        
+         if (e.getActionCommand().equals("ADD_DATASET")) {
+             if (this.datasetIndex < 20) {
+                 this.datasetIndex++;
+                 this.plot.setDataset(
+                     this.datasetIndex, createRandomDataset("S" + this.datasetIndex)
+                 );
+                 this.plot.setRenderer(this.datasetIndex, new StandardXYItemRenderer());
+             }
+         }
+         else if (e.getActionCommand().equals("REMOVE_DATASET")) {
+             if (this.datasetIndex >= 1) {
+                 this.plot.setDataset(this.datasetIndex, null);
+                 this.plot.setRenderer(this.datasetIndex, null);
+                 this.datasetIndex--;
+             }
+         }
+         
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultipleDatasetDemo1 demo = new MultipleDatasetDemo1("Multiple Dataset Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultiplePieChartDemo1.java jfreechart/source/org/jfree/chart/demo/MultiplePieChartDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultiplePieChartDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultiplePieChartDemo1.java	2004-11-07 15:59:37.000000000 +0100
***************
*** 0 ****
--- 1,151 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * MultiplePieChartDemo1.java
+  * --------------------------
+  * (C) Copyright 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MultiplePieChartDemo1.java,v 1.5 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 29-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.labels.StandardPieItemLabelGenerator;
+ import org.jfree.chart.plot.MultiplePiePlot;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.TableOrder;
+ 
+ /**
+  * A simple demonstration application showing how to create a chart consisting of multiple
+  * pie charts.
+  *
+  */
+ public class MultiplePieChartDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public MultiplePieChartDemo1(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart, true, true, true, false, true);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 380));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         final double[][] data = new double[][] {
+             {3.0, 4.0, 3.0, 5.0},
+             {5.0, 7.0, 6.0, 8.0},
+             {5.0, 7.0, 3.0, 8.0},
+             {1.0, 2.0, 3.0, 4.0},
+             {2.0, 3.0, 2.0, 3.0}
+         };
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Region ",
+             "Sales/Q",
+             data
+         );
+         return dataset;
+     }
+     
+     /**
+      * Creates a sample chart with the given dataset.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         final JFreeChart chart = ChartFactory.createMultiplePieChart(
+             "Multiple Pie Chart",  // chart title
+             dataset,               // dataset
+             TableOrder.BY_ROW,
+             true,                  // include legend
+             true,
+             false
+         );
+         final MultiplePiePlot plot = (MultiplePiePlot) chart.getPlot();
+         final JFreeChart subchart = plot.getPieChart();
+         final PiePlot p = (PiePlot) subchart.getPlot();
+         p.setLabelGenerator(new StandardPieItemLabelGenerator("{0}"));
+         p.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         p.setInteriorGap(0.30);
+         
+         return chart;
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultiplePieChartDemo1 demo = new MultiplePieChartDemo1("Multiple Pie Chart Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultiplePieChartDemo2.java jfreechart/source/org/jfree/chart/demo/MultiplePieChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultiplePieChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultiplePieChartDemo2.java	2004-11-07 15:59:31.000000000 +0100
***************
*** 0 ****
--- 1,162 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * MultiplePieChartDemo2.java
+  * --------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MultiplePieChartDemo2.java,v 1.6 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 23-Jan-2003 : Version 1 (DG);
+  * 30-Jan-2004 : Renamed MultiPieChartDemo2 --> MultiplePieChartDemo2, and refactored to
+  *               use the new MultiplePiePlot class (DG);
+  * 
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.text.NumberFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.labels.StandardPieItemLabelGenerator;
+ import org.jfree.chart.plot.MultiplePiePlot;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.TableOrder;
+ 
+ /**
+  * This example is similar to {@link MultiplePieChartDemo1}, but slices the dataset by column
+  * rather than by row.
+  *
+  */
+ public class MultiplePieChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public MultiplePieChartDemo2(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart, true, true, true, false, true);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 380));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         final double[][] data = new double[][] {
+                 {3.0, 4.0, 3.0, 5.0},
+                 {5.0, 7.0, 6.0, 8.0},
+                 {5.0, 7.0, 3.0, 8.0},
+                 {1.0, 2.0, 3.0, 4.0},
+                 {2.0, 3.0, 2.0, 3.0}
+         };
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+                 "Region ",
+                 "Sales/Q",
+                 data
+         );
+         return dataset;
+     }
+ 
+     /**
+      * Creates a sample chart with the given dataset.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         final JFreeChart chart = ChartFactory.createMultiplePieChart(
+             "Multiple Pie Chart",  // chart title
+             dataset,               // dataset
+             TableOrder.BY_COLUMN,
+             true,                  // include legend
+             true,
+             false
+         );
+         final MultiplePiePlot plot = (MultiplePiePlot) chart.getPlot();
+         plot.setBackgroundPaint(Color.white);
+         plot.setOutlineStroke(new BasicStroke(1.0f));
+         final JFreeChart subchart = plot.getPieChart();
+         final PiePlot p = (PiePlot) subchart.getPlot();
+         p.setBackgroundPaint(null);
+         p.setOutlineStroke(null);
+         p.setLabelGenerator(new StandardPieItemLabelGenerator(
+             "{0} ({2})", NumberFormat.getNumberInstance(), NumberFormat.getPercentInstance()
+         ));
+         p.setMaximumLabelWidth(0.35);
+         p.setLabelFont(new Font("SansSerif", Font.PLAIN, 9));
+         p.setInteriorGap(0.30);
+         return chart;
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultiplePieChartDemo2 demo = new MultiplePieChartDemo2("Multiple Pie Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultiplePieChartDemo3.java jfreechart/source/org/jfree/chart/demo/MultiplePieChartDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultiplePieChartDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultiplePieChartDemo3.java	2004-11-07 15:59:24.000000000 +0100
***************
*** 0 ****
--- 1,164 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * MultiplePieChartDemo3.java
+  * --------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MultiplePieChartDemo3.java,v 1.6 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 29-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.MultiplePiePlot;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.TableOrder;
+ 
+ /**
+  * A simple demonstration application showing how to create a chart consisting of multiple
+  * pie charts.
+  *
+  */
+ public class MultiplePieChartDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public MultiplePieChartDemo3(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart, true, true, true, false, true);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 380));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(5.6, "Row 0", "Column 0");
+         dataset.addValue(5.6, "Row 0", "Column 1");
+         dataset.addValue(5.6, "Row 0", "Column 2");
+         dataset.addValue(5.6, "Row 0", "Column 3");
+         dataset.addValue(5.6, "Row 0", "Column 4");
+ 
+         dataset.addValue(5.6, "Row 1", "Column 0");
+         dataset.addValue(5.6, "Row 1", "Column 1");
+         dataset.addValue(5.6, "Row 1", "Column 2");
+         dataset.addValue(5.6, "Row 1", "Column 3");
+         dataset.addValue(5.6, "Row 1", "Column 4");
+         
+         dataset.addValue(5.6, "Row 2", "Column 0");
+         dataset.addValue(5.6, "Row 2", "Column 1");
+         dataset.addValue(5.6, "Row 2", "Column 2");
+         dataset.addValue(5.6, "Row 2", "Column 3");
+         dataset.addValue(5.6, "Row 2", "Column 4");
+ 
+         dataset.addValue(5.6, "Row 3", "Column 0");
+         dataset.addValue(5.6, "Row 3", "Column 1");
+         dataset.addValue(5.6, "Row 3", "Column 2");
+         dataset.addValue(5.6, "Row 3", "Column 3");
+         dataset.addValue(5.6, "Row 3", "Column 4");
+         
+         dataset.addValue(5.6, "Row 4", "Column 0");
+         dataset.addValue(5.6, "Row 4", "Column 1");
+         dataset.addValue(5.6, "Row 4", "Column 2");
+         dataset.addValue(5.6, "Row 4", "Column 3");
+         dataset.addValue(5.6, "Row 4", "Column 4");
+         
+         return dataset;
+     }
+ 
+     /**
+      * Creates a sample chart for the given dataset.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         final JFreeChart chart = ChartFactory.createMultiplePieChart3D(
+             "Multiple Pie Chart Demo 3", dataset, TableOrder.BY_COLUMN, true, true, false
+         ); 
+         chart.setBackgroundPaint(new Color(216, 255, 216));
+         final MultiplePiePlot plot = (MultiplePiePlot) chart.getPlot();
+         final PiePlot p = (PiePlot) plot.getPieChart().getPlot();
+         p.setMaximumLabelWidth(0.35);
+         p.setLabelFont(new Font("SansSerif", Font.PLAIN, 9));
+         p.setInteriorGap(0.30);
+         return chart;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultiplePieChartDemo3 demo = new MultiplePieChartDemo3("Multiple Pie Chart Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultiplePieChartDemo4.java jfreechart/source/org/jfree/chart/demo/MultiplePieChartDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultiplePieChartDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultiplePieChartDemo4.java	2004-11-07 15:59:18.000000000 +0100
***************
*** 0 ****
--- 1,192 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * MultiplePieChartDemo4.java
+  * --------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: MultiplePieChartDemo4.java,v 1.6 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 30-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.labels.StandardPieItemLabelGenerator;
+ import org.jfree.chart.plot.MultiplePiePlot;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.TableOrder;
+ 
+ /**
+  * A simple demonstration application showing how to create a chart consisting of multiple
+  * pie charts.
+  *
+  */
+ public class MultiplePieChartDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public MultiplePieChartDemo4(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart, true, true, true, false, true);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 380));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(5.6, "Row 0", "Column 0");
+         dataset.addValue(3.2, "Row 0", "Column 1");
+         dataset.addValue(1.8, "Row 0", "Column 2");
+         dataset.addValue(0.2, "Row 0", "Column 3");
+         dataset.addValue(4.1, "Row 0", "Column 4");
+ 
+         dataset.addValue(9.8, "Row 1", "Column 0");
+         dataset.addValue(6.3, "Row 1", "Column 1");
+         dataset.addValue(0.1, "Row 1", "Column 2");
+         dataset.addValue(1.9, "Row 1", "Column 3");
+         dataset.addValue(9.6, "Row 1", "Column 4");
+         
+         dataset.addValue(7.0, "Row 2", "Column 0");
+         dataset.addValue(5.2, "Row 2", "Column 1");
+         dataset.addValue(2.8, "Row 2", "Column 2");
+         dataset.addValue(8.8, "Row 2", "Column 3");
+         dataset.addValue(7.2, "Row 2", "Column 4");
+ 
+         dataset.addValue(9.5, "Row 3", "Column 0");
+         dataset.addValue(1.2, "Row 3", "Column 1");
+         dataset.addValue(4.5, "Row 3", "Column 2");
+         dataset.addValue(4.4, "Row 3", "Column 3");
+         dataset.addValue(0.2, "Row 3", "Column 4");
+         
+         dataset.addValue(3.5, "Row 4", "Column 0");
+         dataset.addValue(6.7, "Row 4", "Column 1");
+         dataset.addValue(9.0, "Row 4", "Column 2");
+         dataset.addValue(1.0, "Row 4", "Column 3");
+         dataset.addValue(5.2, "Row 4", "Column 4");
+         
+         dataset.addValue(5.1, "Row 5", "Column 0");
+         dataset.addValue(6.7, "Row 5", "Column 1");
+         dataset.addValue(0.9, "Row 5", "Column 2");
+         dataset.addValue(3.3, "Row 5", "Column 3");
+         dataset.addValue(3.9, "Row 5", "Column 4");
+         
+         dataset.addValue(5.6, "Row 6", "Column 0");
+         dataset.addValue(5.6, "Row 6", "Column 1");
+         dataset.addValue(5.6, "Row 6", "Column 2");
+         dataset.addValue(5.6, "Row 6", "Column 3");
+         dataset.addValue(5.6, "Row 6", "Column 4");
+         
+         dataset.addValue(7.5, "Row 7", "Column 0");
+         dataset.addValue(9.0, "Row 7", "Column 1");
+         dataset.addValue(3.4, "Row 7", "Column 2");
+         dataset.addValue(4.1, "Row 7", "Column 3");
+         dataset.addValue(0.5, "Row 7", "Column 4");
+         
+         return dataset;
+     }
+ 
+     /**
+      * Creates a sample chart for the given dataset.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         final JFreeChart chart = ChartFactory.createMultiplePieChart3D(
+             "Multiple Pie Chart Demo 4", dataset, TableOrder.BY_COLUMN, false, true, false
+         ); 
+         chart.setBackgroundPaint(new Color(216, 255, 216));
+         final MultiplePiePlot plot = (MultiplePiePlot) chart.getPlot();
+         final JFreeChart subchart = plot.getPieChart();
+         final StandardLegend legend = new StandardLegend();
+         legend.setItemFont(new Font("SansSerif", Font.PLAIN, 8));
+         legend.setAnchor(Legend.SOUTH);
+         subchart.setLegend(legend);
+         plot.setLimit(0.10);
+         final PiePlot p = (PiePlot) subchart.getPlot();
+         p.setLabelGenerator(new StandardPieItemLabelGenerator("{0}"));
+         p.setLabelFont(new Font("SansSerif", Font.PLAIN, 8));
+         p.setInteriorGap(0.30);
+         
+         return chart;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultiplePieChartDemo4 demo = new MultiplePieChartDemo4("Multiple Pie Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/MultiShapesXYDemo.java jfreechart/source/org/jfree/chart/demo/MultiShapesXYDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/MultiShapesXYDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/MultiShapesXYDemo.java	2004-11-07 16:01:37.000000000 +0100
***************
*** 0 ****
--- 1,319 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * MultiShapesXYDemo.java
+  * ----------------------
+  * (C) Copyright 2002-2004, by Andreas Schneider.
+  *
+  * Original Author:  Andreas Schneider;
+  * Contributor(s):   -;
+  *
+  * $Id: MultiShapesXYDemo.java,v 1.12 2004/04/29 08:21:42 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 13-May-2002 : Version 1, contributed by Andreas Schneider (DG);
+  * 30-May-2002 : Added title to application frame (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Image;
+ import java.awt.MediaTracker;
+ import java.awt.Paint;
+ import java.awt.Point;
+ import java.awt.Shape;
+ import java.awt.geom.Ellipse2D;
+ import java.awt.geom.Rectangle2D;
+ import java.net.URL;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.Plot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration showing multiple shapes on an {@link XYPlot}.
+  *
+  * @author Andreas Schneider
+  */
+ public class MultiShapesXYDemo extends ApplicationFrame {
+ 
+     /** The number of point. */
+     private static final int NUMBER_OF_POINTS = 200;
+ 
+     /** The increment. */
+     private static final double INCREMENT = 0.1;
+ 
+     /** Color component. */
+     private static final float R1 = 0.0f;
+ 
+     /** Color component. */
+     private static final float G1 = 1.0f;
+ 
+     /** Color component. */
+     private static final float B1 = 0.0f;
+ 
+     /** Color component. */
+     private static final float R2 = 1.0f;
+ 
+     /** Color component. */
+     private static final float G2 = 0.0f;
+ 
+     /** Color component. */
+     private static final float B2 = 0.0f;
+ 
+     /** The series. */
+     private XYSeries series;
+ 
+     /** The ball image. */
+     private Image ballImage;
+ 
+     /** The arrow image. */
+     private Image arrowImage;
+ 
+     /**
+      * A demonstration application showing a series with different shape attributes per item.
+      *
+      * @param title  the frame title.
+      */
+     public MultiShapesXYDemo(final String title) {
+ 
+         super(title);
+ 
+         System.out.println("About to get images...");
+         final URL url1 = getClass().getClassLoader().getResource(
+             "org/jfree/chart/demo/redball.png"
+         );
+         final URL url2 = getClass().getClassLoader().getResource("org/jfree/chart/demo/arrow.png");
+         if (url1 != null && url2 != null) {
+             this.ballImage = new javax.swing.ImageIcon(url1).getImage();
+             this.arrowImage = new javax.swing.ImageIcon(url2).getImage();
+             final MediaTracker tracker = new MediaTracker(this);
+             tracker.addImage(this.ballImage, 0);
+             tracker.addImage(this.arrowImage, 1);
+             try {
+                 tracker.waitForID(0);
+                 tracker.waitForID(1);
+             }
+             catch (InterruptedException e) {
+                 e.printStackTrace();
+             }
+             System.out.println("Images loaded");
+         }
+         else {
+             System.err.println("Can't find images");
+         }
+         System.out.println("Images done.");
+         this.series = new XYSeries("Some Data");
+         for (int i = 0; i < NUMBER_OF_POINTS; i++) {
+             final double x = INCREMENT * i;
+             final double y = Math.sin(x);
+             this.series.add(x, y);
+         }
+         final XYSeriesCollection data = new XYSeriesCollection(this.series);
+         final NumberAxis domainAxis = new NumberAxis("x");
+         final NumberAxis rangeAxis = new NumberAxis("sin(x)");
+         final DemoRenderer renderer = new DemoRenderer();
+         final Plot plot = new XYPlot(data, domainAxis, rangeAxis, renderer);
+         final JFreeChart chart = new JFreeChart(plot);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 380));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * A demo renderer.
+      *
+      * @author AS
+      */
+     class DemoRenderer extends StandardXYItemRenderer {
+ 
+         /**
+          * Creates a new renderer.
+          */
+         public DemoRenderer() {
+             super(StandardXYItemRenderer.SHAPES | StandardXYItemRenderer.IMAGES, null);
+         }
+ 
+         /**
+          * Returns true if the shape is filled, and false otherwise.
+          *
+          * @param plot  the plot.
+          * @param series  the series.
+          * @param item  the item.
+          * @param x  the x-value.
+          * @param y  the y-value.
+          *
+          * @return true if the shape is filled, and false otherwise.
+          */
+         protected boolean isShapeFilled(final Plot plot, final int series, final int item, 
+                                         final double x, final double y) {
+             return (item % 2 == 0);
+         }
+ 
+         /**
+          * Returns the shape scale.
+          *
+          * @param plot  the plot.
+          * @param series  the series.
+          * @param item  the item.
+          * @param x  the x-value.
+          * @param y  the y-value.
+          *
+          * @return the shape scale.
+          */
+         protected double getShapeScale(final Plot plot, final int series, final int item, 
+                                        final double x, final double y) {
+             final float rat = (float) item / (float) NUMBER_OF_POINTS; // 0..1
+             return 6.0f - rat * 4.0;
+         }
+ 
+         /**
+          * Returns the shape paint.
+          *
+          * @param plot  the plot.
+          * @param series  the series.
+          * @param item  the item.
+          * @param x  the x-value.
+          * @param y  the y-value.
+          *
+          * @return the shape paint.
+          */
+         protected Paint getPaint(final Plot plot, final int series, final int item, 
+                                  final double x, final double y) {
+             final float rat = (float) item / (float) NUMBER_OF_POINTS; // 0..1
+             final float r = (1.0f - rat) * R1 + rat * R2;
+             final float g = (1.0f - rat) * G1 + rat * G2;
+             final float b = (1.0f - rat) * B1 + rat * B2;
+             final Color c = new Color(r, g, b);
+             return c;
+         }
+ 
+         /**
+          * Returns the shape.
+          *
+          * @param plot  the plot.
+          * @param series  the series.
+          * @param item  the item.
+          * @param x  the x-value.
+          * @param y  the y-value.
+          * @param scale  the scale.
+          *
+          * @return the shape.
+          */
+         protected Shape getShape(final Plot plot, final int series, final int item, 
+                                  final double x, final double y, final double scale) {
+             final Shape shape;
+             switch (item % 2) {
+               case 0:
+                 shape = new Rectangle2D.Double(x - 0.5 * scale, y - 0.5 * scale, scale, scale);
+                 break;
+               default:
+                 shape = new Ellipse2D.Double(x - 0.5 * scale, y - 0.5 * scale, scale, scale);
+                 break;
+             }
+             return shape;
+         }
+ 
+         /**
+          * Returns the image.
+          *
+          * @param plot  the plot.
+          * @param series  the series.
+          * @param item  the item.
+          * @param x  the x-value.
+          * @param y  the y-value.
+          *
+          * @return the image.
+          */
+         protected Image getImage(final Plot plot, final int series, final int item, 
+                                  final double x, final double y) {
+             if (item % 10 == 0) {
+                 return ballImage;
+             }
+             else if (item == 42) {
+                 return arrowImage;
+             }
+             return null;
+         }
+ 
+         /**
+          * Returns the image hot spot.
+          *
+          * @param plot  the plot.
+          * @param series  the series.
+          * @param item  the item.
+          * @param x  the x-value.
+          * @param y  the y-value.
+          * @param image  the image.
+          *
+          * @return the image hot spot.
+          */
+         protected Point getImageHotspot(final Plot plot, final int series, final int item, 
+                                         final double x, final double y, final Image image) {
+             if (image == arrowImage) {
+                 // the arrow has the hot spot at the bottom left
+                 return new Point(0, image.getHeight(null));
+             }
+             return super.getImageHotspot(plot, series, item, x, y, image);
+         }
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final MultiShapesXYDemo demo = new MultiShapesXYDemo("XYPlot With Multiple Shapes");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/NormalDistributionDemo.java jfreechart/source/org/jfree/chart/demo/NormalDistributionDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/NormalDistributionDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/NormalDistributionDemo.java	2004-11-07 16:01:32.000000000 +0100
***************
*** 0 ****
--- 1,110 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------------
+  * NormalDistributionDemo.java
+  * ---------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: NormalDistributionDemo.java,v 1.1 2004/05/26 13:02:03 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 25-May-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.function.Function2D;
+ import org.jfree.data.function.NormalDistributionFunction2D;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * This demo shows a normal distribution function.
+  */
+ public class NormalDistributionDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a normal distribution.
+      *
+      * @param title  the frame title.
+      */
+     public NormalDistributionDemo(final String title) {
+ 
+         super(title);
+         Function2D normal = new NormalDistributionFunction2D(0.0, 1.0);
+         XYDataset dataset = DatasetUtilities.sampleFunction2D(normal, -5.0, 5.0, 100, "Normal");
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "XY Series Demo",
+             "X", 
+             "Y", 
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final NormalDistributionDemo demo = new NormalDistributionDemo("Normal Distribution Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/OverlaidBarChartDemo2.java jfreechart/source/org/jfree/chart/demo/OverlaidBarChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/OverlaidBarChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/OverlaidBarChartDemo2.java	2004-11-07 16:01:24.000000000 +0100
***************
*** 0 ****
--- 1,167 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * OverlaidBarChartDemo2.java
+  * --------------------------
+  * (C) Copyright 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: OverlaidBarChartDemo2.java,v 1.9 2004/06/02 09:48:24 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 09-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.DatasetRenderingOrder;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.chart.renderer.category.LevelRenderer;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * Another demo of an overlaid bar chart.
+  */
+ public class OverlaidBarChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Default constructor.
+      *
+      * @param title  the frame title.
+      */
+     public OverlaidBarChartDemo2(final String title) {
+         super(title);
+         final JFreeChart chart = createChart();
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart() {
+         
+         // create the first dataset...
+         DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();
+         dataset1.addValue(1.0, "S1", "Category 1");
+         dataset1.addValue(4.0, "S1", "Category 2");
+         dataset1.addValue(3.0, "S1", "Category 3");
+         dataset1.addValue(5.0, "S1", "Category 4");
+         dataset1.addValue(5.0, "S1", "Category 5");
+         dataset1.addValue(5.0, "S2", "Category 1");
+         dataset1.addValue(7.0, "S2", "Category 2");
+         dataset1.addValue(6.0, "S2", "Category 3");
+         dataset1.addValue(8.0, "S2", "Category 4");
+         dataset1.addValue(4.0, "S2", "Category 5");
+         
+         // create the first plot...
+         final CategoryItemRenderer renderer = new BarRenderer();
+         renderer.setToolTipGenerator(new StandardCategoryToolTipGenerator());
+         final CategoryPlot plot = new CategoryPlot();
+         plot.setDataset(dataset1);
+         plot.setRenderer(renderer);
+         
+         plot.setDomainAxis(new CategoryAxis("Category"));
+         plot.setRangeAxis(new NumberAxis("Value"));
+ 
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         plot.setRangeGridlinesVisible(true);
+         plot.setDomainGridlinesVisible(true);
+ 
+         DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();
+         dataset2.addValue(6.0, "Prior 1", "Category 1");
+         dataset2.addValue(7.0, "Prior 1", "Category 2");
+         dataset2.addValue(2.0, "Prior 1", "Category 3");
+         dataset2.addValue(6.0, "Prior 1", "Category 4");
+         dataset2.addValue(6.0, "Prior 1", "Category 5");
+         dataset2.addValue(4.0, "Prior 2", "Category 1");
+         dataset2.addValue(2.0, "Prior 2", "Category 2");
+         dataset2.addValue(1.0, "Prior 2", "Category 3");
+         dataset2.addValue(3.0, "Prior 2", "Category 4");
+         dataset2.addValue(2.0, "Prior 2", "Category 5");
+ 
+         final CategoryItemRenderer renderer2 = new LevelRenderer();
+         renderer2.setSeriesStroke(0, new BasicStroke(2.0f));
+         renderer2.setSeriesStroke(1, new BasicStroke(2.0f));
+         plot.setDataset(1, dataset2);
+         plot.setRenderer(1, renderer2);
+         plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);
+         
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         final JFreeChart chart = new JFreeChart(plot);
+         chart.setTitle("Overlaid Bar Chart");
+         chart.setLegend(new StandardLegend());
+         chart.setBackgroundPaint(Color.white);
+         return chart;
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final OverlaidBarChartDemo2 demo = new OverlaidBarChartDemo2("Overlaid Bar Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/OverlaidBarChartDemo.java jfreechart/source/org/jfree/chart/demo/OverlaidBarChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/OverlaidBarChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/OverlaidBarChartDemo.java	2004-11-07 16:01:28.000000000 +0100
***************
*** 0 ****
--- 1,193 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * OverlaidBarChartDemo.java
+  * -------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: OverlaidBarChartDemo.java,v 1.36 2004/06/02 09:48:24 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 20-Sep-2002 : Version 1 (DG);
+  * 11-Oct-2002 : Added tooltips, modified series colors, centered frame on screen (DG);
+  * 11-Feb-2003 : Fixed bug where category labels were not showing on the axis (DG);
+  * 08-Sep-2003 : Bug fix (DG);
+  * 02-Jun-2004 : Set the rendering order (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.CategoryLabelGenerator;
+ import org.jfree.chart.labels.StandardCategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.DatasetRenderingOrder;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a bar chart overlaid
+  * with a line chart.
+  */
+ public class OverlaidBarChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Default constructor.
+      *
+      * @param title  the frame title.
+      */
+     public OverlaidBarChartDemo(final String title) {
+ 
+         super(title);
+ 
+         // create the first dataset...
+         DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();
+         dataset1.addValue(1.0, "S1", "Category 1");
+         dataset1.addValue(4.0, "S1", "Category 2");
+         dataset1.addValue(3.0, "S1", "Category 3");
+         dataset1.addValue(5.0, "S1", "Category 4");
+         dataset1.addValue(5.0, "S1", "Category 5");
+         dataset1.addValue(7.0, "S1", "Category 6");
+         dataset1.addValue(7.0, "S1", "Category 7");
+         dataset1.addValue(8.0, "S1", "Category 8");
+ 
+         dataset1.addValue(5.0, "S2", "Category 1");
+         dataset1.addValue(7.0, "S2", "Category 2");
+         dataset1.addValue(6.0, "S2", "Category 3");
+         dataset1.addValue(8.0, "S2", "Category 4");
+         dataset1.addValue(4.0, "S2", "Category 5");
+         dataset1.addValue(4.0, "S2", "Category 6");
+         dataset1.addValue(2.0, "S2", "Category 7");
+         dataset1.addValue(1.0, "S2", "Category 8");
+ 
+ 
+         // create the first renderer...
+         final CategoryLabelGenerator generator = new StandardCategoryLabelGenerator();
+         final CategoryItemRenderer renderer = new BarRenderer();
+         renderer.setLabelGenerator(generator);
+         renderer.setItemLabelsVisible(true);
+         
+         final CategoryPlot plot = new CategoryPlot();
+         plot.setDataset(dataset1);
+         plot.setRenderer(renderer);
+         
+         plot.setDomainAxis(new CategoryAxis("Category"));
+         plot.setRangeAxis(new NumberAxis("Value"));
+ 
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         plot.setRangeGridlinesVisible(true);
+         plot.setDomainGridlinesVisible(true);
+ 
+         // now create the second dataset and renderer...
+         DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();
+         dataset2.addValue(9.0, "T1", "Category 1");
+         dataset2.addValue(7.0, "T1", "Category 2");
+         dataset2.addValue(2.0, "T1", "Category 3");
+         dataset2.addValue(6.0, "T1", "Category 4");
+         dataset2.addValue(6.0, "T1", "Category 5");
+         dataset2.addValue(9.0, "T1", "Category 6");
+         dataset2.addValue(5.0, "T1", "Category 7");
+         dataset2.addValue(4.0, "T1", "Category 8");
+ 
+         final CategoryItemRenderer renderer2 = new LineAndShapeRenderer();
+         plot.setDataset(1, dataset2);
+         plot.setRenderer(1, renderer2);
+ 
+         // create the third dataset and renderer...
+         final ValueAxis rangeAxis2 = new NumberAxis("Axis 2");
+         plot.setRangeAxis(1, rangeAxis2);
+ 
+         DefaultCategoryDataset dataset3 = new DefaultCategoryDataset();
+         dataset3.addValue(94.0, "R1", "Category 1");
+         dataset3.addValue(75.0, "R1", "Category 2");
+         dataset3.addValue(22.0, "R1", "Category 3");
+         dataset3.addValue(74.0, "R1", "Category 4");
+         dataset3.addValue(83.0, "R1", "Category 5");
+         dataset3.addValue(9.0, "R1", "Category 6");
+         dataset3.addValue(23.0, "R1", "Category 7");
+         dataset3.addValue(98.0, "R1", "Category 8");
+ 
+         plot.setDataset(2, dataset3);
+         final CategoryItemRenderer renderer3 = new LineAndShapeRenderer();
+         plot.setRenderer(2, renderer3);
+         plot.mapDatasetToRangeAxis(2, 1);
+ 
+         // change the rendering order so the primary dataset appears "behind" the 
+         // other datasets...
+         plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);
+         
+         plot.getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_45);
+         final JFreeChart chart = new JFreeChart(plot);
+         chart.setTitle("Overlaid Bar Chart");
+         chart.setLegend(new StandardLegend());
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final OverlaidBarChartDemo demo = new OverlaidBarChartDemo("Overlaid Bar Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/OverlaidXYPlotDemo2.java jfreechart/source/org/jfree/chart/demo/OverlaidXYPlotDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/OverlaidXYPlotDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/OverlaidXYPlotDemo2.java	2004-11-07 16:01:17.000000000 +0100
***************
*** 0 ****
--- 1,261 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * OverlaidXYPlotDemo2.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: OverlaidXYPlotDemo2.java,v 1.20 2004/06/02 09:48:24 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 03-Jul-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ import java.text.DecimalFormat;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.annotations.XYTextAnnotation;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickMarkPosition;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.DatasetRenderingOrder;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimePeriodAnchor;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.date.SerialDate;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing an overlaid XY plot with dual range axes.
+  */
+ public class OverlaidXYPlotDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public OverlaidXYPlotDemo2(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createOverlaidChart();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, true, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(panel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates an overlaid chart.
+      *
+      * @return The chart.
+      */
+     private JFreeChart createOverlaidChart() {
+ 
+         final DateAxis domainAxis = new DateAxis("Date");
+         domainAxis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);
+         final ValueAxis rangeAxis = new NumberAxis("Value");
+ 
+         // create plot...
+         final IntervalXYDataset data1 = createDataset1();
+         final XYItemRenderer renderer1 = new XYBarRenderer(0.20);
+         renderer1.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")
+             )
+         );
+         final XYPlot plot = new XYPlot(data1, domainAxis, rangeAxis, renderer1);
+         final double x = new Day(9, SerialDate.MARCH, 2002).getMiddleMillisecond();
+         final XYTextAnnotation annotation = new XYTextAnnotation("Hello!", x, 10000.0);
+         annotation.setFont(new Font("SansSerif", Font.PLAIN, 9));
+         plot.addAnnotation(annotation);
+ 
+         final ValueAxis rangeAxis2 = new NumberAxis("Value 2");
+         plot.setRangeAxis(1, rangeAxis2);
+ 
+         // create subplot 2...
+         final XYDataset data2A = createDataset2A();
+         final XYItemRenderer renderer2A = new StandardXYItemRenderer();
+         renderer2A.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")
+             )
+         );
+         plot.setDataset(1, data2A);
+         plot.setRenderer(1, renderer2A);
+         
+         final XYDataset data2B = createDataset2B();
+         plot.setDataset(2, data2B);
+         plot.setRenderer(2, new StandardXYItemRenderer());
+         plot.mapDatasetToRangeAxis(2, 1);
+ 
+         plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         
+         // return a new chart containing the overlaid plot...
+         return new JFreeChart("Overlaid Plot Example", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private IntervalXYDataset createDataset1() {
+ 
+         // create dataset 1...
+         final TimeSeries series1 = new TimeSeries("Series 1", Day.class);
+         series1.add(new Day(1, SerialDate.MARCH, 2002), 12353.3);
+         series1.add(new Day(2, SerialDate.MARCH, 2002), 13734.4);
+         series1.add(new Day(3, SerialDate.MARCH, 2002), 14525.3);
+         series1.add(new Day(4, SerialDate.MARCH, 2002), 13984.3);
+         series1.add(new Day(5, SerialDate.MARCH, 2002), 12999.4);
+         series1.add(new Day(6, SerialDate.MARCH, 2002), 14274.3);
+         series1.add(new Day(7, SerialDate.MARCH, 2002), 15943.5);
+         series1.add(new Day(8, SerialDate.MARCH, 2002), 14845.3);
+         series1.add(new Day(9, SerialDate.MARCH, 2002), 14645.4);
+         series1.add(new Day(10, SerialDate.MARCH, 2002), 16234.6);
+         series1.add(new Day(11, SerialDate.MARCH, 2002), 17232.3);
+         series1.add(new Day(12, SerialDate.MARCH, 2002), 14232.2);
+         series1.add(new Day(13, SerialDate.MARCH, 2002), 13102.2);
+         series1.add(new Day(14, SerialDate.MARCH, 2002), 14230.2);
+         series1.add(new Day(15, SerialDate.MARCH, 2002), 11235.2);
+ 
+         final TimeSeriesCollection result = new TimeSeriesCollection(series1);
+         return result;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset2A() {
+ 
+         // create dataset 2...
+         final TimeSeries series2 = new TimeSeries("Series 2", Day.class);
+ 
+         series2.add(new Day(3, SerialDate.MARCH, 2002), 16853.2);
+         series2.add(new Day(4, SerialDate.MARCH, 2002), 19642.3);
+         series2.add(new Day(5, SerialDate.MARCH, 2002), 18253.5);
+         series2.add(new Day(6, SerialDate.MARCH, 2002), 15352.3);
+         series2.add(new Day(7, SerialDate.MARCH, 2002), 13532.0);
+         series2.add(new Day(8, SerialDate.MARCH, 2002), 12635.3);
+         series2.add(new Day(9, SerialDate.MARCH, 2002), 13998.2);
+         series2.add(new Day(10, SerialDate.MARCH, 2002), 11943.2);
+         series2.add(new Day(11, SerialDate.MARCH, 2002), 16943.9);
+         series2.add(new Day(12, SerialDate.MARCH, 2002), 17843.2);
+         series2.add(new Day(13, SerialDate.MARCH, 2002), 16495.3);
+         series2.add(new Day(14, SerialDate.MARCH, 2002), 17943.6);
+         series2.add(new Day(15, SerialDate.MARCH, 2002), 18500.7);
+         series2.add(new Day(16, SerialDate.MARCH, 2002), 19595.9);
+ 
+         final TimeSeriesCollection result = new TimeSeriesCollection(series2);
+         result.setXPosition(TimePeriodAnchor.MIDDLE);
+         return result;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset2B() {
+ 
+         // create dataset 2...
+         final TimeSeries series2 = new TimeSeries("Series 2B", Day.class);
+ 
+         series2.add(new Day(3, SerialDate.MARCH, 2002), 43.9);
+         series2.add(new Day(4, SerialDate.MARCH, 2002), 72.6);
+         series2.add(new Day(5, SerialDate.MARCH, 2002), 89.4);
+         series2.add(new Day(6, SerialDate.MARCH, 2002), 23.8);
+         series2.add(new Day(7, SerialDate.MARCH, 2002), 45.0);
+         series2.add(new Day(8, SerialDate.MARCH, 2002), 65.8);
+         series2.add(new Day(9, SerialDate.MARCH, 2002), 92.1);
+         series2.add(new Day(10, SerialDate.MARCH, 2002), 84.7);
+         series2.add(new Day(11, SerialDate.MARCH, 2002), 77.2);
+         series2.add(new Day(12, SerialDate.MARCH, 2002), 65.1);
+         series2.add(new Day(13, SerialDate.MARCH, 2002), 78.5);
+         series2.add(new Day(14, SerialDate.MARCH, 2002), 75.3);
+         series2.add(new Day(15, SerialDate.MARCH, 2002), 69.9);
+         series2.add(new Day(20, SerialDate.MARCH, 2002), 56.6);
+ 
+         final TimeSeriesCollection result = new TimeSeriesCollection(series2);
+         result.setXPosition(TimePeriodAnchor.MIDDLE);
+         return result;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final OverlaidXYPlotDemo2 demo = new OverlaidXYPlotDemo2("Overlaid XYPlot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/OverlaidXYPlotDemo.java jfreechart/source/org/jfree/chart/demo/OverlaidXYPlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/OverlaidXYPlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/OverlaidXYPlotDemo.java	2004-11-07 16:01:20.000000000 +0100
***************
*** 0 ****
--- 1,221 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * OverlaidXYPlotDemo.java
+  * -----------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: OverlaidXYPlotDemo.java,v 1.28 2004/06/02 09:48:24 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 28-Mar-2002 : Version 1 (DG);
+  * 23-Apr-2002 : Modified to use new OverlaidXYPlot class (DG);
+  * 31-May-2002 : Changed plot background color to yellow, to check that it works (DG);
+  * 13-Jun-2002 : Renamed OverlaidPlotDemo-->OverlaidXYPlotDemo (DG);
+  * 25-Jun-2002 : Removed unnecessary imports (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ import java.text.DecimalFormat;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.annotations.XYTextAnnotation;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickMarkPosition;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.DatasetRenderingOrder;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.date.SerialDate;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing a time series chart overlaid with a vertical XY bar chart.
+  */
+ public class OverlaidXYPlotDemo extends ApplicationFrame {
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public OverlaidXYPlotDemo(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createOverlaidChart();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, true, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(panel);
+ 
+     }
+ 
+     /**
+      * Creates an overlaid chart.
+      *
+      * @return The chart.
+      */
+     private JFreeChart createOverlaidChart() {
+ 
+         // create plot ...
+         final IntervalXYDataset data1 = createDataset1();
+         final XYItemRenderer renderer1 = new XYBarRenderer(0.20);
+         renderer1.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")
+             )
+         );
+         final DateAxis domainAxis = new DateAxis("Date");
+         domainAxis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);
+         final ValueAxis rangeAxis = new NumberAxis("Value");
+         final XYPlot plot = new XYPlot(data1, domainAxis, rangeAxis, renderer1);
+         final double x = new Day(9, SerialDate.MARCH, 2002).getMiddleMillisecond();
+         final XYTextAnnotation annotation = new XYTextAnnotation("Hello!", x, 10000.0);
+         annotation.setFont(new Font("SansSerif", Font.PLAIN, 9));
+         plot.addAnnotation(annotation);
+ 
+         // add a second dataset and renderer...
+         final XYDataset data2 = createDataset2();
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer();
+         renderer2.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")
+             )
+         );
+         plot.setDataset(1, data2);
+         plot.setRenderer(1, renderer2);
+         
+         plot.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);
+ 
+         // return a new chart containing the overlaid plot...
+         return new JFreeChart("Overlaid Plot Example", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private IntervalXYDataset createDataset1() {
+ 
+         // create dataset 1...
+         final TimeSeries series1 = new TimeSeries("Series 1", Day.class);
+         series1.add(new Day(1, SerialDate.MARCH, 2002), 12353.3);
+         series1.add(new Day(2, SerialDate.MARCH, 2002), 13734.4);
+         series1.add(new Day(3, SerialDate.MARCH, 2002), 14525.3);
+         series1.add(new Day(4, SerialDate.MARCH, 2002), 13984.3);
+         series1.add(new Day(5, SerialDate.MARCH, 2002), 12999.4);
+         series1.add(new Day(6, SerialDate.MARCH, 2002), 14274.3);
+         series1.add(new Day(7, SerialDate.MARCH, 2002), 15943.5);
+         series1.add(new Day(8, SerialDate.MARCH, 2002), 14845.3);
+         series1.add(new Day(9, SerialDate.MARCH, 2002), 14645.4);
+         series1.add(new Day(10, SerialDate.MARCH, 2002), 16234.6);
+         series1.add(new Day(11, SerialDate.MARCH, 2002), 17232.3);
+         series1.add(new Day(12, SerialDate.MARCH, 2002), 14232.2);
+         series1.add(new Day(13, SerialDate.MARCH, 2002), 13102.2);
+         series1.add(new Day(14, SerialDate.MARCH, 2002), 14230.2);
+         series1.add(new Day(15, SerialDate.MARCH, 2002), 11235.2);
+ 
+         return new TimeSeriesCollection(series1);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset2() {
+ 
+         // create dataset 2...
+         final TimeSeries series2 = new TimeSeries("Series 2", Day.class);
+ 
+         series2.add(new Day(3, SerialDate.MARCH, 2002), 16853.2);
+         series2.add(new Day(4, SerialDate.MARCH, 2002), 19642.3);
+         series2.add(new Day(5, SerialDate.MARCH, 2002), 18253.5);
+         series2.add(new Day(6, SerialDate.MARCH, 2002), 15352.3);
+         series2.add(new Day(7, SerialDate.MARCH, 2002), 13532.0);
+         series2.add(new Day(8, SerialDate.MARCH, 2002), 12635.3);
+         series2.add(new Day(9, SerialDate.MARCH, 2002), 13998.2);
+         series2.add(new Day(10, SerialDate.MARCH, 2002), 11943.2);
+         series2.add(new Day(11, SerialDate.MARCH, 2002), 16943.9);
+         series2.add(new Day(12, SerialDate.MARCH, 2002), 17843.2);
+         series2.add(new Day(13, SerialDate.MARCH, 2002), 16495.3);
+         series2.add(new Day(14, SerialDate.MARCH, 2002), 17943.6);
+         series2.add(new Day(15, SerialDate.MARCH, 2002), 18500.7);
+         series2.add(new Day(16, SerialDate.MARCH, 2002), 19595.9);
+ 
+         final TimeSeriesCollection tsc = new TimeSeriesCollection(series2);
+         return tsc;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final OverlaidXYPlotDemo demo = new OverlaidXYPlotDemo("Overlaid XYPlot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PanScrollZoomDemo.java jfreechart/source/org/jfree/chart/demo/PanScrollZoomDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/PanScrollZoomDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PanScrollZoomDemo.java	2004-11-07 16:01:12.000000000 +0100
***************
*** 0 ****
--- 1,959 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * PanScrollZoomDemo.java
+  * ----------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  Matthias Rose (Ablay & Fodi GmbH, Germany);
+  * Contributor(s):   Eduardo Ramalho;
+  *                   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: PanScrollZoomDemo.java,v 1.10 2004/05/11 14:56:17 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 18-Feb-2004 : Version 1 added to JFreeChart distribution, contributed by Matthias Rose (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.Cursor;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ import java.awt.event.MouseEvent;
+ import java.awt.event.MouseListener;
+ import java.awt.event.MouseMotionListener;
+ import java.awt.geom.Point2D;
+ import java.awt.geom.Rectangle2D;
+ 
+ import javax.swing.AbstractButton;
+ import javax.swing.BoundedRangeModel;
+ import javax.swing.ButtonGroup;
+ import javax.swing.DefaultBoundedRangeModel;
+ import javax.swing.JButton;
+ import javax.swing.JFrame;
+ import javax.swing.JScrollBar;
+ import javax.swing.JToggleButton;
+ import javax.swing.JToolBar;
+ import javax.swing.SwingUtilities;
+ import javax.swing.UIManager;
+ import javax.swing.event.ChangeEvent;
+ import javax.swing.event.ChangeListener;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.ChartRenderingInfo;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.event.ChartChangeEvent;
+ import org.jfree.chart.event.ChartChangeListener;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.Plot;
+ import org.jfree.chart.plot.ValueAxisPlot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.Range;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;
+ 
+ /**
+  * A demo for panning, scrolling and zooming.
+  */
+ public class PanScrollZoomDemo extends JFrame
+                                implements ActionListener, 
+                                           ChangeListener, 
+                                           ChartChangeListener, 
+                                           MouseListener, 
+                                           MouseMotionListener {
+ 
+     /** The panel that displays the chart. */
+     private ChartPanel chartPanel;
+     
+     /** The scroll factor. */
+     private double scrollFactor = 1000;
+     
+     /** The scroll bar. */
+     private JScrollBar scrollBar;
+     
+     /** The starting point for panning. */
+     private Point2D panStartPoint;
+     
+     /** The min/max values for the primary axis. */
+     private double[] primYMinMax = new double[2];
+     
+     /** The min/max values for the secondary axis. */
+     private double[] secondYMinMax = new double[2];
+ 
+     /** Action command for the 'Pan' button. */
+     private static final String ACTION_CMD_PAN = "pan";
+     
+     /** Action command for the zoom box button. */
+     private static final String ACTION_CMD_ZOOM_BOX = "zoomBox";
+     
+     /** Action command for the zoom fit button. */
+     private static final String ACTION_CMD_ZOOM_TO_FIT = "zoomFit";
+     
+     /** Action command for the '+' button. */
+     private static final String ACTION_CMD_ZOOM_IN = "zoomIn";
+     
+     /** Action command for the '-' button. */
+     private static final String ACTION_CMD_ZOOM_OUT = "zoomOut";
+ 
+     /** The zoom factor. */
+     private static final double ZOOM_FACTOR = 0.8;
+ 
+     /** The toolbar. */
+     private JToolBar toolBar;
+     
+     /** The zoom button. */
+     private AbstractButton zoomButton;
+     
+     /** The pan button. */
+     private AbstractButton panButton;
+     
+     /** The zoom in button. */
+     private AbstractButton zoomInButton;
+     
+     /** The zoom out button. */
+     private AbstractButton zoomOutButton;
+     
+     /** The fit button. */
+     private AbstractButton fitButton;
+ 
+     /**
+      * Creates a new demo instance.
+      * 
+      * @param frameTitle  the frame title.
+      */
+     public PanScrollZoomDemo(final String frameTitle) {
+ 
+         super(frameTitle);
+ 
+         this.toolBar = createToolbar();
+         getContentPane().setLayout(new BorderLayout());
+         getContentPane().add(this.toolBar, BorderLayout.SOUTH);
+ 
+         final JFreeChart chart = createChart();
+ 
+         this.scrollBar.setModel(new DefaultBoundedRangeModel());
+         recalcScrollBar(chart.getPlot());
+ 
+         this.chartPanel = new ChartPanel(chart) {
+             public void autoRangeBoth() {
+                 System.out.println("Use 'Fit all' button");
+             }
+         };
+ 
+         chart.addChangeListener(this);
+ 
+         // enable zoom
+         actionPerformed(new ActionEvent(this, 0, ACTION_CMD_ZOOM_BOX));
+ 
+         // MouseListeners for pan function
+         this.chartPanel.addMouseListener(this);
+         this.chartPanel.addMouseMotionListener(this);
+ 
+         // remove popup menu to allow panning
+         // with right mouse pressed
+         this.chartPanel.setPopupMenu(null);
+ 
+         getContentPane().add(this.chartPanel);
+     }
+ 
+     /**
+      * Creates a sample chart.
+      * 
+      * @return a sample chart.
+      */
+     private JFreeChart createChart() {
+ 
+         final XYSeriesCollection primaryJFreeColl = new XYSeriesCollection();
+         final XYSeries left1 = new XYSeries("Left 1");
+         left1.add(1, 2);
+         left1.add(2.8, 5.9);
+         left1.add(3, null);
+         left1.add(3.4, 2);
+         left1.add(5, -1);
+         left1.add(7, 1);
+         primaryJFreeColl.addSeries(left1);
+ 
+         final XYSeriesCollection secondaryJFreeColl = new XYSeriesCollection();
+         final XYSeries right1 = new XYSeries("Right 1");
+         right1.add(3.5, 2.2);
+         right1.add(1.2, 1.3);
+         right1.add(5.7, 4.1);
+         right1.add(7.5, 7.4);
+         secondaryJFreeColl.addSeries(right1);
+ 
+         final NumberAxis xAxis = new NumberAxis("X");
+         xAxis.setAutoRangeIncludesZero(false);
+         xAxis.setAutoRangeStickyZero(false);
+ 
+         final NumberAxis primaryYAxis = new NumberAxis("Y1");
+         primaryYAxis.setAutoRangeIncludesZero(false);
+         primaryYAxis.setAutoRangeStickyZero(false);
+ 
+         // create plot
+         final XYItemRenderer y1Renderer = new StandardXYItemRenderer(StandardXYItemRenderer.LINES);
+         y1Renderer.setSeriesPaint(0, Color.blue);
+         y1Renderer.setToolTipGenerator(new StandardXYToolTipGenerator());
+         final XYPlot xyPlot = new XYPlot(primaryJFreeColl, xAxis, primaryYAxis, y1Renderer);
+ 
+         // 2nd y-axis
+ 
+         final NumberAxis secondaryYAxis = new NumberAxis("Y2");
+         secondaryYAxis.setAutoRangeIncludesZero(false);
+         secondaryYAxis.setAutoRangeStickyZero(false);
+ 
+         xyPlot.setRangeAxis(1, secondaryYAxis);
+         xyPlot.setDataset(1, secondaryJFreeColl);
+ 
+         xyPlot.mapDatasetToRangeAxis(1, 1);
+         xyPlot.mapDatasetToDomainAxis(1, 1);
+ 
+         final XYItemRenderer y2Renderer = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES_AND_LINES
+         );
+         y2Renderer.setToolTipGenerator(new StandardXYToolTipGenerator());
+         xyPlot.setRenderer(1, y2Renderer);
+ 
+         // set some fixed y-dataranges and remember them
+         // because default chartPanel.autoRangeBoth()
+         // would destroy them
+ 
+         ValueAxis axis = xyPlot.getRangeAxis();
+         this.primYMinMax[0] = -5;
+         this.primYMinMax[1] = 15;
+         axis.setLowerBound(this.primYMinMax[0]);
+         axis.setUpperBound(this.primYMinMax[1]);
+ 
+         axis = xyPlot.getRangeAxis(1);
+         this.secondYMinMax[0] = -1;
+         this.secondYMinMax[1] = 10;
+         axis.setLowerBound(this.secondYMinMax[0]);
+         axis.setUpperBound(this.secondYMinMax[1]);
+ 
+         // Title + legend
+ 
+         final String title = "To pan in zoom mode hold right mouse pressed";
+         final JFreeChart ret = new JFreeChart(title, null, xyPlot, true);
+         final TextTitle textTitle = new TextTitle(
+             "(but you can only pan if the chart was zoomed before)"
+         );
+         ret.addSubtitle(textTitle);
+         return ret;
+     }
+ 
+     /**
+      * Creates the toolbar.
+      * 
+      * @return the toolbar.
+      */
+     private JToolBar createToolbar() {
+         final JToolBar toolbar = new JToolBar();
+ 
+         final ButtonGroup groupedButtons = new ButtonGroup();
+ 
+         // ACTION_CMD_PAN
+         this.panButton = new JToggleButton();
+         prepareButton(this.panButton, ACTION_CMD_PAN, " Pan ", "Pan mode");
+         groupedButtons.add(this.panButton);
+         toolbar.add(this.panButton);
+ 
+         // ACTION_CMD_ZOOM_BOX
+         this.zoomButton = new JToggleButton();
+         prepareButton(this.zoomButton, ACTION_CMD_ZOOM_BOX, " Zoom ", "Zoom mode");
+         groupedButtons.add(this.zoomButton);
+         this.zoomButton.setSelected(true); // no other makes sense after startup
+         toolbar.add(this.zoomButton);
+ 
+         // end of toggle-button group for select/pan/zoom-box
+         toolbar.addSeparator();
+ 
+         // ACTION_CMD_ZOOM_IN
+         this.zoomInButton = new JButton();
+         prepareButton(this.zoomInButton, ACTION_CMD_ZOOM_IN, " + ", "Zoom in");
+         toolbar.add(this.zoomInButton);
+ 
+         // ACTION_CMD_ZOOM_OUT
+         this.zoomOutButton = new JButton();
+         prepareButton(this.zoomOutButton, ACTION_CMD_ZOOM_OUT, " - ", "Zoom out");
+         toolbar.add(this.zoomOutButton);
+ 
+         // ACTION_CMD_ZOOM_TO_FIT
+         this.fitButton = new JButton();
+         prepareButton(this.fitButton, ACTION_CMD_ZOOM_TO_FIT, " Fit ", "Fit all");
+         toolbar.add(this.fitButton);
+ 
+         toolbar.addSeparator();
+ 
+         this.scrollBar = new JScrollBar(JScrollBar.HORIZONTAL);
+         //   int ht = (int) zoomButton.getPreferredSize().getHeight();
+         //   scrollBar.setPreferredSize(new Dimension(0, ht));
+         this.scrollBar.setModel(new DefaultBoundedRangeModel());
+ 
+         toolbar.add(this.scrollBar);
+ 
+         this.zoomOutButton.setEnabled(false);
+         this.fitButton.setEnabled(false);
+         this.scrollBar.setEnabled(false);
+ 
+         toolbar.setFloatable(false);
+         return toolbar;
+     }
+ 
+     /**
+      * Prepares a button.
+      * 
+      * @param button  the button.
+      * @param actionKey  the action key.
+      * @param buttonLabelText  the button label.
+      * @param toolTipText  the tooltip text.
+      */
+     private void prepareButton(final AbstractButton button,
+                                final String actionKey,
+                                final String buttonLabelText,
+                                final String toolTipText) {
+         // todo
+         // as this action is empty and the button text is
+         // redefined later, it can be safely removed ...
+ //        Action action = new AbstractAction(actionKey) {
+ //            public void actionPerformed(ActionEvent evt) {
+ //                // ignored
+ //            }
+ //        };
+ //        button.addActionListener(action);
+         button.setActionCommand(actionKey);
+         button.setText(buttonLabelText);
+         button.setToolTipText(toolTipText);
+         button.addActionListener(this);
+     }
+ 
+     /**
+      * Sets the pan mode.
+      * 
+      * @param val  a boolean.
+      */
+     private void setPanMode(final boolean val) {
+ 
+         this.chartPanel.setHorizontalZoom(!val);
+         // chartPanel.setHorizontalAxisTrace(! val);
+         this.chartPanel.setVerticalZoom(!val);
+         // chartPanel.setVerticalAxisTrace(! val);
+ 
+         if (val) {
+             this.chartPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
+         }
+         else {
+             this.chartPanel.setCursor(Cursor.getDefaultCursor());
+         }
+     }
+ 
+     /**
+      * Handles an action event.
+      * 
+      * @param evt
+      *            the event.
+      */
+     public void actionPerformed(final ActionEvent evt) {
+         try {
+             final String acmd = evt.getActionCommand();
+ 
+             if (acmd.equals(ACTION_CMD_ZOOM_BOX)) {
+                 setPanMode(false);
+             } 
+             else if (acmd.equals(ACTION_CMD_PAN)) {
+                 setPanMode(true);
+             } 
+             else if (acmd.equals(ACTION_CMD_ZOOM_IN)) {
+                 final ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();
+                 final Rectangle2D rect = info.getPlotInfo().getDataArea();
+                 zoomBoth(rect.getCenterX(), rect.getCenterY(), ZOOM_FACTOR);
+             } 
+             else if (acmd.equals(ACTION_CMD_ZOOM_OUT)) {
+                 final ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();
+                 final Rectangle2D rect = info.getPlotInfo().getDataArea();
+                 zoomBoth(rect.getCenterX(), rect.getCenterY(), 1 / ZOOM_FACTOR);
+             } 
+             else if (acmd.equals(ACTION_CMD_ZOOM_TO_FIT)) {
+ 
+                 // X-axis (has no fixed borders)
+                 this.chartPanel.autoRangeHorizontal();
+ 
+                 // Y-Axes) (autoRangeVertical
+                 // not useful because of fixed borders
+                 final Plot plot = this.chartPanel.getChart().getPlot();
+                 if (plot instanceof ValueAxisPlot) {
+ 
+                     final XYPlot vvPlot = (XYPlot) plot;
+                     ValueAxis axis = vvPlot.getRangeAxis();
+                     if (axis != null) {
+                         axis.setLowerBound(this.primYMinMax[0]);
+                         axis.setUpperBound(this.primYMinMax[1]);
+                     }
+                     if (plot instanceof XYPlot) {
+                         final XYPlot xyPlot = (XYPlot) plot;
+                         axis = xyPlot.getRangeAxis(1);
+                         if (axis != null) {
+                             axis.setLowerBound(this.secondYMinMax[0]);
+                             axis.setUpperBound(this.secondYMinMax[1]);
+                         }
+                     }
+                 }
+             }
+         } 
+         catch (Exception e) {
+             e.printStackTrace();
+         }
+     }
+ 
+     /**
+      * Handles a {@link ChangeEvent} (in this case, coming from the scrollbar).
+      * 
+      * @param event  the event.
+      */
+     public void stateChanged(final ChangeEvent event) {
+         try {
+             final Object src = event.getSource();
+             final BoundedRangeModel scrollBarModel = this.scrollBar.getModel();
+             if (src == scrollBarModel) {
+                 final int val = scrollBarModel.getValue();
+                 final int ext = scrollBarModel.getExtent();
+ 
+                 final Plot plot = this.chartPanel.getChart().getPlot();
+                 if (plot instanceof XYPlot) {
+                     final XYPlot hvp = (XYPlot) plot;
+                     final ValueAxis axis = hvp.getDomainAxis();
+ 
+                     // avoid problems
+                     this.chartPanel.getChart().removeChangeListener(this);
+ 
+                     axis.setRange(val / this.scrollFactor, (val + ext) / this.scrollFactor);
+ 
+                     // restore chart listener
+                     this.chartPanel.getChart().addChangeListener(this);
+                 }
+             }
+         } 
+         catch (Exception e) {
+             e.printStackTrace();
+         }
+     }
+ 
+     /**
+      * Handles a {@link ChartChangeEvent}.
+      * 
+      * @param event  the event.
+      */
+     public void chartChanged(final ChartChangeEvent event) {
+         try {
+             if (event.getChart() == null) {
+                 return;
+             }  
+ 
+             final BoundedRangeModel scrollBarModel = this.scrollBar.getModel();
+             if (scrollBarModel == null) {
+                 return;
+             }
+ 
+             boolean chartIsZoomed = false;
+ 
+             final Plot plot = event.getChart().getPlot();
+             if (plot instanceof XYPlot) {
+                 final XYPlot hvp = (XYPlot) plot;
+                 final ValueAxis xAxis = hvp.getDomainAxis();
+                 final Range xAxisRange = xAxis.getRange();
+ 
+                 // avoid recursion
+                 scrollBarModel.removeChangeListener(this);
+ 
+                 final int low = (int) (xAxisRange.getLowerBound() * this.scrollFactor);
+                 scrollBarModel.setValue(low);
+                 final int ext = (int) (xAxisRange.getUpperBound() * this.scrollFactor - low);
+                 scrollBarModel.setExtent(ext);
+ 
+                 // restore
+                 scrollBarModel.addChangeListener(this);
+ 
+                 // check if zoomed horizontally
+                 //Range hdr = hvp.getHorizontalDataRange(xAxis);
+                 final Range hdr = hvp.getDataRange(xAxis);
+ 
+                 final double len = hdr == null ? 0 : hdr.getLength();
+                 chartIsZoomed |= xAxisRange.getLength() < len;
+             }
+ 
+             if (!chartIsZoomed && plot instanceof XYPlot) {
+                 // check if zoomed vertically
+                 final XYPlot vvp = (XYPlot) plot;
+                 ValueAxis yAxis = vvp.getRangeAxis();
+                 if (yAxis != null) {
+                     chartIsZoomed = yAxis.getLowerBound() > this.primYMinMax[0]
+                         || yAxis.getUpperBound() < this.primYMinMax[1];
+ 
+                     // right y-axis
+                     if (!chartIsZoomed && plot instanceof XYPlot) {
+                         final XYPlot xyPlot = (XYPlot) plot;
+                         yAxis = xyPlot.getRangeAxis(1);
+                         if (yAxis != null) {
+                             chartIsZoomed = yAxis.getLowerBound() > this.secondYMinMax[0]
+                                 || yAxis.getUpperBound() < this.secondYMinMax[1];
+                         }
+                     }
+                 }
+             }
+ 
+             // enable "zoom-out-buttons" if chart is zoomed
+             // otherwise disable them
+             this.panButton.setEnabled(chartIsZoomed);
+             this.zoomOutButton.setEnabled(chartIsZoomed);
+             this.fitButton.setEnabled(chartIsZoomed);
+             this.scrollBar.setEnabled(chartIsZoomed);
+             if (!chartIsZoomed) {
+                 setPanMode(false);
+                 this.zoomButton.setSelected(true);
+             }
+         } 
+         catch (Exception e) {
+             e.printStackTrace();
+         }
+     }
+ 
+     // Mouse[Motion]Listeners for pan
+ 
+     /**
+      * Handles a mouse pressed event (to start panning).
+      * 
+      * @param event  the event.
+      */
+     public void mousePressed(final MouseEvent event) {
+         try {
+             if (this.panButton.isSelected()
+                 || this.panButton.isEnabled()
+                 && SwingUtilities.isRightMouseButton(event)) {
+                 final Rectangle2D dataArea = this.chartPanel.getScaledDataArea();
+                 final Point2D point = event.getPoint();
+                 if (dataArea.contains(point)) {
+                     setPanMode(true);
+                     this.panStartPoint = point;
+                 }
+             }
+         } 
+         catch (Exception e) {
+             e.printStackTrace();
+         }
+     }
+ 
+     /**
+      * Handles a mouse released event (stops panning).
+      * 
+      * @param event  the event.
+      */
+     public void mouseReleased(final MouseEvent event) {
+         try {
+             this.panStartPoint = null; // stop panning
+             if (!this.panButton.isSelected()) {
+                 setPanMode(false);
+             }
+         } 
+         catch (Exception e) {
+             e.printStackTrace();
+         }
+     }
+ 
+     /**
+      * Handles a mouse dragged event to perform panning.
+      * 
+      * @param event  the event.
+      */
+     public void mouseDragged(final MouseEvent event) {
+         try {
+             if (this.panStartPoint != null) {
+                 final Rectangle2D scaledDataArea = this.chartPanel.getScaledDataArea();
+ 
+                 this.panStartPoint = RefineryUtilities.getPointInRectangle(
+                     this.panStartPoint.getX(),
+                     this.panStartPoint.getY(),
+                     scaledDataArea
+                 );
+                 final Point2D panEndPoint = RefineryUtilities.getPointInRectangle(
+                     event.getX(), event.getY(), scaledDataArea
+                 );
+ 
+                 // horizontal pan
+ 
+                 final Plot plot = this.chartPanel.getChart().getPlot();
+                 if (plot instanceof XYPlot) {
+                     final XYPlot hvp = (XYPlot) plot;
+                     final ValueAxis xAxis = hvp.getDomainAxis();
+ 
+                     if (xAxis != null) {
+                         final double translatedStartPoint = xAxis.java2DToValue(
+                             (float) this.panStartPoint.getX(),
+                             scaledDataArea,
+                             hvp.getDomainAxisEdge()
+                         );
+                         final double translatedEndPoint = xAxis.java2DToValue(
+                             (float) panEndPoint.getX(),
+                             scaledDataArea,
+                             hvp.getDomainAxisEdge()
+                         );
+                         final double dX = translatedStartPoint - translatedEndPoint;
+ 
+                         final double oldMin = xAxis.getLowerBound();
+                         final double newMin = oldMin + dX;
+ 
+                         final double oldMax = xAxis.getUpperBound();
+                         final double newMax = oldMax + dX;
+ 
+                         // do not pan out of range
+                         if (newMin >= hvp.getDataRange(xAxis).getLowerBound()
+                             && newMax <= hvp.getDataRange(xAxis).getUpperBound()) {
+                             xAxis.setLowerBound(newMin);
+                             xAxis.setUpperBound(newMax);
+                         }
+                     }
+                 }
+ 
+                 // vertical pan (1. Y-Axis)
+ 
+                 if (plot instanceof XYPlot) {
+                     final XYPlot vvp = (XYPlot) plot;
+                     final ValueAxis yAxis = vvp.getRangeAxis();
+ 
+                     if (yAxis != null) {
+                         final double translatedStartPoint = yAxis.java2DToValue(
+                             (float) this.panStartPoint.getY(),
+                             scaledDataArea,
+                             vvp.getRangeAxisEdge()
+                         );
+                         final double translatedEndPoint = yAxis.java2DToValue(
+                             (float) panEndPoint.getY(),
+                             scaledDataArea,
+                             vvp.getRangeAxisEdge()
+                         );
+                         final double dY = translatedStartPoint - translatedEndPoint;
+ 
+                         final double oldMin = yAxis.getLowerBound();
+                         final double newMin = oldMin + dY;
+ 
+                         final double oldMax = yAxis.getUpperBound();
+                         final double newMax = oldMax + dY;
+ 
+                         // do not pan out of range
+                         if (newMin >= this.primYMinMax[0] && newMax <= this.primYMinMax[1]) {
+                             yAxis.setLowerBound(newMin);
+                             yAxis.setUpperBound(newMax);
+                         }
+                     }
+                 }
+ 
+                 // vertical pan (2. Y-Axis)
+ 
+                 if (plot instanceof XYPlot) {
+                     final XYPlot xyPlot = (XYPlot) plot;
+                     final ValueAxis yAxis = xyPlot.getRangeAxis(1);
+ 
+                     if (yAxis != null) {
+                         final double translatedStartPoint = yAxis.java2DToValue(
+                             (float) this.panStartPoint.getY(),
+                             scaledDataArea,
+                             xyPlot.getRangeAxisEdge(1)
+                         );
+                         final double translatedEndPoint = yAxis.java2DToValue(
+                             (float) panEndPoint.getY(),
+                             scaledDataArea,
+                             xyPlot.getRangeAxisEdge(1)
+                         );
+                         final double dY = translatedStartPoint - translatedEndPoint;
+ 
+                         final double oldMin = yAxis.getLowerBound();
+                         final double newMin = oldMin + dY;
+ 
+                         final double oldMax = yAxis.getUpperBound();
+                         final double newMax = oldMax + dY;
+ 
+                         if (newMin >= this.secondYMinMax[0] && newMax <= this.secondYMinMax[1]) {
+                             yAxis.setLowerBound(newMin);
+                             yAxis.setUpperBound(newMax);
+                         }
+                     }
+                 }
+ 
+                 // for the next time
+                 this.panStartPoint = panEndPoint;
+             }
+         } 
+         catch (Exception e) {
+             e.printStackTrace();
+         }
+     }
+ 
+     /** 
+      * Handles a mouse clicked event, in this case by ignoring it.
+      * 
+      * @param event  the event.
+      */
+     public void mouseClicked(final MouseEvent event) {
+         // ignored
+     }
+ 
+     /** 
+      * Handles a mouse moved event, in this case by ignoring it.
+      * 
+      * @param event  the event.
+      */
+     public void mouseMoved(final MouseEvent event) {
+         // ignored
+     }
+ 
+     /** 
+      * Handles a mouse entered event, in this case by ignoring it.
+      * 
+      * @param event  the event.
+      */
+     public void mouseEntered(final MouseEvent event) {
+         // ignored
+     }
+ 
+     /** 
+      * Handles a mouse exited event, in this case by ignoring it.
+      * 
+      * @param event  the event.
+      */
+     public void mouseExited(final MouseEvent event) {
+         // ignored
+     }
+ 
+     /**
+      * Starting point for the demo.
+      * 
+      * @param args  the command line arguments (ignored).
+      */
+     public static void main(final String[] args) {
+         
+         try {
+             final String lookAndFeelClassName = WindowsLookAndFeel.class.getName();
+             UIManager.setLookAndFeel(lookAndFeelClassName);
+         } 
+         catch (Exception ex) {
+             System.out.println(ex.getMessage());
+         }
+ 
+         final PanScrollZoomDemo demo = new PanScrollZoomDemo("Pan & Scroll & Zoom - Demo");
+         demo.pack();
+         demo.setVisible(true);
+     
+     }
+ 
+     // PRIVATE 
+     
+     /**
+      * Recalculates the scrollbar settings.
+      * 
+      * @param plot  the plot.
+      */
+     private void recalcScrollBar(final Plot plot) {
+         if (plot instanceof XYPlot) {
+             final XYPlot hvp = (XYPlot) plot;
+             final ValueAxis axis = hvp.getDomainAxis();
+ 
+             axis.setLowerMargin(0);
+             axis.setUpperMargin(0);
+ 
+             final Range rng = axis.getRange();
+ 
+             final BoundedRangeModel scrollBarModel = this.scrollBar.getModel();
+             final int len = scrollBarModel.getMaximum() - scrollBarModel.getMinimum();
+             if (rng.getLength() > 0) {
+                 this.scrollFactor = len / rng.getLength();
+             }
+             
+             final double dblow = rng.getLowerBound();
+             final int ilow = (int) (dblow * this.scrollFactor);
+             scrollBarModel.setMinimum(ilow);
+             final int val = ilow;
+             scrollBarModel.setValue(val);
+ 
+             final double dbup = rng.getUpperBound();
+             final int iup = (int) (dbup * this.scrollFactor);
+             scrollBarModel.setMaximum(iup);
+             final int ext = iup - ilow;
+             scrollBarModel.setExtent(ext);
+ 
+             scrollBarModel.addChangeListener(this);
+         }
+     }
+ 
+     /**
+      * Zooms in on an anchor point (measured in Java2D coordinates).
+      * 
+      * @param x  the x value.
+      * @param y  the y value.
+      * @param zoomFactor  the zoomFactor < 1 == zoom in; else out.
+      */
+     private void zoomBoth(final double x, final double y, final double zoomFactor) {
+         zoomHorizontal(x, zoomFactor);
+         zoomVertical(y, zoomFactor);
+     }
+ 
+     /**
+      * Decreases the range on the horizontal axis, centered about a Java2D x coordinate.
+      * <P>
+      * The range on the x axis is multiplied by zoomFactor
+      * 
+      * @param x  the x coordinate in Java2D space.
+      * @param zoomFactor  the zoomFactor < 1 == zoom in; else out.
+      */
+     private void zoomHorizontal(final double x, final double zoomFactor) {
+ 
+         final JFreeChart chart = this.chartPanel.getChart();
+         final ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();
+         if (chart.getPlot() instanceof XYPlot) {
+             final XYPlot hvp = (XYPlot) chart.getPlot();
+             final ValueAxis axis = hvp.getDomainAxis();
+             if (axis != null) {
+                 final double anchorValue = axis.java2DToValue(
+                     (float) x, info.getPlotInfo().getDataArea(), hvp.getDomainAxisEdge()
+                 );
+                 if (zoomFactor < 1.0) {
+                     axis.resizeRange(zoomFactor, anchorValue);
+                 } 
+                 else if (zoomFactor > 1.0) {
+                     final Range range = hvp.getDataRange(axis);
+                     adjustRange(axis, range, zoomFactor, anchorValue);
+                 }
+             }
+         }
+     }
+ 
+     /**
+      * Decreases the range on the vertical axis, centered about a Java2D y coordinate.
+      * <P>
+      * The range on the y axis is multiplied by zoomFactor
+      * 
+      * @param y  the y coordinate in Java2D space.
+      * @param zoomFactor  the zoomFactor < 1 == zoom in; else out.
+      */
+     private void zoomVertical(final double y, final double zoomFactor) {
+ 
+         final JFreeChart chart = this.chartPanel.getChart();
+         final ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();
+ 
+         // 1. (left) Y-Axis
+ 
+         if (chart.getPlot() instanceof XYPlot) {
+             final XYPlot vvp = (XYPlot) chart.getPlot();
+             final ValueAxis primYAxis = vvp.getRangeAxis();
+             if (primYAxis != null) {
+                 final double anchorValue =
+                     primYAxis.java2DToValue(
+                         (float) y, info.getPlotInfo().getDataArea(), vvp.getRangeAxisEdge()
+                     );
+                 if (zoomFactor < 1.0) {
+                     // zoom in
+                     primYAxis.resizeRange(zoomFactor, anchorValue);
+ 
+                 } 
+                 else if (zoomFactor > 1.0) {
+                     // zoom out
+                     final Range range = new Range(this.primYMinMax[0], this.primYMinMax[1]);
+                     adjustRange(primYAxis, range, zoomFactor, anchorValue);
+                 }
+             }
+ 
+             // 2. (right) Y-Axis
+ 
+             if (chart.getPlot() instanceof XYPlot) {
+                 final XYPlot xyp = (XYPlot) chart.getPlot();
+                 final ValueAxis secYAxis = xyp.getRangeAxis(1);
+                 if (secYAxis != null) {
+                     final double anchorValue =
+                         secYAxis.java2DToValue(
+                             (float) y,
+                             info.getPlotInfo().getDataArea(),
+                             xyp.getRangeAxisEdge(1));
+                     if (zoomFactor < 1.0) {
+                         // zoom in
+                         secYAxis.resizeRange(zoomFactor, anchorValue);
+ 
+                     } 
+                     else if (zoomFactor > 1.0) {
+                         // zoom out
+                         final Range range = new Range(this.secondYMinMax[0], this.secondYMinMax[1]);
+                         adjustRange(secYAxis, range, zoomFactor, anchorValue);
+                     }
+                 }
+             }
+         }
+     }
+ 
+     /**
+      * used for zooming
+      * 
+      * @param axis  the axis.
+      * @param range  the range.
+      * @param zoomFactor  the zoom factor.
+      * @param anchorValue  the anchor value.
+      */
+     private void adjustRange(final ValueAxis axis, final Range range, final double zoomFactor, 
+                              final double anchorValue) {
+ 
+         if (axis == null || range == null) {
+             return;
+         }
+ 
+         final double rangeMinVal = range.getLowerBound() 
+                                    - range.getLength() * axis.getLowerMargin();
+         final double rangeMaxVal = range.getUpperBound() 
+                                    + range.getLength() * axis.getUpperMargin();
+         final double halfLength = axis.getRange().getLength() * zoomFactor / 2;
+         double zoomedMinVal = anchorValue - halfLength;
+         double zoomedMaxVal = anchorValue + halfLength;
+         double adjMinVal = zoomedMinVal;
+         if (zoomedMinVal < rangeMinVal) {
+             adjMinVal = rangeMinVal;
+             zoomedMaxVal += rangeMinVal - zoomedMinVal;
+         }
+         double adjMaxVal = zoomedMaxVal;
+         if (zoomedMaxVal > rangeMaxVal) {
+             adjMaxVal = rangeMaxVal;
+             zoomedMinVal -= zoomedMaxVal - rangeMaxVal;
+             adjMinVal = Math.max(zoomedMinVal, rangeMinVal);
+         }
+ 
+         final Range adjusted = new Range(adjMinVal, adjMaxVal);
+         axis.setRange(adjusted);
+     }
+     
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ParetoChartDemo.java jfreechart/source/org/jfree/chart/demo/ParetoChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/ParetoChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ParetoChartDemo.java	2004-11-07 16:01:08.000000000 +0100
***************
*** 0 ****
--- 1,174 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * ParetoChartDemo.java
+  * --------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: ParetoChartDemo.java,v 1.21 2004/04/30 11:18:56 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 05-Mar-2003 : Version 1 (DG);
+  * 27-Aug-2003 : Moved SortOrder from org.jfree.data --> org.jfree.util (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.text.NumberFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.DatasetRenderingOrder;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.DefaultKeyedValues;
+ import org.jfree.data.KeyedValues;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DataUtilities;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.SortOrder;
+ 
+ /**
+  * A demo showing the creation of a pareto chart.
+  *
+  */
+ public class ParetoChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public ParetoChartDemo(final String title) {
+ 
+         super(title);
+ 
+         final DefaultKeyedValues data = new DefaultKeyedValues();
+         data.addValue("C", new Integer(4843));
+         data.addValue("C++", new Integer(2098));
+         data.addValue("C#", new Integer(26));
+         data.addValue("Java", new Integer(1901));
+         data.addValue("Perl", new Integer(2507));
+         data.addValue("PHP", new Integer(1689));
+         data.addValue("Python", new Integer(948));
+         data.addValue("Ruby", new Integer(100));
+         data.addValue("SQL", new Integer(263));
+         data.addValue("Unix Shell", new Integer(485));
+ 
+         data.sortByValues(SortOrder.DESCENDING);
+         final KeyedValues cumulative = DataUtilities.getCumulativePercentages(data);
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset("Languages", data);
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Freshmeat Software Projects",  // chart title
+             "Language",                     // domain axis label
+             "Projects",                     // range axis label
+             dataset,                        // data
+             PlotOrientation.VERTICAL,
+             true,                           // include legend
+             true,
+             false
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         chart.addSubtitle(new TextTitle("By Programming Language"));
+         chart.addSubtitle(new TextTitle("As at 5 March 2003"));
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(new Color(0xBBBBDD));
+ 
+         // get a reference to the plot for further customisation...
+         final CategoryPlot plot = chart.getCategoryPlot();
+ 
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setLowerMargin(0.02);
+         domainAxis.setUpperMargin(0.02);
+ 
+         // set the range axis to display integers only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+ 
+         final LineAndShapeRenderer renderer2 = new LineAndShapeRenderer();
+ 
+         final CategoryDataset dataset2 = DatasetUtilities.createCategoryDataset(
+             "Cumulative", cumulative
+         );
+         final NumberAxis axis2 = new NumberAxis("Percent");
+         axis2.setNumberFormatOverride(NumberFormat.getPercentInstance());
+         plot.setRangeAxis(1, axis2);
+         plot.setDataset(1, dataset2);
+         plot.setRenderer(1, renderer2);
+         plot.mapDatasetToRangeAxis(1, 1);
+ 
+         plot.setDatasetRenderingOrder(DatasetRenderingOrder.REVERSE);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(550, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ParetoChartDemo demo = new ParetoChartDemo("Pareto Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/Performance2.java jfreechart/source/org/jfree/chart/demo/Performance2.java
*** jfreechart-orig/source/org/jfree/chart/demo/Performance2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/Performance2.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,207 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * Performance2.java
+  * -----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: Performance2.java,v 1.10 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes (since 11-Oct-2002)
+  * ---------------------------
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.util.Date;
+ 
+ /**
+  * A basic performance test for a couple of common operations.
+  *
+  */
+ public class Performance2 {
+ 
+     /** A double primitive. */
+     private double primitive = 42.0;
+ 
+     /** A number object. */
+     private Number object = new Double(42.0);
+ 
+     /**
+      * Default constructor.
+      */
+     public Performance2() {
+         super();
+     }
+ 
+     /**
+      * Just use double value - should be fast.
+      *
+      * @return the double value.
+      */
+     public double getPrimitive() {
+         return this.primitive;
+     }
+ 
+     /**
+      * Creates a Number object every time the primitive is accessed - should be really slow.
+      *
+      * @return creates and returns a Number object.
+      */
+     public Number getPrimitiveAsObject() {
+         return new Double(this.primitive);
+     }
+ 
+     /**
+      * Returns the object - caller has to use doubleValue() method.
+      *
+      * @return an existing Number object.
+      */
+     public Number getObject() {
+         return this.object;
+     }
+ 
+     /**
+      * Returns a double value generated from the Object - should be similar to previous method,
+      * but is not!
+      *
+      * @return the doubleValue() for the Number.
+      */
+     public double getObjectAsPrimitive() {
+         return this.object.doubleValue();
+     }
+ 
+     /**
+      * Cycles through accessing the primitive.
+      *
+      * @param count  the number of times to access.
+      */
+     public void getPrimitiveLoop(final int count) {
+ 
+         double d = 0.0;
+         for (int i = 0; i < count; i++) {
+             d = getPrimitive();
+         }
+         System.out.println(d);
+ 
+     }
+ 
+     /**
+      * Cycles through accessing the primitive as an object.
+      *
+      * @param count  the number of times to access.
+      */
+     public void getPrimitiveAsObjectLoop(final int count) {
+ 
+         double d = 0.0;
+         for (int i = 0; i < count; i++) {
+             d = getPrimitiveAsObject().doubleValue();
+         }
+         System.out.println(d);
+ 
+     }
+ 
+     /**
+      * Cycles through accessing the object as a primitive.
+      *
+      * @param count  the number of times to access.
+      */
+     public void getObjectAsPrimitiveLoop(final int count) {
+ 
+         double d = 0.0;
+         for (int i = 0; i < count; i++) {
+             d = getObjectAsPrimitive();
+         }
+         System.out.println(d);
+ 
+     }
+ 
+     /**
+      * Cycles through accessing the object.
+      *
+      * @param count  the number of times to access.
+      */
+     public void getObjectLoop(final int count) {
+ 
+         double d = 0.0;
+         for (int i = 0; i < count; i++) {
+             d = getObject().doubleValue();
+         }
+         System.out.println(d);
+ 
+     }
+ 
+     /**
+      * Outputs the current status to the console.
+      *
+      * @param label  the label.
+      * @param start  the start time.
+      * @param end  the end time.
+      */
+     public void status(final String label, final Date start, final Date end) {
+         final long elapsed = end.getTime() - start.getTime();
+         System.out.println(label + start.getTime() + "-->" + end.getTime() + " = " + elapsed);
+     }
+ 
+     /**
+      * The starting point for the performance test.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final Performance2 performance = new Performance2();
+         final int count = 10000000;
+ 
+         for (int repeat = 0; repeat < 3; repeat++) {  // repeat a few times just to make
+                                                       // sure times are consistent
+             final Date s1 = new Date();
+             performance.getPrimitiveLoop(count);
+             final Date e1 = new Date();
+             performance.status("getPrimitive() : ", s1, e1);
+ 
+             final Date s2 = new Date();
+             performance.getPrimitiveAsObjectLoop(count);
+             final Date e2 = new Date();
+             performance.status("getPrimitiveAsObject() : ", s2, e2);
+ 
+             final Date s3 = new Date();
+             performance.getObjectLoop(count);
+             final Date e3 = new Date();
+             performance.status("getObject() : ", s3, e3);
+ 
+             final Date s4 = new Date();
+             performance.getObjectAsPrimitiveLoop(count);
+             final Date e4 = new Date();
+             performance.status("getObjectAsPrimitive() : ", s4, e4);
+ 
+             System.out.println("-------------------");
+         }
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/Performance.java jfreechart/source/org/jfree/chart/demo/Performance.java
*** jfreechart-orig/source/org/jfree/chart/demo/Performance.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/Performance.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,173 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------
+  * Performance.java
+  * ----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: Performance.java,v 1.10 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes (since 11-Oct-2002)
+  * ---------------------------
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.geom.Line2D;
+ import java.util.Date;
+ 
+ /**
+  * A basic performance test for a couple of common operations.
+  *
+  */
+ public class Performance {
+ 
+     /** The value. */
+     private double value = 2.0;
+ 
+     /** The number. */
+     private Double number = new Double(this.value);
+ 
+     /**
+      * Default constructor.
+      */
+     public Performance() {
+         super();
+     }
+ 
+     /**
+      * Creates lines in a loop.
+      *
+      * @param count  the number of lines to create.
+      */
+     public void createLines(final int count) {
+ 
+         Line2D line = new Line2D.Double();
+         for (int i = 0; i < count; i++) {
+             line = new Line2D.Double(1.0, 1.0, 1.0, 1.0);
+         }
+         System.out.println(line.toString());
+ 
+     }
+ 
+     /**
+      * Creates one line, then repeatedly calls the setLine method.
+      *
+      * @param count  the number of times to call the setLine method.
+      */
+     public void setLines(final int count) {
+ 
+         final Line2D line = new Line2D.Double(0.0, 0.0, 0.0, 0.0);
+         for (int i = 0; i < count; i++) {
+             line.setLine(1.0, 1.0, 1.0, 1.0);
+         }
+ 
+     }
+ 
+     /**
+      * Repeatedly grabs a value from a Number instance.
+      *
+      * @param count  the number of times to call doubleValue().
+      */
+     public void getNumber(final int count) {
+ 
+         double d = 0.0;
+         for (int i = 0; i < count; i++) {
+             d = this.number.doubleValue();
+         }
+         System.out.println(d);
+ 
+     }
+ 
+     /**
+      * Repeatedly grabs a value from a double.
+      *
+      * @param count  the number of times to fetch the value.
+      */
+     public void getValue(final int count) {
+ 
+         double d = 0.0;
+         for (int i = 0; i < count; i++) {
+             d = this.value;
+         }
+         System.out.println(d);
+ 
+     }
+ 
+     /**
+      * Writes the current time to the console.
+      *
+      * @param text  the prefix.
+      * @param time  the time.
+      */
+     public void writeTime(final String text, final Date time) {
+ 
+         System.out.println(text + " : " + time.getTime());
+ 
+     }
+ 
+     /**
+      * Starting point for the application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final Performance p = new Performance();
+         System.out.println("Simple performance tests.");
+ 
+         final Date start1 = new Date();
+         p.createLines(100000);
+         final Date end1 = new Date();
+ 
+         final Date start2 = new Date();
+         p.setLines(100000);
+         final Date end2 = new Date();
+ 
+         p.writeTime("Start create lines", start1);
+         p.writeTime("Finish create lines", end1);
+         p.writeTime("Start set lines", start2);
+         p.writeTime("Finish set lines", end2);
+ 
+         final Date start3 = new Date();
+         p.getNumber(1000000);
+         final Date end3 = new Date();
+ 
+         final Date start4 = new Date();
+         p.getValue(1000000);
+         final Date end4 = new Date();
+ 
+         p.writeTime("Start get number", start3);
+         p.writeTime("Finish get number", end3);
+         p.writeTime("Start get value", start4);
+         p.writeTime("Finish get value", end4);
+ 
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChart3DDemo1.java jfreechart/source/org/jfree/chart/demo/PieChart3DDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChart3DDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChart3DDemo1.java	2004-11-07 16:01:04.000000000 +0100
***************
*** 0 ****
--- 1,152 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * PieChart3DDemo1.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChart3DDemo1.java,v 1.8 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 19-Jun-2002 : Version 1 (DG);
+  * 31-Jul-2002 : Updated with changes to Pie3DPlot class (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 23-Dec-2003 : Renamed Pie3DChartDemo1 --> PieChart3DDemo1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PiePlot3D;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.Rotation;
+ 
+ /**
+  * A simple demonstration application showing how to create a pie chart using data from a
+  * {@link DefaultPieDataset}.
+  *
+  */
+ public class PieChart3DDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public PieChart3DDemo1(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final PieDataset dataset = createSampleDataset();
+         
+         // create the chart...
+         final JFreeChart chart = createChart(dataset);
+         
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset for the demo.
+      * 
+      * @return A sample dataset.
+      */
+     private PieDataset createSampleDataset() {
+         
+         final DefaultPieDataset result = new DefaultPieDataset();
+         result.setValue("Java", new Double(43.2));
+         result.setValue("Visual Basic", new Double(10.0));
+         result.setValue("C/C++", new Double(17.5));
+         result.setValue("PHP", new Double(32.5));
+         result.setValue("Perl", new Double(1.0));
+         return result;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final PieDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createPieChart3D(
+             "Pie Chart 3D Demo 1",  // chart title
+             dataset,                // data
+             true,                   // include legend
+             true,
+             false
+         );
+ 
+         final PiePlot3D plot = (PiePlot3D) chart.getPlot();
+         plot.setStartAngle(290);
+         plot.setDirection(Rotation.CLOCKWISE);
+         plot.setForegroundAlpha(0.5f);
+         plot.setNoDataMessage("No data to display");
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PieChart3DDemo1 demo = new PieChart3DDemo1("Pie Chart 3D Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChart3DDemo2.java jfreechart/source/org/jfree/chart/demo/PieChart3DDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChart3DDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChart3DDemo2.java	2004-11-07 16:01:00.000000000 +0100
***************
*** 0 ****
--- 1,169 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * PieChart3DDemo2.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChart3DDemo2.java,v 1.7 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 18-Oct-2002 : Version 1 (DG);
+  * 23-Dec-2003 : Renamed Pie3DChartDemo2 --> PieChart3DDemo2 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.Timer;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PiePlot3D;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.Rotation;
+ 
+ /**
+  * A rotating 3D pie chart.
+  *
+  */
+ public class PieChart3DDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public PieChart3DDemo2(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final DefaultPieDataset data = new DefaultPieDataset();
+         data.setValue("Java", new Double(43.2));
+         data.setValue("Visual Basic", new Double(10.0));
+         data.setValue("C/C++", new Double(17.5));
+         data.setValue("PHP", new Double(32.5));
+         data.setValue("Perl", new Double(12.5));
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createPieChart3D(
+             "Pie Chart 3D Demo 2",  // chart title
+             data,                   // data
+             true,                   // include legend
+             true,
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.yellow);
+         final PiePlot3D plot = (PiePlot3D) chart.getPlot();
+         plot.setStartAngle(270);
+         plot.setDirection(Rotation.ANTICLOCKWISE);
+         plot.setForegroundAlpha(0.60f);
+         plot.setInteriorGap(0.33);
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+         final Rotator rotator = new Rotator(plot);
+         rotator.start();
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PieChart3DDemo2 demo = new PieChart3DDemo2("Pie Chart 3D Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
+ 
+ // ****************************************************************************
+ // * JFREECHART DEVELOPER GUIDE                                               *
+ // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+ // * to purchase from Object Refinery Limited:                                *
+ // *                                                                          *
+ // * http://www.object-refinery.com/jfreechart/guide.html                     *
+ // *                                                                          *
+ // * Sales are used to provide funding for the JFreeChart project - please    * 
+ // * support us so that we can continue developing free software.             *
+ // ****************************************************************************
+ 
+ /**
+  * The rotator.
+  *
+  */
+ class Rotator extends Timer implements ActionListener {
+ 
+     /** The plot. */
+     private PiePlot3D plot;
+ 
+     /** The angle. */
+     private int angle = 270;
+ 
+     /**
+      * Constructor.
+      *
+      * @param plot  the plot.
+      */
+     Rotator(final PiePlot3D plot) {
+         super(100, null);
+         this.plot = plot;
+         addActionListener(this);
+     }
+ 
+     /**
+      * Modifies the starting angle.
+      *
+      * @param event  the action event.
+      */
+     public void actionPerformed(final ActionEvent event) {
+         this.plot.setStartAngle(this.angle);
+         this.angle = this.angle + 1;
+         if (this.angle == 360) {
+             this.angle = 0;
+         }
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChart3DDemo3.java jfreechart/source/org/jfree/chart/demo/PieChart3DDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChart3DDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChart3DDemo3.java	2004-11-07 16:00:56.000000000 +0100
***************
*** 0 ****
--- 1,142 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * PieChart3DDemo3.java
+  * --------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChart3DDemo3.java,v 1.2 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 31-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PiePlot3D;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.Rotation;
+ 
+ /**
+  * A pie chart with no labels.
+  */
+ public class PieChart3DDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public PieChart3DDemo3(final String title) {
+ 
+         super(title);
+         final PieDataset dataset = createSampleDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset for the demo.
+      * 
+      * @return A sample dataset.
+      */
+     private PieDataset createSampleDataset() {
+         
+         final DefaultPieDataset result = new DefaultPieDataset();
+         result.setValue("Java", new Double(43.2));
+         result.setValue("Visual Basic", new Double(10.0));
+         result.setValue("C/C++", new Double(17.5));
+         result.setValue("PHP", new Double(32.5));
+         result.setValue("Perl", new Double(1.0));
+         return result;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final PieDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createPieChart3D(
+             "Pie Chart 3D Demo 3",  // chart title
+             dataset,                // data
+             true,                   // include legend
+             true,
+             false
+         );
+ 
+         final PiePlot3D plot = (PiePlot3D) chart.getPlot();
+         plot.setStartAngle(290);
+         plot.setDirection(Rotation.CLOCKWISE);
+         plot.setForegroundAlpha(0.5f);
+         plot.setNoDataMessage("No data to display");
+         plot.setLabelGenerator(null);
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PieChart3DDemo3 demo = new PieChart3DDemo3("Pie Chart 3D Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChart3DDemo4.java jfreechart/source/org/jfree/chart/demo/PieChart3DDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChart3DDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChart3DDemo4.java	2004-11-07 16:00:51.000000000 +0100
***************
*** 0 ****
--- 1,168 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * PieChart3DDemo4.java
+  * --------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChart3DDemo4.java,v 1.3 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 31-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.labels.PieSectionLabelGenerator;
+ import org.jfree.chart.plot.PiePlot3D;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.Rotation;
+ 
+ /**
+  * A pie chart with a custom label generator.
+  */
+ public class PieChart3DDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public PieChart3DDemo4(final String title) {
+ 
+         super(title);
+         final PieDataset dataset = createSampleDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset for the demo.
+      * 
+      * @return A sample dataset.
+      */
+     private PieDataset createSampleDataset() {
+         
+         final DefaultPieDataset result = new DefaultPieDataset();
+         result.setValue("Java", new Double(43.2));
+         result.setValue("Visual Basic", new Double(10.0));
+         result.setValue("C/C++", new Double(17.5));
+         result.setValue("PHP", new Double(32.5));
+         result.setValue("Perl", new Double(1.0));
+         return result;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final PieDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createPieChart3D(
+             "Pie Chart 3D Demo 4",  // chart title
+             dataset,                // data
+             true,                   // include legend
+             true,
+             false
+         );
+ 
+         final PiePlot3D plot = (PiePlot3D) chart.getPlot();
+         plot.setStartAngle(290);
+         plot.setDirection(Rotation.CLOCKWISE);
+         plot.setForegroundAlpha(0.5f);
+         plot.setNoDataMessage("No data to display");
+         plot.setLabelGenerator(new CustomLabelGenerator());
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PieChart3DDemo4 demo = new PieChart3DDemo4("Pie Chart 3D Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+     
+     /**
+      * A custom label generator (returns null for one item as a test).
+      */
+     static class CustomLabelGenerator implements PieSectionLabelGenerator {
+         
+         /**
+          * Generates a label for a pie section.
+          * 
+          * @param dataset  the dataset (<code>null</code> not permitted).
+          * @param key  the section key (<code>null</code> not permitted).
+          * 
+          * @return the label (possibly <code>null</code>).
+          */
+         public String generateSectionLabel(final PieDataset dataset, final Comparable key) {
+             String result = null;    
+             if (dataset != null) {
+                 if (!key.equals("PHP")) {
+                     result = key.toString();   
+                 }
+             }
+             return result;
+         }
+    
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo1.java jfreechart/source/org/jfree/chart/demo/PieChartDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChartDemo1.java	2004-11-07 16:02:46.000000000 +0100
***************
*** 0 ****
--- 1,150 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * PieChartDemo1.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChartDemo1.java,v 1.18 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 18-Apr-2002 : Version 1 (DG);
+  * 25-Jun-2002 : Removed unnecessary import (DG);
+  * 28-Aug-2002 : Centered frame on screen (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 10-Mar-2004 : Updated for rewritten pie chart classes (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.Log;
+ import org.jfree.util.PrintStreamLogTarget;
+ 
+ /**
+  * A simple demonstration application showing how to create a pie chart using data from a
+  * {@link DefaultPieDataset}.
+  *
+  */
+ public class PieChartDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Default constructor.
+      *
+      * @param title  the frame title.
+      */
+     public PieChartDemo1(final String title) {
+         super(title);
+         final PieDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private PieDataset createDataset() {
+         final DefaultPieDataset dataset = new DefaultPieDataset();
+         dataset.setValue("One", new Double(43.2));
+         dataset.setValue("Two", new Double(10.0));
+         dataset.setValue("Three", new Double(27.5));
+         dataset.setValue("Four", new Double(17.5));
+         dataset.setValue("Five", new Double(11.0));
+         dataset.setValue("Six", new Double(19.4));
+         return dataset;        
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final PieDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Pie Chart Demo 1",  // chart title
+             dataset,             // data
+             true,               // include legend
+             true,
+             false
+         );
+ 
+         final PiePlot plot = (PiePlot) chart.getPlot();
+         plot.setLabelFont(new Font("SansSerif", Font.PLAIN, 12));
+         plot.setNoDataMessage("No data available");
+         plot.setCircular(false);
+         plot.setLabelLinkPaint(Color.red);
+         plot.setLabelGap(0.02);
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         Log.getInstance().addTarget(new PrintStreamLogTarget());
+         final PieChartDemo1 demo = new PieChartDemo1("Pie Chart Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo2.java jfreechart/source/org/jfree/chart/demo/PieChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChartDemo2.java	2004-11-07 16:02:42.000000000 +0100
***************
*** 0 ****
--- 1,139 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * PieChartDemo2.java
+  * ------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChartDemo2.java,v 1.13 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 05-Feb-2003 : Version 1 (DG);
+  * 10-Mar-2004 : Updated for rewritten pie chart classes (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a pie chart using data from a
+  * {@link DefaultPieDataset}.  This demo also shows an "exploded" section in the chart.
+  *
+  */
+ public class PieChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Default constructor.
+      *
+      * @param title  the frame title.
+      */
+     public PieChartDemo2(final String title) {
+ 
+         super(title);
+         final PieDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private PieDataset createDataset() {
+         final DefaultPieDataset dataset = new DefaultPieDataset();
+         dataset.setValue("One", new Double(43.2));
+         dataset.setValue("Two", new Double(10.0));
+         dataset.setValue("Three", new Double(27.5));
+         dataset.setValue("Four", new Double(17.5));
+         dataset.setValue("Five", new Double(11.0));
+         dataset.setValue("Six", new Double(19.4));
+         return dataset;
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final PieDataset dataset) {
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Pie Chart Demo 2",  // chart title
+             dataset,             // dataset
+             true,                // include legend
+             true,
+             false
+         );
+         final PiePlot plot = (PiePlot) chart.getPlot();
+         plot.setNoDataMessage("No data available");
+         plot.setExplodePercent(1, 0.30);
+         return chart;
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PieChartDemo2 demo = new PieChartDemo2("Pie Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo3.java jfreechart/source/org/jfree/chart/demo/PieChartDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChartDemo3.java	2004-11-07 16:02:38.000000000 +0100
***************
*** 0 ****
--- 1,117 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * PieChartDemo3.java
+  * ------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChartDemo3.java,v 1.8 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 02-Jan-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A pie chart with no data, to demonstrate the use of the setNoDataMessage(...) method.
+  *
+  */
+ public class PieChartDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Default constructor.
+      *
+      * @param title  the frame title.
+      */
+     public PieChartDemo3(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final DefaultPieDataset data = new DefaultPieDataset();
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Pie Chart Demo 3",  // chart title
+             data,                // data
+             true,                // include legend
+             true,
+             false
+         );
+ 
+         final PiePlot plot = (PiePlot) chart.getPlot();
+         plot.setNoDataMessage("No data available");
+         plot.setNoDataMessageFont(new Font("Serif", Font.ITALIC, 10));
+         plot.setNoDataMessagePaint(Color.red);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PieChartDemo3 demo = new PieChartDemo3("Pie Chart Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo4.java jfreechart/source/org/jfree/chart/demo/PieChartDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChartDemo4.java	2004-11-07 16:02:35.000000000 +0100
***************
*** 0 ****
--- 1,187 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * PieChartDemo4.java
+  * ------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChartDemo4.java,v 1.21 2004/06/03 15:05:10 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 11-Feb-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ import java.text.NumberFormat;
+ 
+ import javax.swing.Timer;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.labels.StandardPieItemLabelGenerator;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.util.Log;
+ import org.jfree.util.PrintStreamLogTarget;
+ 
+ /**
+  * A simple demonstration application showing how to create a pie chart using data from a
+  * {@link DefaultPieDataset}.  This chart has a lot of labels and rotates, so it is useful for
+  * testing the label distribution algorithm.
+  */
+ public class PieChartDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Default constructor.
+      *
+      * @param title  the frame title.
+      */
+     public PieChartDemo4(final String title) {
+ 
+         super(title);
+         final PieDataset dataset = createDataset(14);
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Pie Chart Demo 4",  // chart title
+             dataset,             // dataset
+             false,               // include legend
+             true,
+             false
+         );
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(new Color(222, 222, 255));
+         final PiePlot plot = (PiePlot) chart.getPlot();
+         plot.setBackgroundPaint(Color.white);
+         plot.setCircular(true);
+         plot.setLabelGenerator(new StandardPieItemLabelGenerator(
+             "{0} = {2}", NumberFormat.getNumberInstance(), NumberFormat.getPercentInstance()
+         ));
+         plot.setNoDataMessage("No data available");
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+         
+         final Rotator rotator = new Rotator(plot);
+         rotator.start();
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @param sections  the number of sections.
+      * 
+      * @return A sample dataset.
+      */
+     private PieDataset createDataset(final int sections) {
+         final DefaultPieDataset result = new DefaultPieDataset();
+         for (int i = 0; i < sections; i++) {
+             final double value = 100.0 * Math.random();
+             result.setValue("Section " + i, value);
+         }
+         return result;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         Log.getInstance().addTarget(new PrintStreamLogTarget());
+         final PieChartDemo4 demo = new PieChartDemo4("Pie Chart Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+     /**
+      * The rotator.
+      *
+      */
+     static class Rotator extends Timer implements ActionListener {
+ 
+         /** The plot. */
+         private PiePlot plot;
+ 
+         /** The angle. */
+         private int angle = 270;
+ 
+         /**
+          * Constructor.
+          *
+          * @param plot  the plot.
+          */
+         Rotator(final PiePlot plot) {
+             super(100, null);
+             this.plot = plot;
+             addActionListener(this);
+         }
+ 
+         /**
+          * Modifies the starting angle.
+          *
+          * @param event  the action event.
+          */
+         public void actionPerformed(final ActionEvent event) {
+             this.plot.setStartAngle(angle);
+             this.angle = this.angle + 1;
+             if (this.angle == 360) {
+                 this.angle = 0;
+             }
+         }
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo5.java jfreechart/source/org/jfree/chart/demo/PieChartDemo5.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo5.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChartDemo5.java	2004-11-07 16:02:31.000000000 +0100
***************
*** 0 ****
--- 1,135 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * PieChartDemo5.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChartDemo5.java,v 1.2 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 31-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A pie chart with no section labels.
+  */
+ public class PieChartDemo5 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public PieChartDemo5(final String title) {
+         super(title);
+         final PieDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private PieDataset createDataset() {
+         final DefaultPieDataset dataset = new DefaultPieDataset();
+         dataset.setValue("One", new Double(43.2));
+         dataset.setValue("Two", new Double(10.0));
+         dataset.setValue("Three", new Double(27.5));
+         dataset.setValue("Four", new Double(17.5));
+         dataset.setValue("Five", new Double(11.0));
+         dataset.setValue("Six", new Double(19.4));
+         return dataset;        
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final PieDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Pie Chart Demo 5",  // chart title
+             dataset,             // data
+             false,               // include legend
+             true,
+             false
+         );
+ 
+         final PiePlot plot = (PiePlot) chart.getPlot();
+         plot.setInteriorGap(0.0);
+         plot.setLabelGenerator(null);
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PieChartDemo5 demo = new PieChartDemo5("Pie Chart Demo 5");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo6.java jfreechart/source/org/jfree/chart/demo/PieChartDemo6.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo6.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChartDemo6.java	2004-11-07 16:02:27.000000000 +0100
***************
*** 0 ****
--- 1,160 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * PieChartDemo6.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChartDemo6.java,v 1.3 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 31-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.labels.PieSectionLabelGenerator;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A pie chart with a custom label generator.
+  */
+ public class PieChartDemo6 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public PieChartDemo6(final String title) {
+         super(title);
+         final PieDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private PieDataset createDataset() {
+         final DefaultPieDataset dataset = new DefaultPieDataset();
+         dataset.setValue("One", new Double(43.2));
+         dataset.setValue("Two", new Double(10.0));
+         dataset.setValue("Three", new Double(27.5));
+         dataset.setValue("Four", new Double(17.5));
+         dataset.setValue("Five", new Double(11.0));
+         dataset.setValue("Six", new Double(19.4));
+         return dataset;        
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final PieDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Pie Chart Demo 6",  // chart title
+             dataset,             // data
+             false,               // include legend
+             true,
+             false
+         );
+ 
+         final PiePlot plot = (PiePlot) chart.getPlot();
+         plot.setLabelGenerator(new CustomLabelGenerator());
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PieChartDemo6 demo = new PieChartDemo6("Pie Chart Demo 6");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+     
+     /**
+      * A custom label generator (returns null for one item as a test).
+      */
+     static class CustomLabelGenerator implements PieSectionLabelGenerator {
+         
+         /**
+          * Generates a label for a pie section.
+          * 
+          * @param dataset  the dataset (<code>null</code> not permitted).
+          * @param key  the section key (<code>null</code> not permitted).
+          * 
+          * @return the label (possibly <code>null</code>).
+          */
+         public String generateSectionLabel(final PieDataset dataset, final Comparable key) {
+             String result = null;    
+             if (dataset != null) {
+                 if (!key.equals("Two")) {
+                     result = key.toString();   
+                 }
+             }
+             return result;
+         }
+    
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo7.java jfreechart/source/org/jfree/chart/demo/PieChartDemo7.java
*** jfreechart-orig/source/org/jfree/chart/demo/PieChartDemo7.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PieChartDemo7.java	2004-11-07 16:02:23.000000000 +0100
***************
*** 0 ****
--- 1,110 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * PieChartDemo7.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PieChartDemo7.java,v 1.1 2004/05/26 13:02:03 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 25-May-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Dimension;
+ import java.awt.GridLayout;
+ 
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.chart.plot.PiePlot3D;
+ import org.jfree.data.general.DefaultPieDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing four pie charts.
+  */
+ public class PieChartDemo7 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      * 
+      * @param title  the frame title.
+      */
+     public PieChartDemo7(String title) {
+ 
+         super(title);
+         JPanel panel = new JPanel(new GridLayout(2, 2));
+         DefaultPieDataset dataset = new DefaultPieDataset();
+         dataset.setValue("Section 1", 23.3);
+         dataset.setValue("Section 2", 56.5);
+         dataset.setValue("Section 3", 43.3);
+         dataset.setValue("Section 4", 11.1);
+         
+         JFreeChart chart1 = ChartFactory.createPieChart("Chart 1", dataset, false, false, false);
+         JFreeChart chart2 = ChartFactory.createPieChart("Chart 2", dataset, false, false, false);
+         PiePlot plot2 = (PiePlot) chart2.getPlot();
+         plot2.setCircular(false);
+         JFreeChart chart3 = ChartFactory.createPieChart3D("Chart 3", dataset, false, false, false);
+         PiePlot3D plot3 = (PiePlot3D) chart3.getPlot();
+         plot3.setForegroundAlpha(0.6f);
+         plot3.setCircular(true);
+         JFreeChart chart4 = ChartFactory.createPieChart3D("Chart 4", dataset, false, false, false);
+         PiePlot3D plot4 = (PiePlot3D) chart4.getPlot();
+         plot4.setForegroundAlpha(0.6f);
+ 
+         panel.add(new ChartPanel(chart1));
+         panel.add(new ChartPanel(chart2));
+         panel.add(new ChartPanel(chart3));
+         panel.add(new ChartPanel(chart4));
+ 
+         panel.setPreferredSize(new Dimension(800, 600));
+         setContentPane(panel);
+ 
+     }
+ 
+     /**
+      * The starting point for the demo.
+      * 
+      * @param args  ignored.
+      */
+     public static void main(String[] args) {
+         PieChartDemo7 demo = new PieChartDemo7("Pie Chart Demo 7");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/piedata.xml jfreechart/source/org/jfree/chart/demo/piedata.xml
*** jfreechart-orig/source/org/jfree/chart/demo/piedata.xml	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/piedata.xml	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,22 ----
+ <?xml version="1.0" encoding="UTF-8"?>
+ 
+ <!-- A sample pie dataset for JFreeChart. -->
+ 
+ <PieDataset>
+   <Item>
+     <Key>Java</Key>
+     <Value>15.4</Value>
+   </Item>
+   <Item>
+     <Key>C++</Key>
+     <Value>12.7</Value>
+   </Item>
+   <Item>
+     <Key>PHP</Key>
+     <Value>5.7</Value>
+   </Item>
+   <Item>
+     <Key>Python</Key>
+     <Value>9.1</Value>
+   </Item>
+ </PieDataset>
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PlotOrientationDemo2.java jfreechart/source/org/jfree/chart/demo/PlotOrientationDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/PlotOrientationDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PlotOrientationDemo2.java	2004-11-07 16:02:14.000000000 +0100
***************
*** 0 ****
--- 1,214 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * PlotOrientationDemo2.java
+  * -------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PlotOrientationDemo2.java,v 1.1 2004/06/03 07:58:51 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 03-Jun-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.awt.GridLayout;
+ import java.awt.geom.Rectangle2D;
+ 
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.annotations.XYLineAnnotation;
+ import org.jfree.chart.annotations.XYShapeAnnotation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.IntervalMarker;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.Layer;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A demo showing eight plots with various inverted axis and plot orientation combinations.
+  */
+ public class PlotOrientationDemo2 extends ApplicationFrame {
+ 
+     /** The number of charts. */
+     private static final int CHART_COUNT = 8;
+     
+     /** The datasets. */
+     private XYDataset[] datasets = new XYDataset[CHART_COUNT];
+     
+     /** The charts. */
+     private JFreeChart[] charts = new JFreeChart[CHART_COUNT];
+     
+     /** The chart panels. */
+     private ChartPanel[] panels = new ChartPanel[CHART_COUNT];
+     
+     /**
+      * Creates a new demo instance.
+      * 
+      * @param title  the frame title.
+      */
+     public PlotOrientationDemo2(String title) {
+ 
+         super(title);
+         JPanel panel = new JPanel(new GridLayout(2, 4));
+         for (int i = 0; i < CHART_COUNT; i++) {
+             this.datasets[i] = createDataset(i);
+             this.charts[i] = createChart(i, this.datasets[i]);
+             XYPlot plot = this.charts[i].getXYPlot();
+             XYShapeAnnotation a1 = new XYShapeAnnotation(
+                 new Rectangle2D.Double(1.0, 2.0, 2.0, 3.0), new BasicStroke(1.0f), Color.blue
+             );
+             XYLineAnnotation a2 = new XYLineAnnotation(0.0, -5.0, 10.0, -5.0);
+ 
+             plot.addAnnotation(a1);
+             plot.addAnnotation(a2);
+             plot.addDomainMarker(new IntervalMarker(5.0, 10.0), Layer.BACKGROUND);
+             plot.addRangeMarker(new IntervalMarker(-2.0, 0.0), Layer.BACKGROUND);
+ 
+             this.panels[i] = new ChartPanel(this.charts[i]);
+         }
+         this.charts[1].getXYPlot().getDomainAxis().setInverted(true);
+         this.charts[2].getXYPlot().getRangeAxis().setInverted(true);
+         this.charts[3].getXYPlot().getDomainAxis().setInverted(true);
+         this.charts[3].getXYPlot().getRangeAxis().setInverted(true);
+ 
+         this.charts[5].getXYPlot().getDomainAxis().setInverted(true);
+         this.charts[6].getXYPlot().getRangeAxis().setInverted(true);
+         this.charts[4].getXYPlot().getDomainAxis().setInverted(true);
+         this.charts[4].getXYPlot().getRangeAxis().setInverted(true);
+         
+         this.charts[4].getXYPlot().setOrientation(PlotOrientation.HORIZONTAL);
+         this.charts[5].getXYPlot().setOrientation(PlotOrientation.HORIZONTAL);
+         this.charts[6].getXYPlot().setOrientation(PlotOrientation.HORIZONTAL);
+         this.charts[7].getXYPlot().setOrientation(PlotOrientation.HORIZONTAL);
+ 
+         panel.add(this.panels[0]);
+         panel.add(this.panels[1]);
+         panel.add(this.panels[4]);
+         panel.add(this.panels[5]);
+         panel.add(this.panels[2]);
+         panel.add(this.panels[3]);
+         panel.add(this.panels[6]);
+         panel.add(this.panels[7]);
+ 
+         panel.setPreferredSize(new Dimension(800, 600));
+         setContentPane(panel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @param index  the dataset index.
+      * 
+      * @return A dataset.
+      */
+     private XYDataset createDataset(int index) {
+         XYSeries series1 = new XYSeries("Series " + (index + 1));
+         series1.add(-10.0, -5.0);
+         series1.add(10.0, 5.0);
+         XYSeriesCollection dataset = new XYSeriesCollection();
+         dataset.addSeries(series1);
+         return dataset;
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param index  the chart index.
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(int index, XYDataset dataset) {
+         
+         // create the chart...
+         JFreeChart chart = ChartFactory.createXYLineChart(
+             "Chart " + (index + 1),   // chart title
+             "X",                      // x axis label
+             "Y",                      // y axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,
+             false,                    // include legend
+             false,                    // tooltips
+             false                     // urls
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         chart.setBackgroundPaint(Color.white);
+         
+         // get a reference to the plot for further customisation...
+         XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+        
+         StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPlotShapes(true);
+         renderer.setShapesFilled(true);
+         // change the auto tick unit selection to integer units only...
+         ValueAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         // OPTIONAL CUSTOMISATION COMPLETED.
+                 
+         return chart;
+         
+     }
+ 
+     /**
+      * The starting point for the demo.
+      * 
+      * @param args  ignored.
+      */
+     public static void main(String[] args) {
+         PlotOrientationDemo2 demo = new PlotOrientationDemo2("Plot Orientation Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PlotOrientationDemo.java jfreechart/source/org/jfree/chart/demo/PlotOrientationDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/PlotOrientationDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PlotOrientationDemo.java	2004-11-07 16:02:18.000000000 +0100
***************
*** 0 ****
--- 1,214 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * PlotOrientationDemo.java
+  * ------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PlotOrientationDemo.java,v 1.2 2004/05/19 10:09:11 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 06-May-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.awt.GridLayout;
+ import java.awt.geom.Rectangle2D;
+ 
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.annotations.XYImageAnnotation;
+ import org.jfree.chart.annotations.XYLineAnnotation;
+ import org.jfree.chart.annotations.XYShapeAnnotation;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A demo showing eight plots with various inverted axis and plot orientation combinations.
+  */
+ public class PlotOrientationDemo extends ApplicationFrame {
+ 
+     /** The number of charts. */
+     private static final int CHART_COUNT = 8;
+     
+     /** The datasets. */
+     private XYDataset[] datasets = new XYDataset[CHART_COUNT];
+     
+     /** The charts. */
+     private JFreeChart[] charts = new JFreeChart[CHART_COUNT];
+     
+     /** The chart panels. */
+     private ChartPanel[] panels = new ChartPanel[CHART_COUNT];
+     
+     /**
+      * Creates a new demo instance.
+      * 
+      * @param title  the frame title.
+      */
+     public PlotOrientationDemo(String title) {
+ 
+         super(title);
+         JPanel panel = new JPanel(new GridLayout(2, 4));
+         for (int i = 0; i < CHART_COUNT; i++) {
+             this.datasets[i] = createDataset(i);
+             this.charts[i] = createChart(i, this.datasets[i]);
+             XYPlot plot = this.charts[i].getXYPlot();
+             XYShapeAnnotation a1 = new XYShapeAnnotation(
+                 new Rectangle2D.Double(1.0, 2.0, 2.0, 3.0), new BasicStroke(1.0f), Color.blue
+             );
+             XYLineAnnotation a2 = new XYLineAnnotation(0.0, -5.0, 10.0, -5.0);
+             XYImageAnnotation a3 = new XYImageAnnotation(5.0, 2.0, JFreeChart.INFO.getLogo());
+             plot.addAnnotation(a1);
+             plot.addAnnotation(a2);
+             plot.addAnnotation(a3);
+             plot.setQuadrantPaint(0, new Color(230, 230, 255));
+             plot.setQuadrantPaint(1, new Color(230, 255, 230));
+             plot.setQuadrantPaint(2, new Color(255, 230, 230));
+             plot.setQuadrantPaint(3, new Color(255, 230, 255));
+             this.panels[i] = new ChartPanel(this.charts[i]);
+         }
+         this.charts[1].getXYPlot().getDomainAxis().setInverted(true);
+         this.charts[2].getXYPlot().getRangeAxis().setInverted(true);
+         this.charts[3].getXYPlot().getDomainAxis().setInverted(true);
+         this.charts[3].getXYPlot().getRangeAxis().setInverted(true);
+ 
+         this.charts[5].getXYPlot().getDomainAxis().setInverted(true);
+         this.charts[6].getXYPlot().getRangeAxis().setInverted(true);
+         this.charts[4].getXYPlot().getDomainAxis().setInverted(true);
+         this.charts[4].getXYPlot().getRangeAxis().setInverted(true);
+         
+         this.charts[4].getXYPlot().setOrientation(PlotOrientation.HORIZONTAL);
+         this.charts[5].getXYPlot().setOrientation(PlotOrientation.HORIZONTAL);
+         this.charts[6].getXYPlot().setOrientation(PlotOrientation.HORIZONTAL);
+         this.charts[7].getXYPlot().setOrientation(PlotOrientation.HORIZONTAL);
+ 
+         panel.add(this.panels[0]);
+         panel.add(this.panels[1]);
+         panel.add(this.panels[4]);
+         panel.add(this.panels[5]);
+         panel.add(this.panels[2]);
+         panel.add(this.panels[3]);
+         panel.add(this.panels[6]);
+         panel.add(this.panels[7]);
+ 
+         panel.setPreferredSize(new Dimension(800, 600));
+         setContentPane(panel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @param index  the dataset index.
+      * 
+      * @return A dataset.
+      */
+     private XYDataset createDataset(int index) {
+         XYSeries series1 = new XYSeries("Series " + (index + 1));
+         series1.add(-10.0, -5.0);
+         series1.add(10.0, 5.0);
+         XYSeriesCollection dataset = new XYSeriesCollection();
+         dataset.addSeries(series1);
+         return dataset;
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param index  the chart index.
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(int index, XYDataset dataset) {
+         
+         // create the chart...
+         JFreeChart chart = ChartFactory.createXYLineChart(
+             "Chart " + (index + 1),   // chart title
+             "X",                      // x axis label
+             "Y",                      // y axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,
+             false,                    // include legend
+             false,                    // tooltips
+             false                     // urls
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         chart.setBackgroundPaint(Color.white);
+         
+         // get a reference to the plot for further customisation...
+         XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+        
+         StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPlotShapes(true);
+         renderer.setShapesFilled(true);
+         // change the auto tick unit selection to integer units only...
+         ValueAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         // OPTIONAL CUSTOMISATION COMPLETED.
+                 
+         return chart;
+         
+     }
+ 
+     /**
+      * The starting point for the demo.
+      * 
+      * @param args  ignored.
+      */
+     public static void main(String[] args) {
+         PlotOrientationDemo demo = new PlotOrientationDemo("Plot Orientation Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PolarChartDemo.java jfreechart/source/org/jfree/chart/demo/PolarChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/PolarChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PolarChartDemo.java	2004-11-07 16:02:09.000000000 +0100
***************
*** 0 ****
--- 1,146 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * PolarChartDemo.java
+  * -------------------
+  * (C) Copyright 2004, by Solution Engineering, Inc. and Contributors.
+  *
+  * Original Author:  Daniel Bridenbecker, Solution Engineering, Inc.;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: PolarChartDemo.java,v 1.4 2004/04/30 11:19:22 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 19-Jan-2004 : Version 1, contributed by DB with minor changes by DG (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Dimension;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.PolarChartPanel;
+ import org.jfree.chart.plot.PolarPlot;
+ import org.jfree.chart.renderer.DefaultPolarItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * <code>PolarChartDemo</code> demonstrates the capabilities of the {@link PolarPlot}.
+  * 
+  * @author  Daniel Bridenbecker, Solution Engineering, Inc.
+  */
+ public class PolarChartDemo extends ApplicationFrame {
+     
+     /**
+      * Creates a new instance of the demo.
+      * 
+      * @param title  the frame title.
+      */
+     public PolarChartDemo(final String title) {
+         super(title);
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new PolarChartPanel(chart);
+         chartPanel.setPreferredSize(new Dimension(500, 270));
+         chartPanel.setEnforceFileExtensions(false);
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private XYDataset createDataset() {    
+         final XYSeriesCollection data = new XYSeriesCollection();
+         final XYSeries series1 = createRandomData("Series 1", 75.0, 10.0);
+         final XYSeries series2 = createRandomData("Series 2", 50.0, 5.0);
+         final XYSeries series3 = createRandomData("Series 3", 25.0, 1.0);
+         data.addSeries(series1);
+         data.addSeries(series2);
+         data.addSeries(series3);
+         return data;
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createPolarChart(
+             "Polar Chart Demo", dataset, true, true, false
+         ); 
+         final PolarPlot plot = (PolarPlot) chart.getPlot();
+         final DefaultPolarItemRenderer renderer = (DefaultPolarItemRenderer) plot.getRenderer();
+         renderer.setSeriesFilled(2, true);
+         return chart;
+     }
+     
+     /**
+      * Creates a series containing random data.
+      * 
+      * @param name  the series name.
+      * @param baseRadius  the base radius.
+      * @param thetaInc  the angle increment.
+      * 
+      * @return The series.
+      */
+     private static XYSeries createRandomData(final String name, 
+                                              final double baseRadius, 
+                                              final double thetaInc) {
+         final XYSeries series = new XYSeries(name);
+         for (double theta = 0.0; theta < 360.0; theta += thetaInc) {
+             final double radius = baseRadius * (1.0 + Math.random());
+             series.add(theta, radius);
+         }
+         return series;
+     }
+     
+     /**
+      * Main program that creates a thermometer and places it into
+      * a JFrame.
+      *
+      * @param argv Command line arguements - none used.
+      */
+     public static void main(final String[] argv) {
+          
+         final PolarChartDemo demo = new PolarChartDemo("Polar Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+         
+     }   
+        
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PopulationChartDemo.java jfreechart/source/org/jfree/chart/demo/PopulationChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/PopulationChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PopulationChartDemo.java	2004-11-07 16:02:05.000000000 +0100
***************
*** 0 ****
--- 1,140 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * PopulationChartDemo.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: PopulationChartDemo.java,v 1.14 2004/04/26 19:12:00 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 23-Apr-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DefaultKeyedValues2DDataset;
+ import org.jfree.data.general.KeyedValues2DDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A population pyramid demo.
+  *
+  */
+ public class PopulationChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public PopulationChartDemo(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = createDataset();
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createStackedBarChart(
+             "Population Chart Demo",
+             "Age Group",     // domain axis label
+             "Population (millions)", // range axis label
+             dataset,         // data
+             PlotOrientation.HORIZONTAL,
+             true,            // include legend
+             true,            // tooltips
+             false            // urls
+         );
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+ 
+     /**
+      * Creates a dataset.
+      * 
+      * @return A dataset.
+      */
+     private KeyedValues2DDataset createDataset() {
+ 
+         final DefaultKeyedValues2DDataset data = new DefaultKeyedValues2DDataset();
+         data.addValue(-6.0, "Male", "70+");
+         data.addValue(-8.0, "Male", "60-69");
+         data.addValue(-11.0, "Male", "50-59");
+         data.addValue(-13.0, "Male", "40-49");
+         data.addValue(-14.0, "Male", "30-39");
+         data.addValue(-15.0, "Male", "20-29");
+         data.addValue(-19.0, "Male", "10-19");
+         data.addValue(-21.0, "Male", "0-9");
+         data.addValue(10.0, "Female", "70+");
+         data.addValue(12.0, "Female", "60-69");
+         data.addValue(13.0, "Female", "50-59");
+         data.addValue(14.0, "Female", "40-49");
+         data.addValue(15.0, "Female", "30-39");
+         data.addValue(17.0, "Female", "20-29");
+         data.addValue(19.0, "Female", "10-19");
+         data.addValue(20.0, "Female", "0-9");
+         return data;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PopulationChartDemo demo = new PopulationChartDemo("Population Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/PriceVolumeDemo.java jfreechart/source/org/jfree/chart/demo/PriceVolumeDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/PriceVolumeDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/PriceVolumeDemo.java	2004-11-07 16:01:59.000000000 +0100
***************
*** 0 ****
--- 1,703 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * PriceVolumeDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: PriceVolumeDemo.java,v 1.20 2004/05/11 14:56:17 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 28-Mar-2002 : Version 1 (DG);
+  * 23-Apr-2002 : Modified to use new CombinedXYPlot class (DG);
+  * 25-Jun-2002 : Removed unnecessary imports (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 21-Nov-2002 : Implemented with dual axes, and used sample data from Chicago Mercantile
+  *               Exchange (http://www.cme.com) (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.DecimalFormat;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.date.MonthConstants;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application showing how to create a price-volume chart.
+  *
+  */
+ public class PriceVolumeDemo extends ApplicationFrame {
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public PriceVolumeDemo(final String title) {
+ 
+         super(title);
+         final JFreeChart chart = createChart();
+         final ChartPanel panel = new ChartPanel(chart, true, true, true, false, true);
+         panel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(panel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      *
+      * @return a chart.
+      */
+     private JFreeChart createChart() {
+ 
+         final XYDataset priceData = createPriceDataset();
+         final String title = "Eurodollar Futures Contract (MAR03)";
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             title, 
+             "Date", 
+             "Price",
+             priceData, 
+             true,
+             true,
+             false
+         );
+         final XYPlot plot = chart.getXYPlot();
+         final NumberAxis rangeAxis1 = (NumberAxis) plot.getRangeAxis();
+         rangeAxis1.setLowerMargin(0.40);  // to leave room for volume bars
+         final DecimalFormat format = new DecimalFormat("00.00");
+         rangeAxis1.setNumberFormatOverride(format);
+ 
+         final XYItemRenderer renderer1 = plot.getRenderer();
+         renderer1.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")
+             )
+         );
+ 
+         final NumberAxis rangeAxis2 = new NumberAxis("Volume");
+         rangeAxis2.setUpperMargin(1.00);  // to leave room for price line
+         plot.setRangeAxis(1, rangeAxis2);
+         plot.setDataset(1, createVolumeDataset());
+         plot.setRangeAxis(1, rangeAxis2);
+         plot.mapDatasetToRangeAxis(1, 1);
+         final XYBarRenderer renderer2 = new XYBarRenderer(0.20);
+         renderer2.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0,000.00")
+             )
+         );
+         plot.setRenderer(1, renderer2);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return A sample dataset.
+      */
+     private XYDataset createPriceDataset() {
+ 
+         // create dataset 1...
+         final TimeSeries series1 = new TimeSeries("Price", Day.class);
+ 
+         series1.add(new Day(2, MonthConstants.JANUARY, 2002), 95.565);
+         series1.add(new Day(3, MonthConstants.JANUARY, 2002), 95.640);
+         series1.add(new Day(4, MonthConstants.JANUARY, 2002), 95.710);
+ 
+         series1.add(new Day(7, MonthConstants.JANUARY, 2002), 95.930);
+         series1.add(new Day(8, MonthConstants.JANUARY, 2002), 95.930);
+         series1.add(new Day(9, MonthConstants.JANUARY, 2002), 95.960);
+         series1.add(new Day(10, MonthConstants.JANUARY, 2002), 96.055);
+         series1.add(new Day(11, MonthConstants.JANUARY, 2002), 96.335);
+ 
+         series1.add(new Day(14, MonthConstants.JANUARY, 2002), 96.290);
+         series1.add(new Day(15, MonthConstants.JANUARY, 2002), 96.275);
+         series1.add(new Day(16, MonthConstants.JANUARY, 2002), 96.240);
+         series1.add(new Day(17, MonthConstants.JANUARY, 2002), 96.080);
+         series1.add(new Day(18, MonthConstants.JANUARY, 2002), 96.145);
+ 
+         series1.add(new Day(22, MonthConstants.JANUARY, 2002), 96.120);
+         series1.add(new Day(23, MonthConstants.JANUARY, 2002), 96.015);
+         series1.add(new Day(24, MonthConstants.JANUARY, 2002), 95.890);
+         series1.add(new Day(25, MonthConstants.JANUARY, 2002), 95.8650);
+ 
+         series1.add(new Day(28, MonthConstants.JANUARY, 2002), 95.880);
+         series1.add(new Day(29, MonthConstants.JANUARY, 2002), 96.050);
+         series1.add(new Day(30, MonthConstants.JANUARY, 2002), 96.065);
+         series1.add(new Day(31, MonthConstants.JANUARY, 2002), 95.910);
+         series1.add(new Day(1, MonthConstants.FEBRUARY, 2002), 96.015);
+ 
+         series1.add(new Day(4, MonthConstants.FEBRUARY, 2002), 96.140);
+         series1.add(new Day(5, MonthConstants.FEBRUARY, 2002), 96.195);
+         series1.add(new Day(6, MonthConstants.FEBRUARY, 2002), 96.245);
+         series1.add(new Day(7, MonthConstants.FEBRUARY, 2002), 96.220);
+         series1.add(new Day(8, MonthConstants.FEBRUARY, 2002), 96.280);
+ 
+         series1.add(new Day(11, MonthConstants.FEBRUARY, 2002), 96.265);
+         series1.add(new Day(12, MonthConstants.FEBRUARY, 2002), 96.160);
+         series1.add(new Day(13, MonthConstants.FEBRUARY, 2002), 96.120);
+         series1.add(new Day(14, MonthConstants.FEBRUARY, 2002), 96.125);
+         series1.add(new Day(15, MonthConstants.FEBRUARY, 2002), 96.265);
+ 
+         series1.add(new Day(19, MonthConstants.FEBRUARY, 2002), 96.290);
+         series1.add(new Day(20, MonthConstants.FEBRUARY, 2002), 96.275);
+         series1.add(new Day(21, MonthConstants.FEBRUARY, 2002), 96.280);
+         series1.add(new Day(22, MonthConstants.FEBRUARY, 2002), 96.305);
+ 
+         series1.add(new Day(25, MonthConstants.FEBRUARY, 2002), 96.265);
+         series1.add(new Day(26, MonthConstants.FEBRUARY, 2002), 96.185);
+         series1.add(new Day(27, MonthConstants.FEBRUARY, 2002), 96.305);
+         series1.add(new Day(28, MonthConstants.FEBRUARY, 2002), 96.215);
+         series1.add(new Day(1, MonthConstants.MARCH, 2002), 96.015);
+ 
+         series1.add(new Day(4, MonthConstants.MARCH, 2002), 95.970);
+         series1.add(new Day(5, MonthConstants.MARCH, 2002), 95.935);
+         series1.add(new Day(6, MonthConstants.MARCH, 2002), 95.935);
+         series1.add(new Day(7, MonthConstants.MARCH, 2002), 95.705);
+         series1.add(new Day(8, MonthConstants.MARCH, 2002), 95.4850);
+ 
+         series1.add(new Day(11, MonthConstants.MARCH, 2002), 95.505);
+         series1.add(new Day(12, MonthConstants.MARCH, 2002), 95.540);
+         series1.add(new Day(13, MonthConstants.MARCH, 2002), 95.675);
+         series1.add(new Day(14, MonthConstants.MARCH, 2002), 95.510);
+         series1.add(new Day(15, MonthConstants.MARCH, 2002), 95.500);
+ 
+         series1.add(new Day(18, MonthConstants.MARCH, 2002), 95.500);
+         series1.add(new Day(19, MonthConstants.MARCH, 2002), 95.535);
+         series1.add(new Day(20, MonthConstants.MARCH, 2002), 95.420);
+         series1.add(new Day(21, MonthConstants.MARCH, 2002), 95.400);
+         series1.add(new Day(22, MonthConstants.MARCH, 2002), 95.375);
+ 
+         series1.add(new Day(25, MonthConstants.MARCH, 2002), 95.350);
+         series1.add(new Day(26, MonthConstants.MARCH, 2002), 95.505);
+         series1.add(new Day(27, MonthConstants.MARCH, 2002), 95.550);
+         series1.add(new Day(28, MonthConstants.MARCH, 2002), 95.485);
+ 
+         series1.add(new Day(1, MonthConstants.APRIL, 2002), 95.485);
+         series1.add(new Day(2, MonthConstants.APRIL, 2002), 95.630);
+         series1.add(new Day(3, MonthConstants.APRIL, 2002), 95.735);
+         series1.add(new Day(4, MonthConstants.APRIL, 2002), 95.695);
+         series1.add(new Day(5, MonthConstants.APRIL, 2002), 95.810);
+ 
+         series1.add(new Day(8, MonthConstants.APRIL, 2002), 95.810);
+         series1.add(new Day(9, MonthConstants.APRIL, 2002), 95.865);
+         series1.add(new Day(10, MonthConstants.APRIL, 2002), 95.885);
+         series1.add(new Day(11, MonthConstants.APRIL, 2002), 95.900);
+         series1.add(new Day(12, MonthConstants.APRIL, 2002), 95.980);
+ 
+         series1.add(new Day(15, MonthConstants.APRIL, 2002), 96.035);
+         series1.add(new Day(16, MonthConstants.APRIL, 2002), 96.000);
+         series1.add(new Day(17, MonthConstants.APRIL, 2002), 96.035);
+         series1.add(new Day(18, MonthConstants.APRIL, 2002), 96.085);
+         series1.add(new Day(19, MonthConstants.APRIL, 2002), 96.0750);
+ 
+         series1.add(new Day(22, MonthConstants.APRIL, 2002), 96.105);
+         series1.add(new Day(23, MonthConstants.APRIL, 2002), 96.075);
+         series1.add(new Day(24, MonthConstants.APRIL, 2002), 96.210);
+         series1.add(new Day(25, MonthConstants.APRIL, 2002), 96.255);
+         series1.add(new Day(26, MonthConstants.APRIL, 2002), 96.310);
+ 
+         series1.add(new Day(29, MonthConstants.APRIL, 2002), 96.310);
+         series1.add(new Day(30, MonthConstants.APRIL, 2002), 96.325);
+         series1.add(new Day(1, MonthConstants.MAY, 2002), 96.345);
+         series1.add(new Day(2, MonthConstants.MAY, 2002), 96.285);
+         series1.add(new Day(3, MonthConstants.MAY, 2002), 96.385);
+ 
+         series1.add(new Day(6, MonthConstants.MAY, 2002), 96.380);
+         series1.add(new Day(7, MonthConstants.MAY, 2002), 96.485);
+         series1.add(new Day(8, MonthConstants.MAY, 2002), 96.230);
+         series1.add(new Day(9, MonthConstants.MAY, 2002), 96.310);
+         series1.add(new Day(10, MonthConstants.MAY, 2002), 96.445);
+ 
+         series1.add(new Day(13, MonthConstants.MAY, 2002), 96.355);
+         series1.add(new Day(14, MonthConstants.MAY, 2002), 96.180);
+         series1.add(new Day(15, MonthConstants.MAY, 2002), 96.240);
+         series1.add(new Day(16, MonthConstants.MAY, 2002), 96.325);
+         series1.add(new Day(17, MonthConstants.MAY, 2002), 96.200);
+ 
+         series1.add(new Day(20, MonthConstants.MAY, 2002), 96.305);
+         series1.add(new Day(21, MonthConstants.MAY, 2002), 96.385);
+         series1.add(new Day(22, MonthConstants.MAY, 2002), 96.445);
+         series1.add(new Day(23, MonthConstants.MAY, 2002), 96.385);
+         series1.add(new Day(24, MonthConstants.MAY, 2002), 96.390);
+ 
+         series1.add(new Day(28, MonthConstants.MAY, 2002), 96.390);
+         series1.add(new Day(29, MonthConstants.MAY, 2002), 96.475);
+         series1.add(new Day(30, MonthConstants.MAY, 2002), 96.555);
+         series1.add(new Day(31, MonthConstants.MAY, 2002), 96.500);
+ 
+         series1.add(new Day(3, MonthConstants.JUNE, 2002), 96.540);
+         series1.add(new Day(4, MonthConstants.JUNE, 2002), 96.605);
+         series1.add(new Day(5, MonthConstants.JUNE, 2002), 96.580);
+         series1.add(new Day(6, MonthConstants.JUNE, 2002), 96.610);
+         series1.add(new Day(7, MonthConstants.JUNE, 2002), 96.600);
+ 
+         series1.add(new Day(10, MonthConstants.JUNE, 2002), 96.615);
+         series1.add(new Day(11, MonthConstants.JUNE, 2002), 96.705);
+         series1.add(new Day(12, MonthConstants.JUNE, 2002), 96.750);
+         series1.add(new Day(13, MonthConstants.JUNE, 2002), 96.830);
+         series1.add(new Day(14, MonthConstants.JUNE, 2002), 96.965);
+ 
+         series1.add(new Day(17, MonthConstants.JUNE, 2002), 96.945);
+         series1.add(new Day(18, MonthConstants.JUNE, 2002), 96.990);
+         series1.add(new Day(19, MonthConstants.JUNE, 2002), 97.165);
+         series1.add(new Day(20, MonthConstants.JUNE, 2002), 97.030);
+         series1.add(new Day(21, MonthConstants.JUNE, 2002), 97.145);
+ 
+         series1.add(new Day(24, MonthConstants.JUNE, 2002), 97.120);
+         series1.add(new Day(25, MonthConstants.JUNE, 2002), 97.175);
+         series1.add(new Day(26, MonthConstants.JUNE, 2002), 97.365);
+         series1.add(new Day(27, MonthConstants.JUNE, 2002), 97.245);
+         series1.add(new Day(28, MonthConstants.JUNE, 2002), 97.245);
+ 
+         series1.add(new Day(1, MonthConstants.JULY, 2002), 97.290);
+         series1.add(new Day(2, MonthConstants.JULY, 2002), 97.380);
+         series1.add(new Day(3, MonthConstants.JULY, 2002), 97.380);
+ 
+         series1.add(new Day(5, MonthConstants.JULY, 2002), 97.220);
+ 
+         series1.add(new Day(8, MonthConstants.JULY, 2002), 97.325);
+         series1.add(new Day(9, MonthConstants.JULY, 2002), 97.455);
+         series1.add(new Day(10, MonthConstants.JULY, 2002), 97.580);
+         series1.add(new Day(11, MonthConstants.JULY, 2002), 97.605);
+         series1.add(new Day(12, MonthConstants.JULY, 2002), 97.690);
+ 
+         series1.add(new Day(15, MonthConstants.JULY, 2002), 97.730);
+         series1.add(new Day(16, MonthConstants.JULY, 2002), 97.580);
+         series1.add(new Day(17, MonthConstants.JULY, 2002), 97.640);
+         series1.add(new Day(18, MonthConstants.JULY, 2002), 97.680);
+         series1.add(new Day(19, MonthConstants.JULY, 2002), 97.715);
+ 
+         series1.add(new Day(22, MonthConstants.JULY, 2002), 97.815);
+         series1.add(new Day(23, MonthConstants.JULY, 2002), 97.875);
+         series1.add(new Day(24, MonthConstants.JULY, 2002), 97.835);
+         series1.add(new Day(25, MonthConstants.JULY, 2002), 97.925);
+         series1.add(new Day(26, MonthConstants.JULY, 2002), 97.960);
+ 
+         series1.add(new Day(29, MonthConstants.JULY, 2002), 97.745);
+         series1.add(new Day(30, MonthConstants.JULY, 2002), 97.710);
+         series1.add(new Day(31, MonthConstants.JULY, 2002), 97.930);
+         series1.add(new Day(1, MonthConstants.AUGUST, 2002), 98.000);
+         series1.add(new Day(2, MonthConstants.AUGUST, 2002), 98.170);
+ 
+         series1.add(new Day(5, MonthConstants.AUGUST, 2002), 98.225);
+         series1.add(new Day(6, MonthConstants.AUGUST, 2002), 98.115);
+         series1.add(new Day(7, MonthConstants.AUGUST, 2002), 98.265);
+         series1.add(new Day(8, MonthConstants.AUGUST, 2002), 98.180);
+         series1.add(new Day(9, MonthConstants.AUGUST, 2002), 98.185);
+ 
+         series1.add(new Day(12, MonthConstants.AUGUST, 2002), 98.150);
+         series1.add(new Day(13, MonthConstants.AUGUST, 2002), 98.290);
+         series1.add(new Day(14, MonthConstants.AUGUST, 2002), 98.155);
+         series1.add(new Day(15, MonthConstants.AUGUST, 2002), 98.075);
+         series1.add(new Day(16, MonthConstants.AUGUST, 2002), 98.000);
+ 
+         series1.add(new Day(19, MonthConstants.AUGUST, 2002), 98.040);
+         series1.add(new Day(20, MonthConstants.AUGUST, 2002), 98.135);
+         series1.add(new Day(21, MonthConstants.AUGUST, 2002), 98.110);
+         series1.add(new Day(22, MonthConstants.AUGUST, 2002), 98.005);
+         series1.add(new Day(23, MonthConstants.AUGUST, 2002), 98.055);
+ 
+         series1.add(new Day(26, MonthConstants.AUGUST, 2002), 98.065);
+         series1.add(new Day(27, MonthConstants.AUGUST, 2002), 97.980);
+         series1.add(new Day(28, MonthConstants.AUGUST, 2002), 98.035);
+         series1.add(new Day(29, MonthConstants.AUGUST, 2002), 98.095);
+         series1.add(new Day(30, MonthConstants.AUGUST, 2002), 98.060);
+ 
+         series1.add(new Day(3, MonthConstants.SEPTEMBER, 2002), 98.250);
+         series1.add(new Day(4, MonthConstants.SEPTEMBER, 2002), 98.245);
+         series1.add(new Day(5, MonthConstants.SEPTEMBER, 2002), 98.315);
+         series1.add(new Day(6, MonthConstants.SEPTEMBER, 2002), 98.170);
+ 
+         series1.add(new Day(9, MonthConstants.SEPTEMBER, 2002), 98.080);
+         series1.add(new Day(10, MonthConstants.SEPTEMBER, 2002), 98.090);
+         series1.add(new Day(11, MonthConstants.SEPTEMBER, 2002), 98.030);
+         series1.add(new Day(12, MonthConstants.SEPTEMBER, 2002), 98.105);
+         series1.add(new Day(13, MonthConstants.SEPTEMBER, 2002), 98.135);
+ 
+         series1.add(new Day(16, MonthConstants.SEPTEMBER, 2002), 98.115);
+         series1.add(new Day(17, MonthConstants.SEPTEMBER, 2002), 98.125);
+         series1.add(new Day(18, MonthConstants.SEPTEMBER, 2002), 98.130);
+         series1.add(new Day(19, MonthConstants.SEPTEMBER, 2002), 98.255);
+         series1.add(new Day(20, MonthConstants.SEPTEMBER, 2002), 98.255);
+ 
+         series1.add(new Day(23, MonthConstants.SEPTEMBER, 2002), 98.280);
+         series1.add(new Day(24, MonthConstants.SEPTEMBER, 2002), 98.310);
+         series1.add(new Day(25, MonthConstants.SEPTEMBER, 2002), 98.250);
+         series1.add(new Day(26, MonthConstants.SEPTEMBER, 2002), 98.300);
+         series1.add(new Day(27, MonthConstants.SEPTEMBER, 2002), 98.410);
+ 
+         series1.add(new Day(30, MonthConstants.SEPTEMBER, 2002), 98.495);
+         series1.add(new Day(1, MonthConstants.OCTOBER, 2002), 98.440);
+         series1.add(new Day(2, MonthConstants.OCTOBER, 2002), 98.440);
+         series1.add(new Day(3, MonthConstants.OCTOBER, 2002), 98.440);
+         series1.add(new Day(4, MonthConstants.OCTOBER, 2002), 98.380);
+ 
+         series1.add(new Day(7, MonthConstants.OCTOBER, 2002), 98.385);
+         series1.add(new Day(8, MonthConstants.OCTOBER, 2002), 98.340);
+         series1.add(new Day(9, MonthConstants.OCTOBER, 2002), 98.420);
+         series1.add(new Day(10, MonthConstants.OCTOBER, 2002), 98.375);
+         series1.add(new Day(11, MonthConstants.OCTOBER, 2002), 98.275);
+ 
+         series1.add(new Day(14, MonthConstants.OCTOBER, 2002), 98.275);
+         series1.add(new Day(15, MonthConstants.OCTOBER, 2002), 98.135);
+         series1.add(new Day(16, MonthConstants.OCTOBER, 2002), 98.165);
+         series1.add(new Day(17, MonthConstants.OCTOBER, 2002), 98.170);
+         series1.add(new Day(18, MonthConstants.OCTOBER, 2002), 98.165);
+ 
+         series1.add(new Day(21, MonthConstants.OCTOBER, 2002), 98.105);
+         series1.add(new Day(22, MonthConstants.OCTOBER, 2002), 98.125);
+         series1.add(new Day(23, MonthConstants.OCTOBER, 2002), 98.185);
+         series1.add(new Day(24, MonthConstants.OCTOBER, 2002), 98.245);
+         series1.add(new Day(25, MonthConstants.OCTOBER, 2002), 98.320);
+ 
+         series1.add(new Day(28, MonthConstants.OCTOBER, 2002), 98.420);
+         series1.add(new Day(29, MonthConstants.OCTOBER, 2002), 98.540);
+         series1.add(new Day(30, MonthConstants.OCTOBER, 2002), 98.545);
+         series1.add(new Day(31, MonthConstants.OCTOBER, 2002), 98.560);
+ 
+         return new TimeSeriesCollection(series1);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return A sample dataset.
+      */
+     private IntervalXYDataset createVolumeDataset() {
+ 
+         // create dataset 2...
+         final TimeSeries series1 = new TimeSeries("Volume", Day.class);
+ 
+         series1.add(new Day(2, MonthConstants.JANUARY, 2002), 41020);
+         series1.add(new Day(3, MonthConstants.JANUARY, 2002), 45586);
+         series1.add(new Day(4, MonthConstants.JANUARY, 2002), 81672);
+ 
+         series1.add(new Day(7, MonthConstants.JANUARY, 2002), 81975);
+         series1.add(new Day(8, MonthConstants.JANUARY, 2002), 79692);
+         series1.add(new Day(9, MonthConstants.JANUARY, 2002), 53187);
+         series1.add(new Day(10, MonthConstants.JANUARY, 2002), 87929);
+         series1.add(new Day(11, MonthConstants.JANUARY, 2002), 107047);
+ 
+         series1.add(new Day(14, MonthConstants.JANUARY, 2002), 86276);
+         series1.add(new Day(15, MonthConstants.JANUARY, 2002), 79005);
+         series1.add(new Day(16, MonthConstants.JANUARY, 2002), 80632);
+         series1.add(new Day(17, MonthConstants.JANUARY, 2002), 88797);
+         series1.add(new Day(18, MonthConstants.JANUARY, 2002), 57179);
+ 
+         series1.add(new Day(22, MonthConstants.JANUARY, 2002), 36611);
+         series1.add(new Day(23, MonthConstants.JANUARY, 2002), 57063);
+         series1.add(new Day(24, MonthConstants.JANUARY, 2002), 101938);
+         series1.add(new Day(25, MonthConstants.JANUARY, 2002), 87177);
+ 
+         series1.add(new Day(28, MonthConstants.JANUARY, 2002), 39831);
+         series1.add(new Day(29, MonthConstants.JANUARY, 2002), 67654);
+         series1.add(new Day(30, MonthConstants.JANUARY, 2002), 81162);
+         series1.add(new Day(31, MonthConstants.JANUARY, 2002), 64923);
+         series1.add(new Day(1, MonthConstants.FEBRUARY, 2002), 73481);
+ 
+         series1.add(new Day(4, MonthConstants.FEBRUARY, 2002), 54723);
+         series1.add(new Day(5, MonthConstants.FEBRUARY, 2002), 76708);
+         series1.add(new Day(6, MonthConstants.FEBRUARY, 2002), 81281);
+         series1.add(new Day(7, MonthConstants.FEBRUARY, 2002), 66553);
+         series1.add(new Day(8, MonthConstants.FEBRUARY, 2002), 53592);
+ 
+         series1.add(new Day(11, MonthConstants.FEBRUARY, 2002), 29410);
+         series1.add(new Day(12, MonthConstants.FEBRUARY, 2002), 60345);
+         series1.add(new Day(13, MonthConstants.FEBRUARY, 2002), 67339);
+         series1.add(new Day(14, MonthConstants.FEBRUARY, 2002), 40057);
+         series1.add(new Day(15, MonthConstants.FEBRUARY, 2002), 67865);
+ 
+         series1.add(new Day(19, MonthConstants.FEBRUARY, 2002), 58628);
+         series1.add(new Day(20, MonthConstants.FEBRUARY, 2002), 52109);
+         series1.add(new Day(21, MonthConstants.FEBRUARY, 2002), 50195);
+         series1.add(new Day(22, MonthConstants.FEBRUARY, 2002), 47806);
+ 
+         series1.add(new Day(25, MonthConstants.FEBRUARY, 2002), 31711);
+         series1.add(new Day(26, MonthConstants.FEBRUARY, 2002), 88328);
+         series1.add(new Day(27, MonthConstants.FEBRUARY, 2002), 95805);
+         series1.add(new Day(28, MonthConstants.FEBRUARY, 2002), 84035);
+         series1.add(new Day(1, MonthConstants.MARCH, 2002), 113584);
+ 
+         series1.add(new Day(4, MonthConstants.MARCH, 2002), 71872);
+         series1.add(new Day(5, MonthConstants.MARCH, 2002), 83016);
+         series1.add(new Day(6, MonthConstants.MARCH, 2002), 62273);
+         series1.add(new Day(7, MonthConstants.MARCH, 2002), 138508);
+         series1.add(new Day(8, MonthConstants.MARCH, 2002), 139428);
+ 
+         series1.add(new Day(11, MonthConstants.MARCH, 2002), 80232);
+         series1.add(new Day(12, MonthConstants.MARCH, 2002), 75693);
+         series1.add(new Day(13, MonthConstants.MARCH, 2002), 104068);
+         series1.add(new Day(14, MonthConstants.MARCH, 2002), 72171);
+         series1.add(new Day(15, MonthConstants.MARCH, 2002), 117262);
+ 
+         series1.add(new Day(18, MonthConstants.MARCH, 2002), 66048);
+         series1.add(new Day(19, MonthConstants.MARCH, 2002), 87079);
+         series1.add(new Day(20, MonthConstants.MARCH, 2002), 116084);
+         series1.add(new Day(21, MonthConstants.MARCH, 2002), 113206);
+         series1.add(new Day(22, MonthConstants.MARCH, 2002), 68326);
+ 
+         series1.add(new Day(25, MonthConstants.MARCH, 2002), 34340);
+         series1.add(new Day(26, MonthConstants.MARCH, 2002), 104413);
+         series1.add(new Day(27, MonthConstants.MARCH, 2002), 57277);
+         series1.add(new Day(28, MonthConstants.MARCH, 2002), 69936);
+ 
+         series1.add(new Day(1, MonthConstants.APRIL, 2002), 57282);
+         series1.add(new Day(2, MonthConstants.APRIL, 2002), 74686);
+         series1.add(new Day(3, MonthConstants.APRIL, 2002), 108601);
+         series1.add(new Day(4, MonthConstants.APRIL, 2002), 123381);
+         series1.add(new Day(5, MonthConstants.APRIL, 2002), 106691);
+ 
+         series1.add(new Day(8, MonthConstants.APRIL, 2002), 118535);
+         series1.add(new Day(9, MonthConstants.APRIL, 2002), 85577);
+         series1.add(new Day(10, MonthConstants.APRIL, 2002), 75441);
+         series1.add(new Day(11, MonthConstants.APRIL, 2002), 88845);
+         series1.add(new Day(12, MonthConstants.APRIL, 2002), 137141);
+ 
+         series1.add(new Day(15, MonthConstants.APRIL, 2002), 72518);
+         series1.add(new Day(16, MonthConstants.APRIL, 2002), 122100);
+         series1.add(new Day(17, MonthConstants.APRIL, 2002), 136419);
+         series1.add(new Day(18, MonthConstants.APRIL, 2002), 141338);
+         series1.add(new Day(19, MonthConstants.APRIL, 2002), 80274);
+ 
+         series1.add(new Day(22, MonthConstants.APRIL, 2002), 40449);
+         series1.add(new Day(23, MonthConstants.APRIL, 2002), 72292);
+         series1.add(new Day(24, MonthConstants.APRIL, 2002), 110644);
+         series1.add(new Day(25, MonthConstants.APRIL, 2002), 145142);
+         series1.add(new Day(26, MonthConstants.APRIL, 2002), 139573);
+ 
+         series1.add(new Day(29, MonthConstants.APRIL, 2002), 51509);
+         series1.add(new Day(30, MonthConstants.APRIL, 2002), 105782);
+         series1.add(new Day(1, MonthConstants.MAY, 2002), 170680);
+         series1.add(new Day(2, MonthConstants.MAY, 2002), 140800);
+         series1.add(new Day(3, MonthConstants.MAY, 2002), 170411);
+ 
+         series1.add(new Day(6, MonthConstants.MAY, 2002), 46172);
+         series1.add(new Day(7, MonthConstants.MAY, 2002), 137251);
+         series1.add(new Day(8, MonthConstants.MAY, 2002), 220626);
+         series1.add(new Day(9, MonthConstants.MAY, 2002), 175902);
+         series1.add(new Day(10, MonthConstants.MAY, 2002), 128807);
+ 
+         series1.add(new Day(13, MonthConstants.MAY, 2002), 78208);
+         series1.add(new Day(14, MonthConstants.MAY, 2002), 212048);
+         series1.add(new Day(15, MonthConstants.MAY, 2002), 145643);
+         series1.add(new Day(16, MonthConstants.MAY, 2002), 121520);
+         series1.add(new Day(17, MonthConstants.MAY, 2002), 147820);
+ 
+         series1.add(new Day(20, MonthConstants.MAY, 2002), 75969);
+         series1.add(new Day(21, MonthConstants.MAY, 2002), 118970);
+         series1.add(new Day(22, MonthConstants.MAY, 2002), 131013);
+         series1.add(new Day(23, MonthConstants.MAY, 2002), 141100);
+         series1.add(new Day(24, MonthConstants.MAY, 2002), 63606);
+ 
+         series1.add(new Day(28, MonthConstants.MAY, 2002), 78687);
+         series1.add(new Day(29, MonthConstants.MAY, 2002), 86743);
+         series1.add(new Day(30, MonthConstants.MAY, 2002), 164376);
+         series1.add(new Day(31, MonthConstants.MAY, 2002), 150108);
+ 
+         series1.add(new Day(3, MonthConstants.JUNE, 2002), 132363);
+         series1.add(new Day(4, MonthConstants.JUNE, 2002), 144902);
+         series1.add(new Day(5, MonthConstants.JUNE, 2002), 123834);
+         series1.add(new Day(6, MonthConstants.JUNE, 2002), 125004);
+         series1.add(new Day(7, MonthConstants.JUNE, 2002), 165049);
+ 
+         series1.add(new Day(10, MonthConstants.JUNE, 2002), 88069);
+         series1.add(new Day(11, MonthConstants.JUNE, 2002), 114146);
+         series1.add(new Day(12, MonthConstants.JUNE, 2002), 149992);
+         series1.add(new Day(13, MonthConstants.JUNE, 2002), 191261);
+         series1.add(new Day(14, MonthConstants.JUNE, 2002), 207444);
+ 
+         series1.add(new Day(17, MonthConstants.JUNE, 2002), 117081);
+         series1.add(new Day(18, MonthConstants.JUNE, 2002), 135924);
+         series1.add(new Day(19, MonthConstants.JUNE, 2002), 179654);
+         series1.add(new Day(20, MonthConstants.JUNE, 2002), 260936);
+         series1.add(new Day(21, MonthConstants.JUNE, 2002), 140283);
+ 
+         series1.add(new Day(24, MonthConstants.JUNE, 2002), 199052);
+         series1.add(new Day(25, MonthConstants.JUNE, 2002), 191804);
+         series1.add(new Day(26, MonthConstants.JUNE, 2002), 384936);
+         series1.add(new Day(27, MonthConstants.JUNE, 2002), 313065);
+         series1.add(new Day(28, MonthConstants.JUNE, 2002), 169963);
+ 
+         series1.add(new Day(1, MonthConstants.JULY, 2002), 109906);
+         series1.add(new Day(2, MonthConstants.JULY, 2002), 140644);
+         series1.add(new Day(3, MonthConstants.JULY, 2002), 150898);
+ 
+         series1.add(new Day(5, MonthConstants.JULY, 2002), 181355);
+ 
+         series1.add(new Day(8, MonthConstants.JULY, 2002), 155042);
+         series1.add(new Day(9, MonthConstants.JULY, 2002), 204305);
+         series1.add(new Day(10, MonthConstants.JULY, 2002), 300113);
+         series1.add(new Day(11, MonthConstants.JULY, 2002), 338948);
+         series1.add(new Day(12, MonthConstants.JULY, 2002), 281325);
+ 
+         series1.add(new Day(15, MonthConstants.JULY, 2002), 256101);
+         series1.add(new Day(16, MonthConstants.JULY, 2002), 348164);
+         series1.add(new Day(17, MonthConstants.JULY, 2002), 242995);
+         series1.add(new Day(18, MonthConstants.JULY, 2002), 200744);
+         series1.add(new Day(19, MonthConstants.JULY, 2002), 181071);
+ 
+         series1.add(new Day(22, MonthConstants.JULY, 2002), 163266);
+         series1.add(new Day(23, MonthConstants.JULY, 2002), 188508);
+         series1.add(new Day(24, MonthConstants.JULY, 2002), 308070);
+         series1.add(new Day(25, MonthConstants.JULY, 2002), 230901);
+         series1.add(new Day(26, MonthConstants.JULY, 2002), 162577);
+ 
+         series1.add(new Day(29, MonthConstants.JULY, 2002), 216318);
+         series1.add(new Day(30, MonthConstants.JULY, 2002), 280677);
+         series1.add(new Day(31, MonthConstants.JULY, 2002), 260236);
+         series1.add(new Day(1, MonthConstants.AUGUST, 2002), 242803);
+         series1.add(new Day(2, MonthConstants.AUGUST, 2002), 298490);
+ 
+         series1.add(new Day(5, MonthConstants.AUGUST, 2002), 182890);
+         series1.add(new Day(6, MonthConstants.AUGUST, 2002), 232273);
+         series1.add(new Day(7, MonthConstants.AUGUST, 2002), 253552);
+         series1.add(new Day(8, MonthConstants.AUGUST, 2002), 165365);
+         series1.add(new Day(9, MonthConstants.AUGUST, 2002), 160382);
+ 
+         series1.add(new Day(12, MonthConstants.AUGUST, 2002), 118030);
+         series1.add(new Day(13, MonthConstants.AUGUST, 2002), 208807);
+         series1.add(new Day(14, MonthConstants.AUGUST, 2002), 231599);
+         series1.add(new Day(15, MonthConstants.AUGUST, 2002), 343482);
+         series1.add(new Day(16, MonthConstants.AUGUST, 2002), 186116);
+ 
+         series1.add(new Day(19, MonthConstants.AUGUST, 2002), 96437);
+         series1.add(new Day(20, MonthConstants.AUGUST, 2002), 151735);
+         series1.add(new Day(21, MonthConstants.AUGUST, 2002), 167390);
+         series1.add(new Day(22, MonthConstants.AUGUST, 2002), 127184);
+         series1.add(new Day(23, MonthConstants.AUGUST, 2002), 80205);
+ 
+         series1.add(new Day(26, MonthConstants.AUGUST, 2002), 79893);
+         series1.add(new Day(27, MonthConstants.AUGUST, 2002), 201723);
+         series1.add(new Day(28, MonthConstants.AUGUST, 2002), 114001);
+         series1.add(new Day(29, MonthConstants.AUGUST, 2002), 188389);
+         series1.add(new Day(30, MonthConstants.AUGUST, 2002), 162801);
+ 
+         series1.add(new Day(3, MonthConstants.SEPTEMBER, 2002), 200951);
+         series1.add(new Day(4, MonthConstants.SEPTEMBER, 2002), 129229);
+         series1.add(new Day(5, MonthConstants.SEPTEMBER, 2002), 183348);
+         series1.add(new Day(6, MonthConstants.SEPTEMBER, 2002), 216722);
+ 
+         series1.add(new Day(9, MonthConstants.SEPTEMBER, 2002), 128575);
+         series1.add(new Day(10, MonthConstants.SEPTEMBER, 2002), 224714);
+         series1.add(new Day(11, MonthConstants.SEPTEMBER, 2002), 144224);
+         series1.add(new Day(12, MonthConstants.SEPTEMBER, 2002), 195721);
+         series1.add(new Day(13, MonthConstants.SEPTEMBER, 2002), 160724);
+ 
+         series1.add(new Day(16, MonthConstants.SEPTEMBER, 2002), 65473);
+         series1.add(new Day(17, MonthConstants.SEPTEMBER, 2002), 141274);
+         series1.add(new Day(18, MonthConstants.SEPTEMBER, 2002), 115084);
+         series1.add(new Day(19, MonthConstants.SEPTEMBER, 2002), 242106);
+         series1.add(new Day(20, MonthConstants.SEPTEMBER, 2002), 130034);
+ 
+         series1.add(new Day(23, MonthConstants.SEPTEMBER, 2002), 95215);
+         series1.add(new Day(24, MonthConstants.SEPTEMBER, 2002), 229288);
+         series1.add(new Day(25, MonthConstants.SEPTEMBER, 2002), 163672);
+         series1.add(new Day(26, MonthConstants.SEPTEMBER, 2002), 193573);
+         series1.add(new Day(27, MonthConstants.SEPTEMBER, 2002), 170741);
+ 
+         series1.add(new Day(30, MonthConstants.SEPTEMBER, 2002), 199615);
+         series1.add(new Day(1, MonthConstants.OCTOBER, 2002), 170771);
+         series1.add(new Day(2, MonthConstants.OCTOBER, 2002), 138498);
+         series1.add(new Day(3, MonthConstants.OCTOBER, 2002), 154774);
+         series1.add(new Day(4, MonthConstants.OCTOBER, 2002), 287154);
+ 
+         series1.add(new Day(7, MonthConstants.OCTOBER, 2002), 111762);
+         series1.add(new Day(8, MonthConstants.OCTOBER, 2002), 172535);
+         series1.add(new Day(9, MonthConstants.OCTOBER, 2002), 148339);
+         series1.add(new Day(10, MonthConstants.OCTOBER, 2002), 178796);
+         series1.add(new Day(11, MonthConstants.OCTOBER, 2002), 153499);
+ 
+         series1.add(new Day(14, MonthConstants.OCTOBER, 2002), 4589);
+         series1.add(new Day(15, MonthConstants.OCTOBER, 2002), 172088);
+         series1.add(new Day(16, MonthConstants.OCTOBER, 2002), 151267);
+         series1.add(new Day(17, MonthConstants.OCTOBER, 2002), 222680);
+         series1.add(new Day(18, MonthConstants.OCTOBER, 2002), 127019);
+ 
+         series1.add(new Day(21, MonthConstants.OCTOBER, 2002), 118226);
+         series1.add(new Day(22, MonthConstants.OCTOBER, 2002), 183031);
+         series1.add(new Day(23, MonthConstants.OCTOBER, 2002), 221005);
+         series1.add(new Day(24, MonthConstants.OCTOBER, 2002), 121333);
+         series1.add(new Day(25, MonthConstants.OCTOBER, 2002), 138179);
+ 
+         series1.add(new Day(28, MonthConstants.OCTOBER, 2002), 162012);
+         series1.add(new Day(29, MonthConstants.OCTOBER, 2002), 237355);
+         series1.add(new Day(30, MonthConstants.OCTOBER, 2002), 161650);
+         series1.add(new Day(31, MonthConstants.OCTOBER, 2002), 207569);
+ 
+         return new TimeSeriesCollection(series1);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the price/volume chart demo application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final PriceVolumeDemo demo = new PriceVolumeDemo("Price Volume Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources_de.java jfreechart/source/org/jfree/chart/demo/resources/DemoResources_de.java
*** jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources_de.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/resources/DemoResources_de.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,344 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * DemoResources_de.java
+  * ---------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Thomas Meier;
+  *
+  * $Id: DemoResources_de.java,v 1.3 2004/01/03 05:38:58 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 15-Mar-2002 : Version 1, translation by Thomas Meier (DG);
+  * 24-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo.resources;
+ 
+ import java.util.ListResourceBundle;
+ 
+ /**
+  * Localised resources for Germany.
+  *
+  * @author TM
+  */
+ public class DemoResources_de extends ListResourceBundle {
+ 
+     /**
+      * Returns the array of strings in the resource bundle.
+      *
+      * @return the resources.
+      */
+     public Object[][] getContents() {
+         return CONTENTS;
+     }
+ 
+     /** The resources to be localised. */
+     private static final Object[][] CONTENTS = {
+ 
+         // about frame...
+         {"about.title", "Info..."},
+         {"about.version.label", "Version"},
+ 
+         // menu labels...
+         {"menu.file", "Datei"},
+         {"menu.file.mnemonic", new Character('D')},
+ 
+         {"menu.file.exit", "Beenden"},
+         {"menu.file.exit.mnemonic", new Character('B')},
+ 
+         {"menu.help", "Hilfe"},
+         {"menu.help.mnemonic", new Character('H')},
+ 
+         {"menu.help.about", "Info..."},
+         {"menu.help.about.mnemonic", new Character('I')},
+ 
+         // dialog messages...
+         {"dialog.exit.title", "Programm beenden..."},
+         {"dialog.exit.message", "Soll das Programm beendet werden?"},
+ 
+         // labels for the tabs in the main window...
+         {"tab.bar",      "Balkendiagramme"},
+         {"tab.pie",      "Kreisdiagramme"},
+         {"tab.xy",       "XY-Diagramme"},
+         {"tab.time",     "Zeitreihen-Diagramme"},
+         {"tab.other",    "Andere Diagramme"},
+         {"tab.test",     "Testdiagramme"},
+         {"tab.combined", "Kombinierte Diagramme"},
+ 
+         // sample chart descriptions...
+         {"chart1.title",       "Horizontales Balkendiagrammet: "},
+         {"chart1.description", "Anzeige eines horizontalen Balkendiagramms mit den Daten eines "
+                                + "CategoryDataset. Die numerische Achse ist invertiert."},
+ 
+         {"chart2.title",       "Horizontales Stacked Balkendiagramm: "},
+         {"chart2.description", "Anzeige eines horizontalen stacked Balkediagramms mit den Daten "
+                                + "eines CategoryDataset."},
+ 
+         {"chart3.title",       "Vertikales Balkendiagrammt: "},
+         {"chart3.description", "Anzeige eines vertikalen Balkendiagramms mit den Daten eines "
+                                + "CategoryDataset."},
+ 
+         {"chart4.title",       "Vertikales 3D Balkendiagramm: "},
+         {"chart4.description", "Anzeige eines vertikalen 3D Balkendiagramms mit den Daten eines "
+                                + "CategoryDataset."},
+ 
+         {"chart5.title",       "Vertikales Stacked Balkendiagramm: "},
+         {"chart5.description", "Displays vertical stacked bars, representing data from a "
+                                + "CategoryDataset."},
+ 
+         {"chart6.title",       "Vertikales Stacked 3D Balkendiagramm: "},
+         {"chart6.description", "Displays vertical stacked bars with a 3D effect, representing "
+                                + "data from a CategoryDataset."},
+ 
+         {"chart7.title",       "Kreisdiagramm 1: "},
+         {"chart7.description", "A pie chart showing one section exploded."},
+ 
+         {"chart8.title",       "Kreisdiagramm 2: "},
+         {"chart8.description", "A pie chart showing percentages on the category labels.  Also, "
+                                + "this plot has a background image."},
+ 
+         {"chart9.title",       "XY Plot: "},
+         {"chart9.description", "A line chart using data from an XYDataset.  Both axes are "
+                                + "numerical."},
+ 
+         {"chart10.title",       "Zeitreihe 1: "},
+         {"chart10.description", "A time series chart, representing data from an XYDataset.  This "
+                                 + "chart also demonstrates the use of multiple chart titles."},
+ 
+         {"chart11.title",       "Zeitreihe 2: "},
+         {"chart11.description", "A time series chart, representing data from an XYDataset.  The "
+                                 + "vertical axis has a logarithmic scale."},
+ 
+         {"chart12.title",       "Zeitreihe 3: "},
+         {"chart12.description", "A time series chart with a moving average."},
+ 
+         {"chart13.title",       "High/Low/Open/Close Diagramm: "},
+         {"chart13.description", "A high/low/open/close chart based on data in a HighLowDataset."},
+ 
+         {"chart14.title",       "Candlestick Diagramm: "},
+         {"chart14.description", "A candlestick chart based on data in a HighLowDataset."},
+ 
+         {"chart15.title",       "Signal Diagramm: "},
+         {"chart15.description", "A signal chart based on data in a SignalDataset."},
+ 
+         {"chart16.title",       "Wind Plot: "},
+         {"chart16.description", "A wind plot, represents wind direction and intensity (supplied "
+                                 + "via a WindDataset)."},
+ 
+         {"chart17.title",       "Scatter Plot: "},
+         {"chart17.description", "A scatter plot, representing data in an XYDataset."},
+ 
+         {"chart18.title",       "Liniendiagramm: "},
+         {"chart18.description", "A chart displaying lines and or shapes, representing data in a "
+                                 + "CategoryDataset.  This plot also illustrates the use of a "
+                                 + "background image on the chart, and alpha-transparency on the "
+                                 + "plot."},
+ 
+         {"chart19.title",       "Vertikales XY Balkendiagramm: "},
+         {"chart19.description", "A chart showing vertical bars, based on data in an "
+                                 + "IntervalXYDataset."},
+ 
+         {"chart20.title",       "Null Daten: "},
+         {"chart20.description", "A chart with a null dataset."},
+ 
+         {"chart21.title",       "Keine Daten: "},
+         {"chart21.description", "A chart with a dataset containing zero series."},
+ 
+         {"chart22.title",       "Diagramm in einer JScrollPane: "},
+         {"chart22.description", "A chart embedded in a JScrollPane."},
+ 
+         {"chart23.title",       "Einzelserien Balkendiagramm: "},
+         {"chart23.description", "A single series bar chart.  This chart also illustrates the use "
+                                 + "of a border around a ChartPanel."},
+ 
+         {"chart24.title",       "Dynamisches Diagramm: "},
+         {"chart24.description", "A dynamic chart, to test the event notification mechanism."},
+ 
+         {"chart25.title",       "Overlaid Diagramm: "},
+         {"chart25.description", "Anzeige eines overlaid chart with high/low/open/close and moving "
+                                 + "average plots."},
+ 
+         {"chart26.title",       "Horizontales Kombi-Diagramm: "},
+         {"chart26.description", "Anzeige eines horizontally combined chart of time series and "
+                                 + "XY bar plots."},
+ 
+         {"chart27.title",       "Vertikales Kombi-Diagramm: "},
+         {"chart27.description", "Ein vertikal kominiertes Diagramm eines XY-Diagramms, TimeSeries "
+                                 + "und eines VerticalXYBar-plots"},
+ 
+         {"chart28.title",       "Kombi- und Overlaid-Diagramm: "},
+         {"chart28.description", "Ein kominiertes Diagramm eines XY-Diagramms, overlaid TimeSeries- "
+                                 + "und eines HighLow & TimeSeries-plots"},
+ 
+         {"chart29.title",       "Kombi- und Overlaid Dynamisches Diagramm: "},
+         {"chart29.description", "Anzeige eines dynamisch kombinierten und overlaid Diagramm, um "
+                                 + "den event Benachrichtigungs-Mechanismus zu testen."},
+ 
+         {"charts.display", "Anzeige"},
+ 
+         // chart titles and labels...
+         {"bar.horizontal.title",  "Horizontales Balkendiagramm"},
+         {"bar.horizontal.domain", "Kategorien"},
+         {"bar.horizontal.range",  "Werte"},
+ 
+         {"bar.horizontal-stacked.title",  "Horizontal Stacked Balkendiagramm"},
+         {"bar.horizontal-stacked.domain", "Kategorien"},
+         {"bar.horizontal-stacked.range",  "Werte"},
+ 
+         {"bar.vertical.title",  "Vertikales Balkendiagramm"},
+         {"bar.vertical.domain", "Kategorien"},
+         {"bar.vertical.range",  "Werte"},
+ 
+         {"bar.vertical3D.title",  "Vertikales Balkendiagramm"},
+         {"bar.vertical3D.domain", "Kategorien"},
+         {"bar.vertical3D.range",  "Werte"},
+ 
+         {"bar.vertical-stacked.title",  "Vertikales Balkendiagramm"},
+         {"bar.vertical-stacked.domain", "Kategorien"},
+         {"bar.vertical-stacked.range",  "Werte"},
+ 
+         {"bar.vertical-stacked3D.title",  "Vertikales Balkendiagramm"},
+         {"bar.vertical-stacked3D.domain", "Kategorien"},
+         {"bar.vertical-stacked3D.range",  "Werte"},
+ 
+         {"pie.pie1.title", "Kreisdiagramm 1"},
+ 
+         {"pie.pie2.title", "Kreisdiagramm 2"},
+ 
+         {"xyplot.sample1.title",  "XY Plot"},
+         {"xyplot.sample1.domain", "X Werte"},
+         {"xyplot.sample1.range",  "Y Werte"},
+ 
+         {"timeseries.sample1.title",     "Zeitreihen Diagramm 1"},
+         {"timeseries.sample1.subtitle",  "Wert von GBP in JPY"}, // not sure if this is correct
+         {"timeseries.sample1.domain",    "Datum"},
+         {"timeseries.sample1.range",     "CCY pro GBP"},
+         {"timeseries.sample1.copyright", "(C)opyright 2002, by Object Refinery Limited"},
+ 
+         {"timeseries.sample2.title",    "Zeitreihen Diagramm 2"},
+         {"timeseries.sample2.domain",   "Millisekunden"},
+         {"timeseries.sample2.range",    "Log Achse"},
+         {"timeseries.sample2.subtitle", "Millisekunden"},
+ 
+         //{"timeseries.sample3.title",    "Zeitreihen Diagramm with Moving Average"},
+         {"timeseries.sample3.title",    "Zeitreihen Diagramm mit gleitendem Durchschnitt"},
+                                          // not sure if this is correct
+         {"timeseries.sample3.domain",   "Datum"},
+         {"timeseries.sample3.range",    "CCY pro GBP"},
+         //{"timeseries.sample3.subtitle", "30 day moving average of GBP"},
+         {"timeseries.sample3.subtitle", "30 Tage gleitender Durchschnitt von GBP"},
+                                          // not sure if this is correct
+ 
+         {"timeseries.highlow.title",    "High/Low/Open/Close Diagramm"},
+         {"timeseries.highlow.domain",   "Datum"},
+         {"timeseries.highlow.range",    "Wert ($ pro Aktie)"},  // not sure if this is correct
+         {"timeseries.highlow.subtitle", "IBM Aktien Wert"},     // not sure if this is correct
+ 
+         {"timeseries.candlestick.title",    "CandleStick Diagramm"},
+         {"timeseries.candlestick.domain",   "Datum"},
+         {"timeseries.candlestick.range",    "Wert ($ pro Aktie)"},  // not sure if this is correct
+         {"timeseries.candlestick.subtitle", "IBM Aktien Wert"},     // not sure if this is correct
+ 
+         {"timeseries.signal.title",    "Signal Diagramm"},
+         {"timeseries.signal.domain",   "Datum"},
+         {"timeseries.signal.range",    "Wert ($ pro Aktie)"},  // not sure if this is correct
+         {"timeseries.signal.subtitle", "IBM Aktien Wert"},     // not sure if this is correct
+ 
+         {"other.wind.title",  "Wind Plot"},
+         {"other.wind.domain", "X-Achse"},
+         {"other.wind.range",  "Y-Achse"},
+ 
+         {"other.scatter.title",  "Scatter Plot"},
+         {"other.scatter.domain", "X-Achse"},
+         {"other.scatter.range",  "Y-Achse"},
+ 
+         {"other.line.title",  "Linien Plot"},
+         {"other.line.domain", "Kategorie"},
+         {"other.line.range",  "Wert"},
+ 
+         {"other.xybar.title",  "Zeitreihen Balkendiagramm"},
+         {"other.xybar.domain", "Datum"},
+         {"other.xybar.range",  "Value"},
+ 
+         {"test.null.title",  "XY Plot (null data)"},
+         {"test.null.domain", "X"},
+         {"test.null.range",  "Y"},
+ 
+         {"test.zero.title",  "XY Plot (keine Daten)"},
+         {"test.zero.domain", "X-Achse"},
+         {"test.zero.range",  "Y-Achse"},
+ 
+         {"test.scroll.title",    "Zeitreihen"},
+         {"test.scroll.subtitle", "Wert von GBP"}, // not sure if this is correct
+         {"test.scroll.domain",   "Datum"},
+         {"test.scroll.range",    "Wert"},
+ 
+         {"test.single.title",     "Einzelserien Balkendiagramm"},
+         {"test.single.subtitle1", "Subtitel 1"},
+         {"test.single.subtitle2", "Subtitel 2"},
+         {"test.single.domain",    "Datum"},
+         {"test.single.range",     "Wert"},
+ 
+         {"test.dynamic.title",  "Dynamisches Diagramm"},
+         {"test.dynamic.domain", "Wertebereich"},
+         {"test.dynamic.range",  "Range"},  // to do
+ 
+         {"combined.overlaid.title",     "Overlaid Diagramm"},
+         //{"combined.overlaid.subtitle",  "High/Low/Open/Close plus Moving Average"},
+         {"combined.overlaid.subtitle",  "High/Low/Open/Close plus gleitender Durchschnitt"},
+                                         // not sure if this is correct
+         {"combined.overlaid.domain",    "Datum" },
+         {"combined.overlaid.range",     "IBM"},
+ 
+         {"combined.horizontal.title",     "Horizontales Kombi Diagramm"},
+         {"combined.horizontal.subtitle",  "Zeitreihen und XY Balkendiagramme"},
+         {"combined.horizontal.domains",   new String[] {"Datum 1", "Datum 2", "Datum 3"} },
+         {"combined.horizontal.range",     "CCY pro GBP"},
+ 
+         {"combined.vertical.title",     "Vertikales Kombi Diagramm"},
+         {"combined.vertical.subtitle",  "Vier Diagramme in einem"},
+         {"combined.vertical.domain",    "Datum"},
+         {"combined.vertical.ranges",    new String[] {"CCY pro GBP", "Pfund", "IBM", "Bars"} },
+ 
+         {"combined.combined-overlaid.title",    "Kombi und Overlaid Diagramm"},
+         {"combined.combined-overlaid.subtitle", "XY, Overlaid (zwei TimeSeries) und Overlaid "
+                                                 + "(HighLow und TimeSeries)"},
+         {"combined.combined-overlaid.domain",   "Datum"},
+         {"combined.combined-overlaid.ranges",   new String[] {"CCY pro GBP", "Pfund", "IBM"} },
+ 
+         {"combined.dynamic.title",    "Dynamisches Kombi Diagramm"},
+         {"combined.dynamic.subtitle", "XY (series 0), XY (series 1), Overlaid (both series) "
+                                       + "and XY (both series)"},
+                                       // to do
+         {"combined.dynamic.domain",   "X" },
+         {"combined.dynamic.ranges",   new String[] {"Y1", "Y2", "Y3", "Y4"} },
+ 
+     };
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources_es.java jfreechart/source/org/jfree/chart/demo/resources/DemoResources_es.java
*** jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources_es.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/resources/DemoResources_es.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,349 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * DemoResources_es.java
+  * ---------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors;
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Hans-Jurgen Greiner;
+  *
+  * $Id: DemoResources_es.java,v 1.3 2004/01/03 05:38:58 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 26-Mar-2002 : Version 1, translation by Hans-Jurgen Greiner (DG);
+  * 24-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo.resources;
+ 
+ import java.util.ListResourceBundle;
+ 
+ /**
+  * A resource bundle that stores all the user interface items that might need localisation.
+  *
+  * @author HJG
+  */
+ public class DemoResources_es extends ListResourceBundle {
+ 
+     /**
+      * Returns the array of strings in the resource bundle.
+      *
+      * @return the resources.
+      */
+     public Object[][] getContents() {
+         return CONTENTS;
+     }
+ 
+     /** The resources to be localised. */
+     private static final Object[][] CONTENTS = {
+ 
+         // about frame...
+         {"about.title", "Acerca..."},
+         {"about.version.label", "Versiï¿½n"},
+ 
+         // menu labels...
+         {"menu.file", "Archivo"},
+         {"menu.file.mnemonic", new Character('F')},
+ 
+         {"menu.file.exit", "Salida"},
+         {"menu.file.exit.mnemonic", new Character('x')},
+ 
+         {"menu.help", "Ayuda"},
+         {"menu.help.mnemonic", new Character('H')},
+ 
+         {"menu.help.about", "Acerca..."},
+         {"menu.help.about.mnemonic", new Character('A')},
+ 
+         // dialog messages...
+         {"dialog.exit.title", "Confirme salida..."},
+         {"dialog.exit.message", "Estas seguro que quieres salir?"},
+ 
+         // labels for the tabs in the main window...
+         {"tab.bar",      "Grï¿½fico de barras"},
+         {"tab.pie",      "Grï¿½fico circular"},
+         {"tab.xy",       "XY Grï¿½ficos"},
+         {"tab.time",     "Grï¿½fico de la serie de  tiempo"},
+         {"tab.other",    "Otros grï¿½ficos"},
+         {"tab.test",     "Grï¿½ficos de examen"},
+         {"tab.combined", "Grï¿½ficos combinados"},
+ 
+         // sample chart descriptions...
+         {"chart1.title",       "Grï¿½fico de barras horizontales: "},
+         {"chart1.description", "Muestra barras horizontales, representando data desde a "
+                                + "Categorï¿½a dataset (grupo data).  Preste atenciï¿½n que el eje "
+                                + "numï¿½rico esta invertido."},
+ 
+         {"chart2.title",       "Grï¿½fico con pilas de barras horizontales: "},
+         {"chart2.description", "muestra grï¿½fico con pilas de barras horizontales,  "
+                                + "representando data desde a "
+                                + "Categorï¿½a dataset (grupo data)."},
+ 
+         {"chart3.title",       "Grï¿½fico con barras verticales: "},
+         {"chart3.description", "Muestra barras verticales, representando data "
+                                + "de una categorï¿½a dataset (grupo data)."},
+ 
+         {"chart4.title",       "Grï¿½fico de barra vertical en 3D: "},
+         {"chart4.description", "muestra  barras verticales con un efecto de 3D, "
+                                + "representando data desde a "
+                                + "Categorï¿½a dataset (grupo data)."},
+ 
+         {"chart5.title",       "Grï¿½fico con pilas de barras verticales: "},
+         {"chart5.description", "muestra grï¿½fico con pilas de barras verticales, "
+                                + "representando data desde a "
+                                + "Categorï¿½a dataset (grupo data)."},
+ 
+         {"chart6.title",       "Grï¿½fico con pilas de barras en 3D: "},
+         {"chart6.description", "Muestra pila de  barras verticales con un efecto de 3D, "
+                                + "representando data de una Categorï¿½a dataset (grupo data)."},
+ 
+         {"chart7.title",       "Grï¿½fico circular 1: "},
+         {"chart7.description", "Un grï¿½fico circular mostrando una secciï¿½n explotada."},
+ 
+         {"chart8.title",       "Grï¿½fico circular 2: "},
+         {"chart8.description", "Un grï¿½fico circular mostrando porcentajes sobre los "
+                                + "niveles categï¿½ricos.  Tambiï¿½n, "
+                                + "este plan tiene una imagen de fondo."},
+ 
+         {"chart9.title",       "Plan XY: "},
+         {"chart9.description", "un grï¿½fico de lï¿½nea usando data desde un grupo de data XY.  "
+                                + "Ambos ejes son numï¿½rico."},
+ 
+         {"chart10.title",       "Series de tiempo 1: "},
+         {"chart10.description", "un grï¿½fico de series de tiempo, representando data "
+                                 + "desde un grupo de data XY. Este grï¿½fico tambiï¿½n "
+                                 + "demuestra el uso de mï¿½ltiples tï¿½tulos grï¿½ficos."},
+ 
+         {"chart11.title",       "Series de tiempo 2: "},
+         {"chart11.description", "Un grï¿½fico de series de tiempo, representando un grupo "
+                                 + "de data XY. Este ejes verticales tienen una escala "
+                                 + "logarï¿½tmica."},
+ 
+         {"chart12.title",       "Series de tiempo 3: "},
+         {"chart12.description", "Un grï¿½fico de serie de tiempo con un movimiento promedio."},
+ 
+         {"chart13.title",       "Grï¿½fico Alto/Bajo/Abierto/Cerrado: "},
+         {"chart13.description", "Un grï¿½fico alto/bajo/abierto/cerrado basado sobre "
+                                 + "data en un grupo de data alto bajo."},
+ 
+         {"chart14.title",       "Grï¿½fico de cotizaciones: "},
+         {"chart14.description", "Un grï¿½fico de cotizaciones basado en un grupo e data altobajo."},
+ 
+         {"chart15.title",       "Grï¿½fico de seï¿½al: "},
+         {"chart15.description", "Un grï¿½fico de seï¿½al basado en data en un grupo de data de seï¿½al."},
+ 
+         {"chart16.title",       "Plan de viento: "},
+         {"chart16.description", "un plan de viento, representa la direcciï¿½n del "
+                                 + "viento e intensidad  ( suministro a travï¿½s de  "
+                                 + "un grupo data de viento)."},
+ 
+         {"chart17.title",       "Esparcir plan: "},
+         {"chart17.description", "Un plan esparcido, representando data en un grupo data XY."},
+ 
+         {"chart18.title",       "Grï¿½fico de lï¿½nea: "},
+         {"chart18.description", "un grï¿½fico mostrando lï¿½neas y/o figuras, representando "
+                                 + "data en a categorï¿½a grupo data.  Este plan tambiï¿½n "
+                                 + "ilustra el uso de a imagen de fondo en el grï¿½fico, y "
+                                 + "alpha-transparency en ï¿½l plan."},
+ 
+         {"chart19.title",       "Grï¿½fico de barra vertical XY: "},
+         {"chart19.description", "Un grï¿½fico mostrando barras verticales, basadas en data en un "
+                                + "grupo data interval XY."},
+ 
+         {"chart20.title",       "Data Nula: "},
+         {"chart20.description", "Un grï¿½fico con un grupo data nulo."},
+ 
+         {"chart21.title",       "Cero Data: "},
+         {"chart21.description", "Un grï¿½fico con un grupo de data que contiene una serie de ceros."},
+ 
+         {"chart22.title",       "Un grï¿½fico en JScrollPane: "},
+         {"chart22.description", "Un grï¿½fico incrustado en un JScrollPane."},
+ 
+         {"chart23.title",       "Un grï¿½fico de barra con serie ï¿½nica: "},
+         {"chart23.description", "un grï¿½fico de barra con serie ï¿½nica.  "
+                                 + "Este grï¿½fico tambiï¿½n ilustra el uso "
+                                 + "de un borde alrededor de ChartPanel."},
+ 
+         {"chart24.title",       "Grï¿½fico dinï¿½mico: "},
+         {"chart24.description", "Un grï¿½fico dinï¿½mico, para examinar la notificaciï¿½n del "
+                                 + "evento mecï¿½nico."},
+ 
+         {"chart25.title",       "Grï¿½fico cubierto: "},
+         {"chart25.description", "muestra un grï¿½fico cubierto con alto/bajo/abierto/cerrado "
+                                 + "y moviï¿½ndose planes en promedio."},
+ 
+         {"chart26.title",       "Grï¿½fico combinado horizontalmente: "},
+         {"chart26.description", "Muestra un grï¿½fico combinado horizontalmente de la serie "
+                                 + "de tiempo y una barra XY planes."},
+ 
+         {"chart27.title",       "Grï¿½fico combinado verticalmente: "},
+         {"chart27.description", "Muestra un grï¿½fico combinado verticalmente de XY, "
+                                 + "serie de tiempo y VerticalXYBar planes."},
+ 
+         {"chart28.title",       "Grï¿½fico combinado y cubierto: "},
+         {"chart28.description", "Un grï¿½fico combinado de una XY, cubierto de series de "
+                                 + "tiempo y uno cubierto altobajo & planes de series de tiempo."},
+ 
+         {"chart29.title",       "Grï¿½fico dinï¿½mico combinado y cubierto: "},
+         {"chart29.description", "muestra un grï¿½fico dinï¿½mico combinado y cubierto, "
+                                 + "para examinar el notificaciï¿½n de evento mecï¿½nico."},
+ 
+         {"charts.display", "Muestra"},
+ 
+         // chart titles and labels...
+         {"bar.horizontal.title",  "Grï¿½fico de barra horizontal"},
+         {"bar.horizontal.domain", "Categorï¿½as"},
+         {"bar.horizontal.range",  "Valor"},
+ 
+         {"bar.horizontal-stacked.title",  "Grï¿½fico con pilas de barras horizontales"},
+         {"bar.horizontal-stacked.domain", "Categorï¿½as"},
+         {"bar.horizontal-stacked.range",  "Valor"},
+ 
+         {"bar.vertical.title",  "Grï¿½fico de barras verticales"},
+         {"bar.vertical.domain", "Categorï¿½as"},
+         {"bar.vertical.range",  "Valor"},
+ 
+         {"bar.vertical3D.title",  "Grï¿½fico de barra vertical en 3D"},
+         {"bar.vertical3D.domain", "Categorï¿½as"},
+         {"bar.vertical3D.range",  "Valor"},
+ 
+         {"bar.vertical-stacked.title",  "Grï¿½fico con pilas de barras verticales"},
+         {"bar.vertical-stacked.domain", "Categorï¿½as"},
+         {"bar.vertical-stacked.range",  "Valor"},
+ 
+         {"bar.vertical-stacked3D.title",  "Grï¿½fico de barras verticales en 3D"},
+         {"bar.vertical-stacked3D.domain", "Categorï¿½as"},
+         {"bar.vertical-stacked3D.range",  "Valor"},
+ 
+         {"pie.pie1.title", "Grï¿½fico circular 1"},
+ 
+         {"pie.pie2.title", "Grï¿½fico circular 2"},
+ 
+         {"xyplot.sample1.title",  "Plan de XY"},
+         {"xyplot.sample1.domain", "Valores de X"},
+         {"xyplot.sample1.range",  "Valores de Y"},
+ 
+         {"timeseries.sample1.title",     "Grï¿½fico con series de tiempo 1"},
+         {"timeseries.sample1.subtitle",  "Valor de GBP en JPY"},
+         {"timeseries.sample1.domain",    "Fecha"},
+         {"timeseries.sample1.range",     "CCY por GBP"},
+         {"timeseries.sample1.copyright", "(C)opyright 2002, por Object Refinery Limited"},
+ 
+         {"timeseries.sample2.title",    "Grï¿½fico con series de tiempo 2"},
+         {"timeseries.sample2.domain",   "Milisegundo"},
+         {"timeseries.sample2.range",    "Eje tronco"},
+         {"timeseries.sample2.subtitle", "Milisegundos"},
+ 
+         {"timeseries.sample3.title",    "grï¿½fico con series de tiempo moviendo al promedio"},
+         {"timeseries.sample3.domain",   "Fecha"},
+         {"timeseries.sample3.range",    "CCY por GBP"},
+         {"timeseries.sample3.subtitle", "30 dias moviendo de GBP"},
+ // GEEK
+         {"timeseries.highlow.title",    "Grï¿½fico Alto/Bajo/Abierto/Cerrado"},
+         {"timeseries.highlow.domain",   "Fecha"},
+         {"timeseries.highlow.range",    "Precio  ($ por porciï¿½n)"},
+         {"timeseries.highlow.subtitle", "Precio de la acciï¿½n IBM"},
+ 
+         {"timeseries.candlestick.title",    "Grï¿½fico de cotizaciï¿½n"},
+         {"timeseries.candlestick.domain",   "Fecha"},
+         {"timeseries.candlestick.range",    "Precio  ($ por porciï¿½n)"},
+         {"timeseries.candlestick.subtitle", "Precio de la acciï¿½n IBM"},
+ 
+         {"timeseries.signal.title",    "Grï¿½fico de seï¿½al"},
+         {"timeseries.signal.domain",   "Fecha"},
+         {"timeseries.signal.range",    "Precio  ($ por porciï¿½n"},
+         {"timeseries.signal.subtitle", "Precio de la acciï¿½n IBM"},
+ 
+         {"other.wind.title",  "Plan de Viento"},
+         {"other.wind.domain", "eje-X"},
+         {"other.wind.range",  "eje-Y"},
+ 
+         {"other.scatter.title",  "Plan Esparcido"},
+         {"other.scatter.domain", "eje-X"},
+         {"other.scatter.range",  "eje-Y"},
+ 
+         {"other.line.title",  "Plan de lï¿½nea"},
+         {"other.line.domain", "Categorï¿½a"},
+         {"other.line.range",  "Valor"},
+ 
+         {"other.xybar.title",  "Grï¿½fico con barras y series de tiempo"},
+         {"other.xybar.domain", "Fecha"},
+         {"other.xybar.range",  "Valor"},
+ 
+         {"test.null.title",  "Plan XY (Nula data)"},
+         {"test.null.domain", "eje-X"},
+         {"test.null.range",  "eje-Y"},
+ 
+         {"test.zero.title",  "Plan XY (Cero data)"},
+         {"test.zero.domain", "eje-X"},
+         {"test.zero.range",  "eje-Y"},
+ 
+         {"test.scroll.title",    "Series de tiempo"},
+         {"test.scroll.subtitle", "Valor of GBP"},
+         {"test.scroll.domain",   "Fecha"},
+         {"test.scroll.range",    "Valor"},
+ 
+         {"test.single.title",     "Grï¿½fico de barras de series ï¿½nicas"},
+         {"test.single.subtitle1", "Subtï¿½tulo 1"},
+         {"test.single.subtitle2", "Subtï¿½tulo 2"},
+         {"test.single.domain",    "Fecha"},
+         {"test.single.range",     "Valor"},
+ 
+         {"test.dynamic.title",  "Grï¿½fico dinï¿½mico"},
+         {"test.dynamic.domain", "Dominios"},
+         {"test.dynamic.range",  "Alcance"},
+ 
+         {"combined.overlaid.title",     "Grï¿½fico cubierto"},
+         {"combined.overlaid.subtitle",  "Alto/Bajo/Abierto/Cerrado mas moviendo a promedio"},
+         {"combined.overlaid.domain",    "Fecha" },
+         {"combined.overlaid.range",     "IBM"},
+ 
+         {"combined.horizontal.title",     "Grï¿½fico horizontal combinado"},
+         {"combined.horizontal.subtitle",  "Series de tiempo y grï¿½ficos de barras XY"},
+         {"combined.horizontal.domains",   new String[] {"Fecha 1", "Facha 2", "Fecha 3"} },
+         {"combined.horizontal.range",     "CCY por GBP"},
+ 
+         {"combined.vertical.title",     "Grï¿½fico vertical combinado"},
+         {"combined.vertical.subtitle",  "Cuatro grï¿½ficos en uno"},
+         {"combined.vertical.domain",    "Fecha"},
+         {"combined.vertical.ranges",    new String[] {"CCY por GBP", "Libras", "IBM", "Barras"} },
+ 
+         {"combined.combined-overlaid.title",    "Grï¿½fico combinado y cubierto"},
+         {"combined.combined-overlaid.subtitle", "XY, cubierto(dos series de tiempo) y cubierto "
+                                                 + "(Alto Bajo y series de tiempo)"},
+         {"combined.combined-overlaid.domain",   "Fecha"},
+         {"combined.combined-overlaid.ranges",   new String[] {"CCY por GBP", "Libras", "IBM"} },
+ 
+         {"combined.dynamic.title",    "Grï¿½fico dinï¿½mico combinado"},
+         {"combined.dynamic.subtitle", "XY (series 0), XY (serie 1), cubierto (ambas series)) "
+                                       + "y XY (ambas series)"},
+         {"combined.dynamic.domain",   "X" },
+         {"combined.dynamic.ranges",   new String[] {"Y1", "Y2", "Y3", "Y4"} },
+ 
+     };
+ 
+ }
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources_fr.java jfreechart/source/org/jfree/chart/demo/resources/DemoResources_fr.java
*** jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources_fr.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/resources/DemoResources_fr.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,355 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * DemoResources_fr.java
+  * ---------------------
+  * (C) Copyright 2002-2004, by Anthony Boulestreau.
+  *
+  * Original Author:  Anthony Boulestreau;
+  * Contributor(s):   -;
+  *
+  * $Id: DemoResources_fr.java,v 1.3 2004/01/03 05:38:58 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 26-Mar-2002 : Version 1 (AB);
+  * 24-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo.resources;
+ 
+ import java.util.ListResourceBundle;
+ 
+ /**
+  * Localised resources for France.
+  *
+  * @author AB
+  */
+ public class DemoResources_fr extends ListResourceBundle {
+ 
+     /**
+      * Returns the array of strings in the resource bundle.
+      *
+      * @return the resources.
+      */
+     public Object[][] getContents() {
+         return CONTENTS;
+     }
+ 
+     /** The resources to be localised. */
+     private static final Object[][] CONTENTS = {
+ 
+         // about frame...
+         {"about.title", "A propos de..."},
+         {"about.version.label", "Version"},
+ 
+         // menu labels...
+         {"menu.file", "Fichier"},
+         {"menu.file.mnemonic", new Character('F')},
+ 
+         {"menu.file.exit", "Sortie"},
+         {"menu.file.exit.mnemonic", new Character('x')},
+ 
+         {"menu.help", "Aide"},
+         {"menu.help.mnemonic", new Character('H')},
+ 
+         {"menu.help.about", "A propos de..."},
+         {"menu.help.about.mnemonic", new Character('A')},
+ 
+         // dialog messages...
+         {"dialog.exit.title", "Confirmation de fermeture..."},
+         {"dialog.exit.message", "Etes vous certain de vouloir sortir?"},
+ 
+         // labels for the tabs in the main window...
+         {"tab.bar", "Diagrammes en Barre"},
+         {"tab.pie", "Diagrammes en Secteur"},
+         {"tab.xy", "Diagrammes XY"},
+         {"tab.time", "Diagrammes de Sï¿½ries Temporelles"},
+         {"tab.other", "Autres Diagrammes"},
+         {"tab.test", "Diagrammes de Test"},
+         {"tab.combined", "Diagrammes Combinï¿½s"},
+ 
+         // sample chart descriptions...
+         {"chart1.title", "Diagramme en Barre Horizontale: "},
+         {"chart1.description", "Affiche des barre horizontale ï¿½ partir des donnï¿½es "
+         + "d'un CategoryDataset. Remarquez que l'axe numï¿½rique est inversï¿½."},
+ 
+         {"chart2.title", "Diagramme en Barre Empilï¿½e Horizontale: "},
+         {"chart2.description", "Affiche des barres empilï¿½es horizontales ï¿½ partir des donnï¿½es "
+         + "d'un CategoryDataset."},
+ 
+         {"chart3.title", "Diagramme en Barre Verticale: "},
+         {"chart3.description",
+             "Affiche des barres verticales ï¿½ partir des donnï¿½es d'un CategoryDataset."},
+ 
+         {"chart4.title", "Diagramme en Barre 3D Verticale: "},
+         {"chart4.description",
+             "Affiche des barres verticales avec un effet 3D ï¿½ partir des donnï¿½es "
+             + "d'un CategoryDataset."},
+ 
+         {"chart5.title", "Diagramme en Barre Empilï¿½e Verticale: "},
+         {"chart5.description", "Affiche des barres empilï¿½es verticale ï¿½ partir des donnï¿½es "
+         + "d'un CategoryDataset."},
+ 
+         {"chart6.title", "Diagramme en Barre 3D Empilï¿½e Verticale: "},
+         {"chart6.description",
+             "Affiche des barres empilï¿½es verticale avec un effet 3D ï¿½ partir des donnï¿½es "
+             + "d'un CategoryDataset."},
+ 
+         {"chart7.title", "Diagrammes en Secteur 1: "},
+         {"chart7.description", "Un diagramme en secteur avec une section ï¿½clatï¿½e."},
+ 
+         {"chart8.title", "Diagrammes en Secteur 2: "},
+         {"chart8.description",
+         "Un diagramme en secteur montrant des pourcentages sur les labels de catï¿½gories. De plus, "
+         + "ce graphique a une image de fond."},
+ 
+         {"chart9.title", "Tracï¿½ XY: "},
+         {"chart9.description",
+         "Un diagramme en ligne ï¿½ partir de donnï¿½es d'un XYDataset. Les deux axes sont "
+         + "numï¿½riques."},
+ 
+         {"chart10.title", "Sï¿½rie Temporelle 1: "},
+         {"chart10.description",
+         "Un diagramme de sï¿½ries temporelles ï¿½ partir de donnï¿½es d'un XYDataset. Ce "
+         + "diagramme montre de plus l'utilisation de plusieurs titres de diagramme."},
+ 
+         {"chart11.title", "Sï¿½rie Temporelle 2: "},
+         {"chart11.description",
+         "Un diagramme de sï¿½ries temporelles ï¿½ partir de donnï¿½es d'un XYDataset. "
+         + "L'axe vertical possï¿½de une ï¿½chelle logarithmique."},
+ 
+         {"chart12.title", "Sï¿½rie Temporelle 3: "},
+         {"chart12.description", "Un diagramme de sï¿½ries temporelles avec une moyenne mobile."},
+ 
+         {"chart13.title", "Diagramme Max/Min/Ouverture/Fermeture: "},
+         {"chart13.description",
+         "Un diagramme max/min/ouverture/fermeture basï¿½ sur les donnï¿½es d'un HighLowDataset."},
+ 
+         {"chart14.title", "Diagramme en Chandelier: "},
+         {"chart14.description",
+         "Un diagramme en Chandelier basï¿½ sur les donnï¿½es d'un HighLowDataset."},
+ 
+         {"chart15.title", "Diagramme en Signal: "},
+         {"chart15.description", "Diagramme en signal basï¿½ sur les donnï¿½es d'un SignalDataset."},
+ 
+         {"chart16.title", "Tracï¿½ de Vents: "},
+         {"chart16.description",
+         "Un tracï¿½ de vents, reprï¿½sente la direction et l'intensitï¿½ du vent (fourni "
+         + "par l'intermï¿½diaire d'un WindDataset)."},
+ 
+         {"chart17.title", "Nuage de points: "},
+         {"chart17.description", "Un nuage de points ï¿½ partir des donnï¿½es d'un XYDataset."},
+ 
+         {"chart18.title", "Diagramme en Ligne: "},
+         {"chart18.description",
+         "Un diagramme affichant des lignes ou des formes ï¿½ partir des donnï¿½es "
+         + "d'un CategoryDataset. Ce tracï¿½ montre de plus l'utilisation "
+         + "d'une image de fond sur le diagramme, et de l'alpha-transparence sur le "
+         + "tracï¿½."},
+ 
+         {"chart19.title", "Diagramme en Barre XY Verticale: "},
+         {"chart19.description", "Un diagramme avec des barres verticales, basï¿½ sur des donnï¿½es "
+         + "d'un IntervalXYDataset."},
+ 
+         {"chart20.title", "Donnï¿½es Nulles: "},
+         {"chart20.description", "Diagramme ï¿½ partir d'un ensemble de donnï¿½es nulles."},
+ 
+         {"chart21.title", "Donnï¿½es Zï¿½ros: "},
+         {"chart21.description",
+         "Diagramme ï¿½ partir d'un ensemble de donnï¿½es contenant des sï¿½ries de zï¿½ros."},
+ 
+         {"chart22.title", "Diagramme dans un JScrollPane: "},
+         {"chart22.description", "Un diagramme insï¿½rï¿½ dans un JScrollPane."},
+ 
+         {"chart23.title", "Diagramme en Barre avec Sï¿½rie Unique: "},
+         {"chart23.description",
+         "Un diagramme en barre avec sï¿½rie unique. Ce diagramme montre de plus l'utilisation "
+         + "d'une bordure autour d'un ChartPanel."},
+ 
+         {"chart24.title", "Diagramme dynamique: "},
+         {"chart24.description",
+         "Un diagramme dynamique, pour tester le mï¿½canisme de notification des ï¿½vï¿½nements."},
+ 
+         {"chart25.title", "Diagramme Superposï¿½: "},
+         {"chart25.description",
+         "Affiche un diagramme superposï¿½ d'un tracï¿½ max/min/ouverture/fermeture et "
+         + "de moyenne mobile."},
+ 
+         {"chart26.title", "Diagramme Combinï¿½ Horizontalement: "},
+         {"chart26.description",
+         "Affiche un diagramme combinï¿½ horizontalement d'un tracï¿½ de sï¿½ries temporelles et "
+         + "de barres XY."},
+ 
+         {"chart27.title", "Diagramme Combinï¿½ Verticalement: "},
+         {"chart27.description",
+         "Affiche un diagramme combinï¿½ verticalement d'un tracï¿½ XY, de sï¿½ries temporelles et "
+         + "de barres XY vertical."},
+ 
+         {"chart28.title", "Diagramme Combinï¿½ et Superposï¿½: "},
+         {"chart28.description",
+         "Un diagramme combinï¿½ d'un tracï¿½ XY, d'un tracï¿½ superposï¿½ de deux sï¿½ries temporelles et "
+         + "d'un tracï¿½ superposï¿½ d'une sï¿½rie temporelle et d'un max/min/ouverture/fermeture."},
+ 
+         {"chart29.title", "Diagramme Dynamique Combinï¿½ et Superposï¿½: "},
+         {"chart29.description",
+         "Affiche un diagramme dynamique combinï¿½ et superposï¿½, pour tester le mï¿½canisme "
+         + "de notification des ï¿½vï¿½nements."},
+ 
+         {"charts.display", "Affiche"},
+ 
+         // chart titles and labels...
+         {"bar.horizontal.title", "Diagramme en Barre Horizontale"},
+         {"bar.horizontal.domain", "Catï¿½gories"},
+         {"bar.horizontal.range", "Valeur"},
+ 
+         {"bar.horizontal-stacked.title", "Diagramme en Barre Empilï¿½e Horizontale"},
+         {"bar.horizontal-stacked.domain", "Catï¿½gories"},
+         {"bar.horizontal-stacked.range", "Valeur"},
+ 
+         {"bar.vertical.title", "Diagramme en Barre Verticale"},
+         {"bar.vertical.domain", "Catï¿½gories"},
+         {"bar.vertical.range", "Valeur"},
+ 
+         {"bar.vertical3D.title", "Diagramme en Barre 3D Verticale"},
+         {"bar.vertical3D.domain", "Catï¿½gories"},
+         {"bar.vertical3D.range", "Valeur"},
+ 
+         {"bar.vertical-stacked.title", "Diagramme en Barre Empilï¿½e Verticale"},
+         {"bar.vertical-stacked.domain", "Catï¿½gories"},
+         {"bar.vertical-stacked.range", "Valeur"},
+ 
+         {"bar.vertical-stacked3D.title", "Diagramme en Barre 3D Empilï¿½e Verticale"},
+         {"bar.vertical-stacked3D.domain", "Catï¿½gories"},
+         {"bar.vertical-stacked3D.range", "Valeur"},
+ 
+         {"pie.pie1.title", "Diagramme en Secteur 1"},
+ 
+         {"pie.pie2.title", "Diagramme en Secteur 2"},
+ 
+         {"xyplot.sample1.title", "Tracï¿½ XY"},
+         {"xyplot.sample1.domain", "Valeurs X"},
+         {"xyplot.sample1.range", "Valeurs Y"},
+ 
+         {"timeseries.sample1.title", "Diagramme de Sï¿½ries Temporelles 1"},
+         {"timeseries.sample1.subtitle", "Valeur du GBP pour le JPY"},
+         {"timeseries.sample1.domain", "Date"},
+         {"timeseries.sample1.range", "CCY par GBP"},
+         {"timeseries.sample1.copyright", "(C)opyright 2002, by Object Refinery Limited"},
+ 
+         {"timeseries.sample2.title", "Diagramme de Sï¿½ries Temporelles 2"},
+         {"timeseries.sample2.domain", "Milliseconde"},
+         {"timeseries.sample2.range", "Axes Logarithmique"},
+         {"timeseries.sample2.subtitle", "Millisecondes"},
+ 
+         {"timeseries.sample3.title", "Diagramme de Sï¿½ries Temporelles avec Moyenne Mobile"},
+         {"timeseries.sample3.domain", "Date"},
+         {"timeseries.sample3.range", "CCY par GBP"},
+         {"timeseries.sample3.subtitle", "Moyenne mobile sur 30 jour du GBP"},
+ 
+         {"timeseries.highlow.title", "Diagramme Max/Min/Ouverture/Fermeture"},
+         {"timeseries.highlow.domain", "Date"},
+         {"timeseries.highlow.range", "Prix ($ par action)"},
+         {"timeseries.highlow.subtitle", "Prix des actions IBM"},
+ 
+         {"timeseries.candlestick.title", "Diagramme en Chandelier"},
+         {"timeseries.candlestick.domain", "Date"},
+         {"timeseries.candlestick.range", "Prix ($ par action)"},
+         {"timeseries.candlestick.subtitle", "Prix des actions IBM"},
+ 
+         {"timeseries.signal.title", "Diagramme en Signal"},
+         {"timeseries.signal.domain", "Date"},
+         {"timeseries.signal.range", "Prix ($ par action)"},
+         {"timeseries.signal.subtitle", "Prix des actions IBM"},
+ 
+         {"other.wind.title", "Tracï¿½ de Vents"},
+         {"other.wind.domain", "Axe X"},
+         {"other.wind.range", "Axe Y"},
+ 
+         {"other.scatter.title", "Nuage de Points"},
+         {"other.scatter.domain", "Axe X"},
+         {"other.scatter.range", "Axe Y"},
+ 
+         {"other.line.title", "Diagramme en Ligne"},
+         {"other.line.domain", "Catï¿½gorie"},
+         {"other.line.range", "Valeur"},
+ 
+         {"other.xybar.title", "Diagramme en Barre de Sï¿½ries Temporelles"},
+         {"other.xybar.domain", "Date"},
+         {"other.xybar.range", "Valeur"},
+ 
+         {"test.null.title", "Tracï¿½ XY (donnï¿½es nulle)"},
+         {"test.null.domain", "X"},
+         {"test.null.range", "Y"},
+ 
+         {"test.zero.title", "Tracï¿½ XY (donnï¿½es zï¿½ros)"},
+         {"test.zero.domain", "Axe X"},
+         {"test.zero.range", "Axe Y"},
+ 
+         {"test.scroll.title", "Sï¿½rie Temporelle"},
+         {"test.scroll.subtitle", "Valeur du GBP"},
+         {"test.scroll.domain", "Date"},
+         {"test.scroll.range", "Valeur"},
+ 
+         {"test.single.title", "Diagramme en Barre avec Sï¿½rie Unique"},
+         {"test.single.subtitle1", "Sous-titre 1"},
+         {"test.single.subtitle2", "Sous-titre 2"},
+         {"test.single.domain", "Date"},
+         {"test.single.range", "Valeur"},
+ 
+         {"test.dynamic.title", "Diagramme dynamique"},
+         {"test.dynamic.domain", "Domaine"},
+         {"test.dynamic.range", "Interval"},
+ 
+         {"combined.overlaid.title", "Diagramme Superposï¿½"},
+         {"combined.overlaid.subtitle", "Max/Min/Ouverture/Fermeture plus Moyenne Mobile"},
+         {"combined.overlaid.domain", "Date" },
+         {"combined.overlaid.range", "IBM"},
+ 
+         {"combined.horizontal.title", "Diagramme Combinï¿½ Horizontalement"},
+         {"combined.horizontal.subtitle", "Sï¿½ries Temporelles et Diagrammes en Barres XY"},
+         {"combined.horizontal.domains", new String[] {"Date 1", "Date 2", "Date 3"} },
+         {"combined.horizontal.range", "CCY par GBP"},
+ 
+         {"combined.vertical.title", "Diagramme Combinï¿½ Verticalement"},
+         {"combined.vertical.subtitle", "Quatre diagramme en un"},
+         {"combined.vertical.domain", "Date"},
+         {"combined.vertical.ranges", new String[] {"CCY par GBP", "Pounds", "IBM", "Barres"} },
+ 
+         {"combined.combined-overlaid.title", "Diagramme Combinï¿½ et Superposï¿½"},
+         {"combined.combined-overlaid.subtitle", "XY, Superposï¿½ (2 TimeSeriess) et Superposï¿½ "
+         + "(HighLow et TimeSeries)"},
+         {"combined.combined-overlaid.domain", "Date"},
+         {"combined.combined-overlaid.ranges", new String[] {"CCY par GBP", "Pounds", "IBM"} },
+ 
+         {"combined.dynamic.title", "Diagramme Dynamique Combinï¿½"},
+         {"combined.dynamic.subtitle", "XY (sï¿½ries 0), XY (sï¿½ries 1), Superposï¿½ (les deux sï¿½ries) "
+         + "et XY (les deux sï¿½ries)"},
+         {"combined.dynamic.domain", "X" },
+         {"combined.dynamic.ranges", new String[] {"Y1", "Y2", "Y3", "Y4"} },
+ 
+     };
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources.java jfreechart/source/org/jfree/chart/demo/resources/DemoResources.java
*** jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/resources/DemoResources.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,511 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * DemoResources.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: DemoResources.java,v 1.7 2004/04/27 15:21:31 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 15-Mar-2002 : Version 1 (DG);
+  * 26-Mar-2002 : Changed name from JFreeChartDemoResources.java --> DemoResources.java (DG);
+  * 02-Jul-2002 : Added the tabs.X to define tabs in the demo. (BRS)
+  * 02-Jul-2002 : Added the chartX.tab to define which tab an example should be
+  *               displayed on. (BRS)
+  * 02-Jul-2002 : Added the chartX.usage to define where an example should is
+  *               applicable (All, Servlet, Swing). (BRS)
+  * 02-Jul-2002 : Added Gantt chart resources.
+  * 24-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 19-Jan-2004 : Added wafermap chart (36,37,38) and tab (9) resources (RR);
+  *
+  */
+ 
+ package org.jfree.chart.demo.resources;
+ 
+ import java.util.ListResourceBundle;
+ 
+ /**
+  * A resource bundle that stores all the user interface items that might need localisation.
+  *
+  */
+ public class DemoResources extends ListResourceBundle {
+ 
+     /**
+      * Returns the array of strings in the resource bundle.
+      *
+      * @return the resources.
+      */
+     public Object[][] getContents() {
+         return CONTENTS;
+     }
+ 
+     /** The resources to be localised. */
+     private static final Object[][] CONTENTS = {
+ 
+         // about frame...
+         {"about.title", "About..."},
+         {"about.version.label", "Version"},
+ 
+         // menu labels...
+         {"menu.file", "File"},
+         {"menu.file.mnemonic", new Character('F') },
+ 
+         {"menu.file.exit", "Exit"},
+         {"menu.file.exit.mnemonic", new Character('x') },
+ 
+         {"menu.help", "Help"},
+         {"menu.help.mnemonic", new Character('H')},
+ 
+         {"menu.help.about", "About..."},
+         {"menu.help.about.mnemonic", new Character('A')},
+ 
+         // dialog messages...
+         {"dialog.exit.title", "Confirm exit..."},
+         {"dialog.exit.message", "Are you sure you want to exit?"},
+ 
+         // labels for the tabs in the main window...
+         // Maximum of Twenty (20) charts per page.
+         {"tabs.1", "Bar Charts"},
+         {"tabs.2", "Pie Charts"},
+         {"tabs.3", "XY Charts"},
+         {"tabs.4", "Time Series Charts"},
+         {"tabs.5", "Meter Charts"},
+         {"tabs.6", "Other Charts"},
+         {"tabs.7", "Test Charts"},
+         {"tabs.8", "Combined Charts"},
+         {"tabs.9", "Wafermap Charts"},
+ 
+         //{"usage.0","All Applications"},
+         //{"usage.1","Swing Only"},
+         //{"usage.2","Servlet Only"},
+ 
+         // sample chart descriptions...
+         {"chart1.title",       "Horizontal Bar Chart: "},
+         {"chart1.tab",         "1"},
+         {"chart1.usage",       "All"},
+         {"chart1.description", "Displays horizontal bars, representing data from a "
+                                + "CategoryDataset.  Notice that the numerical axis is inverted."},
+         {"chart1.zoom",        "false"},
+ 
+         {"chart2.title",       "Horizontal Stacked Bar Chart: "},
+         {"chart2.tab",         "1"},
+         {"chart2.usage",       "All"},
+         {"chart2.description", "Displays horizontal stacked bars, representing data from a "
+                                + "CategoryDataset."},
+         {"chart2.zoom",        "false"},
+ 
+         {"chart3.title",       "Vertical Bar Chart: "},
+         {"chart3.tab",         "1"},
+         {"chart3.usage",       "All"},
+         {"chart3.description", "Displays vertical bars, representing data from a CategoryDataset."},
+         {"chart3.zoom",        "false"},
+ 
+         {"chart4.title",       "Vertical 3D Bar Chart: "},
+         {"chart4.tab",         "1"},
+         {"chart4.usage",       "All"},
+         {"chart4.description", "Displays vertical bars with a 3D effect, representing data from a "
+                                + "CategoryDataset."},
+         {"chart4.zoom",        "false"},
+ 
+         {"chart5.title",       "Vertical Stacked Bar Chart: "},
+         {"chart5.tab",         "1"},
+         {"chart5.usage",       "All"},
+         {"chart5.description", "Displays vertical stacked bars, representing data from a "
+                                + "CategoryDataset."},
+         {"chart5.zoom",        "false"},
+ 
+         {"chart6.title",       "Vertical Stacked 3D Bar Chart: "},
+         {"chart6.tab",         "1"},
+         {"chart6.usage",       "All"},
+         {"chart6.description", "Displays vertical stacked bars with a 3D effect, representing "
+                                + "data from a CategoryDataset."},
+         {"chart6.zoom",        "false"},
+ 
+         {"chart7.title",       "Pie Chart 1: "},
+         {"chart7.tab",         "2"},
+         {"chart7.usage",       "All"},
+         {"chart7.description", "A pie chart showing one section exploded."},
+         {"chart7.zoom",        "false"},
+ 
+         {"chart8.title",       "Pie Chart 2: "},
+         {"chart8.tab",         "2"},
+         {"chart8.usage",       "All"},
+         {"chart8.description", "A pie chart showing percentages on the category labels.  Also, "
+                                + "this plot has a background image."},
+         {"chart8.zoom",        "false"},
+ 
+         {"chart9.title",       "XY Plot: "},
+         {"chart9.tab",         "3"},
+         {"chart9.usage",       "All"},
+         {"chart9.zoom",        "true"},
+         {"chart9.description", "A line chart using data from an XYDataset.  Both axes are "
+                                + "numerical."},
+         {"chart9.zoom",        "false"},
+ 
+         {"chart10.title",       "Time Series 1: "},
+         {"chart10.tab",         "4"},
+         {"chart10.usage",       "All"},
+         {"chart10.description", "A time series chart, representing data from an XYDataset.  This "
+                                 + "chart also demonstrates the use of multiple chart titles."},
+         {"chart10.zoom",        "false"},
+ 
+         {"chart11.title",       "Time Series 2: "},
+         {"chart11.tab",         "4"},
+         {"chart11.usage",       "All"},
+         {"chart11.description", "A time series chart, representing data from an XYDataset.  The "
+                                 + "vertical axis has a logarithmic scale."},
+         {"chart11.zoom",        "false"},
+ 
+         {"chart12.title",       "Time Series 3: "},
+         {"chart12.tab",         "4"},
+         {"chart12.usage",       "All"},
+         {"chart12.description", "A time series chart with a moving average."},
+         {"chart12.zoom",        "false"},
+ 
+         {"chart13.title",       "High/Low/Open/Close Chart: "},
+         {"chart13.tab",         "6"},
+         {"chart13.usage",       "All"},
+         {"chart13.description", "A high/low/open/close chart based on data in a HighLowDataset."},
+         {"chart13.zoom",        "false"},
+ 
+         {"chart14.title",       "Candlestick Chart: "},
+         {"chart14.tab",         "6"},
+         {"chart14.usage",       "All"},
+         {"chart14.description", "A candlestick chart based on data in a HighLowDataset."},
+         {"chart14.zoom",        "false"},
+ 
+         {"chart15.title",       "Signal Chart: "},
+         {"chart15.tab",         "6"},
+         {"chart15.usage",       "All"},
+         {"chart15.description", "A signal chart based on data in a SignalDataset."},
+         {"chart15.zoom",        "false"},
+ 
+         {"chart16.title",       "Wind Plot: "},
+         {"chart16.tab",         "6"},
+         {"chart16.usage",       "All"},
+         {"chart16.description", "A wind plot, represents wind direction and intensity (supplied "
+                                 + "via a WindDataset)."},
+         {"chart16.zoom",        "false"},
+ 
+         {"chart17.title",       "Scatter Plot: "},
+         {"chart17.tab",         "3"},
+         {"chart17.usage",       "All"},
+         {"chart17.description", "A scatter plot, representing data in an XYDataset."},
+         {"chart17.zoom",        "false"},
+ 
+         {"chart18.title",       "Line Chart: "},
+         {"chart18.tab",         "6"},
+         {"chart18.usage",       "All"},
+         {"chart18.description", "A chart displaying lines and or shapes, representing data in a "
+                                 + "CategoryDataset.  This plot also illustrates the use of a "
+                                 + "background image on the chart, and alpha-transparency on the "
+                                 + "plot."},
+         {"chart18.zoom",        "false"},
+ 
+         {"chart19.title",       "Vertical XY Bar Chart: "},
+         {"chart19.tab",         "3"},
+         {"chart19.usage",       "All"},
+         {"chart19.description", "A chart showing vertical bars, based on data in an "
+                                 + "IntervalXYDataset."},
+         {"chart19.zoom",        "false"},
+ 
+         {"chart20.title",       "Null Data: "},
+         {"chart20.tab",         "7"},
+         {"chart20.usage",       "All"},
+         {"chart20.description", "A chart with a null dataset."},
+         {"chart20.zoom",        "false"},
+ 
+         {"chart21.title",       "Zero Data: "},
+         {"chart21.tab",         "7"},
+         {"chart21.usage",       "All"},
+         {"chart21.description", "A chart with a dataset containing zero series."},
+         {"chart21.zoom",        "false"},
+ 
+         {"chart22.title",       "Chart in JScrollPane: "},
+         {"chart22.tab",         "7"},
+         {"chart22.usage",       "All"},
+         {"chart22.description", "A chart embedded in a JScrollPane."},
+         {"chart22.zoom",        "false"},
+ 
+         {"chart23.title",       "Single Series Bar Chart: "},
+         {"chart23.tab",         "7"},
+         {"chart23.usage",       "All"},
+         {"chart23.description", "A single series bar chart.  This chart also illustrates the use "
+                                 + "of a border around a ChartPanel."},
+         {"chart23.zoom",        "false"},
+ 
+         {"chart24.title",       "Dynamic Chart: "},
+         {"chart24.tab",         "7"},
+         {"chart24.usage",       "Swing"},
+         {"chart24.description", "A dynamic chart, to test the event notification mechanism."},
+         {"chart24.zoom",        "false"},
+ 
+         {"chart25.title",       "Overlaid Chart: "},
+         {"chart25.tab",         "8"},
+         {"chart25.usage",       "All"},
+         {"chart25.description", "Displays an overlaid chart with high/low/open/close and moving "
+                                 + "average plots."},
+         {"chart25.zoom",        "false"},
+ 
+         {"chart26.title",       "Horizontally Combined Chart: "},
+         {"chart26.tab",         "8"},
+         {"chart26.usage",       "All"},
+         {"chart26.description", "Displays a horizontally combined chart of time series and XY bar "
+                                 + "plots."},
+         {"chart26.zoom",        "false"},
+ 
+         {"chart27.title",       "Vertically Combined Chart: "},
+         {"chart27.tab",         "8"},
+         {"chart27.usage",       "All"},
+         {"chart27.description", "Displays a vertically combined chart of XY, TimeSeries and "
+                                 + "VerticalXYBar plots."},
+         {"chart27.zoom",        "false"},
+ 
+         {"chart28.title",       "Combined and Overlaid Chart: "},
+         {"chart28.tab",         "8"},
+         {"chart28.usage",       "All"},
+         {"chart28.description", "A combined chart of a XY, overlaid TimeSeries and an overlaid "
+                                 + "HighLow & TimeSeries plots."},
+         {"chart28.zoom",        "false"},
+ 
+         {"chart29.title",       "Combined and Overlaid Dynamic Chart: "},
+         {"chart29.tab",         "8"},
+         {"chart29.usage",       "Swing"},
+         {"chart29.description", "Displays a dynamic combined and  overlaid chart, to test the "
+                                 + "event notification mechanism."},
+         {"chart29.zoom",        "false"},
+ 
+         {"chart30.title",       "Thermometer Chart: "},
+         {"chart30.tab",         "5"},
+         {"chart30.usage",       "All"},
+         {"chart30.description", "Displays a thermometer chart."},
+         {"chart30.zoom",        "false"},
+ 
+         {"chart31.title",       "Meter Dial Chart: "},
+         {"chart31.tab",         "5"},
+         {"chart31.usage",       "All"},
+         {"chart31.description", "Displays a speedo chart, with a full circle."},
+         {"chart31.zoom",        "false"},
+ 
+         {"chart32.title",       "Gantt Chart: "},
+         {"chart32.tab",         "6"},
+         {"chart32.usage",       "All"},
+         {"chart32.description", "Displays a gantt chart."},
+ 
+         {"chart33.title",       "Meter Dial Chart: "},
+         {"chart33.tab",         "5"},
+         {"chart33.usage",       "All"},
+         {"chart33.description", "Displays a speedo chart, with a pie ending."},
+ 
+         {"chart34.title",       "Meter Dial Chart: "},
+         {"chart34.tab",         "5"},
+         {"chart34.usage",       "All"},
+         {"chart34.description", "Displays a speedo chart, with a chord ending."},
+ 
+         {"chart35.title",       "Compass Chart: "},
+         {"chart35.tab",         "5"},
+         {"chart35.usage",       "All"},
+         {"chart35.description", "Displays a compass chart."},
+ 
+         {"chart36.title",       "Wafermap Chart: "},
+         {"chart36.tab",         "9"},
+         {"chart36.usage",       "All"},
+         {"chart36.description", "Displays a notch down wafermap chart with random data."},
+         
+         {"chart37.title",       "Wafermap Chart: "},
+         {"chart37.tab",         "9"},
+         {"chart37.usage",       "All"},
+         {"chart37.description", "Displays a notch down wafermap chart with random data." 
+                                 + "Legend entries are indexed by value: "
+                                 + "(maxValue-minValue)/totalColors"},
+ 
+         {"chart38.title",       "Wafermap Chart: "},
+         {"chart38.tab",         "9"},
+         {"chart38.usage",       "All"},
+         {"chart38.description", "Displays a notch down wafermap chart with random data." 
+                                 + "Legend entries are indexed by position: "
+                                 + "totalUniqueValues/totalColors"},
+ 
+         {"chart39.title",       "Pie Chart 3: "},
+         {"chart39.tab",         "2"},
+         {"chart39.usage",       "All"},
+         {"chart39.description", "A pie chart comparing 2 Dataset (green increase, red decrease)."},
+         {"chart39.zoom",        "false"},
+ 
+         {"charts.display", "Display"},
+ 
+         // chart titles and labels...
+         {"bar.horizontal.title",  "Horizontal Bar Chart"},
+         {"bar.horizontal.domain", "Categories"},
+         {"bar.horizontal.range",  "Value"},
+ 
+         {"bar.horizontal-stacked.title",  "Horizontal Stacked Bar Chart"},
+         {"bar.horizontal-stacked.domain", "Categories"},
+         {"bar.horizontal-stacked.range",  "Value"},
+ 
+         {"bar.vertical.title",  "Vertical Bar Chart"},
+         {"bar.vertical.domain", "Categories"},
+         {"bar.vertical.range",  "Value"},
+ 
+         {"bar.vertical3D.title",  "Vertical 3D Bar Chart"},
+         {"bar.vertical3D.domain", "Categories"},
+         {"bar.vertical3D.range",  "Value"},
+ 
+         {"bar.vertical-stacked.title",  "Vertical Stacked Bar Chart"},
+         {"bar.vertical-stacked.domain", "Categories"},
+         {"bar.vertical-stacked.range",  "Value"},
+ 
+         {"bar.vertical-stacked3D.title",  "Vertical Stacked 3D Bar Chart"},
+         {"bar.vertical-stacked3D.domain", "Categories"},
+         {"bar.vertical-stacked3D.range",  "Value"},
+ 
+         {"pie.pie1.title", "Pie Chart 1"},
+ 
+         {"pie.pie2.title", "Pie Chart 2"},
+ 
+         {"pie.pie3.title", "Pie Chart 3"},
+ 
+         {"xyplot.sample1.title",  "XY Plot"},
+         {"xyplot.sample1.domain", "X Values"},
+         {"xyplot.sample1.range",  "Y Values"},
+ 
+         {"timeseries.sample1.title",     "Time Series Chart 1"},
+         {"timeseries.sample1.subtitle",  "Value of GBP in JPY"},
+         {"timeseries.sample1.domain",    "Date"},
+         {"timeseries.sample1.range",     "CCY per GBP"},
+         {"timeseries.sample1.copyright", "(C)opyright 2002, by Object Refinery Limited"},
+ 
+         {"timeseries.sample2.title",    "Time Series Chart 2"},
+         {"timeseries.sample2.domain",   "Millisecond"},
+         {"timeseries.sample2.range",    "Log Axis"},
+         {"timeseries.sample2.subtitle", "Milliseconds"},
+ 
+         {"timeseries.sample3.title",    "Time Series Chart with Moving Average"},
+         {"timeseries.sample3.domain",   "Date"},
+         {"timeseries.sample3.range",    "CCY per GBP"},
+         {"timeseries.sample3.subtitle", "30 day moving average of GBP"},
+ 
+         {"timeseries.highlow.title",    "High/Low/Open/Close Chart"},
+         {"timeseries.highlow.domain",   "Date"},
+         {"timeseries.highlow.range",    "Price ($ per share)"},
+         {"timeseries.highlow.subtitle", "IBM Stock Price"},
+ 
+         {"timeseries.candlestick.title",    "CandleStick Chart"},
+         {"timeseries.candlestick.domain",   "Date"},
+         {"timeseries.candlestick.range",    "Price ($ per share)"},
+         {"timeseries.candlestick.subtitle", "IBM Stock Price"},
+ 
+         {"timeseries.signal.title",    "Signal Chart"},
+         {"timeseries.signal.domain",   "Date"},
+         {"timeseries.signal.range",    "Price ($ per share)"},
+         {"timeseries.signal.subtitle", "IBM Stock Price"},
+ 
+         {"meter.meter.title", "Speed"},
+         {"meter.meter.subtitle", "Km"},
+         {"meter.meter.units", "Km"},
+ 
+         {"meter.thermo.title", "Hobart - Tasmania"},
+         {"meter.thermo.subtitle", "Temperature"},
+         {"meter.thermo.units", "ï¿½C"},
+ 
+         {"other.wind.title",  "Wind Plot"},
+         {"other.wind.domain", "X-Axis"},
+         {"other.wind.range",  "Y-Axis"},
+ 
+         {"other.scatter.title",  "Scatter Plot"},
+         {"other.scatter.domain", "X-Axis"},
+         {"other.scatter.range",  "Y-Axis"},
+ 
+         {"other.line.title",  "Line Plot"},
+         {"other.line.domain", "Category"},
+         {"other.line.range",  "Value"},
+ 
+         {"other.xybar.title",  "Time Series Bar Chart"},
+         {"other.xybar.domain", "Date"},
+         {"other.xybar.range",  "Value"},
+ 
+         {"test.null.title",  "XY Plot (null data)"},
+         {"test.null.domain", "X"},
+         {"test.null.range",  "Y"},
+ 
+         {"test.zero.title",  "XY Plot (zero data)"},
+         {"test.zero.domain", "X axis"},
+         {"test.zero.range",  "Y axis"},
+ 
+         {"test.scroll.title",    "Time Series"},
+         {"test.scroll.subtitle", "Value of GBP"},
+         {"test.scroll.domain",   "Date"},
+         {"test.scroll.range",    "Value"},
+ 
+         {"test.single.title",     "Single Series Bar Chart"},
+         {"test.single.subtitle1", "Subtitle 1"},
+         {"test.single.subtitle2", "Subtitle 2"},
+         {"test.single.domain",    "Date"},
+         {"test.single.range",     "Value"},
+ 
+         {"test.dynamic.title",  "Dynamic Chart"},
+         {"test.dynamic.domain", "Domain"},
+         {"test.dynamic.range",  "Range"},
+ 
+         {"combined.overlaid.title",     "Overlaid Chart"},
+         {"combined.overlaid.subtitle",  "High/Low/Open/Close plus Moving Average"},
+         {"combined.overlaid.domain",    "Date" },
+         {"combined.overlaid.range",     "IBM"},
+ 
+         {"combined.horizontal.title",     "Horizontal Combined Chart"},
+         {"combined.horizontal.subtitle",  "Time Series and XY Bar Charts"},
+         {"combined.horizontal.domains",   new String[] {"Date 1", "Date 2", "Date 3"}},
+         {"combined.horizontal.range",     "CCY per GBP"},
+ 
+         {"combined.vertical.title",     "Vertical Combined Chart"},
+         {"combined.vertical.subtitle",  "Four charts in one"},
+         {"combined.vertical.domain",    "Date"},
+         {"combined.vertical.ranges",    new String[] {"CCY per GBP", "Pounds", "IBM", "Bars"}},
+ 
+         {"combined.combined-overlaid.title",    "Combined and Overlaid Chart"},
+         {"combined.combined-overlaid.subtitle", "XY, Overlaid (two TimeSeries) and Overlaid "
+                                                 + "(HighLow and TimeSeries)"},
+         {"combined.combined-overlaid.domain",   "Date"},
+         {"combined.combined-overlaid.ranges",   new String[] {"CCY per GBP", "Pounds", "IBM"}},
+ 
+         {"combined.dynamic.title",    "Dynamic Combined Chart"},
+         {"combined.dynamic.subtitle", "XY (series 0), XY (series 1), Overlaid (both series) "
+                                       + "and XY (both series)"},
+         {"combined.dynamic.domain",   "X" },
+         {"combined.dynamic.ranges",   new String[] {"Y1", "Y2", "Y3", "Y4"} },
+ 
+         {"meter.compass.title", "Compass Plot"},
+         {"meter.compass.subtitle", "subtitle"},
+ 
+         {"gantt.task.title", "Gantt Chart"},
+         {"gantt.task.domain", "Task"},
+         {"gantt.task.range", "Time"},
+     };
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources_pl.java jfreechart/source/org/jfree/chart/demo/resources/DemoResources_pl.java
*** jfreechart-orig/source/org/jfree/chart/demo/resources/DemoResources_pl.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/resources/DemoResources_pl.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,375 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * DemoResources.java
+  * ------------------
+  * (C) Copyright 2002-204, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  * Polish translation:  Krzysztof Paz (kpaz@samorzad.pw.edu.pl);
+  * Fixed char encoding: Piotr Bzdyl (piotr@geek.krakow.pl);
+  *
+  * $Id: DemoResources_pl.java,v 1.5 2004/02/04 11:10:59 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 15-Mar-2002 : Version 1 (DG);
+  * 26-Mar-2002 : Changed name from JFreeChartDemoResources.java --> DemoResources.java (DG);
+  *
+  */
+ package org.jfree.chart.demo.resources;
+ 
+ import java.util.ListResourceBundle;
+ 
+ /**
+  * A resource bundle that stores all the user interface items that might need localisation.
+  *
+  * @author KP
+  */
+ public class DemoResources_pl extends ListResourceBundle {
+ 
+     /**
+      * Returns the array of strings in the resource bundle.
+      *
+      * @return the resources.
+      */
+     public Object[][] getContents() {
+         return CONTENTS;
+     }
+ 
+     /** The resources to be localised. */
+     private static final Object[][] CONTENTS = {
+ 
+         // about frame...
+         {"about.title", "Informacja o..."},
+         {"about.version.label", "Wersja"},
+ 
+         // menu labels...
+         {"menu.file", "Plik"},
+         {"menu.file.mnemonic", new Character('P') },
+ 
+         {"menu.file.exit", "Zako\u0144cz"},
+         {"menu.file.exit.mnemonic", new Character('K') },
+ 
+         {"menu.help", "Pomoc"},
+         {"menu.help.mnemonic", new Character('C')},
+ 
+         {"menu.help.about", "O programie..."},
+         {"menu.help.about.mnemonic", new Character('A')},
+ 
+         // dialog messages...
+         {"dialog.exit.title", "Potwierd\u017a zamkni\u0119cie..."},
+         {"dialog.exit.message", 
+             "Czy jeste\u015b pewien, \u017ce chcesz zako\u0144czy\u0107 program?"},
+ 
+         // labels for the tabs in the main window...
+         {"tab.bar",      "Wykresy Kolumnowe i S\u0142upkowe"},
+         {"tab.pie",      "Wykresy Ko\u0142owe"},
+         {"tab.xy",       "Wykresy XY"},
+         {"tab.time",     "Wykresy Liniowe"},
+         {"tab.other",    "Wykresy Inne"},
+         {"tab.test",     "Wykresy Testowe"},
+         {"tab.combined", "Wykresy Niestandardowe"},
+ 
+         // sample chart descriptions...
+         {"chart1.title",       "S\u0142upkowy grupowany: "},
+         {"chart1.description", 
+             "Wy\u015bwietla poziome s\u0142upki, por\u00f3wnuje zgrupowane warto\u015bci  "
+             + "dla r\u00f3\u017cnych kategorii.  Uwaga: skala na osi poziomej jest odwr\u00f3cona."
+             },
+ 
+         {"chart2.title",       "S\u0142upkowy skumulowany: "},
+         {"chart2.description", 
+             "Wy\u015bwietla poziome s\u0142upki, por\u00f3wnuje wk\u0142ad poszczeg\u00f3lnych "
+             + "warto\u015bci do sumy dla r\u00f3\u017cnych kategorii."},
+ 
+         {"chart3.title",       "Kolumnowy grupowany: "},
+         {"chart3.description",
+             "Wy\u015bwietla pionowe kolumny, por\u00f3wnuje zgrupowane warto\u015bci dla "
+             + "r\u00f3\u017cnych kategorii."},
+ 
+         {"chart4.title",       "Kolumnowy grupowany z efektem 3-W: "},
+         {"chart4.description", "Wy\u015bwietla pionowe kolumny z efektem 3-W,  "
+             + "por\u00f3wnuje zgrupowane warto\u015bci dla r\u00f3\u017cnych kategorii"},
+ 
+         {"chart5.title",       "Kolumnowy skumulowany: "},
+         {"chart5.description", "Wy\u015bwietla pionowe kolumny, "
+             + "por\u00f3wnuje skumulowane warto\u015bci dla r\u00f3\u017cnych kategorii."},
+ 
+         {"chart6.title",       "Kolumnowy skumulowany z efektem 3-W: "},
+         {"chart6.description", "Wy\u015bwietla pionowe kolumny z efektem 3-W,  "
+             + "por\u00f3wnuje skumulowane warto\u015bci dla r\u00f3\u017cnych kategorii."},
+ 
+         {"chart7.title",       "Ko\u0142owy wysuni\u0119ty: "},
+         {"chart7.description",
+             "Wy\u015bwietla wk\u0142ad poszczeg\u00f3lnych warto\u015bci do sumy "
+             + "ca\u0142kowitej, podkre\u015blaj\u0105c jedn\u0105 z "
+             + "warto\u015bci poprzez wysuni\u0119cie."},
+ 
+         {"chart8.title",       "Ko\u0142owy tradycyjny: "},
+         {"chart8.description", 
+             "Wy\u015bwietla procentowy wk\u0142ad poszczeg\u00f3lnych warto\u015bci do sumy "
+             + "ca\u0142kowitej, ponadto wykres ma przyk\u0142adowy obrazek w tle."},
+ 
+         {"chart9.title",       "XY Punktowy: "},
+         {"chart9.description", "Wykres punktowy, z punktami danych po\u0142\u0105czonymi "
+                               + "wyg\u0142adzonymi liniami bez znacznik\u00f3w danych."},
+ 
+         {"chart10.title",       "Liniowy 1: "},
+         {"chart10.description", 
+             "Wykres liniowy - wy\u015bwietla trend w czasie lub dla r\u00f3\u017cnych"
+             + " kategorii danych XY. "
+             + "Ponadto demonstruje u\u017cycie wielu etykiet/nazw na jednym wykresie."},
+ 
+         {"chart11.title",       "Liniowy 2: "},
+         {"chart11.description", 
+             "Wykres liniowy - wy\u015bwietla trend w czasie lub dla r\u00f3\u017cnych"
+             + " kategorii danych XY. "
+             + "O\u015b pionowa jest wyskalowana logarytmicznie."},
+ 
+         {"chart12.title",       "Liniowy 3: "},
+         {"chart12.description", 
+             "Wykres liniowy - wy\u015bwietla trend w czasie lub dla r\u00f3\u017cnych "
+             + "kategorii danych XY ze wskazaniem zmian warto\u015bci u\u015brednionej ."},
+ 
+         {"chart13.title",       "Gie\u0142dowy - Liniowy: Max/Min/Otwarcie/Zamkni\u0119cie "},
+         {"chart13.description",
+            "Wykres gie\u0142dowy typu Max/Min/Otwarcie/Zamkni\u0119cie oparty o dane "
+            + "HighLowDataset(serie warto\u015bci podawane w odpowiedniej kolejno\u015bci)."},
+ 
+         {"chart14.title",       "Gie\u0142dowy - Candlestick: Max/Min/Otwarcie/Zamkni\u0119cie: "},
+         {"chart14.description", 
+             "Wykres gie\u0142dowy typu Candlestick (Max/Min/Otwarcie/Zamkni\u0119cie) "
+             + "oparty o dane HighLowDataset(serie warto\u015bci podawane w odpowiedniej "
+             + "kolejno\u015bci)."},
+ 
+         {"chart15.title",       "Sygna\u0142owy: "},
+         {"chart15.description", "Wykres sygna\u0142owy oparty o dane z SignalDataset."},
+ 
+         {"chart16.title",       "Wiatrowy: "},
+         {"chart16.description", 
+             "Ilustracja graficzna wiatru, przedstawiaj\u0105ca jego kierunek i si\u0142\u0119 "
+             + "(reprezentowan\u0105 w WindDataset)."},
+ 
+         {"chart17.title",       "Rozproszony punktowy: "},
+         {"chart17.description",
+             "Wykres punktowy, rozproszony przedstawiaj\u0105cy dane w uk\u0142adzie XY z XYDataset."
+             },
+ 
+         {"chart18.title",       "Liniowy: "},
+         {"chart18.description",
+             "Wykres wy\u015bwielta linie i/lub kszta\u0142ty, przedstawiaj\u0105ce dane z "
+             + "CategoryDataset. "
+             + "Ponadto ilustruje u\u017cycie obrazka w tle wykresu oraz "
+             + "przezroczysto\u015bci alpha "
+             + "na rysunku."},
+ 
+         {"chart19.title",       "Pionowy XY kolumnowy: "},
+         {"chart19.description", "Wykres prezentuje pionowe s\u0142upki oparte na "
+                                + "IntervalXYDataset."},
+ 
+         {"chart20.title",       "Puste dane: "},
+         {"chart20.description", "Wykres dla braku danych (null dataset)."},
+ 
+         {"chart21.title",       "Dane zero: "},
+         {"chart21.description", "Wykres dla serii zer w danych."},
+ 
+         {"chart22.title",       "Liniowy z JScrollPane: "},
+         {"chart22.description",
+             "Wykres liniowy osadzony w komponencie JScrollPane pozwalaj\u0105cym na przewijanie "
+             + "obszaru wykresu wewn\u0105trz okna gdy jest ono za ma\u0142e."},
+ 
+         {"chart23.title",       "Kolumnowy dla jednej serii: "},
+         {"chart23.description", "Wykres kolumnowy dla jednej serii danych. "
+                                + "Demonstruje przy okazji \u017cycie ramki w ChartPanel."},
+ 
+         {"chart24.title",       "Wykres dynamiczy: "},
+         {"chart24.description", "Dynamiczny (rysowany na bie\u017c\u0105co) wykres do testowania "
+             + "mechanizmu zdarze\u0144 (event notification mechanism)."},
+ 
+         {"chart25.title",       "Nak\u0142adany gie\u0142dowy: Max/Min/Otwarcie/Zamkni\u0119cie: "},
+         {"chart25.description",
+         "Wyswietla wykres nak\u0142adany gie\u0142dowy: Max/Min/Otwarcie/Zamkni\u0119cie z "
+                                + "ilustracj\u0105 przebiegu \u015bredniej."},
+ 
+         {"chart26.title",       "Poziomy - kombinowany: "},
+         {"chart26.description", 
+             "Wy\u015bwietla 3 r\u00f3\u017cne poziome wykresy liniowe /czasowe i XY kolumnowy."},
+ 
+         {"chart27.title",       "Pionowy - kombinowany: "},
+         {"chart27.description",
+             "Wy\u015bwietla 4 r\u00f3\u017cne wykresy umo\u017cliwiajï¿½ce por\u00f3wnanie danych "
+             + "w pionie na jednym rysunku "
+             + "dla XY, liniowe /czasowe oraz kolumn pionowych XY."},
+ 
+         {"chart28.title",       "Kombinowany i nak\u0142adany: "},
+         {"chart28.description", 
+             "Kombinowany wykres XY, nak\u0142adany liniowy/TimeSeries i nak\u0142adany "
+             + "Max/Min & liniowy."},
+ 
+         {"chart29.title",       "Kombinowany i nak\u0142adany dynamiczny: "},
+         {"chart29.description", 
+             "Wy\u015bwietla kombinowany i nak\u0142adany wykres dynamiczny w celu "
+                               + "testowania / ilustracji mechnizmu obs\u0142ugi zdarze\u0144."},
+ 
+         {"charts.display", "Poka\u017c"},
+ 
+         // chart titles and labels...
+         {"bar.horizontal.title",  "Poziomy wykres s\u0142upkowy"},
+         {"bar.horizontal.domain", "Kategorie"},
+         {"bar.horizontal.range",  "Warto\u015bci"},
+ 
+         {"bar.horizontal-stacked.title",  "Poziomy, skumulowany wykres s\u0142upkowy"},
+         {"bar.horizontal-stacked.domain", "Kategorie"},
+         {"bar.horizontal-stacked.range",  "Warto\u015bci"},
+ 
+         {"bar.vertical.title",  "Pionowy wykres kolumnowy"},
+         {"bar.vertical.domain", "Kategorie"},
+         {"bar.vertical.range",  "Warto\u015bci"},
+ 
+         {"bar.vertical3D.title",  "Pionowy wykres kolumnowy z efektem 3-W"},
+         {"bar.vertical3D.domain", "Kategorie"},
+         {"bar.vertical3D.range",  "Warto\u015bci"},
+ 
+         {"bar.vertical-stacked.title",  "Pionowy, skumulowany wykres kolumnowy"},
+         {"bar.vertical-stacked.domain", "Kategorie"},
+         {"bar.vertical-stacked.range",  "Warto\u015bci"},
+ 
+         {"bar.vertical-stacked3D.title",  "Pionowy, skumulowany wykres kolumnowy z efektem 3-W"},
+         {"bar.vertical-stacked3D.domain", "Kategorie"},
+         {"bar.vertical-stacked3D.range",  "Warto\u015bci"},
+ 
+         {"pie.pie1.title", "Wykres ko\u0142owy 1 - wysuni\u0119ty"},
+ 
+         {"pie.pie2.title", "Wykres ko\u0142owy 2 - tradycyjny"},
+ 
+         {"xyplot.sample1.title",  "Wykres XY Punktowy"},
+         {"xyplot.sample1.domain", "X Warto\u015bci"},
+         {"xyplot.sample1.range",  "Y Warto\u015bci"},
+ 
+         {"timeseries.sample1.title",     "Wykres liniowy przebiegu kursu w czasie - 1"},
+         {"timeseries.sample1.subtitle",  "Warto\u015bci PLN in JPY"},
+         {"timeseries.sample1.domain",    "Data"},
+         {"timeseries.sample1.range",     "CCY na z\u0142ot\u00f3wk\u0119"},
+         {"timeseries.sample1.copyright", "(C)opyright 2002, by Krzysztof Pa\u017a, PW"},
+ 
+         {"timeseries.sample2.title",    "Liniowy 2"},
+         {"timeseries.sample2.domain",   "Millisekundy"},
+         {"timeseries.sample2.range",    "O\u015b logarytmiczna"},
+         {"timeseries.sample2.subtitle", "Millisekundy"},
+ 
+         {"timeseries.sample3.title",    "Liniowy z ruchomym trendem u\u015brednionym"},
+         {"timeseries.sample3.domain",   "Data"},
+         {"timeseries.sample3.range",    "CCY na PLN"},
+         {"timeseries.sample3.subtitle", "30 dniowy \u015bredni przebieg kursu PLN"},
+ 
+         {"timeseries.highlow.title",    "Gie\u0142dowy wykres Max/Min/Otwarcie/Zamkni\u0119cie "},
+         {"timeseries.highlow.domain",   "Data"},
+         {"timeseries.highlow.range",    "Cena (PLN za udzia\u0142)"},
+         {"timeseries.highlow.subtitle", "Warto\u015b\u0107 akcji TPSA"},
+ 
+         {"timeseries.candlestick.title",    "Gie\u0142dowy CandleStick"},
+         {"timeseries.candlestick.domain",   "Data"},
+         {"timeseries.candlestick.range",    "Cena (PLN za udzia\u0142)"},
+         {"timeseries.candlestick.subtitle", "Warto\u015b\u0107 akcji JTT"},
+ 
+         {"timeseries.signal.title",    "Wykres sygna\u0142owy"},
+         {"timeseries.signal.domain",   "Data"},
+         {"timeseries.signal.range",    "Cena (PLN za udzia\u0142)"},
+         {"timeseries.signal.subtitle", "Warto\u015b\u0107 akcji OPTIMUS S.A."},
+ 
+         {"other.wind.title",  "Wykres wiatru"},
+         {"other.wind.domain", "O\u015b X"},
+         {"other.wind.range",  "O\u015b Y"},
+ 
+         {"other.scatter.title",  "Rozrzucony punktowy"},
+         {"other.scatter.domain", "O\u015b X"},
+         {"other.scatter.range",  "O\u015b Y"},
+ 
+         {"other.line.title",  "Liniowy"},
+         {"other.line.domain", "Kategoria"},
+         {"other.line.range",  "Warto\u015b\u0107"},
+ 
+         {"other.xybar.title",  "Liniowy kolumnowy"},
+         {"other.xybar.domain", "Data"},
+         {"other.xybar.range",  "Warto\u015b\u0107"},
+ 
+         {"test.null.title",  "Wykres XY (null data)"},
+         {"test.null.domain", "X"},
+         {"test.null.range",  "Y"},
+ 
+         {"test.zero.title",  "Wykres XY (zero data)"},
+         {"test.zero.domain", "O\u015b X"},
+         {"test.zero.range",  "O\u015b Y"},
+ 
+         {"test.scroll.title",    "Liniowy / Time Series"},
+         {"test.scroll.subtitle", "Warto\u015b\u0107 PLN"},
+         {"test.scroll.domain",   "Data"},
+         {"test.scroll.range",    "Warto\u015b\u0107"},
+ 
+         {"test.single.title",     "Pojedyncza seria"},
+         {"test.single.subtitle1", "Podtytu\u0142 1"},
+         {"test.single.subtitle2", "Podtytu\u0142 2"},
+         {"test.single.domain",    "Data"},
+         {"test.single.range",     "Warto\u015b\u0107"},
+ 
+         {"test.dynamic.title",  "Wykres Dynamiczny"},
+         {"test.dynamic.domain", "Domena"},
+         {"test.dynamic.range",  "Zasi\u0119g"},
+ 
+         {"combined.overlaid.title",     "Wykres Nak\u0142adany"},
+         {"combined.overlaid.subtitle",
+             "Max/Min/Otwarcie/Zamkni\u0119cie z ilustracj\u0105 przebiegu \u015bredniej."},
+         {"combined.overlaid.domain",    "Data" },
+         {"combined.overlaid.range",     "OPTIMUS S.A."},
+ 
+         {"combined.horizontal.title",     "Wykres poziomo kombinowany"},
+         {"combined.horizontal.subtitle",  "Linowy / Time Series s\u0142upkowy XY "},
+         {"combined.horizontal.domains",   new String[] {"Dane 1", "Dane 2", "Dane 3"}},
+         {"combined.horizontal.range",     "CCY na PLN"},
+ 
+         {"combined.vertical.title",     "Wykres pionowo kombinowany"},
+         {"combined.vertical.subtitle",  "Cztery wykresy na jednym"},
+         {"combined.vertical.domain",    "Data"},
+         {"combined.vertical.ranges",    
+             new String[] {"CCY na PLN", "Z\u0142ot\u00f3wki", "KGHM", "S\u0142upki"}},
+ 
+         {"combined.combined-overlaid.title",     "Wykres kombinowany i nak\u0142adany"},
+         {"combined.combined-overlaid.subtitle",  
+             "XY, mnak\u0142adany (dwie TimeSeries) i nak\u0142adany "
+                                                 + "(Max/Min i TimeSeries)"},
+         {"combined.combined-overlaid.domain",    "Data"},
+         {"combined.combined-overlaid.ranges",    
+             new String[] {"CCY na PLN", "Z\u0142ot\u00f3wki", "TPSA"}},
+ 
+         {"combined.dynamic.title",     "Wykres poziomo kombinowany - dynamiczny"},
+         {"combined.dynamic.subtitle",  "XY (seria 0), XY (seria 1), nak\u0142adany (obie serie) "
+                                       + "oraz XY (obie serie)"},
+         {"combined.dynamic.domain",    "X" },
+         {"combined.dynamic.ranges",    new String[] {"Y1", "Y2", "Y3", "Y4"}},
+ 
+     };
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/resources/package.html jfreechart/source/org/jfree/chart/demo/resources/package.html
*** jfreechart-orig/source/org/jfree/chart/demo/resources/package.html	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/resources/package.html	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,6 ----
+ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+ <html>
+ <body bgcolor="white">
+ Resource bundles for the JFreeChart demonstration applications.
+ </body>
+ </html>
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SampleSignalDataset.java jfreechart/source/org/jfree/chart/demo/SampleSignalDataset.java
*** jfreechart-orig/source/org/jfree/chart/demo/SampleSignalDataset.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SampleSignalDataset.java	2004-11-07 15:43:00.000000000 +0100
***************
*** 0 ****
--- 1,170 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * SampleSIgnalDataset.java
+  * ------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SampleSignalDataset.java,v 1.7 2004/05/06 08:36:16 mungady Exp $
+  *
+  * Changes (since 11-Oct-2002)
+  * ---------------------------
+  * 11-Oct-2002 : Added Javadocs;
+  * 06-May-2004 : Now extends AbstractXYDataset (DG);
+  *
+  */
+ 
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.data.general.DatasetChangeListener;
+ import org.jfree.data.xy.AbstractXYDataset;
+ import org.jfree.data.xy.DefaultHighLowDataset;
+ import org.jfree.data.xy.SignalsDataset;
+ 
+ /**
+  * A sample signal dataset.
+  */
+ public class SampleSignalDataset extends AbstractXYDataset implements SignalsDataset {
+ 
+     /** The data. */
+     private DefaultHighLowDataset data;
+ 
+     /**
+      * Default constructor.
+      */
+     public SampleSignalDataset() {
+         this.data = DemoDatasetFactory.createHighLowDataset();
+     }
+ 
+     /**
+      * Returns the number of items in a series.
+      *
+      * @param series  the series (zero-based index).
+      *
+      * @return the number of items within the series.
+      */
+     public int getItemCount(final int series) {
+         return this.data.getItemCount(series);
+     }
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return the series count.
+      */
+     public int getSeriesCount() {
+         return this.data.getSeriesCount();
+     }
+ 
+     /**
+      * Returns the name of a series.
+      *
+      * @param series  the series (zero-based index).
+      *
+      * @return the name of the series.
+      */
+     public String getSeriesName(final int series) {
+         return this.data.getSeriesName(series);
+     }
+ 
+     /**
+      * Returns the x-value for an item within a series.
+      * <P>
+      * The implementation is responsible for ensuring that the x-values are
+      * presented in ascending order.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the x-value.
+      */
+     public double getXValue(final int series, final int item) {
+         return this.data.getXValue(series, item);
+     }
+     public Number getX(final int series, final int item) {
+         return this.data.getX(series, item);
+     }
+ 
+     /**
+      * Returns the y-value for an item within a series.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the y-value.
+      */
+     public double getYValue(final int series, final int item) {
+         return this.data.getYValue(series, item);
+     }
+     public Number getY(final int series, final int item) {
+         return this.data.getY(series, item);
+     }
+ 
+     /**
+      * Returns the type.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the type.
+      */
+     public int getType(final int series, final int item) {
+         return SignalsDataset.ENTER_LONG;
+     }
+ 
+     /**
+      * Returns the level.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the level.
+      */
+     public double getLevel(final int series, final int item) {
+         return getXValue(series, item);
+     }
+ 
+     /**
+      * Registers an object to receive notification of changes to the dataset.
+      *
+      * @param listener the object to register.
+      */
+     public void addChangeListener(final DatasetChangeListener listener) {
+         this.data.addChangeListener(listener);
+     }
+ 
+     /**
+      * Deregisters an object so that it no longer receives notification of changes to the dataset.
+      *
+      * @param listener the object to deregister.
+      */
+     public void removeChangeListener(final DatasetChangeListener listener) {
+         this.data.removeChangeListener(listener);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SampleXYDataset2.java jfreechart/source/org/jfree/chart/demo/SampleXYDataset2.java
*** jfreechart-orig/source/org/jfree/chart/demo/SampleXYDataset2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SampleXYDataset2.java	2004-11-07 15:31:31.000000000 +0100
***************
*** 0 ****
--- 1,281 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * SampleXYDataset2.java
+  * ---------------------
+  * (C) Copyright 2000-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SampleXYDataset2.java,v 1.7 2004/05/06 08:14:33 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 22-Oct-2001 : Version 1 (DG);
+  *               Renamed DataSource.java --> Dataset.java etc. (DG);
+  * 07-Nov-2001 : Updated source header (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 29-Oct-2002 : Modified so that you can specify dataset parameters in the constructor (DG);
+  * 06-May-2004 : Now implements AbstractXYDataset (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.data.DomainInfo;
+ import org.jfree.data.Range;
+ import org.jfree.data.RangeInfo;
+ import org.jfree.data.xy.AbstractXYDataset;
+ import org.jfree.data.xy.XYDataset;
+ 
+ /**
+  * Random data for a scatter plot demo.
+  * <P>
+  * Note that the aim of this class is to create a self-contained data source for demo purposes -
+  * it is NOT intended to show how you should go about writing your own datasets.
+  *
+  */
+ public class SampleXYDataset2 extends AbstractXYDataset implements XYDataset,
+                                                                    DomainInfo, 
+                                                                    RangeInfo {
+ 
+     /** The series count. */
+     private static final int DEFAULT_SERIES_COUNT = 4;
+ 
+     /** The item count. */
+     private static final int DEFAULT_ITEM_COUNT = 100;
+ 
+     /** The range. */
+     private static final double DEFAULT_RANGE = 200;
+ 
+     /** The x values. */
+     private Double[][] xValues;
+ 
+     /** The y values. */
+     private Double[][] yValues;
+ 
+     /** The number of series. */
+     private int seriesCount;
+ 
+     /** The number of items. */
+     private int itemCount;
+ 
+     /** The minimum domain value. */
+     private Number domainMin;
+ 
+     /** The maximum domain value. */
+     private Number domainMax;
+ 
+     /** The minimum range value. */
+     private Number rangeMin;
+ 
+     /** The maximum range value. */
+     private Number rangeMax;
+ 
+     /** The range of the domain. */
+     private Range domainRange;
+ 
+     /** The range. */
+     private Range range;
+ 
+     /**
+      * Creates a sample dataset using default settings (4 series, 100 data items per series,
+      * random data in the range 0 - 200).
+      */
+     public SampleXYDataset2() {
+         this(DEFAULT_SERIES_COUNT, DEFAULT_ITEM_COUNT);
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @param seriesCount  the number of series.
+      * @param itemCount  the number of items.
+      */
+     public SampleXYDataset2(final int seriesCount, final int itemCount) {
+ 
+         this.xValues = new Double[seriesCount][itemCount];
+         this.yValues = new Double[seriesCount][itemCount];
+         this.seriesCount = seriesCount;
+         this.itemCount = itemCount;
+ 
+         double minX = Double.POSITIVE_INFINITY;
+         double maxX = Double.NEGATIVE_INFINITY;
+         double minY = Double.POSITIVE_INFINITY;
+         double maxY = Double.NEGATIVE_INFINITY;
+ 
+         for (int series = 0; series < seriesCount; series++) {
+             for (int item = 0; item < itemCount; item++) {
+ 
+                 final double x = (Math.random() - 0.5) * DEFAULT_RANGE;
+                 this.xValues[series][item] = new Double(x);
+                 if (x < minX) {
+                     minX = x;
+                 }
+                 if (x > maxX) {
+                     maxX = x;
+                 }
+ 
+                 final double y = (Math.random() + 0.5) * 6 * x + x;
+                 this.yValues[series][item] = new Double(y);
+                 if (y < minY) {
+                     minY = y;
+                 }
+                 if (y > maxY) {
+                     maxY = y;
+                 }
+ 
+             }
+         }
+ 
+         this.domainMin = new Double(minX);
+         this.domainMax = new Double(maxX);
+         this.domainRange = new Range(minX, maxX);
+ 
+         this.rangeMin = new Double(minY);
+         this.rangeMax = new Double(maxY);
+         this.range = new Range(minY, maxY);
+ 
+     }
+ 
+     /**
+      * Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      *
+      * @return the x-value for the specified series and item.
+      */
+     public double getXValue(final int series, final int item) {
+         return this.xValues[series][item].doubleValue();
+     }
+     public Number getX(final int series, final int item) {
+         return this.xValues[series][item];
+     }
+ 
+     /**
+      * Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      *
+      * @return  the y-value for the specified series and item.
+      */
+     public double getYValue(final int series, final int item) {
+         return this.yValues[series][item].doubleValue();
+     }
+     public Number getY(final int series, final int item) {
+         return this.yValues[series][item];
+     }
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return the series count.
+      */
+     public int getSeriesCount() {
+         return this.seriesCount;
+     }
+ 
+     /**
+      * Returns the name of the series.
+      *
+      * @param series  the index (zero-based) of the series.
+      *
+      * @return the name of the series.
+      */
+     public String getSeriesName(final int series) {
+         return "Sample " + series;
+     }
+ 
+     /**
+      * Returns the number of items in the specified series.
+      *
+      * @param series  the index (zero-based) of the series.
+      *
+      * @return the number of items in the specified series.
+      */
+     public int getItemCount(final int series) {
+         return this.itemCount;
+     }
+ 
+     /**
+      * Returns the minimum domain value.
+      *
+      * @return the minimum domain value.
+      */
+     public Number getMinimumDomainValue() {
+         return this.domainMin;
+     }
+ 
+     /**
+      * Returns the maximum domain value.
+      *
+      * @return the maximum domain value.
+      */
+     public Number getMaximumDomainValue() {
+         return this.domainMax;
+     }
+ 
+     /**
+      * Returns the range of values in the domain.
+      *
+      * @return the range.
+      */
+     public Range getDomainRange() {
+         return this.domainRange;
+     }
+ 
+     /**
+      * Returns the minimum range value.
+      *
+      * @return the minimum range value.
+      */
+     public Number getMinimumRangeValue() {
+         return this.rangeMin;
+     }
+ 
+     /**
+      * Returns the maximum range value.
+      *
+      * @return the maximum range value.
+      */
+     public Number getMaximumRangeValue() {
+         return this.rangeMax;
+     }
+ 
+     /**
+      * Returns the range of values in the range (y-values).
+      *
+      * @return the range.
+      */
+     public Range getValueRange() {
+         return this.range;
+     }
+ 
+     public Range getDomainBounds() {
+         return this.domainRange;        
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SampleXYDataset.java jfreechart/source/org/jfree/chart/demo/SampleXYDataset.java
*** jfreechart-orig/source/org/jfree/chart/demo/SampleXYDataset.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SampleXYDataset.java	2004-11-07 15:34:06.000000000 +0100
***************
*** 0 ****
--- 1,171 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * SampleXYDataset.java
+  * --------------------
+  * (C) Copyright 2000-2004, by Object Refinery Limited;
+  *
+  * Original Author:  David Gilbert;
+  * Contributor(s):   -;
+  *
+  * $Id: SampleXYDataset.java,v 1.8 2004/05/06 08:14:02 mungady Exp $
+  *
+  * Changes (from 24-Aug-2001)
+  * --------------------------
+  * 24-Aug-2001 : Added standard source header. Fixed DOS encoding problem (DG);
+  * 15-Oct-2001 : Parent class has changed package (DG);
+  * 22-Oct-2001 : Renamed DataSource.java --> Dataset.java etc. (DG);
+  *               Added translate factor, used for demonstrating dynamic chart (DG);
+  * 07-Nov-2001 : Updated source header (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 06-May-2004 : Now extends AbstractXYDataset (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.data.general.DatasetChangeEvent;
+ import org.jfree.data.xy.AbstractXYDataset;
+ import org.jfree.data.xy.XYDataset;
+ 
+ /**
+  * A dummy dataset for an XY plot.
+  * <P>
+  * Note that the aim of this class is to create a self-contained data source for demo purposes -
+  * it is NOT intended to show how you should go about writing your own datasets.
+  *
+  */
+ public class SampleXYDataset extends AbstractXYDataset implements XYDataset {
+ 
+     /** Use the translate to change the data and demonstrate dynamic data changes. */
+     private double translate;
+ 
+     /**
+      * Default constructor.
+      */
+     public SampleXYDataset() {
+         this.translate = 0.0;
+     }
+ 
+     /**
+      * Returns the translation factor.
+      *
+      * @return  the translation factor.
+      */
+     public double getTranslate() {
+         return this.translate;
+     }
+ 
+     /**
+      * Sets the translation constant for the x-axis.
+      *
+      * @param translate  the translation factor.
+      */
+     public void setTranslate(final double translate) {
+         this.translate = translate;
+         notifyListeners(new DatasetChangeEvent(this, this));
+     }
+ 
+     /**
+      * Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      *
+      * @return the x-value for the specified series and item.
+      */
+     public double getXValue(final int series, final int item) {
+         return getX(series, item).doubleValue();
+     }
+     public Number getX(final int series, final int item) {
+         return new Double(-10.0 + this.translate + (item / 10.0));
+     }
+ 
+     /**
+      * Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      *
+      * @return the y-value for the specified series and item.
+      */
+     public double getYValue(final int series, final int item) {
+         return getY(series, item).doubleValue();
+     }
+     public Number getY(final int series, final int item) {
+         if (series == 0) {
+             return new Double(Math.cos(-10.0 + this.translate + (item / 10.0)));
+         }
+         else {
+             return new Double(2 * (Math.sin(-10.0 + this.translate + (item / 10.0))));
+         }
+     }
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return the number of series in the dataset.
+      */
+     public int getSeriesCount() {
+         return 2;
+     }
+ 
+     /**
+      * Returns the name of the series.
+      *
+      * @param series  the index (zero-based) of the series.
+      *
+      * @return the name of the series.
+      */
+     public String getSeriesName(final int series) {
+         if (series == 0) {
+             return "y = cosine(x)";
+         }
+         else if (series == 1) {
+             return "y = 2*sine(x)";
+         }
+         else {
+             return "Error";
+         }
+     }
+ 
+     /**
+      * Returns the number of items in the specified series.
+      *
+      * @param series  the index (zero-based) of the series.
+      * @return the number of items in the specified series.
+      *
+      */
+     public int getItemCount(final int series) {
+         return 200;
+     }
+ 
+ }
+ 
+ 
+ 
+ 
+ 
+ 
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SampleXYDatasetThread.java jfreechart/source/org/jfree/chart/demo/SampleXYDatasetThread.java
*** jfreechart-orig/source/org/jfree/chart/demo/SampleXYDatasetThread.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SampleXYDatasetThread.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,88 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * SampleXYDatasetThread.java
+  * --------------------------
+  * (C) Copyright 2001-2004, by Object Refinery Limited;
+  *
+  * Original Author:  David Gilbert;
+  * Contributor(s):   -;
+  *
+  * $Id: SampleXYDatasetThread.java,v 1.6 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 22-Oct-2001 : Version 1 (DG);
+  * 07-Nov-2001 : Updated source header (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ /**
+  * Implements the runnable interface and updates the SampleXYDataset.  This gives the event
+  * notification mechanism in JFreeChart a run to make sure it works.
+  *
+  * WARNING 1 : There are likely to be problems with accessing datasets from more than one thread,
+  * so don't use this code for anything other than the demo!
+  * <P>
+  * WARNING 2 : Updating the dataset this way 'animates' the chart - but JFreeChart is not designed
+  * for the production of animated charts.  For fast animations, you need a chart that draws to
+  * a bitmap, in order to optimise the screen updates.  But JFreeChart draws to an abstract
+  * drawing surface (Graphics2D), which brings many benefits, but also means that we cannot implement
+  * any performance tricks when the screen updates because we cannot guarantee which pixels are
+  * rendered by the Graphics2D pipeline...
+  *
+  */
+ public class SampleXYDatasetThread implements Runnable {
+ 
+     /** The data. */
+     private SampleXYDataset data;
+ 
+     /**
+      * Creates a new thread.
+      *
+      * @param data  the dataset.
+      */
+     public SampleXYDatasetThread(final SampleXYDataset data) {
+         this.data = data;
+     }
+ 
+     /**
+      * Runs the thread.
+      */
+     public void run() {
+         while (true) {
+             try {
+                 Thread.sleep(500);
+                 this.data.setTranslate(this.data.getTranslate() + 0.25);
+             }
+             catch (Exception e) {
+                 // ignore
+             }
+       }
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SampleXYSymbolicDataset.java jfreechart/source/org/jfree/chart/demo/SampleXYSymbolicDataset.java
*** jfreechart-orig/source/org/jfree/chart/demo/SampleXYSymbolicDataset.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SampleXYSymbolicDataset.java	2004-11-07 16:11:03.000000000 +0100
***************
*** 0 ****
--- 1,471 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------------
+  * SampleXYSymbolicDataset.java
+  * ----------------------------
+  * (C) Copyright 2000-2004, by Anthony Boulestreau and Contributors;
+  *
+  * Original Author:  Anthony Boulestreau.
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * Changes
+  * -------
+  * 29-Mar-2002 : Version 1 (AB);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.lang.reflect.Array;
+ import java.util.List;
+ import java.util.Vector;
+ 
+ import org.jfree.data.DomainOrder;
+ import org.jfree.data.general.AbstractSeriesDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XisSymbolic;
+ import org.jfree.data.xy.YisSymbolic;
+ 
+ /**
+  * Random data for a symbolic plot demo.
+  *
+  * @author Anthony Boulestreau
+  */
+ public class SampleXYSymbolicDataset extends AbstractSeriesDataset
+                                      implements XYDataset, XisSymbolic, YisSymbolic {
+ 
+     /** Series names. */
+     private String[] seriesName;
+ 
+     /** Items. */
+     private int[] item;
+ 
+     /** A series index. */
+     private int serie;
+ 
+     /** X values. */
+     private Integer[][] xValues;
+ 
+     /** Y values. */
+     private Integer[][] yValues;
+ 
+     /** X symbolic values. */
+     private String[] xSymbolicValues;
+ 
+     /** Y symbolic values. */
+     private String[] ySymbolicValues;
+ 
+     /** The dataset name. */
+     private String datasetName;
+ 
+     /**
+      * Creates a new dataset.
+      *
+      * @param datasetName  the dataset name.
+      * @param xValues  the x values.
+      * @param yValues  the y values.
+      * @param xSymbolicValues  the x symbols.
+      * @param ySymbolicValues  the y symbols.
+      * @param seriesName  the series name.
+      */
+     public SampleXYSymbolicDataset(final String datasetName,
+                                    final Integer[][] xValues,
+                                    final Integer[][] yValues,
+                                    final String[] xSymbolicValues,
+                                    final String[] ySymbolicValues,
+                                    final String[] seriesName) {
+ 
+         this.datasetName = datasetName;
+         this.xValues = xValues;
+         this.yValues = yValues;
+         this.xSymbolicValues = xSymbolicValues;
+         this.ySymbolicValues = ySymbolicValues;
+         this.serie = xValues.length;
+         this.item = new int[this.serie];
+         for (int i = 0; i < this.serie; i++) {
+             this.item[i] = xValues[i].length;
+         }
+         this.seriesName = seriesName;
+ 
+     }
+ 
+     /**
+      * Returns the x-value for the specified series and item.  Series are
+      * numbered 0, 1, ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      *
+      * @return the x-value for the specified series and item.
+      */
+     public double getXValue(final int series, final int item) {
+         double result = Double.NaN;
+         Number x = getX(series, item);
+         if (x != null) {
+             result = x.doubleValue();   
+         }
+         return result;   
+     }
+     public Number getX(final int series, final int item) {
+         return this.xValues[series][item];
+     }
+ 
+     /**
+      * Returns the y-value for the specified series and item.  Series are
+      * numbered 0, 1, ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      *
+      * @return the y-value for the specified series and item.
+      */
+     public double getYValue(final int series, final int item) {
+         double result = Double.NaN;
+         Number y = getY(series, item);
+         if (y != null) {
+             result = y.doubleValue();   
+         }
+         return result;   
+     }
+     public Number getY(final int series, final int item) {
+         return this.yValues[series][item];
+     }
+ 
+     /**
+      * Sets the x-value for the specified series and item with the specified
+      * new <CODE>Number</CODE> value.  Series are numbered 0, 1, ...
+      * <P>
+      * This method is used by combineXSymbolicDataset to modify the reference
+      * to the symbolic value ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      * @param newValue  the value to set.
+      */
+     public void setXValue(final int series, final int item, final Number newValue) {
+         this.xValues[series][item] = (Integer) newValue;
+     }
+ 
+     /**
+      * Sets the y-value for the specified series and item with the specified
+      * new <CODE>Number</CODE> value.  Series are numbered 0, 1, ...
+      * <P>
+      * This method is used by combineYSymbolicDataset to modify the reference
+      * to the symbolic value ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      * @param newValue  the value to set.
+      */
+     public void setYValue(final int series, final int item, final Number newValue) {
+         this.yValues[series][item] = (Integer) newValue;
+     }
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return The number of series in the dataset.
+      */
+     public int getSeriesCount() {
+         return this.serie;
+     }
+ 
+     /**
+      * Returns the name of the series.
+      *
+      * @param series  the index (zero-based) of the series.
+      *
+      * @return the name of the series.
+      */
+     public String getSeriesName(final int series) {
+         if (this.seriesName != null) {
+             return this.seriesName[series];
+         }
+         else {
+             return this.datasetName + series;
+         }
+     }
+ 
+     /**
+      * Returns the number of items in the specified series.
+      *
+      * @param series  the index (zero-based) of the series.
+      * @return the number of items in the specified series.
+      */
+     public int getItemCount(final int series) {
+         return this.item[series];
+     }
+ 
+     /**
+      * Returns the list of X symbolic values.
+      *
+      * @return array of symbolic value.
+      */
+     public String[] getXSymbolicValues() {
+         return this.xSymbolicValues;
+     }
+ 
+     /**
+      * Returns the list of Y symbolic values.
+      *
+      * @return array of symbolic value.
+      */
+     public String[] getYSymbolicValues() {
+         return this.ySymbolicValues;
+     }
+ 
+     /**
+      * Sets the list of X symbolic values.
+      *
+      * @param sValues the new list of symbolic value.
+      */
+     public void setXSymbolicValues(final String[] sValues) {
+         this.xSymbolicValues = sValues;
+     }
+ 
+     /**
+      * Sets the list of Y symbolic values.
+      *
+      * @param sValues the new list of symbolic value.
+      */
+     public void setYSymbolicValues(final String[] sValues) {
+         this.ySymbolicValues = sValues;
+     }
+ 
+     /**
+      * Returns the X symbolic value of the data set specified by
+      * <CODE>series</CODE> and <CODE>item</CODE> parameters.
+      *
+      * @param series value of the serie.
+      * @param item value of the item.
+      *
+      * @return the symbolic value.
+      */
+     public String getXSymbolicValue(final int series, final int item) {
+         final Integer intValue = (Integer) getX(series, item);
+         return getXSymbolicValue(intValue);
+     }
+ 
+     /**
+      * Returns the Y symbolic value of the data set specified by
+      * <CODE>series</CODE> and <CODE>item</CODE> parameters.
+      *
+      * @param series value of the serie.
+      * @param item value of the item.
+      * @return the symbolic value.
+      */
+     public String getYSymbolicValue(final int series, final int item) {
+         final Integer intValue = (Integer) getY(series, item);
+         return getYSymbolicValue(intValue);
+     }
+ 
+     /**
+      * Returns the X symbolic value linked with the specified
+      * <CODE>Integer</CODE>.
+      *
+      * @param val value of the integer linked with the symbolic value.
+      * @return the symbolic value.
+      */
+     public String getXSymbolicValue(final Integer val) {
+         return this.xSymbolicValues[val.intValue()];
+     }
+ 
+     /**
+      * Returns the Y symbolic value linked with the specified
+      * <CODE>Integer</CODE>.
+      *
+      * @param val value of the integer linked with the symbolic value.
+      * @return the symbolic value.
+      */
+     public String getYSymbolicValue(final Integer val) {
+         return this.ySymbolicValues[val.intValue()];
+     }
+ 
+     /**
+      * This function modify <CODE>dataset1</CODE> and <CODE>dataset1</CODE> in
+      * order that they share the same Y symbolic value list.
+      * <P>
+      * The sharing Y symbolic value list is obtained adding the Y symbolic data
+      * list of the fist data set to the Y symbolic data list of the second data
+      * set.
+      * <P>
+      * This function is use with the <I>combined plot</I> functions of
+      * JFreeChart.
+      *
+      * @param dataset1  the first data set to combine.
+      * @param dataset2  the second data set to combine.
+      *
+      * @return  the shared Y symbolic array.
+      */
+     public static String[] combineYSymbolicDataset(final YisSymbolic dataset1, 
+                                                    final YisSymbolic dataset2) {
+ 
+         final SampleXYSymbolicDataset sDataset1 = (SampleXYSymbolicDataset) dataset1;
+         final SampleXYSymbolicDataset sDataset2 = (SampleXYSymbolicDataset) dataset2;
+         final String[] sDatasetSymbolicValues1 = sDataset1.getYSymbolicValues();
+         final String[] sDatasetSymbolicValues2 = sDataset2.getYSymbolicValues();
+ 
+         //Combine the two list of symbolic value of the two data set
+         final int s1length = sDatasetSymbolicValues1.length;
+         final int s2length = sDatasetSymbolicValues2.length;
+         final List ySymbolicValuesCombined = new Vector();
+         for (int i = 0; i < s1length; i++) {
+             ySymbolicValuesCombined.add(sDatasetSymbolicValues1[i]);
+         }
+         for (int i = 0; i < s2length; i++) {
+             if (!ySymbolicValuesCombined.contains(sDatasetSymbolicValues2[i])) {
+                 ySymbolicValuesCombined.add(sDatasetSymbolicValues2[i]);
+             }
+         }
+ 
+         //Change the Integer reference of the second data set
+         int newIndex;
+         for (int i = 0; i < sDataset2.getSeriesCount(); i++) {
+             for (int j = 0; j < sDataset2.getItemCount(i); j++) {
+                 newIndex = ySymbolicValuesCombined.indexOf(sDataset2.getYSymbolicValue(i, j));
+                 sDataset2.setYValue(i, j, new Integer(newIndex));
+             }
+         }
+ 
+         //Set the new list of symbolic value on the two data sets
+         final String[] ySymbolicValuesCombinedA = new String[ySymbolicValuesCombined.size()];
+         ySymbolicValuesCombined.toArray(ySymbolicValuesCombinedA);
+         sDataset1.setYSymbolicValues(ySymbolicValuesCombinedA);
+         sDataset2.setYSymbolicValues(ySymbolicValuesCombinedA);
+ 
+         return ySymbolicValuesCombinedA;
+     }
+ 
+     /**
+      * This function modify <CODE>dataset1</CODE> and <CODE>dataset1</CODE> in
+      * order that they share the same X symbolic value list.
+      * <P>
+      * The sharing X symbolic value list is obtained adding the X symbolic data
+      * list of the fist data set to the X symbolic data list of the second data
+      * set.
+      * <P>
+      * This function is use with the <I>combined plot</I> functions of
+      * JFreeChart.
+      *
+      * @param dataset1 the first data set to combine.
+      * @param dataset2 the second data set to combine.
+      *
+      * @return  the shared X symbolic array.
+      */
+     public static String[] combineXSymbolicDataset(final XisSymbolic dataset1, 
+                                                    final XisSymbolic dataset2) {
+         final SampleXYSymbolicDataset sDataset1 = (SampleXYSymbolicDataset) dataset1;
+         final SampleXYSymbolicDataset sDataset2 = (SampleXYSymbolicDataset) dataset2;
+         final String[] sDatasetSymbolicValues1 = sDataset1.getXSymbolicValues();
+         final String[] sDatasetSymbolicValues2 = sDataset2.getXSymbolicValues();
+ 
+         //Combine the two list of symbolic value of the two data set
+         final int s1length = sDatasetSymbolicValues1.length;
+         final int s2length = sDatasetSymbolicValues2.length;
+         final List xSymbolicValuesCombined = new Vector();
+         for (int i = 0; i < s1length; i++) {
+             xSymbolicValuesCombined.add(sDatasetSymbolicValues1[i]);
+         }
+         for (int i = 0; i < s2length; i++) {
+             if (!xSymbolicValuesCombined.contains(sDatasetSymbolicValues2[i])) {
+                 xSymbolicValuesCombined.add(sDatasetSymbolicValues2[i]);
+             }
+         }
+ 
+         //Change the Integer reference of the second data set
+         int newIndex;
+         for (int i = 0; i < sDataset2.getSeriesCount(); i++) {
+             for (int j = 0; j < sDataset2.getItemCount(i); j++) {
+                 newIndex = xSymbolicValuesCombined.indexOf(sDataset2.getXSymbolicValue(i, j));
+                 sDataset2.setXValue(i, j, new Integer(newIndex));
+             }
+         }
+ 
+         //Set the new list of symbolic value on the two data sets
+         final String[] xSymbolicValuesCombinedA = new String[xSymbolicValuesCombined.size()];
+         xSymbolicValuesCombined.toArray(xSymbolicValuesCombinedA);
+         sDataset1.setXSymbolicValues(xSymbolicValuesCombinedA);
+         sDataset2.setXSymbolicValues(xSymbolicValuesCombinedA);
+ 
+         return xSymbolicValuesCombinedA;
+     }
+ 
+     /**
+      * Clone the SampleXYSymbolicDataset object
+      *
+      * @return the cloned object.
+      */
+     public Object clone() {
+         final String nDatasetName = new String(this.datasetName);
+         final Integer[][] nXValues = (Integer[][]) cloneArray(this.xValues);
+         final Integer[][] nYValues = (Integer[][]) cloneArray(this.yValues);
+         final String[] nXSymbolicValues = (String[]) cloneArray(this.xSymbolicValues);
+         final String[] nYSymbolicValues = (String[]) cloneArray(this.ySymbolicValues);
+         final String[] sName = (String[]) cloneArray(this.seriesName);
+         return new SampleXYSymbolicDataset(
+             nDatasetName, nXValues, nYValues, nXSymbolicValues, nYSymbolicValues, sName
+         );
+     }
+ 
+     /**
+      * Returns a clone of the array.
+      *
+      * @param arr the array.
+      *
+      * @return a clone.
+      */
+     private static Object cloneArray(final Object arr) {
+ 
+         if (arr == null) {
+             return arr;
+         }
+ 
+         final Class cls = arr.getClass();
+         if (!cls.isArray()) {
+             return arr;
+         }
+ 
+         final int length = Array.getLength(arr);
+         final Object[] newarr = (Object[]) Array.newInstance(cls.getComponentType(), length);
+ 
+         Object obj;
+ 
+         for (int i = 0; i < length; i++) {
+             obj = Array.get(arr, i);
+             if (obj.getClass().isArray()) {
+                 newarr[i] = cloneArray(obj);
+             }
+             else {
+                 newarr[i] = obj;
+             }
+         }
+ 
+         return newarr;
+     }
+ 
+     public DomainOrder getDomainOrder() {
+         return DomainOrder.NONE;
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SampleXYZDataset.java jfreechart/source/org/jfree/chart/demo/SampleXYZDataset.java
*** jfreechart-orig/source/org/jfree/chart/demo/SampleXYZDataset.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SampleXYZDataset.java	2004-11-07 15:27:17.000000000 +0100
***************
*** 0 ****
--- 1,144 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * SampleXYZDataset.java
+  * ---------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SampleXYZDataset.java,v 1.9 2004/05/06 08:43:17 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 28-Jan-2003 : Version 1 (DG);
+  * 05-May-2004 : Updated interface to add getX(), getY() and getZ() methods (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.data.xy.AbstractXYZDataset;
+ import org.jfree.data.xy.XYZDataset;
+ 
+ /**
+  * A quick-and-dirty implementation of the {@link XYZDataset interface}.  Hard-coded and not useful
+  * beyond the demo.
+  *
+  */
+ public class SampleXYZDataset extends AbstractXYZDataset implements XYZDataset {
+ 
+     /** The x values. */
+     private double[] xVal = {2.1, 2.375625, 2.375625, 2.232928726, 2.232928726, 1.860415253,
+                              1.840842668, 1.905415253, 2.336029412, 3.8};
+ 
+     /** The y values. */
+     private double[] yVal = {14.168, 11.156, 10.089, 8.884, 8.719, 8.466, 5.489,
+                              4.107, 4.101, 25};
+ 
+     /** The z values. */
+     private double[] zVal = {2.45, 2.791285714, 2.791285714, 2.2125, 2.2125, 2.22, 2.1, 2.22,
+                              1.64875, 4};
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return the series count.
+      */
+     public int getSeriesCount() {
+         return 1;
+     }
+ 
+     /**
+      * Returns the name of a series.
+      *
+      * @param series  the series (zero-based index).
+      *
+      * @return the name of the series.
+      */
+     public String getSeriesName(final int series) {
+         return "Series 1";
+     }
+ 
+     /**
+      * Returns the number of items in a series.
+      *
+      * @param series  the series (zero-based index).
+      *
+      * @return the number of items within the series.
+      */
+     public int getItemCount(final int series) {
+         return this.xVal.length;
+     }
+ 
+     /**
+      * Returns the x-value for an item within a series.
+      * <P>
+      * The implementation is responsible for ensuring that the x-values are
+      * presented in ascending order.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the x-value.
+      */
+     public double getXValue(final int series, final int item) {
+         return this.xVal[item];
+     }
+     public Number getX(final int series, final int item) {
+         return new Double(this.xVal[item]);
+     }
+ 
+     /**
+      * Returns the y-value for an item within a series.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the y-value.
+      */
+     public double getYValue(final int series, final int item) {
+         return this.yVal[item];
+     }
+     public Number getY(final int series, final int item) {
+         return new Double(this.yVal[item]);
+     }
+ 
+     /**
+      * Returns the z-value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the z-value for the specified series and item.
+      */
+     public double getZValue(final int series, final int item) {
+         return this.zVal[item];
+     }
+     public Number getZ(final int series, final int item) {
+         return new Double(this.zVal[item]);
+     }
+     
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SampleYSymbolicDataset.java jfreechart/source/org/jfree/chart/demo/SampleYSymbolicDataset.java
*** jfreechart-orig/source/org/jfree/chart/demo/SampleYSymbolicDataset.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SampleYSymbolicDataset.java	2004-11-07 16:09:14.000000000 +0100
***************
*** 0 ****
--- 1,412 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------------
+  * SampleYSymbolicDataset.java
+  * ---------------------------
+  *
+  * Original Author:  Anthony Boulestreau.
+  * Contributor(s):   -;
+  *
+  *
+  * Changes
+  * -------
+  * 29-Mar-2002 : Version 1 (AB);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 05-May-2004 : Added getX() and getY() methods (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.lang.reflect.Array;
+ import java.util.List;
+ import java.util.Vector;
+ 
+ import org.jfree.data.DomainOrder;
+ import org.jfree.data.general.AbstractSeriesDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.YisSymbolic;
+ 
+ /**
+  * A dataset implementation that provides random data for a symbolic plot demo.  This sample
+  * dataset has numerical x-values, and symbolic y-values.
+  *
+  * @author Anthony Boulestreau
+  */
+ public class SampleYSymbolicDataset extends AbstractSeriesDataset
+                                     implements XYDataset, YisSymbolic {
+ 
+     /** The series count. */
+     private static final int DEFAULT_SERIES_COUNT = 1;
+ 
+     /** The item count. */
+     private static final int DEFAULT_ITEM_COUNT = 50;
+ 
+     /** The series index. */
+     private int serie;
+ 
+     /** The item index. */
+     private int item;
+ 
+     /** The series names. */
+     private String[] serieNames;
+ 
+     /** The x values. */
+     private Double[][] xValues;
+ 
+     /** The y values. */
+     private Integer[][] yValues;
+ 
+     /** The y symbolic values. */
+     private String[] ySymbolicValues;
+ 
+     /** The dataset name. */
+     private String datasetName;
+ 
+     /**
+      * Creates a new sample dataset.
+      *
+      * @param datasetName  the dataset name.
+      * @param xRange  the upper limit of the (random) x-values.
+      * @param tabString  the symbols for the y-values.
+      */
+     public SampleYSymbolicDataset(final String datasetName, 
+                                   final int xRange, 
+                                   final String[] tabString) {
+         this(datasetName, xRange, tabString, DEFAULT_SERIES_COUNT, DEFAULT_ITEM_COUNT, null);
+     }
+ 
+     /**
+      * Creates a new sample dataset.
+      *
+      * @param datasetName  the dataset name.
+      * @param xRange  the upper limit of the (random) x-values.
+      * @param tabString  the symbolic y-values.
+      * @param seriesCount  the number of series to create.
+      * @param itemCount  the number of items to create for each series.
+      * @param serieNames  the series names.
+      */
+     public SampleYSymbolicDataset(final String datasetName,
+                                   final int xRange,
+                                   final String[] tabString,
+                                   final int seriesCount,
+                                   final int itemCount,
+                                   final String[] serieNames) {
+ 
+         this.datasetName = datasetName;
+         this.ySymbolicValues = tabString;
+         this.serie = seriesCount;
+         this.item = itemCount;
+         this.serieNames = serieNames;
+         this.xValues = new Double[seriesCount][itemCount];
+         this.yValues = new Integer[seriesCount][itemCount];
+ 
+         for (int s = 0; s < seriesCount; s++) {
+             for (int i = 0; i < itemCount; i++) {
+                 final double x = Math.random() * xRange;
+                 final double y = Math.random() * tabString.length;
+                 this.xValues[s][i] = new Double(x);
+                 this.yValues[s][i] = new Integer((int) y);
+             }
+         }
+     }
+ 
+     /**
+      * Creates a new sample dataset.
+      *
+      * @param datasetName  the dataset name.
+      * @param xValues  the x values.
+      * @param yValues  the y values.
+      * @param ySymbolicValues  the y symbols
+      * @param seriesCount  the series count.
+      * @param itemCount  the item count.
+      * @param serieNames  the series names.
+      */
+     public SampleYSymbolicDataset(final String datasetName,
+                                   final Double[][] xValues,
+                                   final Integer[][] yValues,
+                                   final String[] ySymbolicValues,
+                                   final int seriesCount,
+                                   final int itemCount,
+                                   final String[] serieNames) {
+ 
+         this.datasetName = datasetName;
+         this.xValues = xValues;
+         this.yValues = yValues;
+         this.ySymbolicValues = ySymbolicValues;
+         this.serie = seriesCount;
+         this.item = itemCount;
+         this.serieNames = serieNames;
+ 
+     }
+ 
+ 
+     /**
+      * Returns the x-value for the specified series and item.  Series are
+      * numbered 0, 1, ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      *
+      * @return the x-value for the specified series and item.
+      */
+     public double getXValue(final int series, final int item) {
+         double result = Double.NaN;
+         Number x = getX(series, item);
+         if (x != null) {
+             result = x.doubleValue();   
+         }
+         return result;   
+     }
+     public Number getX(final int series, final int item) {
+         return this.xValues[series][item];
+     }
+ 
+     /**
+      * Returns the y-value for the specified series and item.  Series are
+      * numbered 0, 1, ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      *
+      * @return the y-value for the specified series and item.
+      */
+     public double getYValue(final int series, final int item) {
+         double result = Double.NaN;
+         Number y = getY(series, item);
+         if (y != null) {
+             result = y.doubleValue();   
+         }
+         return result;   
+     }
+     public Number getY(final int series, final int item) {
+         return this.yValues[series][item];
+     }
+ 
+     /**
+      * Sets the y-value for the specified series and item with the specified
+      * new <CODE>Number</CODE> value.  Series are numbered 0, 1, ...
+      * <P>
+      * This method is used by combineYSymbolicDataset to modify the reference
+      * to the symbolic value ...
+      *
+      * @param series  the index (zero-based) of the series.
+      * @param item  the index (zero-based) of the required item.
+      * @param newValue the value to set.
+      */
+     public void setYValue(final int series, final int item, final Number newValue) {
+         this.yValues[series][item] = (Integer) newValue;
+     }
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return The number of series in the dataset.
+      */
+     public int getSeriesCount() {
+         return this.serie;
+     }
+ 
+     /**
+      * Returns the name of the series.
+      *
+      * @param series  the index (zero-based) of the series.
+      *
+      * @return the name of the series.
+      */
+     public String getSeriesName(final int series) {
+         if (this.serieNames != null) {
+             return this.serieNames[series];
+         }
+         else {
+             return this.datasetName + series;
+         }
+     }
+ 
+     /**
+      * Returns the number of items in the specified series.
+      *
+      * @param series The index (zero-based) of the series.
+      *
+      * @return the number of items in the specified series.
+      */
+     public int getItemCount(final int series) {
+         return this.item;
+     }
+ 
+     /**
+      * Returns the list of symbolic values.
+      *
+      * @return array of symbolic value.
+      */
+     public String[] getYSymbolicValues() {
+         return this.ySymbolicValues;
+     }
+ 
+     /**
+      * Sets the list of symbolic values.
+      *
+      * @param sValues the new list of symbolic value.
+      */
+     public void setYSymbolicValues(final String[] sValues) {
+         this.ySymbolicValues = sValues;
+     }
+ 
+     /**
+      * Returns the symbolic value of the data set specified by
+      * <CODE>series</CODE> and <CODE>item</CODE> parameters.
+      *
+      * @param series value of the serie.
+      * @param item value of the item.
+      *
+      * @return the symbolic value.
+      */
+     public String getYSymbolicValue(final int series, final int item) {
+         final Integer intValue = (Integer) getY(series, item);
+         return getYSymbolicValue(intValue);
+     }
+ 
+     /**
+      * Returns the symbolic value linked with the specified <CODE>Integer</CODE>.
+      *
+      * @param val value of the integer linked with the symbolic value.
+      *
+      * @return the symbolic value.
+      */
+     public String getYSymbolicValue(final Integer val) {
+         return this.ySymbolicValues[val.intValue()];
+     }
+ 
+     /**
+      * This function modify <CODE>dataset1</CODE> and <CODE>dataset1</CODE> in
+      * order that they share the same symbolic value list.
+      * <P>
+      * The sharing symbolic value list is obtained adding the symbolic data
+      * list of the fist data set to the symbolic data list of the second data
+      * set.
+      * <P>
+      * This function is use with the <I>combined plot</I> functions of
+      * JFreeChart.
+      *
+      * @param  dataset1 the first data set to combine.
+      * @param  dataset2 the second data set to combine.
+      *
+      * @return  the shared symbolic array.
+      */
+     public static String[] combineYSymbolicDataset(final YisSymbolic dataset1, 
+                                                    final YisSymbolic dataset2) {
+ 
+         final SampleYSymbolicDataset sDataset1 = (SampleYSymbolicDataset) dataset1;
+         final SampleYSymbolicDataset sDataset2 = (SampleYSymbolicDataset) dataset2;
+         final String[] sDatasetSymbolicValues1 = sDataset1.getYSymbolicValues();
+         final String[] sDatasetSymbolicValues2 = sDataset2.getYSymbolicValues();
+ 
+         //Combine the two list of symbolic value of the two data set
+         final int s1length = sDatasetSymbolicValues1.length;
+         final int s2length = sDatasetSymbolicValues2.length;
+         final List ySymbolicValuesCombined = new Vector();
+         for (int i = 0; i < s1length; i++) {
+             ySymbolicValuesCombined.add(sDatasetSymbolicValues1[i]);
+         }
+         for (int i = 0; i < s2length; i++) {
+             if (!ySymbolicValuesCombined.contains(sDatasetSymbolicValues2[i])) {
+                 ySymbolicValuesCombined.add(sDatasetSymbolicValues2[i]);
+             }
+         }
+ 
+         //Change the Integer reference of the second data set
+         int newIndex;
+         for (int i = 0; i < sDataset2.getSeriesCount(); i++) {
+             for (int j = 0; j < sDataset2.getItemCount(i); j++) {
+                 newIndex =  ySymbolicValuesCombined.indexOf(sDataset2.getYSymbolicValue(i, j));
+                 sDataset2.setYValue(i, j, new Integer(newIndex));
+             }
+         }
+ 
+         //Set the new list of symbolic value on the two data sets
+         final String[] ySymbolicValuesCombinedA = new String[ySymbolicValuesCombined.size()];
+         ySymbolicValuesCombined.toArray(ySymbolicValuesCombinedA);
+         sDataset1.setYSymbolicValues(ySymbolicValuesCombinedA);
+         sDataset2.setYSymbolicValues(ySymbolicValuesCombinedA);
+ 
+         return ySymbolicValuesCombinedA;
+     }
+ 
+     /**
+      * Clone the SampleYSymbolicDataset object
+      *
+      * @return the cloned object.
+      */
+     public Object clone() {
+         final String nDatasetName = new String(this.datasetName);
+         final Double[][] nXValues = (Double[][]) cloneArray(this.xValues);
+         final Integer[][] nYValues = (Integer[][]) cloneArray(this.yValues);
+         final String[] nYSymbolicValues = (String[]) cloneArray(this.ySymbolicValues);
+         final int serie = this.serie;
+         final int item = this.item;
+         final String[] serieNames = (String[]) cloneArray(this.serieNames);
+         return new SampleYSymbolicDataset(nDatasetName, nXValues, nYValues,
+                 nYSymbolicValues, serie, item, serieNames);
+     }
+ 
+     /**
+      * Clones the array.
+      *
+      * @param arr  the array.
+      *
+      * @return an array.
+      */
+     private static Object cloneArray(final Object arr) {
+ 
+         if (arr == null) {
+             return arr;
+         }
+ 
+         final Class cls = arr.getClass();
+         if (!cls.isArray()) {
+             return arr;
+         }
+ 
+         final int length = Array.getLength(arr);
+         final Object[] newarr = (Object[]) Array.newInstance(cls.getComponentType(), length);
+ 
+         Object obj;
+ 
+         for (int i = 0; i < length; i++) {
+             obj = Array.get(arr, i);
+             if (obj.getClass().isArray()) {
+                 newarr[i] = cloneArray(obj);
+             }
+             else {
+                 newarr[i] = obj;
+             }
+         }
+ 
+         return newarr;
+      }
+ 
+     public DomainOrder getDomainOrder() {
+         return DomainOrder.NONE;
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ScatterPlotDemo2.java jfreechart/source/org/jfree/chart/demo/ScatterPlotDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/ScatterPlotDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ScatterPlotDemo2.java	2004-11-07 16:03:48.000000000 +0100
***************
*** 0 ****
--- 1,127 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * ScatterPlotDemo2.java
+  * ---------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ScatterPlotDemo2.java,v 1.11 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 14-Oct-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYDotRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo scatter plot.
+  *
+  */
+ public class ScatterPlotDemo2 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a scatter plot.
+      *
+      * @param title  the frame title.
+      */
+     public ScatterPlotDemo2(final String title) {
+ 
+         super(title);
+         final XYDataset dataset = new SampleXYDataset2();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setVerticalAxisTrace(true);
+         chartPanel.setHorizontalAxisTrace(true);
+         chartPanel.setVerticalZoom(true);
+         chartPanel.setHorizontalZoom(true);
+         setContentPane(chartPanel);
+ 
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Scatter Plot Demo",
+             "X", "Y", dataset,
+             PlotOrientation.HORIZONTAL,
+             true,  // legend
+             false,  // tooltips
+             false  // urls
+         );
+         final XYPlot plot = chart.getXYPlot();
+         plot.setRenderer(new XYDotRenderer());
+         final NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
+         domainAxis.setAutoRangeIncludesZero(false);
+         return chart;
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ScatterPlotDemo2 demo = new ScatterPlotDemo2("Scatter Plot Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ScatterPlotDemo3.java jfreechart/source/org/jfree/chart/demo/ScatterPlotDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/ScatterPlotDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ScatterPlotDemo3.java	2004-11-07 16:03:43.000000000 +0100
***************
*** 0 ****
--- 1,180 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * ScatterPlotDemo3.java
+  * ---------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ScatterPlotDemo3.java,v 1.12 2004/05/11 14:56:17 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 11-May-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Point;
+ import java.awt.geom.Point2D;
+ import java.awt.geom.Rectangle2D;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartMouseEvent;
+ import org.jfree.chart.ChartMouseListener;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo scatter plot with some code showing how to convert between Java2D coordinates and
+  * (x, y) coordinates.
+  */
+ public class ScatterPlotDemo3 extends ApplicationFrame implements ChartMouseListener {
+ 
+     /** The panel used to display the chart. */
+     private ChartPanel chartPanel;
+     
+     /**
+      * A demonstration application showing a scatter plot.
+      *
+      * @param title  the frame title.
+      */
+     public ScatterPlotDemo3(final String title) {
+         super(title);
+         final XYDataset dataset = new SampleXYDataset2();
+         JFreeChart chart = createChart(dataset);
+         chartPanel = new ChartPanel(chart);
+         chartPanel.addChartMouseListener(this);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setVerticalAxisTrace(true);
+         chartPanel.setHorizontalAxisTrace(true);
+         chartPanel.setVerticalZoom(true);
+         chartPanel.setHorizontalZoom(true);
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A dataset.
+      */
+     private JFreeChart createChart(XYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Scatter Plot Demo",
+             "X", "Y", 
+             dataset, 
+             PlotOrientation.VERTICAL,
+             true, 
+             true, 
+             false
+         );
+         final Legend legend = chart.getLegend();
+         if (legend instanceof StandardLegend) {
+             final StandardLegend sl = (StandardLegend) legend;
+             sl.setDisplaySeriesShapes(true);
+         }
+         final NumberAxis domainAxis = (NumberAxis) chart.getXYPlot().getDomainAxis();
+         domainAxis.setAutoRangeIncludesZero(false);
+         return chart;
+     }
+     
+     /**
+      * Callback method for receiving notification of a mouse click on a chart.
+      *
+      * @param event  information about the event.
+      */
+     public void chartMouseClicked(ChartMouseEvent event) {
+         int x = event.getTrigger().getX(); 
+         int y = event.getTrigger().getY();
+         
+         // the following translation takes account of the fact that the chart image may 
+         // have been scaled up or down to fit the panel...
+         Point2D p = chartPanel.translateScreenToJava2D(new Point(x, y));
+         
+         // now convert the Java2D coordinate to axis coordinates...
+         XYPlot plot = chartPanel.getChart().getXYPlot();
+         Rectangle2D dataArea = chartPanel.getChartRenderingInfo().getPlotInfo().getDataArea();
+         double xx = plot.getDomainAxis().java2DToValue(
+             p.getX(), dataArea, plot.getDomainAxisEdge()
+         );
+         double yy = plot.getRangeAxis().java2DToValue(
+             p.getY(), dataArea, plot.getRangeAxisEdge()
+         );
+         
+         // just for fun, lets convert the axis coordinates back to component coordinates...
+         double xxx = plot.getDomainAxis().valueToJava2D(xx, dataArea, plot.getDomainAxisEdge());
+         double yyy = plot.getRangeAxis().valueToJava2D(yy, dataArea, plot.getRangeAxisEdge());
+         
+         Point2D p2 = chartPanel.translateJava2DToScreen(new Point2D.Double(xxx, yyy));
+         System.out.println("Mouse coordinates are (" + x + ", " + y 
+             + "), in data space = (" + xx + ", " + yy + ").");
+         System.out.println("--> (" + p2.getX() + ", " + p2.getY() + ")");
+     }
+ 
+     /**
+      * Callback method for receiving notification of a mouse movement on a chart.
+      *
+      * @param event  information about the event.
+      */
+     public void chartMouseMoved(ChartMouseEvent event) {  
+         // ignore
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final ScatterPlotDemo3 demo = new ScatterPlotDemo3("Scatter Plot Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ScatterPlotDemo4.java jfreechart/source/org/jfree/chart/demo/ScatterPlotDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/ScatterPlotDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ScatterPlotDemo4.java	2004-11-07 16:03:38.000000000 +0100
***************
*** 0 ****
--- 1,117 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * ScatterPlotDemo4.java
+  * ---------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ScatterPlotDemo4.java,v 1.12 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 16-Oct-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYDotRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo scatter plot showing the use of the {@link XYDotRenderer} class.
+  *
+  */
+ public class ScatterPlotDemo4 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a scatter plot.
+      *
+      * @param title  the frame title.
+      */
+     public ScatterPlotDemo4(final String title) {
+ 
+         super(title);
+         final XYDataset data = new SampleXYDataset2();
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Scatter Plot Demo",
+             "X", 
+             "Y", 
+             data, 
+             PlotOrientation.VERTICAL,
+             true, 
+             true, 
+             false
+         );
+         final XYPlot plot = chart.getXYPlot();
+         plot.setRenderer(new XYDotRenderer());
+         plot.setDomainCrosshairVisible(true);
+         plot.setRangeCrosshairVisible(true);
+ 
+         final NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
+         domainAxis.setAutoRangeIncludesZero(false);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ScatterPlotDemo4 demo = new ScatterPlotDemo4("Scatter Plot Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ScatterPlotDemo.java jfreechart/source/org/jfree/chart/demo/ScatterPlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/ScatterPlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ScatterPlotDemo.java	2004-11-07 16:03:51.000000000 +0100
***************
*** 0 ****
--- 1,121 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * ScatterPlotDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ScatterPlotDemo.java,v 1.13 2004/06/03 09:35:25 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 05-Aug-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo scatter plot.
+  */
+ public class ScatterPlotDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a scatter plot.
+      *
+      * @param title  the frame title.
+      */
+     public ScatterPlotDemo(final String title) {
+ 
+         super(title);
+         final XYDataset data = new SampleXYDataset2();
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Scatter Plot Demo",
+             "X", "Y", 
+             data, 
+             PlotOrientation.VERTICAL,
+             true, 
+             true, 
+             false
+         );
+         final Legend legend = chart.getLegend();
+         if (legend instanceof StandardLegend) {
+             final StandardLegend sl = (StandardLegend) legend;
+             sl.setDisplaySeriesShapes(true);
+         }
+         XYPlot plot = (XYPlot) chart.getPlot();
+         plot.setNoDataMessage("NO DATA");
+         final NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
+         domainAxis.setAutoRangeIncludesZero(false);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setVerticalAxisTrace(true);
+         chartPanel.setHorizontalAxisTrace(true);
+         chartPanel.setVerticalZoom(true);
+         chartPanel.setHorizontalZoom(true);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ScatterPlotDemo demo = new ScatterPlotDemo("Scatter Plot Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SecondaryDatasetDemo2.java jfreechart/source/org/jfree/chart/demo/SecondaryDatasetDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/SecondaryDatasetDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SecondaryDatasetDemo2.java	2004-11-07 16:03:29.000000000 +0100
***************
*** 0 ****
--- 1,195 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * SecondaryDatasetDemo2.java
+  * --------------------------
+  * (C) Copyright 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: SecondaryDatasetDemo2.java,v 1.6 2004/04/29 07:54:56 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 30-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.FlowLayout;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.JButton;
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.LineAndShapeRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A demo showing the addition and removal of secondary datasets / renderers.
+  *
+  */
+ public class SecondaryDatasetDemo2 extends ApplicationFrame implements ActionListener {
+ 
+     /** The plot. */
+     private CategoryPlot plot;
+  
+     /** The index of the last dataset added. */
+     private int secondaryDatasetIndex = 0;
+     
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public SecondaryDatasetDemo2(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset1 = createRandomDataset("Series 1");
+         final JFreeChart chart = ChartFactory.createLineChart(
+             "Secondary Dataset Demo 2", "Category", "Value", 
+             dataset1, PlotOrientation.VERTICAL, true, true, false
+         );
+         chart.setBackgroundPaint(Color.white);
+         
+         this.plot = chart.getCategoryPlot();
+         this.plot.setBackgroundPaint(Color.lightGray);
+         this.plot.setDomainGridlinePaint(Color.white);
+         this.plot.setRangeGridlinePaint(Color.white);
+         this.plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 4, 4, 4, 4));
+         
+         final NumberAxis rangeAxis = (NumberAxis) this.plot.getRangeAxis();
+         rangeAxis.setAutoRangeIncludesZero(false);
+         
+         final JPanel content = new JPanel(new BorderLayout());
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         content.add(chartPanel);
+         
+         final JButton button1 = new JButton("Add Dataset");
+         button1.setActionCommand("ADD_DATASET");
+         button1.addActionListener(this);
+         
+         final JButton button2 = new JButton("Remove Dataset");
+         button2.setActionCommand("REMOVE_DATASET");
+         button2.addActionListener(this);
+ 
+         final JPanel buttonPanel = new JPanel(new FlowLayout());
+         buttonPanel.add(button1);
+         buttonPanel.add(button2);
+         
+         content.add(buttonPanel, BorderLayout.SOUTH);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(content);
+ 
+     }
+ 
+     /**
+      * Creates a random dataset.
+      * 
+      * @param name  the series name.
+      * 
+      * @return A random dataset.
+      */
+     private CategoryDataset createRandomDataset(final String name) {
+         final DefaultCategoryDataset result = new DefaultCategoryDataset();
+         double value = 100.0;
+         for (int i = 0; i < 10; i++) {
+             final String key = "T" + i;
+             value = value * (1.0 + Math.random() / 100);
+             result.addValue(value, name, key);
+         }
+         return result;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Handles a click on the button by adding new (random) data.
+      *
+      * @param e  the action event.
+      */
+     public void actionPerformed(final ActionEvent e) {
+        
+         if (e.getActionCommand().equals("ADD_DATASET")) {
+             if (this.secondaryDatasetIndex < 20) {
+                 this.secondaryDatasetIndex++;
+                 this.plot.setDataset(
+                     this.secondaryDatasetIndex, 
+                     createRandomDataset("S" + this.secondaryDatasetIndex)
+                 );
+                 this.plot.setRenderer(
+                     this.secondaryDatasetIndex, new LineAndShapeRenderer(LineAndShapeRenderer.LINES)
+                 );
+             }
+         }
+         else if (e.getActionCommand().equals("REMOVE_DATASET")) {
+             if (this.secondaryDatasetIndex > 0) {
+                 this.plot.setDataset(this.secondaryDatasetIndex, null);
+                 this.plot.setRenderer(this.secondaryDatasetIndex, null);
+                 this.secondaryDatasetIndex--;
+             }
+         }
+         
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final SecondaryDatasetDemo2 demo = new SecondaryDatasetDemo2("Secondary Dataset Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/Second.java jfreechart/source/org/jfree/chart/demo/Second.java
*** jfreechart-orig/source/org/jfree/chart/demo/Second.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/Second.java	2004-11-07 16:03:35.000000000 +0100
***************
*** 0 ****
--- 1,126 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------
+  * Second.java
+  * -----------
+  * (C) Copyright 2002-2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: Second.java,v 1.12 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes (since 24-Apr-2002)
+  * ---------------------------
+  * 24-Apr-2002 : Added standard header (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartFrame;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ 
+ /**
+  * A simple demo.
+  *
+  */
+ public class Second {
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         // create some data...
+         final XYSeries series1 = new XYSeries("Advisory Range");
+         series1.add(new Integer(1200), new Integer(1));
+         series1.add(new Integer(1500), new Integer(1));
+ 
+         final XYSeries series2 = new XYSeries("Normal Range");
+         series2.add(new Integer(2000), new Integer(4));
+         series2.add(new Integer(2300), new Integer(4));
+ 
+         final XYSeries series3 = new XYSeries("Recommended");
+         series3.add(new Integer(2100), new Integer(2));
+ 
+         final XYSeries series4 = new XYSeries("Current");
+         series4.add(new Integer(2400), new Integer(3));
+ 
+         final XYSeriesCollection data = new XYSeriesCollection();
+         data.addSeries(series1);
+         data.addSeries(series2);
+         data.addSeries(series3);
+         data.addSeries(series4);
+ 
+         // create a chart...
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "My Chart", 
+             "Calories", 
+             "Y", 
+             data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         final XYItemRenderer renderer
+             = new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES_AND_LINES, null);
+         final XYPlot plot = (XYPlot) chart.getPlot();
+         plot.setRenderer(renderer);
+         final ValueAxis axis = plot.getRangeAxis();
+         axis.setTickLabelsVisible(false);
+         axis.setRange(0.0, 5.0);
+ 
+         // create and display a frame...
+         final ChartFrame frame = new ChartFrame("Test", chart);
+         frame.pack();
+         frame.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SegmentedHighLowChartDemo.java jfreechart/source/org/jfree/chart/demo/SegmentedHighLowChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/SegmentedHighLowChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SegmentedHighLowChartDemo.java	2004-11-07 16:03:24.000000000 +0100
***************
*** 0 ****
--- 1,193 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------------
+  * SegmentedHighLowChartDemo.java
+  * ------------------------------
+  * (C) Copyright 2003, 2004, by Bill Kelemen and Contributors.
+  *
+  * Original Author:  Bill Kelemen;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: SegmentedHighLowChartDemo.java,v 1.11 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 24-May-2003 : Version 1 (BK);
+  * 12-Nov-2003 : Added roll factor to tick units to improve labelling on date axis (DG);
+  * 
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.SimpleDateFormat;
+ import java.util.Calendar;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickUnit;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.SegmentedTimeline;
+ import org.jfree.chart.axis.TickUnits;
+ import org.jfree.data.xy.DefaultHighLowDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing a daily and intraday segmented high-low-open-close charts.
+  *
+  * @author Bill Kelemen
+  */
+ public class SegmentedHighLowChartDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a high-low-open-close chart using a
+      * segmented or non-segmented axis.
+      *
+      * @param title  the frame title.
+      * @param useSegmentedAxis use a segmented axis for this demo?
+      * @param timelineType Type of timeline to use: 1=Monday through Friday, 2=Intraday
+      */
+     public SegmentedHighLowChartDemo(final String title,
+                                      final boolean useSegmentedAxis,
+                                      final int timelineType) {
+ 
+         super(title);
+ 
+         System.out.println("\nMaking SegmentedHighLowChartDemo(" + title + ")");
+ 
+         // create a Calendar object with today's date at midnight
+         final Calendar cal = Calendar.getInstance();
+         cal.set(Calendar.HOUR_OF_DAY, 0);
+         cal.set(Calendar.MINUTE, 0);
+         cal.set(Calendar.SECOND, 0);
+         cal.set(Calendar.MILLISECOND, 0);
+ 
+         // create a timeline for the demo
+         SegmentedTimeline timeline = null;
+         switch (timelineType) {
+             case 1:
+                 timeline = SegmentedTimeline.newMondayThroughFridayTimeline();
+                 break;
+ 
+             case 2:
+                 timeline = SegmentedTimeline.newFifteenMinuteTimeline();
+ 
+                 final Calendar cal2 = (Calendar) cal.clone();
+                 cal2.add(Calendar.YEAR, 1);
+ 
+                 // add 1 year of baseTimeline's excluded segments (Saturdays and Sundays) as
+                 // exceptions of the intraday timeline
+                 timeline.addBaseTimelineExclusions(cal.getTime().getTime(),
+                     cal2.getTime().getTime());
+                 break;
+ 
+             default:
+                 System.out.println("Invalid timelineType.");
+                 System.exit(1);
+         }
+ 
+ 
+         // create a data set that has data for trading days (Monday through Friday).
+         final DefaultHighLowDataset dataset =
+             DemoDatasetFactory.createSegmentedHighLowDataset(timeline, cal.getTime());
+ 
+         final JFreeChart chart;
+         if (useSegmentedAxis) {
+             chart = ChartFactory.createHighLowChart(
+                 title,
+                 "Time", "Value",
+                 dataset, timeline, true);
+         } 
+         else {
+             chart = ChartFactory.createHighLowChart(
+                 title,
+                 "Time", "Value",
+                 dataset, true);
+         }
+ 
+         final DateAxis axis = (DateAxis) chart.getXYPlot().getDomainAxis();
+         axis.setAutoRange(true);
+         final TickUnits units = new TickUnits();
+         units.add(new DateTickUnit(DateTickUnit.DAY, 1, DateTickUnit.HOUR, 1, 
+                                    new SimpleDateFormat("d-MMM")));
+         units.add(new DateTickUnit(DateTickUnit.DAY, 2, DateTickUnit.HOUR, 1,
+                                    new SimpleDateFormat("d-MMM")));
+         units.add(new DateTickUnit(DateTickUnit.DAY, 7, DateTickUnit.DAY, 1,
+                                    new SimpleDateFormat("d-MMM")));
+         units.add(new DateTickUnit(DateTickUnit.DAY, 15,  DateTickUnit.DAY, 1,
+                                    new SimpleDateFormat("d-MMM")));
+         units.add(new DateTickUnit(DateTickUnit.DAY, 30, DateTickUnit.DAY, 1,
+                                    new SimpleDateFormat("d-MMM")));
+         axis.setStandardTickUnits(units);
+ 
+         final NumberAxis vaxis = (NumberAxis) chart.getXYPlot().getRangeAxis();
+         vaxis.setAutoRangeIncludesZero(false);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+ 
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * COMMERCIAL SUPPORT / JFREECHART DEVELOPER GUIDE                          *
+     // * Please note that commercial support and documentation is available from: *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/support.html                   *
+     // *                                                                          *
+     // * This is not only a great service for developers, but is a VERY IMPORTANT *
+     // * source of funding for the JFreeChart project.  Please support us so that *
+     // * we can continue developing free software.                                *
+     // ****************************************************************************
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ApplicationFrame[][] frame = new ApplicationFrame[2][2];
+         frame[0][0] = new SegmentedHighLowChartDemo("Segmented Daily High-Low-Open-Close Demo", 
+                                                     true, 1);
+         frame[1][0] = new SegmentedHighLowChartDemo("Normal Daily High-Low-Open-Close Demo", 
+                                                     false, 1);
+         frame[0][1] = new SegmentedHighLowChartDemo("Segmented Intraday High-Low-Open-Close Demo", 
+                                                     true, 2);
+         frame[1][1] = new SegmentedHighLowChartDemo("Normal Intraday High-Low-Open-Close Demo", 
+                                                     false, 2);
+         for (int i = 0; i < 2; i++) {
+             for (int j = 0; j < 2; j++) {
+                 frame[i][j].pack();
+                 RefineryUtilities.positionFrameOnScreen(frame[i][j], .15 + .70 * j, .25 + .50 * i);
+                 frame[i][j].setVisible(true);
+             }
+         }
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SerializationTest1.java jfreechart/source/org/jfree/chart/demo/SerializationTest1.java
*** jfreechart-orig/source/org/jfree/chart/demo/SerializationTest1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SerializationTest1.java	2004-11-07 16:03:07.000000000 +0100
***************
*** 0 ****
--- 1,193 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * SerializationTest1.java
+  * -----------------------
+  * (C) Copyright 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited).
+  * Contributor(s):   -;
+  *
+  * $Id: SerializationTest1.java,v 1.5 2004/04/30 11:22:07 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 02-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ import java.io.ByteArrayInputStream;
+ import java.io.ByteArrayOutputStream;
+ import java.io.ObjectInput;
+ import java.io.ObjectInputStream;
+ import java.io.ObjectOutput;
+ import java.io.ObjectOutputStream;
+ 
+ import javax.swing.JButton;
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.time.Millisecond;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * Based on the DynamicDataDemo class, this demo serializes and deserializes the chart
+  * before displaying it - the idea is that this confirms that the serialization process
+  * returns a working chart.
+  *
+  */
+ public class SerializationTest1 extends ApplicationFrame implements ActionListener {
+ 
+     /** The time series data. */
+     private TimeSeries series;
+ 
+     /** The most recent value added. */
+     private double lastValue = 100.0;
+ 
+     /**
+      * Constructs a new demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public SerializationTest1(final String title) {
+ 
+         super(title);
+         this.series = new TimeSeries("Random Data", Millisecond.class);
+         TimeSeriesCollection dataset = new TimeSeriesCollection(this.series);
+         JFreeChart chart = createChart(dataset);
+ 
+         // SERIALIZE - DESERIALIZE for testing purposes
+         JFreeChart deserializedChart = null;
+ 
+         try {
+             final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+             final ObjectOutput out = new ObjectOutputStream(buffer);
+             out.writeObject(chart);
+             out.close();
+             chart = null;
+             dataset = null;
+             this.series = null;
+             System.gc();
+ 
+             final ObjectInput in = new ObjectInputStream(
+                 new ByteArrayInputStream(buffer.toByteArray())
+             );
+             deserializedChart = (JFreeChart) in.readObject();
+             in.close();
+         }
+         catch (Exception e) {
+             e.printStackTrace();
+         }
+         final TimeSeriesCollection c 
+             = (TimeSeriesCollection) deserializedChart.getXYPlot().getDataset();
+         this.series = c.getSeries(0);
+         // FINISHED TEST
+ 
+         final ChartPanel chartPanel = new ChartPanel(deserializedChart);
+         final JButton button = new JButton("Add New Data Item");
+         button.setActionCommand("ADD_DATA");
+         button.addActionListener(this);
+ 
+         final JPanel content = new JPanel(new BorderLayout());
+         content.add(chartPanel);
+         content.add(button, BorderLayout.SOUTH);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(content);
+ 
+     }
+ 
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart result = ChartFactory.createTimeSeriesChart(
+             "Serialization Test 1", 
+             "Time", 
+             "Value",
+             dataset, 
+             true, 
+             true, 
+             false
+         );
+         final XYPlot plot = result.getXYPlot();
+         final ValueAxis axis = plot.getDomainAxis();
+         axis.setAutoRange(true);
+         axis.setFixedAutoRange(60000.0);  // 60 seconds
+         return result;
+     }
+     
+     /**
+      * Handles a click on the button by adding new (random) data.
+      *
+      * @param e  the action event.
+      */
+     public void actionPerformed(final ActionEvent e) {
+         if (e.getActionCommand().equals("ADD_DATA")) {
+             final double factor = 0.90 + 0.2 * Math.random();
+             this.lastValue = this.lastValue * factor;
+             final Millisecond now = new Millisecond();
+             System.out.println("Now = " + now.toString());
+             this.series.add(new Millisecond(), this.lastValue);
+         }
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final SerializationTest1 demo = new SerializationTest1("Serialization Test 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
+ 
+ 
+ 
+ 
+ 
+ 
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SimpleIntervalXYDataset2.java jfreechart/source/org/jfree/chart/demo/SimpleIntervalXYDataset2.java
*** jfreechart-orig/source/org/jfree/chart/demo/SimpleIntervalXYDataset2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SimpleIntervalXYDataset2.java	2004-11-07 16:21:30.000000000 +0100
***************
*** 0 ****
--- 1,224 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------------
+  * SimpleIntervalXYDataset2.java
+  * -----------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SimpleIntervalXYDataset2.java,v 1.9 2004/05/06 08:39:19 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 27-Jun-2003 : Version 1 (DG);
+  * 05-May-2004 : Now extends AbstractIntervalXYDataset (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.data.general.DatasetChangeListener;
+ import org.jfree.data.xy.AbstractIntervalXYDataset;
+ import org.jfree.data.xy.IntervalXYDataset;
+ 
+ /**
+  * A quick and dirty sample dataset.
+  */
+ public class SimpleIntervalXYDataset2 extends AbstractIntervalXYDataset 
+                                       implements IntervalXYDataset {
+ 
+     /** The start values. */
+     private Double[] yStart;
+     
+     /** The end values. */
+     private Double[] yEnd = new Double[3];
+ 
+     /** The x values. */
+     private Double[] xValues = new Double[3];
+ 
+     /**
+      * Creates a new dataset.
+      * 
+      * @param itemCount  the number of items to generate.
+      */
+     public SimpleIntervalXYDataset2(final int itemCount) {
+ 
+         this.xValues = new Double[itemCount];
+         this.yStart = new Double[itemCount];
+         this.yEnd = new Double[itemCount];
+         
+         double base = 100;
+         for (int i = 1; i <= itemCount; i++) {
+             this.xValues[i - 1] = new Double(i);
+             base = base * (1 + (Math.random() / 10 - 0.05));
+             this.yStart[i - 1] = new Double(base);
+             this.yEnd[i - 1] = new Double(this.yStart[i - 1].doubleValue() + Math.random() * 30);
+         }
+     }
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return the number of series in the dataset.
+      */
+     public int getSeriesCount() {
+         return 1;
+     }
+ 
+     /**
+      * Returns the name of a series.
+      *
+      * @param series the series (zero-based index).
+      *
+      * @return the series name.
+      */
+     public String getSeriesName(final int series) {
+         return "Series 1";
+     }
+ 
+     /**
+      * Returns the number of items in a series.
+      *
+      * @param series the series (zero-based index).
+      *
+      * @return the number of items within a series.
+      */
+     public int getItemCount(final int series) {
+         return this.xValues.length;
+     }
+ 
+     /**
+      * Returns the x-value for an item within a series.
+      * <P>
+      * The implementation is responsible for ensuring that the x-values are presented in ascending
+      * order.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return  the x-value for an item within a series.
+      */
+     public double getXValue(final int series, final int item) {
+         return this.xValues[item].doubleValue();
+     }
+     public Number getX(final int series, final int item) {
+         return this.xValues[item];
+     }
+ 
+     /**
+      * Returns the y-value for an item within a series.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the y-value for an item within a series.
+      */
+     public double getYValue(final int series, final int item) {
+         return this.yEnd[item].doubleValue();
+     }
+     public Number getY(final int series, final int item) {
+         return this.yEnd[item];
+     }
+ 
+     /**
+      * Returns the starting X value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item within a series (zero-based index).
+      *
+      * @return the start x value.
+      */
+     public double getStartXValue(final int series, final int item) {
+         return this.xValues[item].doubleValue();
+     }
+     public Number getStartX(final int series, final int item) {
+         return this.xValues[item];
+     }
+ 
+     /**
+      * Returns the ending X value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item within a series (zero-based index).
+      *
+      * @return the end x value.
+      */
+     public double getEndXValue(final int series, final int item) {
+         return this.xValues[item].doubleValue();
+     }
+     public Number getEndX(final int series, final int item) {
+         return this.xValues[item];
+     }
+ 
+     /**
+      * Returns the starting Y value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item within a series (zero-based index).
+      *
+      * @return the start y value.
+      */
+     public double getStartYValue(final int series, final int item) {
+         return this.yStart[item].doubleValue();
+     }
+     public Number getStartY(final int series, final int item) {
+         return this.yStart[item];
+     }
+ 
+     /**
+      * Returns the ending Y value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item within a series (zero-based index).
+      *
+      * @return the end y value.
+      */
+     public double getEndYValue(final int series, final int item) {
+         return this.yEnd[item].doubleValue();
+     }
+     public Number getEndY(final int series, final int item) {
+         return this.yEnd[item];
+     }
+ 
+     /**
+      * Registers an object for notification of changes to the dataset.
+      *
+      * @param listener  the object to register.
+      */
+     public void addChangeListener(final DatasetChangeListener listener) {
+         // ignored
+     }
+ 
+     /**
+      * Deregisters an object for notification of changes to the dataset.
+      *
+      * @param listener  the object to deregister.
+      */
+     public void removeChangeListener(final DatasetChangeListener listener) {
+         // ignored
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SimpleIntervalXYDataset.java jfreechart/source/org/jfree/chart/demo/SimpleIntervalXYDataset.java
*** jfreechart-orig/source/org/jfree/chart/demo/SimpleIntervalXYDataset.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SimpleIntervalXYDataset.java	2004-11-07 16:23:32.000000000 +0100
***************
*** 0 ****
--- 1,222 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------------
+  * SimpleIntervalXYDataset.java
+  * ----------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SimpleIntervalXYDataset.java,v 1.10 2004/05/06 08:38:54 mungady Exp $
+  *
+  * Changes (since 11-Oct-2002)
+  * ---------------------------
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 05-May-2004 : Now extends AbstractIntervalXYDataset (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.data.general.DatasetChangeListener;
+ import org.jfree.data.xy.AbstractIntervalXYDataset;
+ import org.jfree.data.xy.IntervalXYDataset;
+ 
+ /**
+  * A quick and dirty sample dataset.
+  */
+ public class SimpleIntervalXYDataset extends AbstractIntervalXYDataset 
+                                      implements IntervalXYDataset {
+ 
+     /** The start values. */
+     private Double[] xStart = new Double[3];
+     
+     /** The end values. */
+     private Double[] xEnd = new Double[3];
+ 
+     /** The y values. */
+     private Double[] yValues = new Double[3];
+ 
+     /**
+      * Creates a new dataset.
+      */
+     public SimpleIntervalXYDataset() {
+ 
+         this.xStart[0] = new Double(0.0);
+         this.xStart[1] = new Double(2.0);
+         this.xStart[2] = new Double(3.5);
+ 
+         this.xEnd[0] = new Double(2.0);
+         this.xEnd[1] = new Double(3.5);
+         this.xEnd[2] = new Double(4.0);
+ 
+         this.yValues[0] = new Double(3.0);
+         this.yValues[1] = new Double(4.5);
+         this.yValues[2] = new Double(2.5);
+     }
+ 
+     /**
+      * Returns the number of series in the dataset.
+      *
+      * @return the number of series in the dataset.
+      */
+     public int getSeriesCount() {
+         return 1;
+     }
+ 
+     /**
+      * Returns the name of a series.
+      *
+      * @param series the series (zero-based index).
+      *
+      * @return the series name.
+      */
+     public String getSeriesName(final int series) {
+         return "Series 1";
+     }
+ 
+     /**
+      * Returns the number of items in a series.
+      *
+      * @param series the series (zero-based index).
+      *
+      * @return the number of items within a series.
+      */
+     public int getItemCount(final int series) {
+         return 3;
+     }
+ 
+     /**
+      * Returns the x-value for an item within a series.
+      * <P>
+      * The implementation is responsible for ensuring that the x-values are presented in ascending
+      * order.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return  the x-value for an item within a series.
+      */
+     public double getXValue(final int series, final int item) {
+         return this.xStart[item].doubleValue();
+     }
+     public Number getX(final int series, final int item) {
+         return this.xStart[item];
+     }
+ 
+     /**
+      * Returns the y-value for an item within a series.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item (zero-based index).
+      *
+      * @return the y-value for an item within a series.
+      */
+     public double getYValue(final int series, final int item) {
+         return this.yValues[item].doubleValue();
+     }
+     public Number getY(final int series, final int item) {
+         return this.yValues[item];
+     }
+ 
+     /**
+      * Returns the starting X value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item within a series (zero-based index).
+      *
+      * @return the start x value.
+      */
+     public double getStartXValue(final int series, final int item) {
+         return this.xStart[item].doubleValue();
+     }
+     public Number getStartX(final int series, final int item) {
+         return this.xStart[item];
+     }
+ 
+     /**
+      * Returns the ending X value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item within a series (zero-based index).
+      *
+      * @return the end x value.
+      */
+     public double getEndXValue(final int series, final int item) {
+         return this.xEnd[item].doubleValue();
+     }
+     public Number getEndX(final int series, final int item) {
+         return this.xEnd[item];
+     }
+ 
+     /**
+      * Returns the starting Y value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item within a series (zero-based index).
+      *
+      * @return the start y value.
+      */
+     public double getStartYValue(final int series, final int item) {
+         return this.yValues[item].doubleValue();
+     }
+     public Number getStartY(final int series, final int item) {
+         return this.yValues[item];
+     }
+ 
+     /**
+      * Returns the ending Y value for the specified series and item.
+      *
+      * @param series  the series (zero-based index).
+      * @param item  the item within a series (zero-based index).
+      *
+      * @return the end y value.
+      */
+     public double getEndYValue(final int series, final int item) {
+         return this.yValues[item].doubleValue();
+     }
+     public Number getEndY(final int series, final int item) {
+         return this.yValues[item];
+     }
+ 
+     /**
+      * Registers an object for notification of changes to the dataset.
+      *
+      * @param listener  the object to register.
+      */
+     public void addChangeListener(final DatasetChangeListener listener) {
+         // ignored
+     }
+ 
+     /**
+      * Deregisters an object for notification of changes to the dataset.
+      *
+      * @param listener  the object to deregister.
+      */
+     public void removeChangeListener(final DatasetChangeListener listener) {
+         // ignored
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SmallNumberDemo.java jfreechart/source/org/jfree/chart/demo/SmallNumberDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/SmallNumberDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SmallNumberDemo.java	2004-11-07 16:12:10.000000000 +0100
***************
*** 0 ****
--- 1,119 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * SmallNumberDemo.java
+  * --------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SmallNumberDemo.java,v 1.7 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 23-Sep-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.StandardTickUnitSource;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing the use of very small numbers in a dataset.
+  *
+  */
+ public class SmallNumberDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public SmallNumberDemo(final String title) {
+ 
+         super(title);
+         final XYSeries series = new XYSeries("Small Numbers");
+         series.add(1.0E-5, 1.0E-16); 
+         series.add(5.0E-5, 2.0E-12); 
+         series.add(17.3E-5, 5.0E-7); 
+         series.add(21.2E-5, 9.0E-6); 
+         final XYSeriesCollection data = new XYSeriesCollection(series);
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Small Number Demo",
+             "X", 
+             "Y", 
+             data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+         final XYPlot plot = chart.getXYPlot();
+         plot.getDomainAxis().setStandardTickUnits(new StandardTickUnitSource());
+         plot.getRangeAxis().setStandardTickUnits(new StandardTickUnitSource());
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         System.out.println("Min Double: " + Double.MIN_VALUE);
+         final SmallNumberDemo demo = new SmallNumberDemo("Small Number Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StackedAreaChartDemo.java jfreechart/source/org/jfree/chart/demo/StackedAreaChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/StackedAreaChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StackedAreaChartDemo.java	2004-11-07 16:12:06.000000000 +0100
***************
*** 0 ****
--- 1,164 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * StackedAreaChartDemo.java
+  * -------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: StackedAreaChartDemo.java,v 1.23 2004/04/29 16:24:03 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 23-Sep-2002 : Version 1 (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.general.DatasetUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a stacked area chart using data from a
+  * {@link CategoryDataset}.
+  */
+ public class StackedAreaChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StackedAreaChartDemo(final String title) {
+         super(title);
+         CategoryDataset dataset = createDataset();
+         JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     public CategoryDataset createDataset() {
+         final double[][] data = new double[][] {
+             {1.0, 4.0, 3.0, 5.0, 5.0, 7.0, 7.0, 8.0 },
+             {5.0, 7.0, 6.0, 8.0, 4.0, 4.0, 2.0, 1.0 },
+             {4.0, 3.0, 2.0, 3.0, 6.0, 3.0, 4.0, 3.0 }
+         };
+ 
+         final CategoryDataset dataset = DatasetUtilities.createCategoryDataset(
+             "Series ", "Type ", data
+         );
+         return dataset;
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     public JFreeChart createChart(CategoryDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createStackedAreaChart(
+             "Stacked Area Chart",      // chart title
+             "Category",                // domain axis label
+             "Value",                   // range axis label
+             dataset,                   // data
+             PlotOrientation.VERTICAL,  // orientation
+             true,                      // include legend
+             true,
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+ 
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         plot.setForegroundAlpha(0.5f);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+ 
+         // change the auto tick unit selection to integer units only...
+         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
+         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+ 
+         final CategoryItemRenderer renderer = plot.getRenderer();
+         renderer.setItemLabelsVisible(true);
+         
+         return chart;
+    
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final StackedAreaChartDemo demo = new StackedAreaChartDemo("Stacked Area Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StackedBarChart3DDemo.java jfreechart/source/org/jfree/chart/demo/StackedBarChart3DDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/StackedBarChart3DDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StackedBarChart3DDemo.java	2004-11-07 16:12:03.000000000 +0100
***************
*** 0 ****
--- 1,142 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * StackedBarChart3DDemo.java
+  * --------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: StackedBarChart3DDemo.java,v 1.16 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 05-Nov-2002 : Version 1 (DG);
+  * 26-Mar-2004 : Added item labels (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.LegendRenderingOrder;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.labels.ItemLabelAnchor;
+ import org.jfree.chart.labels.ItemLabelPosition;
+ import org.jfree.chart.labels.StandardCategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * A simple demonstration application showing how to create a stacked 3D bar chart
+  * using data from a {@link CategoryDataset}.
+  *
+  */
+ public class StackedBarChart3DDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StackedBarChart3DDemo(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = DemoDatasetFactory.createCategoryDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createStackedBarChart3D(
+             "Stacked Bar Chart 3D Demo",  // chart title
+             "Category",                   // domain axis label
+             "Value",                      // range axis label
+             dataset,                      // data
+             PlotOrientation.HORIZONTAL,   // the plot orientation
+             true,                         // include legend
+             true,                         // tooltips
+             false                         // urls
+         );
+         final StandardLegend legend = (StandardLegend) chart.getLegend();
+         legend.setRenderingOrder(LegendRenderingOrder.REVERSE);
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         final CategoryItemRenderer renderer = plot.getRenderer();
+         renderer.setLabelGenerator(new StandardCategoryLabelGenerator());
+         renderer.setItemLabelsVisible(true);
+         renderer.setPositiveItemLabelPosition(
+             new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER)
+         );
+         renderer.setNegativeItemLabelPosition(
+             new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER)
+         );
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final StackedBarChart3DDemo demo = new StackedBarChart3DDemo("Stacked Bar Chart 3D Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StackedBarChartDemo1.java jfreechart/source/org/jfree/chart/demo/StackedBarChartDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/StackedBarChartDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StackedBarChartDemo1.java	2004-11-07 16:11:58.000000000 +0100
***************
*** 0 ****
--- 1,131 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * StackedBarChartDemo1.java
+  * -------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: StackedBarChartDemo1.java,v 1.11 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 06-Nov-2002 : Version 1 (DG);
+  * 13-May-2003 : Renamed StackedVerticalBarChartDemo --> StackedBarChartDemo1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a stacked bar chart
+  * using data from a {@link CategoryDataset}.
+  *
+  */
+ public class StackedBarChartDemo1 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StackedBarChartDemo1(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         return DemoDatasetFactory.createCategoryDataset();
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset for the chart.
+      * 
+      * @return a sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createStackedBarChart(
+             "Stacked Bar Chart Demo 1",  // chart title
+             "Category",                  // domain axis label
+             "Value",                     // range axis label
+             dataset,                     // data
+             PlotOrientation.VERTICAL,    // the plot orientation
+             true,                        // legend
+             true,                        // tooltips
+             false                        // urls
+         );
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final StackedBarChartDemo1 demo = new StackedBarChartDemo1("Stacked Bar Chart Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StackedBarChartDemo2.java jfreechart/source/org/jfree/chart/demo/StackedBarChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/StackedBarChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StackedBarChartDemo2.java	2004-11-07 16:11:53.000000000 +0100
***************
*** 0 ****
--- 1,139 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * StackedBarChartDemo2.java
+  * -------------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: StackedBarChartDemo2.java,v 1.11 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 07-Nov-2002 : Version 1 (DG);
+  * 13-May-2003 : Renamed StackedHorizontalBarChartDemo --> StackedBarChartDemo2 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.StackedBarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a stacked bar chart
+  * using data from a {@link CategoryDataset}.  This demo also has item labels displayed.
+  *
+  */
+ public class StackedBarChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StackedBarChartDemo2(final String title) {
+ 
+         super(title);
+         
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         return DemoDatasetFactory.createCategoryDataset();
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createStackedBarChart(
+             "Stacked Bar Chart Demo 2",
+             "Category",                  // domain axis label
+             "Value",                     // range axis label
+             dataset,                     // data
+             PlotOrientation.HORIZONTAL,  // the plot orientation
+             true,                        // include legend
+             true,                        // tooltips
+             false                        // urls
+         );
+ 
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         final StackedBarRenderer renderer = (StackedBarRenderer) plot.getRenderer();
+         renderer.setItemLabelsVisible(true);
+         
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final StackedBarChartDemo2 demo = new StackedBarChartDemo2("Stacked Bar Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StackedBarChartDemo3.java jfreechart/source/org/jfree/chart/demo/StackedBarChartDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/StackedBarChartDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StackedBarChartDemo3.java	2004-11-07 16:11:49.000000000 +0100
***************
*** 0 ****
--- 1,142 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * StackedBarChartDemo3.java
+  * -------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: StackedBarChartDemo3.java,v 1.9 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 27-Nov-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a stacked bar chart
+  * using data from a {@link CategoryDataset}.
+  *
+  */
+ public class StackedBarChartDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StackedBarChartDemo3(final String title) {
+ 
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         return DemoDatasetFactory.createCategoryDataset();
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset for the chart.
+      * 
+      * @return a sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createStackedBarChart(
+             "Stacked Bar Chart Demo 3",  // chart title
+             "Category",                  // domain axis label
+             "Value",                     // range axis label
+             dataset,                     // data
+             PlotOrientation.VERTICAL,    // the plot orientation
+             true,                        // legend
+             false,                       // tooltips
+             false                        // urls
+         );
+         final CategoryPlot plot = chart.getCategoryPlot();
+         final CategoryItemRenderer renderer = new ExtendedStackedBarRenderer();
+         renderer.setToolTipGenerator(new StandardCategoryToolTipGenerator());
+         plot.setRenderer(renderer);
+         
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setLowerMargin(0.15);
+         rangeAxis.setUpperMargin(0.15);
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final StackedBarChartDemo3 demo = new StackedBarChartDemo3("Stacked Bar Chart Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StackedBarChartDemo4.java jfreechart/source/org/jfree/chart/demo/StackedBarChartDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/StackedBarChartDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StackedBarChartDemo4.java	2004-11-07 16:11:44.000000000 +0100
***************
*** 0 ****
--- 1,258 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * StackedBarChartDemo4.java
+  * -------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: StackedBarChartDemo4.java,v 1.6 2004/05/12 16:01:58 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 29-Apr-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ import java.awt.Paint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.LegendItem;
+ import org.jfree.chart.LegendItemCollection;
+ import org.jfree.chart.axis.SubCategoryAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
+ import org.jfree.data.KeyToGroupMap;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.GradientPaintTransformType;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.StandardGradientPaintTransformer;
+ 
+ /**
+  * A simple demonstration application showing how to create a stacked bar chart
+  * using data from a {@link CategoryDataset}.
+  */
+ public class StackedBarChartDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StackedBarChartDemo4(final String title) {
+         super(title);
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(590, 350));
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         DefaultCategoryDataset result = new DefaultCategoryDataset();
+ 
+         result.addValue(20.3, "Product 1 (US)", "Jan 04");
+         result.addValue(27.2, "Product 1 (US)", "Feb 04");
+         result.addValue(19.7, "Product 1 (US)", "Mar 04");
+         result.addValue(19.4, "Product 1 (Europe)", "Jan 04");
+         result.addValue(10.9, "Product 1 (Europe)", "Feb 04");
+         result.addValue(18.4, "Product 1 (Europe)", "Mar 04");
+         result.addValue(16.5, "Product 1 (Asia)", "Jan 04");
+         result.addValue(15.9, "Product 1 (Asia)", "Feb 04");
+         result.addValue(16.1, "Product 1 (Asia)", "Mar 04");
+         result.addValue(13.2, "Product 1 (Middle East)", "Jan 04");
+         result.addValue(14.4, "Product 1 (Middle East)", "Feb 04");
+         result.addValue(13.7, "Product 1 (Middle East)", "Mar 04");
+ 
+         result.addValue(23.3, "Product 2 (US)", "Jan 04");
+         result.addValue(16.2, "Product 2 (US)", "Feb 04");
+         result.addValue(28.7, "Product 2 (US)", "Mar 04");
+         result.addValue(12.7, "Product 2 (Europe)", "Jan 04");
+         result.addValue(17.9, "Product 2 (Europe)", "Feb 04");
+         result.addValue(12.6, "Product 2 (Europe)", "Mar 04");
+         result.addValue(15.4, "Product 2 (Asia)", "Jan 04");
+         result.addValue(21.0, "Product 2 (Asia)", "Feb 04");
+         result.addValue(11.1, "Product 2 (Asia)", "Mar 04");
+         result.addValue(23.8, "Product 2 (Middle East)", "Jan 04");
+         result.addValue(23.4, "Product 2 (Middle East)", "Feb 04");
+         result.addValue(19.3, "Product 2 (Middle East)", "Mar 04");
+ 
+         result.addValue(11.9, "Product 3 (US)", "Jan 04");
+         result.addValue(31.0, "Product 3 (US)", "Feb 04");
+         result.addValue(22.7, "Product 3 (US)", "Mar 04");
+         result.addValue(15.3, "Product 3 (Europe)", "Jan 04");
+         result.addValue(14.4, "Product 3 (Europe)", "Feb 04");
+         result.addValue(25.3, "Product 3 (Europe)", "Mar 04");
+         result.addValue(23.9, "Product 3 (Asia)", "Jan 04");
+         result.addValue(19.0, "Product 3 (Asia)", "Feb 04");
+         result.addValue(10.1, "Product 3 (Asia)", "Mar 04");
+         result.addValue(13.2, "Product 3 (Middle East)", "Jan 04");
+         result.addValue(15.5, "Product 3 (Middle East)", "Feb 04");
+         result.addValue(10.1, "Product 3 (Middle East)", "Mar 04");
+         
+         return result;
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset for the chart.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createStackedBarChart(
+             "Stacked Bar Chart Demo 4",  // chart title
+             "Category",                  // domain axis label
+             "Value",                     // range axis label
+             dataset,                     // data
+             PlotOrientation.VERTICAL,    // the plot orientation
+             true,                        // legend
+             true,                        // tooltips
+             false                        // urls
+         );
+         
+         GroupedStackedBarRenderer renderer = new GroupedStackedBarRenderer();
+         KeyToGroupMap map = new KeyToGroupMap("G1");
+         map.mapKeyToGroup("Product 1 (US)", "G1");
+         map.mapKeyToGroup("Product 1 (Europe)", "G1");
+         map.mapKeyToGroup("Product 1 (Asia)", "G1");
+         map.mapKeyToGroup("Product 1 (Middle East)", "G1");
+         map.mapKeyToGroup("Product 2 (US)", "G2");
+         map.mapKeyToGroup("Product 2 (Europe)", "G2");
+         map.mapKeyToGroup("Product 2 (Asia)", "G2");
+         map.mapKeyToGroup("Product 2 (Middle East)", "G2");
+         map.mapKeyToGroup("Product 3 (US)", "G3");
+         map.mapKeyToGroup("Product 3 (Europe)", "G3");
+         map.mapKeyToGroup("Product 3 (Asia)", "G3");
+         map.mapKeyToGroup("Product 3 (Middle East)", "G3");
+         renderer.setSeriesToGroupMap(map); 
+         
+         renderer.setItemMargin(0.0);
+         Paint p1 = new GradientPaint(
+             0.0f, 0.0f, new Color(0x22, 0x22, 0xFF), 0.0f, 0.0f, new Color(0x88, 0x88, 0xFF)
+         );
+         renderer.setSeriesPaint(0, p1);
+         renderer.setSeriesPaint(4, p1);
+         renderer.setSeriesPaint(8, p1);
+          
+         Paint p2 = new GradientPaint(
+             0.0f, 0.0f, new Color(0x22, 0xFF, 0x22), 0.0f, 0.0f, new Color(0x88, 0xFF, 0x88)
+         );
+         renderer.setSeriesPaint(1, p2); 
+         renderer.setSeriesPaint(5, p2); 
+         renderer.setSeriesPaint(9, p2); 
+         
+         Paint p3 = new GradientPaint(
+             0.0f, 0.0f, new Color(0xFF, 0x22, 0x22), 0.0f, 0.0f, new Color(0xFF, 0x88, 0x88)
+         );
+         renderer.setSeriesPaint(2, p3);
+         renderer.setSeriesPaint(6, p3);
+         renderer.setSeriesPaint(10, p3);
+             
+         Paint p4 = new GradientPaint(
+             0.0f, 0.0f, new Color(0xFF, 0xFF, 0x22), 0.0f, 0.0f, new Color(0xFF, 0xFF, 0x88)
+         );
+         renderer.setSeriesPaint(3, p4);
+         renderer.setSeriesPaint(7, p4);
+         renderer.setSeriesPaint(11, p4);
+         renderer.setGradientPaintTransformer(
+             new StandardGradientPaintTransformer(GradientPaintTransformType.HORIZONTAL)
+         );
+         
+         SubCategoryAxis domainAxis = new SubCategoryAxis("Product / Month");
+         domainAxis.setCategoryMargin(0.05);
+         domainAxis.addSubCategory("Product 1");
+         domainAxis.addSubCategory("Product 2");
+         domainAxis.addSubCategory("Product 3");
+         
+         CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         plot.setDomainAxis(domainAxis);
+         //plot.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);
+         plot.setRenderer(renderer);
+         plot.setFixedLegendItems(createLegendItems());
+         return chart;
+         
+     }
+ 
+     /**
+      * Creates the legend items for the chart.  In this case, we set them manually because we
+      * only want legend items for a subset of the data series.
+      * 
+      * @return The legend items.
+      */
+     private LegendItemCollection createLegendItems() {
+         LegendItemCollection result = new LegendItemCollection();
+         LegendItem item1 = new LegendItem("US", new Color(0x22, 0x22, 0xFF));
+         LegendItem item2 = new LegendItem("Europe", new Color(0x22, 0xFF, 0x22));
+         LegendItem item3 = new LegendItem("Asia", new Color(0xFF, 0x22, 0x22));
+         LegendItem item4 = new LegendItem("Middle East", new Color(0xFF, 0xFF, 0x22));
+         result.add(item1);
+         result.add(item2);
+         result.add(item3);
+         result.add(item4);
+         return result;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final StackedBarChartDemo4 demo = new StackedBarChartDemo4("Stacked Bar Chart Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StackedXYAreaChartDemo2.java jfreechart/source/org/jfree/chart/demo/StackedXYAreaChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/StackedXYAreaChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StackedXYAreaChartDemo2.java	2004-11-07 16:11:35.000000000 +0100
***************
*** 0 ****
--- 1,147 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------------
+  * StackedXYAreaChartDemo2.java
+  * ----------------------------
+  * (C) Copyright 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: StackedXYAreaChartDemo2.java,v 1.5 2004/04/30 07:19:50 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 28-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.xy.DefaultTableXYDataset;
+ import org.jfree.data.xy.TableXYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * This demo shows the creation of a stacked XY area chart.  I created this demo while 
+  * investigating bug report 882890.
+  */
+ public class StackedXYAreaChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StackedXYAreaChartDemo2(final String title) {
+         super(title);
+         final TableXYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private TableXYDataset createDataset() {
+         
+         final DefaultTableXYDataset dataset = new DefaultTableXYDataset();
+         
+         final XYSeries s1 = new XYSeries("Series 1", true, false);
+         s1.add(5.0, 5.0);
+         s1.add(10.0, 15.5);
+         s1.add(15.0, 9.5);
+         s1.add(20.0, 7.5);
+         dataset.addSeries(s1);
+         
+         final XYSeries s2 = new XYSeries("Series 2", true, false);
+         s2.add(5.0, 5.0);
+         s2.add(10.0, 15.5);
+         s2.add(15.0, 9.5);
+         s2.add(20.0, 3.5);
+         dataset.addSeries(s2);
+         
+         return dataset;
+         
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset for the chart.
+      * 
+      * @return a sample chart.
+      */
+     private JFreeChart createChart(final TableXYDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createStackedXYAreaChart(
+             "Stacked XY Area Chart Demo 2",  // chart title
+             "Category",                      // domain axis label
+             "Value",                         // range axis label
+             dataset,                         // data
+             PlotOrientation.VERTICAL,        // the plot orientation
+             true,                            // legend
+             true,                            // tooltips
+             false                            // urls
+         );
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final StackedXYAreaChartDemo2 demo = new StackedXYAreaChartDemo2(
+             "Stacked XY Area Chart Demo 2"
+         );
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StackedXYAreaChartDemo.java jfreechart/source/org/jfree/chart/demo/StackedXYAreaChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/StackedXYAreaChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StackedXYAreaChartDemo.java	2004-11-07 16:11:40.000000000 +0100
***************
*** 0 ****
--- 1,210 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------------
+  * StackedXYAreaChartDemo.java
+  * ---------------------------
+  * (C) Copyright 2003, 2004, by Richard Atkinson.
+  *
+  * Original Author:  Richard Atkinson;
+  * Contributor(s):   -;
+  *
+  * $Id: StackedXYAreaChartDemo.java,v 1.10 2004/05/11 14:56:17 mungady Exp $
+  *
+  * Changes:
+  * --------
+  * 27-Jul-2003 : Initial version (RA);
+  * 22-Sep-2003 : Updated to use new DefaultTableXYDataset (RA);
+  * 28-Jan-2003 : Renamed StackedAreaXYChartDemo --> StackedXYAreaChartDemo for consistency (DG);
+  * 
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.geom.Ellipse2D;
+ import java.text.NumberFormat;
+ import java.text.ParseException;
+ import java.text.SimpleDateFormat;
+ import java.util.Locale;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
+ import org.jfree.chart.renderer.xy.XYAreaRenderer;
+ import org.jfree.data.xy.DefaultTableXYDataset;
+ import org.jfree.data.xy.TableXYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a
+  * stacked XY area chart.
+  *
+  */
+ public class StackedXYAreaChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StackedXYAreaChartDemo(final String title) {
+ 
+         super(title);
+ 
+         final SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy", Locale.UK);
+         final XYSeries series1 = new XYSeries("Series 1", true, false);
+         final XYSeries series2 = new XYSeries("Series 2", true, false);
+         final XYSeries series3 = new XYSeries("Series 3", true, false);
+         try {
+             series1.add(sdf.parse("03-Jul-2003").getTime(), 115);
+             series1.add(sdf.parse("04-Jul-2003").getTime(), 120);
+             series1.add(sdf.parse("07-Jul-2003").getTime(), 125);
+             series1.add(sdf.parse("08-Jul-2003").getTime(), 160);
+             series1.add(sdf.parse("09-Jul-2003").getTime(), 175);
+             series1.add(sdf.parse("10-Jul-2003").getTime(), 140);
+             series1.add(sdf.parse("11-Jul-2003").getTime(), 145);
+             series1.add(sdf.parse("14-Jul-2003").getTime(), 150);
+             series1.add(sdf.parse("15-Jul-2003").getTime(), 155);
+             series1.add(sdf.parse("16-Jul-2003").getTime(), 160);
+             series1.add(sdf.parse("17-Jul-2003").getTime(), 165);
+             series1.add(sdf.parse("18-Jul-2003").getTime(), 170);
+ 
+             series2.add(sdf.parse("30-Jun-2003").getTime(), 50);
+             series2.add(sdf.parse("01-Jul-2003").getTime(), 60);
+             series2.add(sdf.parse("02-Jul-2003").getTime(), 70);
+             series2.add(sdf.parse("03-Jul-2003").getTime(), 80);
+             series2.add(sdf.parse("04-Jul-2003").getTime(), 90);
+             series2.add(sdf.parse("07-Jul-2003").getTime(), 100);
+             series2.add(sdf.parse("08-Jul-2003").getTime(), 110);
+             series2.add(sdf.parse("09-Jul-2003").getTime(), 120);
+             series2.add(sdf.parse("10-Jul-2003").getTime(), 130);
+             series2.add(sdf.parse("11-Jul-2003").getTime(), 140);
+             series2.add(sdf.parse("14-Jul-2003").getTime(), 150);
+             series2.add(sdf.parse("15-Jul-2003").getTime(), 160);
+             series2.add(sdf.parse("16-Jul-2003").getTime(), 170);
+             series2.add(sdf.parse("17-Jul-2003").getTime(), 180);
+             series2.add(sdf.parse("18-Jul-2003").getTime(), 190);
+ 
+             series3.add(sdf.parse("30-Jun-2003").getTime(), 100);
+             series3.add(sdf.parse("01-Jul-2003").getTime(), 120);
+             series3.add(sdf.parse("02-Jul-2003").getTime(), 110);
+             series3.add(sdf.parse("03-Jul-2003").getTime(), 120);
+             series3.add(sdf.parse("04-Jul-2003").getTime(), 130);
+             series3.add(sdf.parse("07-Jul-2003").getTime(), 135);
+             series3.add(sdf.parse("08-Jul-2003").getTime(), 140);
+             series3.add(sdf.parse("09-Jul-2003").getTime(), 155);
+             series3.add(sdf.parse("10-Jul-2003").getTime(), 130);
+             series3.add(sdf.parse("11-Jul-2003").getTime(), 135);
+             series3.add(sdf.parse("14-Jul-2003").getTime(), 140);
+             series3.add(sdf.parse("15-Jul-2003").getTime(), 165);
+             series3.add(sdf.parse("16-Jul-2003").getTime(), 170);
+             series3.add(sdf.parse("17-Jul-2003").getTime(), 165);
+             series3.add(sdf.parse("18-Jul-2003").getTime(), 140);
+         } 
+         catch (ParseException e) {
+             //  Not likely, given that the dates are hard-coded
+             e.printStackTrace();
+         }
+         final DefaultTableXYDataset dataset = new DefaultTableXYDataset();
+         dataset.addSeries(series1);
+         dataset.addSeries(series2);
+         dataset.addSeries(series3);
+ 
+         final JFreeChart chart = createChart(dataset);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      *
+      * @param dataset  the dataset.
+      *
+      * @return A chart.
+      */
+     private JFreeChart createChart(final TableXYDataset dataset) {
+ 
+         final StandardXYToolTipGenerator toolTipGenerator = new StandardXYToolTipGenerator(
+             StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+             new SimpleDateFormat("dd-MMM-yyyy", Locale.UK), NumberFormat.getInstance()
+         );
+         final DateAxis xAxis = new DateAxis("Domain (X)");
+         xAxis.setLowerMargin(0.0);
+         xAxis.setUpperMargin(0.0);
+ 
+         final NumberAxis yAxis = new NumberAxis("Range (Y)");
+         yAxis.setAutoRangeIncludesZero(true);
+         final StackedXYAreaRenderer renderer = new StackedXYAreaRenderer(
+             XYAreaRenderer.AREA_AND_SHAPES, toolTipGenerator, null
+         );
+         renderer.setOutline(true);
+         renderer.setSeriesPaint(0, new Color(255, 255, 206));
+         renderer.setSeriesPaint(1, new Color(206, 230, 255));
+         renderer.setSeriesPaint(2, new Color(255, 230, 230));
+         renderer.setShapePaint(Color.gray);
+         renderer.setShapeStroke(new BasicStroke(0.5f));
+         renderer.setShape(new Ellipse2D.Double(-3, -3, 6, 6));
+         final XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
+ 
+         final JFreeChart chart = new JFreeChart(null, JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+ 
+         return chart;
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final StackedXYAreaChartDemo demo = new StackedXYAreaChartDemo(
+             "Stacked Area XY Chart Demo"
+         );
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/StatisticalBarChartDemo.java jfreechart/source/org/jfree/chart/demo/StatisticalBarChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/StatisticalBarChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/StatisticalBarChartDemo.java	2004-11-07 16:11:29.000000000 +0100
***************
*** 0 ****
--- 1,153 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------------
+  * StatisticalBarChartDemo.java
+  * ----------------------------
+  * (C) Copyright 2002-2004, by Pascal Collet and Contributors.
+  *
+  * Original Author:  Pascal Collet;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: StatisticalBarChartDemo.java,v 1.15 2004/05/07 15:51:37 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 21-Aug-2002 : Version 1, contributed by Pascal Collet (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 05-Feb-2003 : Updated for documentation (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.chart.renderer.category.StatisticalBarRenderer;
+ import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
+ import org.jfree.data.statistics.StatisticalCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * Demonstration of the statistical bar graph.
+  *
+  * @author Pascal Collet
+  */
+ public class StatisticalBarChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public StatisticalBarChartDemo(final String title) {
+ 
+         super(title);
+         final StatisticalCategoryDataset dataset = createDataset();
+ 
+         final CategoryAxis xAxis = new CategoryAxis("Type");
+         xAxis.setLowerMargin(0.01d); // percentage of space before first bar
+         xAxis.setUpperMargin(0.01d); // percentage of space after last bar
+         xAxis.setCategoryMargin(0.05d); // percentage of space between categories
+         final ValueAxis yAxis = new NumberAxis("Value");
+ 
+         // define the plot
+         final CategoryItemRenderer renderer = new StatisticalBarRenderer();
+         final CategoryPlot plot = new CategoryPlot(dataset, xAxis, yAxis, renderer);
+ 
+         final JFreeChart chart = new JFreeChart("Statistical Bar Chart Demo",
+                                           new Font("Helvetica", Font.BOLD, 14),
+                                           plot,
+                                           true);
+         //chart.setBackgroundPaint(Color.white);
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private StatisticalCategoryDataset createDataset() {
+ 
+         final DefaultStatisticalCategoryDataset result = new DefaultStatisticalCategoryDataset();
+ 
+         result.add(32.5, 17.9, "Series 1", "Type 1");
+         result.add(27.8, 11.4, "Series 1", "Type 2");
+         result.add(29.3, 14.4, "Series 1", "Type 3");
+         result.add(37.9, 10.3, "Series 1", "Type 4");
+ 
+         result.add(22.9,  7.9, "Series 2", "Type 1");
+         result.add(21.8, 18.4, "Series 2", "Type 2");
+         result.add(19.3, 12.4, "Series 2", "Type 3");
+         result.add(30.3, 20.7, "Series 2", "Type 4");
+ 
+         result.add(12.5, 10.9, "Series 3", "Type 1");
+         result.add(24.8,  7.4, "Series 3", "Type 2");
+         result.add(19.3, 13.4, "Series 3", "Type 3");
+         result.add(17.1, 10.6, "Series 3", "Type 4");
+ 
+         return result;
+ 
+     }
+ 
+     /**
+      * For testing from the command line.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final StatisticalBarChartDemo demo = new StatisticalBarChartDemo(
+             "Statistical Bar Chart Demo"
+         );
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SurveyResultsDemo2.java jfreechart/source/org/jfree/chart/demo/SurveyResultsDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/SurveyResultsDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SurveyResultsDemo2.java	2004-11-07 16:24:58.000000000 +0100
***************
*** 0 ****
--- 1,187 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * SurveyResultsDemo2.java
+  * -----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SurveyResultsDemo2.java,v 1.14 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 31-Oct-2003 : Version 1 (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.ExtendedCategoryAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.ItemLabelAnchor;
+ import org.jfree.chart.labels.ItemLabelPosition;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.HorizontalAlignment;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * A vertical bar chart.
+  * 
+  */
+ public class SurveyResultsDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public SurveyResultsDemo2(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+  
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(300, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(1.32, "Results", "Sm.");
+         dataset.addValue(0.40, "Results", "Med.");
+         dataset.addValue(2.62, "Results", "Lg.");
+         dataset.addValue(1.44, "Results", "All");
+         return dataset;
+ 
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createBarChart(
+             null,                         // chart title
+             null,                         // domain axis label
+             null,                         // range axis label
+             dataset,                      // data
+             PlotOrientation.VERTICAL,     // orientation
+             false,                        // include legend
+             true,
+             false
+         );
+         
+         chart.setBackgroundPaint(Color.white);
+         chart.getPlot().setOutlinePaint(null);
+         final TextTitle title = new TextTitle("Figure 8.5 - Case studies are available");
+         title.setHorizontalAlignment(HorizontalAlignment.LEFT);
+         title.setBackgroundPaint(Color.red);
+         title.setPaint(Color.white);
+         
+         chart.setTitle(title);
+         final CategoryPlot plot = chart.getCategoryPlot();
+         
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setRange(0.0, 5.0);
+         rangeAxis.setVisible(false);
+         
+         final ExtendedCategoryAxis domainAxis = new ExtendedCategoryAxis(null);
+         domainAxis.setTickLabelFont(new Font("SansSerif", Font.BOLD, 12));
+         domainAxis.setCategoryMargin(0.30);        
+         domainAxis.addSubLabel("Sm.", "(10)");
+         domainAxis.addSubLabel("Med.", "(10)");
+         domainAxis.addSubLabel("Lg.", "(10)");
+         domainAxis.addSubLabel("All", "(10)");
+         plot.setDomainAxis(domainAxis);
+         
+         final BarRenderer renderer = (BarRenderer) plot.getRenderer();
+         renderer.setSeriesPaint(0, new Color(0x9C, 0xA4, 0x4A));
+         renderer.setBaseOutlineStroke(null);
+         
+         renderer.setItemLabelsVisible(true);
+         renderer.setItemLabelFont(new Font("SansSerif", Font.PLAIN, 18));
+         final ItemLabelPosition position = new ItemLabelPosition(
+             ItemLabelAnchor.INSIDE12, TextAnchor.TOP_CENTER  
+         );
+         renderer.setPositiveItemLabelPosition(position);
+         renderer.setPositiveItemLabelPositionFallback(new ItemLabelPosition());
+         
+         return chart;
+        
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final SurveyResultsDemo2 demo = new SurveyResultsDemo2("Survey Results Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SurveyResultsDemo3.java jfreechart/source/org/jfree/chart/demo/SurveyResultsDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/SurveyResultsDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SurveyResultsDemo3.java	2004-11-07 16:24:54.000000000 +0100
***************
*** 0 ****
--- 1,202 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * SurveyResultsDemo3.java
+  * -----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SurveyResultsDemo3.java,v 1.17 2004/05/10 16:45:24 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 31-Oct-2003 : Version 1 (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.text.DecimalFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryLabelPosition;
+ import org.jfree.chart.axis.CategoryLabelPositions;
+ import org.jfree.chart.axis.ExtendedCategoryAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.ItemLabelAnchor;
+ import org.jfree.chart.labels.ItemLabelPosition;
+ import org.jfree.chart.labels.StandardCategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.text.TextBlockAnchor;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.HorizontalAlignment;
+ import org.jfree.ui.RectangleAnchor;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * A chart showing...
+  * 
+  */
+ public class SurveyResultsDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public SurveyResultsDemo3(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+  
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(300, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(2.61, "Results", "Sm.");
+         dataset.addValue(2.70, "Results", "Med.");
+         dataset.addValue(2.90, "Results", "Lg.");
+         dataset.addValue(2.74, "Results", "All");
+         return dataset;
+ 
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createBarChart(
+             null,                         // chart title
+             null,                         // domain axis label
+             null,                         // range axis label
+             dataset,                      // data
+             PlotOrientation.HORIZONTAL,   // orientation
+             false,                        // include legend
+             true,
+             false
+         );
+         
+         chart.setBackgroundPaint(Color.white);
+         chart.getPlot().setOutlinePaint(null);
+         final TextTitle title = new TextTitle("Figure 6 | Overall SEO Rating");
+         title.setHorizontalAlignment(HorizontalAlignment.LEFT);
+         title.setBackgroundPaint(Color.red);
+         title.setPaint(Color.white);
+         
+         chart.setTitle(title);
+         final CategoryPlot plot = chart.getCategoryPlot();
+         
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setRange(0.0, 4.0);
+         rangeAxis.setVisible(false);
+         
+         final ExtendedCategoryAxis domainAxis = new ExtendedCategoryAxis(null);
+         domainAxis.setTickLabelFont(new Font("SansSerif", Font.BOLD, 12));
+         domainAxis.setCategoryMargin(0.30);        
+         domainAxis.addSubLabel("Sm.", "(10)");
+         domainAxis.addSubLabel("Med.", "(10)");
+         domainAxis.addSubLabel("Lg.", "(10)");
+         domainAxis.addSubLabel("All", "(10)");
+         final CategoryLabelPositions p = domainAxis.getCategoryLabelPositions();
+         final CategoryLabelPosition left = new CategoryLabelPosition(
+             RectangleAnchor.LEFT, TextBlockAnchor.CENTER_LEFT
+         );
+         domainAxis.setCategoryLabelPositions(CategoryLabelPositions.replaceLeftPosition(p, left));
+         plot.setDomainAxis(domainAxis);
+         
+         final BarRenderer renderer = (BarRenderer) plot.getRenderer();
+         renderer.setSeriesPaint(0, new Color(0x9C, 0xA4, 0x4A));
+         renderer.setBaseOutlineStroke(null);
+         
+         final StandardCategoryLabelGenerator generator = new StandardCategoryLabelGenerator(
+             "{2}", new DecimalFormat("0.00")
+         );
+         renderer.setLabelGenerator(generator);
+         renderer.setItemLabelsVisible(true);
+         renderer.setItemLabelFont(new Font("SansSerif", Font.PLAIN, 18));
+         final ItemLabelPosition position = new ItemLabelPosition(
+             ItemLabelAnchor.INSIDE3, TextAnchor.CENTER_RIGHT  
+         );
+         renderer.setPositiveItemLabelPosition(position);
+         renderer.setPositiveItemLabelPositionFallback(new ItemLabelPosition());
+         
+         return chart;
+        
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final SurveyResultsDemo3 demo = new SurveyResultsDemo3("Survey Results Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SurveyResultsDemo.java jfreechart/source/org/jfree/chart/demo/SurveyResultsDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/SurveyResultsDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SurveyResultsDemo.java	2004-11-07 16:25:02.000000000 +0100
***************
*** 0 ****
--- 1,334 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * SurveyResultsDemo.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SurveyResultsDemo.java,v 1.17 2004/04/30 07:42:11 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 04-Jul-2003 : Version 1 (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.annotations.CategoryTextAnnotation;
+ import org.jfree.chart.axis.CategoryAnchor;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.labels.ItemLabelAnchor;
+ import org.jfree.chart.labels.ItemLabelPosition;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.CategoryItemRenderer;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.HorizontalAlignment;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * A horizontal bar chart showing survey results.
+  * 
+  */
+ public class SurveyResultsDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public SurveyResultsDemo(final String title) {
+ 
+         super(title);
+ 
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+  
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(700, 600));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a dataset.
+      * 
+      * @return The dataset.
+      */
+     private CategoryDataset createDataset() {
+         
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(2.01, "Results", "Category 1");
+         dataset.addValue(2.02, "Results", "Category 2");
+         dataset.addValue(2.00, "Results", "Category 3");
+         dataset.addValue(1.97, "Results", "Category 4");
+         dataset.addValue(1.44, "Results", "Category 5");
+         dataset.addValue(1.49, "Results", "Category 6");
+         dataset.addValue(1.49, "Results", "Category 7");
+         dataset.addValue(1.48, "Results", "Category 8");
+         dataset.addValue(4.26, "Results", "Category 9");
+         dataset.addValue(4.08, "Results", "Category 10");
+         dataset.addValue(4.03, "Results", "Category 11");
+         dataset.addValue(3.92, "Results", "Category 12");
+         dataset.addValue(3.99, "Results", "Category 13");
+         dataset.addValue(2.23, "Results", "Category 14");
+         dataset.addValue(2.60, "Results", "Overall");
+         return dataset;
+ 
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createBarChart(
+             null,                         // chart title
+             null,                         // domain axis label
+             null,                         // range axis label
+             dataset,                      // data
+             PlotOrientation.HORIZONTAL,   // orientation
+             false,                        // include legend
+             true,
+             false
+         );
+         
+         chart.setBackgroundPaint(Color.white);
+         
+         final TextTitle title = new TextTitle(
+             "Figure 7 | I. Resources - The site offers users relevant, "
+             + "informative and educational resources"
+         );
+         title.setHorizontalAlignment(HorizontalAlignment.LEFT);
+         title.setBackgroundPaint(Color.red);
+         title.setPaint(Color.white);
+         
+         chart.setTitle(title);
+         final CategoryPlot plot = (CategoryPlot) chart.getPlot();
+         plot.setOutlinePaint(null);
+         plot.setDomainGridlinesVisible(true);
+         plot.setDomainGridlinePosition(CategoryAnchor.END);
+         plot.setDomainGridlineStroke(new BasicStroke(0.5f));
+         plot.setDomainGridlinePaint(Color.black);
+ 
+         plot.setRangeGridlinesVisible(false);
+         plot.clearRangeMarkers();
+         
+         final CategoryAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setVisible(false);
+         domainAxis.setCategoryMargin(0.50);
+         
+         plot.getRangeAxis().setVisible(false);
+         
+         final CategoryItemRenderer renderer = plot.getRenderer();
+         renderer.setSeriesPaint(0, new Color(0x9C, 0xA4, 0x4A));
+         renderer.setOutlineStroke(null);
+         renderer.setBaseOutlineStroke(null);
+         
+         renderer.setItemLabelsVisible(true);
+         renderer.setItemLabelFont(new Font("SansSerif", Font.BOLD, 10));
+         final ItemLabelPosition position = new ItemLabelPosition(
+             ItemLabelAnchor.INSIDE3, TextAnchor.CENTER_RIGHT 
+         );
+         renderer.setPositiveItemLabelPosition(position);
+         
+         final CategoryTextAnnotation a1 = new CategoryTextAnnotation(
+             "1. White papers are available.", "Category 1", 0.0
+         );
+         a1.setFont(new Font("SansSerif", Font.BOLD, 12));
+         a1.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a1.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a1);
+         
+         final CategoryTextAnnotation a2 = new CategoryTextAnnotation(
+             "2. White papers enhance users "
+             + "understanding of the firm and its expertise.", "Category 2", 0.0
+         );
+         a2.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a2.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a2.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a2);
+ 
+         final CategoryTextAnnotation a3 = new CategoryTextAnnotation(
+             "3. White papers are relevant to "
+             + "the firm's prospects and clients.", "Category 3", 0.0
+         );
+         a3.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a3.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a3.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a3);
+ 
+         final CategoryTextAnnotation a4 = new CategoryTextAnnotation(
+             "4. White papers are relevant to "
+             + "the firm's positioning.", "Category 4", 0.0
+         );
+         a4.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a4.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a4.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a4);
+ 
+         final CategoryTextAnnotation a5 = new CategoryTextAnnotation(
+             "5. Case studies are available.", "Category 5", 0.0
+         );
+         a5.setFont(new Font("SansSerif", Font.BOLD, 12));
+         a5.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a5.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a5);
+         
+         final CategoryTextAnnotation a6 = new CategoryTextAnnotation(
+             "6. Case studies enhance users "
+             + "understanding of the firm and its expertise.", "Category 6", 0.0
+         );
+         a6.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a6.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a6.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a6);
+ 
+         final CategoryTextAnnotation a7 = new CategoryTextAnnotation(
+             "7. Case studies are relevant to "
+             + "the firm's prospects and clients.", "Category 7", 0.0
+         );
+         a7.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a7.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a7.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a7);
+ 
+         final CategoryTextAnnotation a8 = new CategoryTextAnnotation(
+             "8. White papers are relevant to the firm's positioning.", "Category 8", 0.0
+         );
+         a8.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a8.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a8.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a8);
+ 
+         final CategoryTextAnnotation a9 = new CategoryTextAnnotation(
+             "9. Case studies are available.", "Category 9", 0.0
+         );
+         a9.setFont(new Font("SansSerif", Font.BOLD, 12));
+         a9.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a9.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a9);
+         
+         final CategoryTextAnnotation a10 = new CategoryTextAnnotation(
+             "10. Case studies enhance users "
+             + "understanding of the firm and its expertise.", "Category 10", 0.0
+         );
+         a10.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a10.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a10.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a10);
+ 
+         final CategoryTextAnnotation a11 = new CategoryTextAnnotation(
+             "11. Case studies are relevant "
+             + "to the firm's prospects and clients.", "Category 11", 0.0
+         );
+         a11.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a11.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a11.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a11);
+ 
+         final CategoryTextAnnotation a12 = new CategoryTextAnnotation(
+             "12. White papers are relevant to the firm's positioning.", "Category 12", 0.0
+         );
+         a12.setFont(new Font("SansSerif", Font.PLAIN, 12));
+         a12.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a12.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a12);
+ 
+         final CategoryTextAnnotation a13 = new CategoryTextAnnotation(
+             "13. Users can easily access "
+             + "resources based on viewer interest.", "Category 13", 0.0
+         );
+         a13.setFont(new Font("SansSerif", Font.BOLD, 12));
+         a13.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a13.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a13);
+ 
+         final CategoryTextAnnotation a14 = new CategoryTextAnnotation(
+             "14. Access to additional hyperlinks enhances users's ability to find relevant "
+             + "information.", "Category 14", 0.0
+         );
+         a14.setFont(new Font("SansSerif", Font.BOLD, 12));
+         a14.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a14.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a14);
+ 
+         final CategoryTextAnnotation a15 = new CategoryTextAnnotation(
+             "15. OVERALL EFFECTIVENESS.", "Overall", 0.0
+         );
+         a15.setFont(new Font("SansSerif", Font.BOLD, 12));
+         a15.setTextAnchor(TextAnchor.BOTTOM_LEFT);
+         a15.setCategoryAnchor(CategoryAnchor.START);
+         plot.addAnnotation(a15);
+ 
+         return chart;
+        
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final SurveyResultsDemo demo = new SurveyResultsDemo("Survey Results Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SymbolicChartDemo1.java jfreechart/source/org/jfree/chart/demo/SymbolicChartDemo1.java
*** jfreechart-orig/source/org/jfree/chart/demo/SymbolicChartDemo1.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SymbolicChartDemo1.java	2004-11-07 16:24:49.000000000 +0100
***************
*** 0 ****
--- 1,132 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * SymbolicChartDemo.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: SymbolicChartDemo1.java,v 1.15 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 14-Feb-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.SymbolicAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.YisSymbolic;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * An example of...
+  *
+  */
+ public class SymbolicChartDemo1 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public SymbolicChartDemo1(final String title) {
+ 
+         super(title);
+ 
+         // create a title...
+         final XYDataset dataset = createDataset();
+ 
+         final ValueAxis domainAxis = new NumberAxis("X");
+         final SymbolicAxis symbolicAxis
+             = new SymbolicAxis("Y", ((YisSymbolic) dataset).getYSymbolicValues());
+ 
+         final XYPlot plot = new XYPlot(dataset, domainAxis, symbolicAxis, null);
+         final XYItemRenderer renderer = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, new SymbolicXYItemLabelGenerator()
+         );
+         plot.setRenderer(renderer);
+         final JFreeChart chart = new JFreeChart(title, plot);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a dataset, consisting of two series of monthly data.
+      *
+      * @return the dataset.
+      */
+     public XYDataset createDataset() {
+ 
+         final String[] sData = {"Giraffe", "Gazelle", "Zebra", "Gnu"};
+         final SampleYSymbolicDataset data
+             = new SampleYSymbolicDataset("BY Sample", 40, sData, 4, 20,
+                 new String[] {"B Fall", "B Spring", "B Summer", "B Winter"});
+         return data;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final SymbolicChartDemo1 demo = new SymbolicChartDemo1("Symbolic Chart Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SymbolicXYPlotDemo.java jfreechart/source/org/jfree/chart/demo/SymbolicXYPlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/SymbolicXYPlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SymbolicXYPlotDemo.java	2004-11-07 16:24:45.000000000 +0100
***************
*** 0 ****
--- 1,515 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * SymbolicXYPlotDemo.java
+  * -----------------------
+  * (C) Copyright 2002-2004, by Anthony Boulestreau and Contributors.
+  *
+  * Original Author:  Anthony Boulestreau;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  *
+  * Changes
+  * -------
+  * 29-Mar-2002 : Version 1 (AB);
+  * 09-Apr-2002 : Minor changes reflecting the API change for XYItemRenderer (DG);
+  * 23-Apr-2002 : Updated to reflect changes in the combined plot classes (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ import java.lang.reflect.Array;
+ 
+ import javax.swing.JFrame;
+ 
+ import org.jfree.chart.ChartFrame;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.SymbolicAxis;
+ import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
+ import org.jfree.chart.plot.CombinedDomainXYPlot;
+ import org.jfree.chart.plot.CombinedRangeXYPlot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.general.CombinedDataset;
+ import org.jfree.data.general.SubSeriesDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XisSymbolic;
+ import org.jfree.data.xy.YisSymbolic;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application for the symbolic XY plots.
+  *
+  * @author Anthony Boulestreau
+  */
+ public class SymbolicXYPlotDemo {
+ 
+     /**
+      * Creates a XY graph with symbolic value on X and Y axis.
+      *
+      * @param title  the title.
+      * @param xAxisLabel  the x axis label.
+      * @param yAxisLabel  the y axis label.
+      * @param data  the dataset.
+      * @param legend  create a legend?
+      *
+      * @return a chart.
+      */
+     public static JFreeChart createXYSymbolicPlot(final String title, final String xAxisLabel,
+                                                   final String yAxisLabel, final XYDataset data,
+                                                   final boolean legend) {
+ 
+         final SymbolicAxis xSymbolicAxis
+             = new SymbolicAxis(xAxisLabel, ((XisSymbolic) data).getXSymbolicValues());
+ 
+         final SymbolicAxis ySymbolicAxis
+             = new SymbolicAxis(yAxisLabel, ((YisSymbolic) data).getYSymbolicValues());
+ 
+         final XYPlot plot = new XYPlot(data, xSymbolicAxis, ySymbolicAxis, null);
+         final XYItemRenderer renderer = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, new SymbolicXYItemLabelGenerator()
+         );
+         plot.setRenderer(renderer);
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return a dataset.
+      */
+     public static SampleYSymbolicDataset createYSymbolicSample1() {
+ 
+         final String[] sData = {"Lion", "Elephant", "Monkey", "Hippopotamus", "Giraffe"};
+         final SampleYSymbolicDataset data = new SampleYSymbolicDataset(
+             "AY Sample", 20, sData, 4, 20, new String[] {"Fall", "Spring", "Summer", "Winter"}
+         );
+         return data;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return a dataset.
+      */
+     public static SampleYSymbolicDataset createYSymbolicSample2() {
+ 
+         final String[] sData = {"Giraffe", "Gazelle", "Zebra", "Gnu"};
+         final SampleYSymbolicDataset data = new SampleYSymbolicDataset(
+             "BY Sample", 40, sData, 4, 10, new String[] {"Fall", "Spring", "Summer", "Winter"}
+         );
+         return data;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return a dataset.
+      */
+     public static SampleXYSymbolicDataset createXYSymbolicSample1() {
+ 
+         final String[] xsData = {"Atmosphere", "Continental Ecosystem",
+                            "Limnic Ecosystem", "Marine Ecosystem"};
+         final String[] ysData = {"Ionizing radiations", "Thermic pollutants", "Hydrocarbon",
+                            "Synthetic materials", "Pesticides", "Detergent",
+                            "Synthetic organic materials", "Sulphur", "Nitrate", "Phosphate",
+                            "Heavy metals", "Fluors", "Aerosols", "Dead organic materials",
+                            "Pathogen micro-organisms"};
+ 
+         final int[][] xd = {
+             {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2,
+              2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
+         };
+         final int[][] yd = {
+             {0, 2, 3, 7, 10, 11, 12, 14, 0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 0, 1, 2, 3,
+              4, 5, 7, 8, 9, 10, 13, 14, 0, 1, 2, 3, 4, 5, 8, 9, 10, 13, 14}
+         };
+         final Integer[][] xData = (Integer[][]) toArray(xd);
+         final Integer[][] yData = (Integer[][]) toArray(yd);
+         final SampleXYSymbolicDataset xySymbolicData = new SampleXYSymbolicDataset(
+             "AXY Sample", xData, yData, xsData, ysData, new String[] {"A"}
+         );
+         return xySymbolicData;
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return a dataset.
+      */
+     public static SampleXYSymbolicDataset createXYSymbolicSample2() {
+ 
+         final String[] xsData = {"Physic pollutant", "Chemical pollutant", "Biological pollutant"};
+         final String[] ysData = {"Ionizing radiations", "Thermic pollutants", "Hydrocarbon",
+                             "Synthetic materials", "Pesticides", "Detergent",
+                             "Synthetic organic materials", "Sulphur", "Nitrate", "Phosphate",
+                             "Heavy metals", "Fluors", "Aerosols", "Dead organic materials",
+                             "Pathogen micro-organisms"};
+ 
+         final int[][] xd = {{0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2}};
+         final int[][] yd = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};
+         final Integer[][] xData = (Integer[][]) toArray(xd);
+         final Integer[][] yData = (Integer[][]) toArray(yd);
+         final SampleXYSymbolicDataset xySymbolicData = new SampleXYSymbolicDataset("BXY Sample",
+             xData, yData, xsData, ysData, new String[] {"B"});
+         return xySymbolicData;
+ 
+     }
+ 
+     /**
+      * Displays an XYPlot with symbolic axes.
+      *
+      * @param frameTitle  the frame title.
+      * @param data  the dataset.
+      * @param chartTitle  the chart title.
+      * @param xAxisLabel  the x axis label.
+      * @param yAxisLabel  the y axis label.
+      */
+     private static void displayXYSymbolic(final String frameTitle,
+                                           final XYDataset data, final String chartTitle,
+                                           final String xAxisLabel, final String yAxisLabel) {
+ 
+         final JFreeChart chart = createXYSymbolicPlot(
+             chartTitle, xAxisLabel, yAxisLabel, data, true
+         );
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.green));
+         final JFrame frame = new ChartFrame(frameTitle, chart);
+         frame.pack();
+         RefineryUtilities.positionFrameRandomly(frame);
+         frame.show();
+ 
+     }
+ 
+    /**
+     * Displays an overlaid XYPlot with X and Y symbolic data.
+     *
+     * @param frameTitle  the frame title.
+     * @param data1  the dataset 1.
+     * @param data2  the dataset 2.
+     */
+     private static void displayXYSymbolicOverlaid(final String frameTitle,
+                                                   final XYDataset data1, final XYDataset data2) {
+ 
+         final String title = "Pollutant Overlaid";
+         final String xAxisLabel = "Contamination and Type";
+         final String yAxisLabel = "Pollutant";
+ 
+         // combine the x symbolic values of the two data sets
+         final String[] combinedXSymbolicValues
+             = SampleXYSymbolicDataset.combineXSymbolicDataset((XisSymbolic) data1,
+                                                               (XisSymbolic) data2);
+ 
+         // combine the y symbolic values of the two data sets
+         final String[] combinedYSymbolicValues
+             = SampleXYSymbolicDataset.combineYSymbolicDataset((YisSymbolic) data1,
+                                                               (YisSymbolic) data2);
+ 
+         // make master dataset...
+         final CombinedDataset data = new CombinedDataset();
+         data.add(data1);
+         data.add(data2);
+ 
+         // decompose data...
+         final XYDataset series0 = new SubSeriesDataset(data, 0);
+         final XYDataset series1 = new SubSeriesDataset(data, 1);
+ 
+         // create overlaid plot...
+         final SymbolicAxis hsymbolicAxis = new SymbolicAxis(xAxisLabel, combinedXSymbolicValues);
+         final SymbolicAxis vsymbolicAxis = new SymbolicAxis(yAxisLabel, combinedYSymbolicValues);
+ 
+         final XYItemRenderer renderer1 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot plot = new XYPlot(series0, hsymbolicAxis, vsymbolicAxis, renderer1);
+ 
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         plot.setDataset(1, series1);
+         plot.setRenderer(1, renderer2);
+ 
+         // make the chart...
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         // and present it in a frame...
+         final JFrame frame = new ChartFrame(frameTitle, chart);
+         frame.pack();
+         RefineryUtilities.positionFrameRandomly(frame);
+         frame.show();
+ 
+     }
+ 
+     /**
+      * Displays an horizontally combined XYPlot with X and Y symbolic data.
+      *
+      * @param frameTitle  the frame title.
+      * @param data1  the dataset 1.
+      * @param data2  the dataset 2.
+      */
+     private static void displayXYSymbolicCombinedHorizontally(final String frameTitle,
+                                                               final XYDataset data1, 
+                                                               final XYDataset data2) {
+ 
+         final String title = "Pollutant Horizontally Combined";
+         final String x1AxisLabel = "Contamination";
+         final String x2AxisLabel = "Type";
+         final String yAxisLabel = "Pollutant";
+ 
+         // combine the y symbolic values of the two data sets
+         final String[] combinedYSymbolicValues =
+             SampleXYSymbolicDataset.combineYSymbolicDataset((YisSymbolic) data1,
+                                                             (YisSymbolic) data2);
+ 
+         // make master dataset...
+         final CombinedDataset data = new CombinedDataset();
+         data.add(data1);
+         data.add(data2);
+ 
+         // decompose data...
+         final XYDataset series0 = new SubSeriesDataset(data, 0);
+         final XYDataset series1 = new SubSeriesDataset(data, 1);
+ 
+         JFreeChart chart = null;
+ 
+         // common horizontal and vertical axes
+         final SymbolicAxis hsymbolicAxis0
+             = new SymbolicAxis(x1AxisLabel, ((XisSymbolic) data1).getXSymbolicValues());
+         final SymbolicAxis hsymbolicAxis1
+             = new SymbolicAxis(x2AxisLabel, ((XisSymbolic) data2).getXSymbolicValues());
+         final SymbolicAxis symbolicAxis
+             = new SymbolicAxis(yAxisLabel, combinedYSymbolicValues);
+ 
+         // create main plot...
+         final CombinedRangeXYPlot mainPlot = new CombinedRangeXYPlot(symbolicAxis);
+ 
+         // add subplots...
+         final XYItemRenderer renderer = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot0 = new XYPlot(series0, hsymbolicAxis0, null, renderer);
+         final XYPlot subplot1 = new XYPlot(series1, hsymbolicAxis1, null, renderer);
+         mainPlot.add(subplot0, 1);
+         mainPlot.add(subplot1, 1);
+ 
+         // make the top level JFreeChart object
+         chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, mainPlot, true);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         // and present it in a frame...
+         final JFrame frame = new ChartFrame(frameTitle, chart);
+         frame.pack();
+         RefineryUtilities.positionFrameRandomly(frame);
+         frame.show();
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Vertically combined sample1 and sample2 and display it.
+      *
+      * @param frameTitle  the frame title.
+      * @param data1  the dataset 1.
+      * @param data2  the dataset 2.
+      */
+     private static void displayXYSymbolicCombinedVertically(final String frameTitle,
+                                                             final XYDataset data1, 
+                                                             final XYDataset data2) {
+ 
+         final String title = "Pollutant Vertically Combined";
+         final String xAxisLabel = "Contamination and Type";
+         final String yAxisLabel = "Pollutant";
+ 
+         // combine the x symbolic values of the two data sets
+         final String[] combinedXSymbolicValues
+             = SampleXYSymbolicDataset.combineXSymbolicDataset((XisSymbolic) data1,
+                                                               (XisSymbolic) data2);
+ 
+         // make master dataset...
+         final CombinedDataset data = new CombinedDataset();
+         data.add(data1);
+         data.add(data2);
+ 
+         // decompose data...
+         final XYDataset series0 = new SubSeriesDataset(data, 0);
+         final XYDataset series1 = new SubSeriesDataset(data, 1);
+ 
+         // common horizontal and vertical axes
+         final SymbolicAxis hsymbolicAxis
+             = new SymbolicAxis(xAxisLabel, combinedXSymbolicValues);
+ 
+         final SymbolicAxis vsymbolicAxis0
+             = new SymbolicAxis(yAxisLabel, ((YisSymbolic) data1).getYSymbolicValues());
+ 
+         final SymbolicAxis vsymbolicAxis1
+             = new SymbolicAxis(yAxisLabel, ((YisSymbolic) data2).getYSymbolicValues());
+ 
+         // create the main plot...
+         final CombinedDomainXYPlot mainPlot = new CombinedDomainXYPlot(hsymbolicAxis);
+ 
+         // add the sub-plots...
+         final XYItemRenderer renderer = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot0 = new XYPlot(series0, null, vsymbolicAxis0, renderer);
+         final XYPlot subplot1 = new XYPlot(series1, null, vsymbolicAxis1, renderer);
+ 
+         mainPlot.add(subplot0, 1);
+         mainPlot.add(subplot1, 1);
+ 
+         // make the chart...
+         final JFreeChart chart = new JFreeChart(
+             title, JFreeChart.DEFAULT_TITLE_FONT, mainPlot, true
+         );
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         // and present it in a frame...
+         final JFrame frame = new ChartFrame(frameTitle, chart);
+         frame.pack();
+         RefineryUtilities.positionFrameRandomly(frame);
+         frame.show();
+ 
+     }
+ 
+     /**
+      * Transform an primitive array to an object array.
+      *
+      * @param arr  the array.
+      *
+      * @return an array.
+      */
+     private static Object toArray(final Object arr) {
+ 
+         if (arr == null) {
+             return arr;
+         }
+ 
+         final Class cls = arr.getClass();
+         if (!cls.isArray()) {
+             return arr;
+         }
+ 
+         Class compType = cls.getComponentType();
+         int dim = 1;
+         while (!compType.isPrimitive()) {
+             if (!compType.isArray()) {
+                 return arr;
+             }
+             else {
+                 dim++;
+                 compType = compType.getComponentType();
+             }
+         }
+ 
+         final int[] length = new int[dim];
+         length[0] = Array.getLength(arr);
+         Object[] newarr = null;
+ 
+         try {
+             if (compType.equals(Integer.TYPE)) {
+                 newarr = (Object[]) Array.newInstance(Class.forName("java.lang.Integer"), length);
+             }
+             else if (compType.equals(Double.TYPE)) {
+                 newarr = (Object[]) Array.newInstance(Class.forName("java.lang.Double"), length);
+             }
+             else if (compType.equals(Long.TYPE)) {
+                 newarr = (Object[]) Array.newInstance(Class.forName("java.lang.Long"), length);
+             }
+             else if (compType.equals(Float.TYPE)) {
+                 newarr = (Object[]) Array.newInstance(Class.forName("java.lang.Float"), length);
+             }
+             else if (compType.equals(Short.TYPE)) {
+                 newarr = (Object[]) Array.newInstance(Class.forName("java.lang.Short"), length);
+             }
+             else if (compType.equals(Byte.TYPE)) {
+                 newarr = (Object[]) Array.newInstance(Class.forName("java.lang.Byte"), length);
+             }
+             else if (compType.equals(Character.TYPE)) {
+                 newarr = (Object[]) Array.newInstance(Class.forName("java.lang.Character"), length);
+             }
+             else if (compType.equals(Boolean.TYPE)) {
+                 newarr = (Object[]) Array.newInstance(Class.forName("java.lang.Boolean"), length);
+             }
+         }
+         catch (ClassNotFoundException ex) {
+             System.out.println(ex);
+         }
+ 
+         for (int i = 0; i < length[0]; i++) {
+             if (dim != 1) {
+                 newarr[i] = toArray(Array.get(arr, i));
+             }
+             else {
+                 newarr[i] = Array.get(arr, i);
+             }
+         }
+         return newarr;
+     }
+ 
+     /**
+      * Starting point for the application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final SampleXYSymbolicDataset s1 = createXYSymbolicSample1();
+         final SampleXYSymbolicDataset s2 = createXYSymbolicSample2();
+ 
+         displayXYSymbolic("Example 1", s1, "Pollutant", "contamination", "pollutant");
+ 
+         displayXYSymbolic("Example 2", s2, "Pollutant", "type", "pollutant");
+ 
+         displayXYSymbolicCombinedHorizontally("Example 3", (SampleXYSymbolicDataset) s1.clone(),
+                                                            (SampleXYSymbolicDataset) s2.clone());
+ 
+         displayXYSymbolicCombinedVertically("Example 4", (SampleXYSymbolicDataset) s1.clone(),
+                                                          (SampleXYSymbolicDataset) s2.clone());
+ 
+         displayXYSymbolicOverlaid("Example 5", (SampleXYSymbolicDataset) s1.clone(),
+                                                (SampleXYSymbolicDataset) s2.clone());
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/SymbolicYPlotDemo.java jfreechart/source/org/jfree/chart/demo/SymbolicYPlotDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/SymbolicYPlotDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/SymbolicYPlotDemo.java	2004-11-07 16:24:18.000000000 +0100
***************
*** 0 ****
--- 1,492 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * SymbolicYPlotDemo.java
+  * ----------------------
+  * (C) Copyright 2002-2004, by Anthony Boulestreau and Contributors.
+  *
+  * Original Author:  Anthony Boulestreau;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * Changes
+  * -------
+  * 29-Mar-2002 : Version 1 (AB);
+  * 23-Apr-2002 : Updated to reflect revisions in combined plot classes (DG);
+  * 25-Jun-2002 : Removed unnecessary imports (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ 
+ import javax.swing.JFrame;
+ 
+ import org.jfree.chart.ChartFrame;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.SymbolicAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
+ import org.jfree.chart.plot.CombinedDomainXYPlot;
+ import org.jfree.chart.plot.CombinedRangeXYPlot;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.general.CombinedDataset;
+ import org.jfree.data.general.SubSeriesDataset;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.YisSymbolic;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration application for the symbolic axis plots.
+  *
+  * @author Anthony Boulestreau
+  */
+ public class SymbolicYPlotDemo {
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Displays an XYPlot with Y symbolic data.
+      *
+      * @param frameTitle  the frame title.
+      * @param data  the data.
+      * @param chartTitle  the chart title.
+      * @param xAxisLabel  the x-axis label.
+      * @param yAxisLabel  the y-axis label.
+      */
+     private static void displayYSymbolic(final String frameTitle,
+                                          final XYDataset data, final String chartTitle,
+                                          final String xAxisLabel, final String yAxisLabel) {
+ 
+         final JFreeChart chart = createYSymbolicPlot(
+             chartTitle, xAxisLabel, yAxisLabel, data, true
+         );
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.green));
+ 
+         final JFrame frame = new ChartFrame(frameTitle, chart);
+         frame.pack();
+         RefineryUtilities.positionFrameRandomly(frame);
+         frame.show();
+ 
+     }
+ 
+     /**
+      * Create and display an overlaid chart.
+      *
+      * @param frameTitle  the frame title.
+      * @param data1  dataset1.
+      * @param data2  dataset2.
+      */
+     private static void displayYSymbolicOverlaid(final String frameTitle,
+                                                  final XYDataset data1, final XYDataset data2) {
+ 
+         final String title = "Animals Overlaid";
+         final String xAxisLabel = "Miles";
+         final String yAxisLabel = "Animal";
+ 
+         // combine the y symbolic values of the two data sets...
+         final String[] combinedYSymbolicValues
+             = SampleYSymbolicDataset.combineYSymbolicDataset((YisSymbolic) data1,
+                                                              (YisSymbolic) data2);
+ 
+         // make master dataset...
+         final CombinedDataset data = new CombinedDataset();
+         data.add(data1);
+         data.add(data2);
+ 
+         // decompose data...
+         final XYDataset series0 = new SubSeriesDataset(data, 0);
+         final XYDataset series1 = new SubSeriesDataset(data, 1);
+         final XYDataset series2 = new SubSeriesDataset(data, 2);
+         final XYDataset series3 = new SubSeriesDataset(data, 3);
+         final XYDataset series4 = new SubSeriesDataset(data, 4);
+         final XYDataset series5 = new SubSeriesDataset(data, 5);
+         final XYDataset series6 = new SubSeriesDataset(data, 6);
+         final XYDataset series7 = new SubSeriesDataset(data, 7);
+ 
+         // create main plot...
+         final ValueAxis valueAxis = new NumberAxis(xAxisLabel);
+         final SymbolicAxis symbolicAxis = new SymbolicAxis(yAxisLabel, combinedYSymbolicValues);
+         final XYItemRenderer renderer = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot plot = new XYPlot(series0, valueAxis, symbolicAxis, renderer);
+ 
+         plot.setDataset(1, series1);
+         final XYItemRenderer renderer1 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         plot.setRenderer(1, renderer1);
+ 
+         plot.setDataset(2, series2);
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         plot.setRenderer(2, renderer2);
+         
+         plot.setDataset(3, series3);
+         final XYItemRenderer renderer3 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         plot.setRenderer(3, renderer3);
+         
+         plot.setDataset(4, series4);
+         final XYItemRenderer renderer4 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         plot.setRenderer(4, renderer4);
+         
+         plot.setDataset(5, series5);
+         final XYItemRenderer renderer5 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         plot.setRenderer(5, renderer5);
+         
+         plot.setDataset(6, series6);
+         final XYItemRenderer renderer6 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         plot.setRenderer(6, renderer6);
+         
+         plot.setDataset(7, series7);
+         final XYItemRenderer renderer7 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         plot.setRenderer(7, renderer7);
+ 
+         // make the chart...
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, true);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         // and present it in a frame...
+         final JFrame frame = new ChartFrame(frameTitle, chart);
+         frame.pack();
+         RefineryUtilities.positionFrameRandomly(frame);
+         frame.show();
+ 
+     }
+ 
+     /**
+      * Create and display a multi XY plot with horizontal layout.
+      *
+      * @param frameTitle  the frame title.
+      * @param data1  dataset1.
+      * @param data2  dataset2.
+      */
+     private static void displayYSymbolicCombinedHorizontally(final String frameTitle,
+                                                              final SampleYSymbolicDataset data1,
+                                                              final SampleYSymbolicDataset data2) {
+ 
+         final String title = "Animals Horizontally Combined";
+         final String xAxisLabel = "Miles";
+         final String yAxisLabel = null;
+ 
+         // combine the y symbolic values of the two data sets
+         final String[] combinedYSymbolicValues
+             = SampleYSymbolicDataset.combineYSymbolicDataset(data1, data2);
+ 
+         // make master dataset...
+         final CombinedDataset data = new CombinedDataset();
+         data.add(data1);
+         data.add(data2);
+ 
+         // decompose data...
+         final XYDataset series0 = new SubSeriesDataset(data, 0);
+         final XYDataset series1 = new SubSeriesDataset(data, 1);
+         final XYDataset series2 = new SubSeriesDataset(data, 2);
+         final XYDataset series3 = new SubSeriesDataset(data, 3);
+         final XYDataset series4 = new SubSeriesDataset(data, 4);
+         final XYDataset series5 = new SubSeriesDataset(data, 5);
+         final XYDataset series6 = new SubSeriesDataset(data, 6);
+         final XYDataset series7 = new SubSeriesDataset(data, 7);
+ 
+         // create axes...
+         final ValueAxis valueAxis0 = new NumberAxis(xAxisLabel);
+         final ValueAxis valueAxis1 = new NumberAxis(xAxisLabel);
+         final ValueAxis valueAxis2 = new NumberAxis(xAxisLabel);
+         final ValueAxis valueAxis3 = new NumberAxis(xAxisLabel);
+         final ValueAxis valueAxis4 = new NumberAxis(xAxisLabel);
+         final ValueAxis valueAxis5 = new NumberAxis(xAxisLabel);
+         final ValueAxis valueAxis6 = new NumberAxis(xAxisLabel);
+         final ValueAxis valueAxis7 = new NumberAxis(xAxisLabel);
+         final SymbolicAxis symbolicAxis = new SymbolicAxis(yAxisLabel, combinedYSymbolicValues);
+ 
+         // make a combined plot
+         final CombinedRangeXYPlot mainPlot = new CombinedRangeXYPlot(symbolicAxis);
+ 
+         // add the sub-plots
+         final XYItemRenderer renderer0 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot0 = new XYPlot(series0, valueAxis0, null, renderer0);
+         final XYItemRenderer renderer1 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot1 = new XYPlot(series1, valueAxis1, null, renderer1);
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot2 = new XYPlot(series2, valueAxis2, null, renderer2);
+         final XYItemRenderer renderer3 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot3 = new XYPlot(series3, valueAxis3, null, renderer3);
+         final XYItemRenderer renderer4 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot4 = new XYPlot(series4, valueAxis4, null, renderer4);
+         final XYItemRenderer renderer5 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot5 = new XYPlot(series5, valueAxis5, null, renderer5);
+         final XYItemRenderer renderer6 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot6 = new XYPlot(series6, valueAxis6, null, renderer6);
+         final XYItemRenderer renderer7 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot7 = new XYPlot(series7, valueAxis7, null, renderer7);
+ 
+         mainPlot.add(subplot0, 1);
+         mainPlot.add(subplot1, 1);
+         mainPlot.add(subplot2, 1);
+         mainPlot.add(subplot3, 1);
+         mainPlot.add(subplot4, 1);
+         mainPlot.add(subplot5, 1);
+         mainPlot.add(subplot6, 1);
+         mainPlot.add(subplot7, 1);
+ 
+         // make the top level JFreeChart object
+         final JFreeChart chart = new JFreeChart(
+             title, JFreeChart.DEFAULT_TITLE_FONT, mainPlot, true
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         // and present it in a frame...
+         final JFrame ySymbolicFrame = new ChartFrame(frameTitle, chart);
+         ySymbolicFrame.pack();
+         RefineryUtilities.positionFrameRandomly(ySymbolicFrame);
+         ySymbolicFrame.show();
+ 
+     }
+ 
+     /**
+      * Displays a vertically combined symbolic plot.
+      *
+      * @param frameTitle  the frame title.
+      * @param data1  dataset 1.
+      * @param data2  dataset 2.
+      */
+     private static void displayYSymbolicCombinedVertically(final String frameTitle,
+                                                            final SampleYSymbolicDataset data1,
+                                                            final SampleYSymbolicDataset data2) {
+ 
+         final String title = "Animals Vertically Combined";
+         final String xAxisLabel = "Miles";
+         final String yAxisLabel = null;
+ 
+         // create master dataset...
+         final CombinedDataset data = new CombinedDataset();
+         data.add(data1);
+         data.add(data2);
+ 
+         // decompose data...
+         final XYDataset series0 = new SubSeriesDataset(data, 0);
+         final XYDataset series1 = new SubSeriesDataset(data, 1);
+         final XYDataset series2 = new SubSeriesDataset(data, 2);
+         final XYDataset series3 = new SubSeriesDataset(data, 3);
+         final XYDataset series4 = new SubSeriesDataset(data, 4);
+         final XYDataset series5 = new SubSeriesDataset(data, 5);
+         final XYDataset series6 = new SubSeriesDataset(data, 6);
+         final XYDataset series7 = new SubSeriesDataset(data, 7);
+ 
+         // common horizontal and vertical axes
+         final ValueAxis valueAxis = new NumberAxis(xAxisLabel);
+         final SymbolicAxis symbolicAxis1
+             = new SymbolicAxis(yAxisLabel, ((YisSymbolic) data1).getYSymbolicValues());
+         final SymbolicAxis symbolicAxis2
+             = new SymbolicAxis(yAxisLabel, ((YisSymbolic) data2).getYSymbolicValues());
+ 
+         // create the main plot...
+         final CombinedDomainXYPlot mainPlot = new CombinedDomainXYPlot(valueAxis);
+ 
+         // and the sub-plots...
+         final XYItemRenderer renderer0 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot0 = new XYPlot(series0, null, symbolicAxis1, renderer0);
+         final XYItemRenderer renderer1 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot1 = new XYPlot(series1, null, symbolicAxis1, renderer1);
+         final XYItemRenderer renderer2 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot2 = new XYPlot(series2, null, symbolicAxis1, renderer2);
+         final XYItemRenderer renderer3 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot3 = new XYPlot(series3, null, symbolicAxis1, renderer3);
+         final XYItemRenderer renderer4 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot4 = new XYPlot(series4, null, symbolicAxis2, renderer4);
+         final XYItemRenderer renderer5 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot5 = new XYPlot(series5, null, symbolicAxis2, renderer5);
+         final XYItemRenderer renderer6 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot6 = new XYPlot(series6, null, symbolicAxis2, renderer6);
+         final XYItemRenderer renderer7 = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, null
+         );
+         final XYPlot subplot7 = new XYPlot(series7, null, symbolicAxis2, renderer7);
+ 
+         // add the subplots to the main plot...
+         mainPlot.add(subplot0, 1);
+         mainPlot.add(subplot1, 1);
+         mainPlot.add(subplot2, 1);
+         mainPlot.add(subplot3, 1);
+         mainPlot.add(subplot4, 1);
+         mainPlot.add(subplot5, 1);
+         mainPlot.add(subplot6, 1);
+         mainPlot.add(subplot7, 1);
+ 
+         // construct the chart...
+         final JFreeChart chart = new JFreeChart(
+             title, JFreeChart.DEFAULT_TITLE_FONT, mainPlot, true
+         );
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+ 
+         // and present it in a frame...
+         final JFrame frame = new ChartFrame(frameTitle, chart);
+         frame.pack();
+         RefineryUtilities.positionFrameRandomly(frame);
+         frame.show();
+ 
+     }
+ 
+     /**
+      * Creates a XY graph with symbolic value on Y axis.
+      *
+      * @param title  the chart title.
+      * @param xAxisLabel  the x-axis label.
+      * @param yAxisLabel  the y-axis label.
+      * @param data  the data.
+      * @param legend  a flag controlling whether or not the legend is created for the chart.
+      *
+      * @return the chart.
+      */
+     public static JFreeChart createYSymbolicPlot(final String title, final String xAxisLabel,
+                                                  final String yAxisLabel, final XYDataset data,
+                                                  final boolean legend) {
+ 
+         final ValueAxis valueAxis = new NumberAxis(xAxisLabel);
+         final SymbolicAxis symbolicAxis
+             = new SymbolicAxis(yAxisLabel, ((YisSymbolic) data).getYSymbolicValues());
+ 
+         final XYPlot plot = new XYPlot(data, valueAxis, symbolicAxis, null);
+         final XYItemRenderer renderer = new StandardXYItemRenderer(
+             StandardXYItemRenderer.SHAPES, new SymbolicXYItemLabelGenerator()
+         );
+         plot.setRenderer(renderer);
+         final JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
+         return chart;
+ 
+     }
+ 
+     /**
+      * Creates a sample symbolic dataset.
+      *
+      * @return the dataset.
+      */
+     public static SampleYSymbolicDataset createYSymbolicSample1() {
+ 
+         final String[] sData = {"Lion", "Elephant", "Monkey", "Hippopotamus", "Giraffe"};
+         final SampleYSymbolicDataset data
+             = new SampleYSymbolicDataset("AY Sample", 20, sData, 4, 20,
+                 new String[] {"A Fall", "A Spring", "A Summer", "A Winter"});
+         return data;
+ 
+     }
+ 
+     /**
+      * Creates a sample symbolic dataset.
+      *
+      * @return The dataset.
+      */
+     public static SampleYSymbolicDataset createYSymbolicSample2() {
+ 
+         final String[] sData = {"Giraffe", "Gazelle", "Zebra", "Gnu"};
+         final SampleYSymbolicDataset data
+             = new SampleYSymbolicDataset("BY Sample", 40, sData, 4, 20,
+                 new String[] {"B Fall", "B Spring", "B Summer", "B Winter"});
+         return data;
+ 
+     }
+ 
+     /**
+      * The starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final SampleYSymbolicDataset s1 = createYSymbolicSample1();
+         final SampleYSymbolicDataset s2 = createYSymbolicSample2();
+ 
+         displayYSymbolic("Example 1", s1, "Animal A", "Miles", "Animal");
+ 
+         displayYSymbolic("Example 2", s2, "Animal B", "Miles", "Animal");
+ 
+         displayYSymbolicCombinedHorizontally("Example 3", (SampleYSymbolicDataset) s1.clone(),
+                                                           (SampleYSymbolicDataset) s2.clone());
+ 
+         displayYSymbolicCombinedVertically("Example 4", (SampleYSymbolicDataset) s1.clone(),
+                                                         (SampleYSymbolicDataset) s2.clone());
+ 
+         displayYSymbolicOverlaid("Example 5", (SampleYSymbolicDataset) s1.clone(),
+                                               (SampleYSymbolicDataset) s2.clone());
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ThermometerDemo2.java jfreechart/source/org/jfree/chart/demo/ThermometerDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/ThermometerDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ThermometerDemo2.java	2004-11-07 16:24:09.000000000 +0100
***************
*** 0 ****
--- 1,119 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * ThermometerDemo2.java
+  * ---------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: ThermometerDemo2.java,v 1.8 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 17-Sep-2002 : Version 1 (DG);
+  * 11-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.awt.Insets;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.ThermometerPlot;
+ import org.jfree.data.general.DefaultValueDataset;
+ import org.jfree.ui.ApplicationFrame;
+ 
+ /**
+  * A simple demonstration application showing how to create a thermometer.
+  *
+  */
+ public class ThermometerDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public ThermometerDemo2(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final DefaultValueDataset dataset = new DefaultValueDataset(new Double(43.0));
+ 
+         // create the chart...
+         final ThermometerPlot plot = new ThermometerPlot(dataset);
+         final JFreeChart chart = new JFreeChart("Thermometer Demo 2",  // chart title
+                                           JFreeChart.DEFAULT_TITLE_FONT,
+                                           plot,                 // plot
+                                           false);               // include legend
+ 
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         plot.setInsets(new Insets(5, 5, 5, 5));
+         //plot.setRangeInfo(ThermometerPlot.NORMAL, 0.0, 55.0, 0.0, 100.0);
+         //plot.setRangeInfo(ThermometerPlot.WARNING, 55.0, 75.0, 0.0, 100.0);
+         //plot.setRangeInfo(ThermometerPlot.CRITICAL, 75.0, 100.0, 0.0, 100.0);
+ 
+         plot.setThermometerStroke(new BasicStroke(2.0f));
+         plot.setThermometerPaint(Color.lightGray);
+         // OPTIONAL CUSTOMISATION COMPLETED.
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final ThermometerDemo2 demo = new ThermometerDemo2("Thermometer Demo 2");
+         demo.pack();
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/ThermometerDemo.java jfreechart/source/org/jfree/chart/demo/ThermometerDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/ThermometerDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/ThermometerDemo.java	2004-11-07 16:24:14.000000000 +0100
***************
*** 0 ****
--- 1,500 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * ThermometerDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Australian Antarctic Division and Contributors.
+  *
+  * Original Author:  Bryan Scott (for Australian Antarctic Division).
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: ThermometerDemo.java,v 1.13 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes (since 24-Apr-2002)
+  * ---------------------------
+  * 24-Apr-2002 : added standard source header (DG);
+  * 17-Sep-2002 : fixed errors reported by Checkstyle 2.3 (DG);
+  * 19-Nov-2003 : Added support for Left value display
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.Dimension;
+ import java.awt.Font;
+ import java.awt.GridLayout;
+ import java.awt.Toolkit;
+ import java.awt.event.ActionEvent;
+ import java.text.DecimalFormat;
+ 
+ import javax.swing.BorderFactory;
+ import javax.swing.JButton;
+ import javax.swing.JComboBox;
+ import javax.swing.JFrame;
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.JThermometer;
+ import org.jfree.chart.plot.MeterPlot;
+ import org.jfree.data.general.DefaultValueDataset;
+ 
+ /**
+  * A demonstration application for the thermometer plot.
+  *
+  * @author Bryan Scott
+  */
+ public class ThermometerDemo extends JPanel {
+ 
+   /** Options for the value label position combo box. */
+   protected static final String[] OPTIONS = {
+       "None", "Right", "Left", "Bulb"};
+ 
+   /** Axis position options. */
+   protected static final String[] AXIS_OPTIONS = {
+       "None", "Right", "Left"};
+ 
+   /** The dataset. */
+   private DefaultValueDataset data = new DefaultValueDataset(20.0);
+ 
+   /** The meter plot (dial). */
+   private MeterPlot meterplot = new MeterPlot(this.data);
+ 
+   /** The meter chart (dial). */
+   private JFreeChart meterchart = new JFreeChart("Meter Chart",
+                                                  JFreeChart.DEFAULT_TITLE_FONT,
+                                                  this.meterplot, false);
+ 
+   /** The meter panel. */
+   private ChartPanel panelMeter = new ChartPanel(this.meterchart);
+ 
+   /** Panel 1. */
+   private JPanel jPanel1 = new JPanel();
+ 
+   /** Increment button for thermometer ?. */
+   private JButton butUp3 = new JButton();
+ 
+   /** Decrement button for thermometer ?. */
+   private JButton butDown3 = new JButton();
+ 
+   /** Panel 2. */
+   private JPanel jPanel2 = new JPanel();
+ 
+   /** Borderlayout 2. */
+   private BorderLayout borderLayout2 = new BorderLayout();
+ 
+   /** Panel 3. */
+   private JPanel jPanel3 = new JPanel();
+ 
+   /** Borderlayout 3. */
+   private BorderLayout borderLayout3 = new BorderLayout();
+ 
+   /** Panel 4. */
+   private JPanel jPanel4 = new JPanel();
+ 
+   /** Decrement button for thermometer ?. */
+   private JButton butDown2 = new JButton();
+ 
+   /** Increment button for thermometer ?. */
+   private JButton butUp2 = new JButton();
+ 
+   /** Panel 5. */
+   private JPanel jPanel5 = new JPanel();
+ 
+   /** Grid layout 1. */
+   private GridLayout gridLayout1 = new GridLayout();
+ 
+   /** Panel 6. */
+   private JPanel jPanel6 = new JPanel();
+ 
+   /** Increment button for thermometer ?. */
+   private JButton butUp1 = new JButton();
+ 
+   /** Decrement button for thermometer ?. */
+   private JButton butDown1 = new JButton();
+ 
+   /** Thermometer 1. */
+   private JThermometer thermo1 = new JThermometer();
+ 
+   /** Thermometer 2. */
+   private JThermometer thermo2 = new JThermometer();
+ 
+   /** Thermometer 2. */
+   private JThermometer thermo3 = new JThermometer();
+ 
+   /** Array of thermometers. */
+   private JThermometer[] thermo = new JThermometer[3];
+ 
+   /** Borderlayout 1. */
+   private BorderLayout borderLayout1 = new BorderLayout();
+ 
+   /** Panel 7. */
+   private JPanel jPanel7 = new JPanel();
+ 
+   /** Panel 8. */
+   private JPanel jPanel8 = new JPanel();
+ 
+   /** Panel 9. */
+   private JPanel jPanel9 = new JPanel();
+ 
+   /** Grid layout 2. */
+   private GridLayout gridLayout2 = new GridLayout();
+ 
+   /** Grid layout 3. */
+   private GridLayout gridLayout3 = new GridLayout();
+ 
+   /** Grid layout 4. */
+   private GridLayout gridLayout4 = new GridLayout();
+ 
+   /** Combo box 1 for value label position. */
+   private JComboBox pickShow0 = new JComboBox(OPTIONS);
+ 
+   /** Combo box 2 for value label position. */
+   private JComboBox pickShow1 = new JComboBox(OPTIONS);
+ 
+   /** Combo box 3 for value label position. */
+   private JComboBox pickShow2 = new JComboBox(OPTIONS);
+ 
+   /** Combo box 1 for axis position. */
+   private JComboBox pickAxis0 = new JComboBox(AXIS_OPTIONS);
+   /** Combo box 2 for axis position. */
+   private JComboBox pickAxis1 = new JComboBox(AXIS_OPTIONS);
+   /** Combo box 3 for axis position. */
+   private JComboBox pickAxis2 = new JComboBox(AXIS_OPTIONS);
+ 
+   /** An array of combo boxes. */
+   private JComboBox[] pickShow = new JComboBox[3];
+ 
+   /** An array of combo boxes. */
+   private JComboBox[] pickAxis = new JComboBox[3];
+ 
+   /** Panel 10. */
+   private JPanel jPanel10 = new JPanel();
+ 
+   /** Borderlayout 4. */
+   private BorderLayout borderLayout4 = new BorderLayout();
+ 
+   /** Panel 11. */
+   private JPanel jPanel11 = new JPanel();
+ 
+   /** Decrement button for thermometer ?. */
+   private JButton butDown4 = new JButton();
+ 
+   /** Increment button for thermometer ?. */
+   private JButton butUp4 = new JButton();
+ 
+   /**
+    * Default constructor.
+    */
+   public ThermometerDemo() {
+     try {
+       jbInit();
+     }
+     catch (Exception ex) {
+       ex.printStackTrace();
+     }
+   }
+ 
+   // ****************************************************************************
+   // * COMMERCIAL SUPPORT / JFREECHART DEVELOPER GUIDE                          *
+   // * Please note that commercial support and documentation is available from: *
+   // *                                                                          *
+   // * http://www.object-refinery.com/jfreechart/support.html                   *
+   // *                                                                          *
+   // * This is not only a great service for developers, but is a VERY IMPORTANT *
+   // * source of funding for the JFreeChart project.  Please support us so that *
+   // * we can continue developing free software.                                *
+   // ****************************************************************************
+ 
+   /**
+    * Initialises the class.
+    *
+    * @throws Exception for any exception.
+    */
+   void jbInit() throws Exception {
+ 
+     //data.setRange(new Double(-20), new Double(20));
+     this.thermo[0] = this.thermo1;
+     this.thermo[1] = this.thermo2;
+     this.thermo[2] = this.thermo3;
+ 
+     this.thermo[0].setValue(0.0);
+     this.thermo[1].setValue(0.2);
+     this.thermo[2].setValue(0.3);
+ 
+     this.thermo[0].setBackground(Color.white);
+     this.thermo[2].setBackground(Color.white);
+ 
+     this.thermo[0].setOutlinePaint(null);
+     this.thermo[1].setOutlinePaint(null);
+     this.thermo[2].setOutlinePaint(null);
+ 
+     this.thermo[0].setUnits(0);
+     this.thermo[1].setUnits(1);
+     this.thermo[2].setUnits(2);
+ 
+     //thermo[0].setFont(new Font("SansSerif", Font.BOLD, 20));
+     this.thermo[0].setShowValueLines(true);
+     this.thermo[0].setFollowDataInSubranges(true);
+     this.thermo[1].setValueLocation(1);
+ 
+     this.thermo[1].setForeground(Color.blue);
+     this.thermo[2].setForeground(Color.pink);
+ 
+     this.thermo[0].setRange(-10.0, 40.0);
+     this.thermo[0].setSubrangeInfo(0, -50.0, 20.0, -10.0, 22.0);
+     this.thermo[0].setSubrangeInfo(1, 20.0, 24.0, 18.0, 26.0);
+     this.thermo[0].setSubrangeInfo(2, 24.0, 100.0, 22.0, 40.0);
+ 
+     this.thermo[0].addSubtitle("Sea Water Temp");
+     this.thermo[1].addSubtitle("Air Temp", new Font("SansSerif", Font.PLAIN, 16));
+     this.thermo[2].addSubtitle("Ship Temp",
+                           new Font("SansSerif", Font.ITALIC + Font.BOLD, 20));
+ 
+     this.thermo[1].setValueFormat(new DecimalFormat("#0.0"));
+     this.thermo[2].setValueFormat(new DecimalFormat("#0.00"));
+ 
+     this.pickShow[0] = this.pickShow0;
+     this.pickShow[1] = this.pickShow1;
+     this.pickShow[2] = this.pickShow2;
+ 
+     this.pickAxis[0] = this.pickAxis0;
+     this.pickAxis[1] = this.pickAxis1;
+     this.pickAxis[2] = this.pickAxis2;
+ 
+     this.pickAxis[0].setSelectedIndex(2);
+     this.pickAxis[1].setSelectedIndex(2);
+     this.pickAxis[2].setSelectedIndex(2);
+ 
+     setLayout(this.gridLayout1);
+     this.butDown3.setText("<");
+     this.butDown3.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setValue(2, -1);
+       }
+     });
+     this.butUp3.setText(">");
+     this.butUp3.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setValue(2, 1);
+       }
+     });
+     this.jPanel1.setLayout(this.borderLayout2);
+     this.jPanel3.setLayout(this.borderLayout3);
+     this.butDown2.setText("<");
+     this.butDown2.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setValue(1, -1);
+       }
+     });
+     this.butUp2.setText(">");
+     this.butUp2.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setValue(1, 1);
+       }
+     });
+     this.butUp1.setText(">");
+     this.butUp1.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setValue(0, 1);
+       }
+     });
+     this.butDown1.setText("<");
+     this.butDown1.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setValue(0, -1);
+       }
+     });
+     this.jPanel5.setLayout(this.borderLayout1);
+     this.pickShow0.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setShowValue(0);
+       }
+     });
+     this.pickShow1.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setShowValue(1);
+       }
+     });
+     this.pickShow2.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setShowValue(2);
+       }
+     });
+ 
+     this.pickAxis0.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setShowAxis(0);
+       }
+     });
+     this.pickAxis1.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setShowAxis(1);
+       }
+     });
+     this.pickAxis2.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setShowAxis(2);
+       }
+     });
+ 
+     this.jPanel9.setLayout(this.gridLayout2);
+     this.gridLayout2.setColumns(1);
+     this.jPanel8.setLayout(this.gridLayout3);
+     this.jPanel7.setLayout(this.gridLayout4);
+     this.jPanel5.setBorder(BorderFactory.createEtchedBorder());
+     this.jPanel3.setBorder(BorderFactory.createEtchedBorder());
+     this.jPanel1.setBorder(BorderFactory.createEtchedBorder());
+     this.jPanel6.setBackground(Color.white);
+     this.jPanel2.setBackground(Color.white);
+     this.jPanel9.setBackground(Color.white);
+     this.jPanel10.setLayout(this.borderLayout4);
+     this.butDown4.setText("<");
+     this.butDown4.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setMeterValue(-1.1);
+       }
+     });
+     this.butUp4.setText(">");
+     this.butUp4.addActionListener(new java.awt.event.ActionListener() {
+       public void actionPerformed(final ActionEvent e) {
+         setMeterValue(1.1);
+       }
+     });
+     this.jPanel1.add(this.thermo3, BorderLayout.CENTER);
+     this.jPanel1.add(this.jPanel2, BorderLayout.SOUTH);
+     this.jPanel2.add(this.butDown3, null);
+     this.jPanel2.add(this.butUp3, null);
+     this.jPanel1.add(this.jPanel9, BorderLayout.NORTH);
+     this.jPanel9.add(this.pickShow2, null);
+     this.jPanel9.add(this.pickAxis2, null);
+     add(this.jPanel10, null);
+     this.jPanel10.add(this.jPanel11, BorderLayout.SOUTH);
+     this.jPanel11.add(this.butDown4, null);
+     this.jPanel11.add(this.butUp4, null);
+     this.jPanel4.add(this.butDown2, null);
+     this.jPanel4.add(this.butUp2, null);
+     this.jPanel3.add(this.jPanel8, BorderLayout.NORTH);
+     this.jPanel8.add(this.pickShow1, null);
+     this.jPanel8.add(this.pickAxis1, null);
+     this.jPanel3.add(this.thermo2, BorderLayout.CENTER);
+     this.jPanel3.add(this.jPanel4, BorderLayout.SOUTH);
+     add(this.jPanel5, null);
+     this.jPanel5.add(this.thermo1, BorderLayout.CENTER);
+     this.jPanel5.add(this.jPanel6, BorderLayout.SOUTH);
+     this.jPanel6.add(this.butDown1, null);
+     this.jPanel6.add(this.butUp1, null);
+     this.jPanel5.add(this.jPanel7, BorderLayout.NORTH);
+     this.jPanel7.add(this.pickShow0, null);
+     this.jPanel7.add(this.pickAxis0, null);
+     add(this.jPanel3, null);
+     add(this.jPanel1, null);
+     this.jPanel10.add(this.panelMeter, BorderLayout.CENTER);
+   }
+ 
+   /**
+    * Starting point for the demo application.
+    *
+    * @param args  ignored.
+    */
+   public static void main(final String[] args) {
+ 
+     final ThermometerDemo panel = new ThermometerDemo();
+ 
+     final JFrame frame = new JFrame();
+     frame.getContentPane().setLayout(new BorderLayout(5, 5));
+     frame.setDefaultCloseOperation(3);
+     frame.setTitle("Thermometer Test");
+     frame.getContentPane().add(panel, BorderLayout.CENTER);
+     frame.setSize(700, 400);
+     final Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
+     frame.setLocation((d.width - frame.getSize().width) / 2,
+                       (d.height - frame.getSize().height) / 2);
+     frame.setVisible(true);
+ 
+   }
+ 
+   /**
+    * Sets the value of one of the thermometers.
+    *
+    * @param thermometer  the thermometer index.
+    * @param value  the value.
+    */
+   private void setValue(final int thermometer, final double value) {
+     if ((thermometer >= 0) && (thermometer < 3)) {
+       try {
+         this.thermo[thermometer].setValue(
+             this.thermo[thermometer].getValue().doubleValue() + value
+         );
+       }
+       catch (Exception ex) {
+         ex.printStackTrace();
+       }
+     }
+   }
+ 
+   /**
+    * Sets the meter value.
+    *
+    * @param value  the value.
+    */
+   private void setMeterValue(final double value) {
+     try {
+       double newValue = value;
+       if (this.data.getValue() != null) {
+         newValue += this.data.getValue().doubleValue();
+       }
+       this.data.setValue(new Double(newValue));
+     }
+     catch (Exception ex) {
+       System.err.println(ex.getMessage());
+     }
+   }
+ 
+   /**
+    * Sets the value label position for one of the thermometers.
+    *
+    * @param thermometer  the thermometer index.
+    */
+   private void setShowValue(final int thermometer) {
+     if ((thermometer >= 0) && (thermometer < 3)) {
+         this.thermo[thermometer].setValueLocation(this.pickShow[thermometer].
+                                            getSelectedIndex());
+     }
+   }
+ 
+   /**
+    * Sets the axis position for one of the thermometers.
+    *
+    * @param thermometer  the thermometer index.
+    */
+   private void setShowAxis(final int thermometer) {
+     if ((thermometer >= 0) && (thermometer < 3)) {
+         this.thermo[thermometer].setShowAxisLocation(this.pickAxis[thermometer].
+                                            getSelectedIndex());
+     }
+   }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimePeriodValuesDemo2.java jfreechart/source/org/jfree/chart/demo/TimePeriodValuesDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimePeriodValuesDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimePeriodValuesDemo2.java	2004-11-07 16:24:01.000000000 +0100
***************
*** 0 ****
--- 1,143 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * TimePeriodValuesDemo2.java
+  * --------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimePeriodValuesDemo2.java,v 1.7 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 30-Jul-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.SimpleTimePeriod;
+ import org.jfree.data.time.TimePeriodValues;
+ import org.jfree.data.time.TimePeriodValuesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * An example of....
+  *
+  */
+ public class TimePeriodValuesDemo2 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to....
+      *
+      * @param title  the frame title.
+      */
+     public TimePeriodValuesDemo2(final String title) {
+ 
+         super(title);
+ 
+         final XYDataset data1 = createDataset();
+         final XYItemRenderer renderer1 = new XYBarRenderer();
+         
+         final DateAxis domainAxis = new DateAxis("Date");
+         final ValueAxis rangeAxis = new NumberAxis("Value");
+         
+         final XYPlot plot = new XYPlot(data1, domainAxis, rangeAxis, renderer1);
+ 
+         final JFreeChart chart = new JFreeChart("Time Period Values Demo", plot);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a dataset, consisting of two series of monthly data.
+      *
+      * @return the dataset.
+      */
+     public XYDataset createDataset() {
+ 
+         final TimePeriodValues s1 = new TimePeriodValues("Series 1");
+         final Day d1 = new Day();
+         final Day d2 = (Day) d1.next();
+         final Day d3 = (Day) d2.next();
+         final Day d4 = (Day) d3.next();
+         final Day d5 = (Day) d4.next();
+         final Day d6 = (Day) d5.next();
+         final Day d7 = (Day) d6.next();
+         
+         s1.add(new SimpleTimePeriod(d6.getStart(), d6.getEnd()), 74.95);
+         s1.add(new SimpleTimePeriod(d1.getStart(), d2.getEnd()), 55.75);
+         s1.add(new SimpleTimePeriod(d7.getStart(), d7.getEnd()), 90.45);
+         s1.add(new SimpleTimePeriod(d3.getStart(), d5.getEnd()), 105.75);
+ 
+         final TimePeriodValuesCollection dataset = new TimePeriodValuesCollection();
+         dataset.addSeries(s1);
+         dataset.setDomainIsPointsInTime(false);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimePeriodValuesDemo2 demo = new TimePeriodValuesDemo2("Time Period Values Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimePeriodValuesDemo3.java jfreechart/source/org/jfree/chart/demo/TimePeriodValuesDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimePeriodValuesDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimePeriodValuesDemo3.java	2004-11-07 16:23:56.000000000 +0100
***************
*** 0 ****
--- 1,161 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------------
+  * TimePeriodValuesDemo3.java
+  * --------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimePeriodValuesDemo3.java,v 1.4 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 30-Jan-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.DateFormat;
+ import java.util.Date;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.SimpleTimePeriod;
+ import org.jfree.data.time.TimePeriodValues;
+ import org.jfree.data.time.TimePeriodValuesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * This demo shows a bar chart with time based data where the time periods are slightly
+  * irregular.
+  *
+  */
+ public class TimePeriodValuesDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public TimePeriodValuesDemo3(final String title) {
+ 
+         super(title);
+ 
+         final XYDataset data1 = createDataset();
+         final XYItemRenderer renderer1 = new XYBarRenderer();
+         
+         final DateAxis domainAxis = new DateAxis("Date");
+         final ValueAxis rangeAxis = new NumberAxis("Value");
+         
+         final XYPlot plot = new XYPlot(data1, domainAxis, rangeAxis, renderer1);
+ 
+         final JFreeChart chart = new JFreeChart("Time Period Values Demo 3", plot);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a dataset, consisting of two series of monthly data.
+      *
+      * @return the dataset.
+      */
+     public XYDataset createDataset() {
+ 
+         final TimePeriodValues s1 = new TimePeriodValues("Series 1");
+         
+         final DateFormat df = DateFormat.getInstance();
+         try {
+             final Date d0 = df.parse("11/5/2003 0:00:00.000");
+             final Date d1 = df.parse("11/5/2003 0:15:00.000");
+             final Date d2 = df.parse("11/5/2003 0:30:00.000");
+             final Date d3 = df.parse("11/5/2003 0:45:00.000");
+             final Date d4 = df.parse("11/5/2003 1:00:00.001");
+             final Date d5 = df.parse("11/5/2003 1:14:59.999");
+             final Date d6 = df.parse("11/5/2003 1:30:00.000");
+             final Date d7 = df.parse("11/5/2003 1:45:00.000");
+             final Date d8 = df.parse("11/5/2003 2:00:00.000");
+             final Date d9 = df.parse("11/5/2003 2:15:00.000");
+                 
+             s1.add(new SimpleTimePeriod(d0, d1), 0.39);
+             //s1.add(new SimpleTimePeriod(d1, d2), 0.338);
+             s1.add(new SimpleTimePeriod(d2, d3), 0.225);
+             s1.add(new SimpleTimePeriod(d3, d4), 0.235);
+             s1.add(new SimpleTimePeriod(d4, d5), 0.238);
+             s1.add(new SimpleTimePeriod(d5, d6), 0.236);
+             s1.add(new SimpleTimePeriod(d6, d7), 0.25);
+             s1.add(new SimpleTimePeriod(d7, d8), 0.238);
+             s1.add(new SimpleTimePeriod(d8, d9), 0.215);
+         }
+         catch (Exception e) {
+             System.out.println(e.toString());
+         }
+ 
+         final TimePeriodValuesCollection dataset = new TimePeriodValuesCollection();
+         dataset.addSeries(s1);
+         dataset.setDomainIsPointsInTime(false);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimePeriodValuesDemo3 demo = new TimePeriodValuesDemo3("Time Period Values Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimePeriodValuesDemo.java jfreechart/source/org/jfree/chart/demo/TimePeriodValuesDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimePeriodValuesDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimePeriodValuesDemo.java	2004-11-07 16:24:05.000000000 +0100
***************
*** 0 ****
--- 1,188 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * TimePeriodValuesDemo.java
+  * -------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimePeriodValuesDemo.java,v 1.18 2004/04/27 14:53:10 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1 (DG);
+  * 25-Jun-2002 : Removed unnecessary import (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickUnit;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYBarRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.Hour;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.SimpleTimePeriod;
+ import org.jfree.data.time.TimePeriodValues;
+ import org.jfree.data.time.TimePeriodValuesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * An example of....
+  *
+  */
+ public class TimePeriodValuesDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to....
+      *
+      * @param title  the frame title.
+      */
+     public TimePeriodValuesDemo(final String title) {
+ 
+         super(title);
+ 
+         final XYDataset data1 = createDataset1();
+         final XYItemRenderer renderer1 = new XYBarRenderer();
+         
+         final DateAxis domainAxis = new DateAxis("Date");
+         domainAxis.setVerticalTickLabels(true);
+         domainAxis.setTickUnit(new DateTickUnit(DateTickUnit.HOUR, 1));
+         domainAxis.setDateFormatOverride(new SimpleDateFormat("hh:mm"));
+         domainAxis.setLowerMargin(0.01);
+         domainAxis.setUpperMargin(0.01);
+         final ValueAxis rangeAxis = new NumberAxis("Value");
+         
+         final XYPlot plot = new XYPlot(data1, domainAxis, rangeAxis, renderer1);
+ 
+         final XYDataset data2 = createDataset2();
+         final StandardXYItemRenderer renderer2
+             = new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES_AND_LINES);
+         renderer2.setShapesFilled(true);
+         
+         plot.setDataset(1, data2);
+         plot.setRenderer(1, renderer2);
+ 
+         final JFreeChart chart = new JFreeChart("Supply and Demand", plot);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a dataset, consisting of two series of monthly data.
+      *
+      * @return the dataset.
+      */
+     public XYDataset createDataset1() {
+ 
+         final TimePeriodValues s1 = new TimePeriodValues("Supply");
+         final TimePeriodValues s2 = new TimePeriodValues("Demand");
+         final Day today = new Day();
+         for (int i = 0; i < 24; i++) {
+             final Minute m0 = new Minute(0, new Hour(i, today));
+             final Minute m1 = new Minute(15, new Hour(i, today));
+             final Minute m2 = new Minute(30, new Hour(i, today));
+             final Minute m3 = new Minute(45, new Hour(i, today));
+             final Minute m4 = new Minute(0, new Hour(i + 1, today));
+             s1.add(new SimpleTimePeriod(m0.getStart(), m1.getStart()), Math.random());
+             s2.add(new SimpleTimePeriod(m1.getStart(), m2.getStart()), Math.random());
+             s1.add(new SimpleTimePeriod(m2.getStart(), m3.getStart()), Math.random());
+             s2.add(new SimpleTimePeriod(m3.getStart(), m4.getStart()), Math.random());
+         }
+ 
+         final TimePeriodValuesCollection dataset = new TimePeriodValuesCollection();
+         dataset.addSeries(s1);
+         dataset.addSeries(s2);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Creates a dataset, consisting of two series of monthly data.
+      *
+      * @return the dataset.
+      */
+     public XYDataset createDataset2() {
+ 
+         final TimePeriodValues s1 = new TimePeriodValues("WebCOINS");
+         final Day today = new Day();
+         for (int i = 0; i < 24; i++) {
+             final Minute m0 = new Minute(0, new Hour(i, today));
+             final Minute m1 = new Minute(30, new Hour(i, today));
+             final Minute m2 = new Minute(0, new Hour(i + 1, today));
+             s1.add(new SimpleTimePeriod(m0.getStart(), m1.getStart()), Math.random() * 2.0);
+             s1.add(new SimpleTimePeriod(m1.getStart(), m2.getStart()), Math.random() * 2.0);
+         }
+ 
+         final TimePeriodValuesCollection dataset = new TimePeriodValuesCollection();
+         dataset.addSeries(s1);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimePeriodValuesDemo demo = new TimePeriodValuesDemo("Time Period Values Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo10.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo10.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo10.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo10.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,116 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * TimeSeriesDemo10.java
+  * ---------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo10.java,v 1.10 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 21-Feb-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.data.time.Hour;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing a time series with per minute data.
+  *
+  */
+ public class TimeSeriesDemo10 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo10(final String title) {
+ 
+         super(title);
+ 
+         final TimeSeries series = new TimeSeries("Per Minute Data", Minute.class);
+         final Hour hour = new Hour();
+         series.add(new Minute(1, hour), 10.2);
+         series.add(new Minute(3, hour), 17.3);
+         series.add(new Minute(9, hour), 14.6);
+         series.add(new Minute(11, hour), 11.9);
+         series.add(new Minute(15, hour), 13.5);
+         series.add(new Minute(19, hour), 10.9);
+         final TimeSeriesCollection dataset = new TimeSeriesCollection(series);
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Time Series Demo 10",
+             "Time", 
+             "Value",
+             dataset,
+             true,
+             true,
+             false
+         );
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo10 demo = new TimeSeriesDemo10("Time Series Demo 10");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo11.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo11.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo11.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo11.java	2004-11-07 16:26:04.000000000 +0100
***************
*** 0 ****
--- 1,209 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * TimeSeriesDemo11.java
+  * ---------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo11.java,v 1.10 2004/04/30 07:42:50 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 12-Aug-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GridLayout;
+ 
+ import javax.swing.JPanel;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.RegularTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.date.SerialDate;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * An example of....
+  *
+  */
+ public class TimeSeriesDemo11 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to...
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo11(final String title) {
+ 
+         super(title);
+         final JPanel panel = new JPanel(new GridLayout(2, 2));
+         panel.setPreferredSize(new java.awt.Dimension(800, 600));
+         
+         final Day today = new Day();
+         final XYDataset dataset = createDataset("Series 1", 100.0, today, 365);
+ 
+         final JFreeChart chart1 = createChart("Chart 1 : 1 Year", dataset);
+         final ChartPanel chartPanel1 = new ChartPanel(chart1);
+         panel.add(chartPanel1);
+         
+         final JFreeChart chart2 = createChart("Chart 2 : 6 Months", dataset);
+         final SerialDate t = today.getSerialDate();
+         final SerialDate t6m = SerialDate.addMonths(-6, t);
+         final Day sixMonthsAgo = new Day(t6m);
+         final DateAxis axis2 = (DateAxis) chart2.getXYPlot().getDomainAxis();
+         axis2.setRange(sixMonthsAgo.getStart(), today.getEnd());
+         final ChartPanel chartPanel2 = new ChartPanel(chart2);
+         panel.add(chartPanel2);
+         
+         final JFreeChart chart3 = createChart("Chart 3 : 3 Months", dataset);
+         final SerialDate t3m = SerialDate.addMonths(-3, t);
+         final Day threeMonthsAgo = new Day(t3m);
+         final DateAxis axis3 = (DateAxis) chart3.getXYPlot().getDomainAxis();
+         axis3.setRange(threeMonthsAgo.getStart(), today.getEnd());
+         final ChartPanel chartPanel3 = new ChartPanel(chart3);
+         panel.add(chartPanel3);
+         
+         final JFreeChart chart4 = createChart("Chart 4 : 1 Month", dataset);
+         final SerialDate t1m = SerialDate.addMonths(-1, t);
+         final Day oneMonthsAgo = new Day(t1m);
+         final DateAxis axis4 = (DateAxis) chart4.getXYPlot().getDomainAxis();
+         axis4.setRange(oneMonthsAgo.getStart(), today.getEnd());
+         final ChartPanel chartPanel4 = new ChartPanel(chart4);
+         panel.add(chartPanel4);
+         
+         setContentPane(panel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates the demo chart.
+      * 
+      * @param title  the title.
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final String title, final XYDataset dataset) {
+ 
+         
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             title, 
+             "Date", 
+             "Price",
+             dataset, 
+             true, 
+             true, 
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+         final XYPlot plot = chart.getXYPlot();
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPaint(Color.blue);
+                
+         return chart;
+         
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @param name  the dataset name.
+      * @param base  the starting value.
+      * @param start  the starting period.
+      * @param count  the number of values to generate.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset(final String name, 
+                                     final double base, 
+                                     final RegularTimePeriod start, 
+                                     final int count) {
+ 
+         final TimeSeries series = new TimeSeries(name, start.getClass());
+         RegularTimePeriod period = start;
+         double value = base;
+         for (int i = 0; i < count; i++) {
+             series.add(period, value);    
+             period = period.previous();
+             value = value * (1 + (Math.random() - 0.495) / 10.0);
+         }
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(series);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo11 demo = new TimeSeriesDemo11("Time Series Demo 11");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo12.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo12.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo12.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo12.java	2004-11-07 16:26:00.000000000 +0100
***************
*** 0 ****
--- 1,187 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * TimeSeriesDemo12.java
+  * ---------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo12.java,v 1.7 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 07-Dec-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Minute;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A demo.
+  * 
+  */
+ public class TimeSeriesDemo12 extends ApplicationFrame {
+ 
+     /**
+      * A demo.
+      * 
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo12(final String title) {
+ 
+         super(title);
+ 
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Sample Chart",
+             "Date", 
+             "Value",
+             dataset,
+             true,
+             true,
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+         
+         final StandardLegend sl = (StandardLegend) chart.getLegend();
+         sl.setDisplaySeriesShapes(true);
+ 
+         final XYPlot plot = chart.getXYPlot();
+         //plot.setOutlinePaint(null);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainCrosshairVisible(true);
+         plot.setRangeCrosshairVisible(false);
+         
+         final XYItemRenderer renderer = plot.getRenderer();
+         if (renderer instanceof StandardXYItemRenderer) {
+             final StandardXYItemRenderer rr = (StandardXYItemRenderer) renderer;
+             rr.setPlotShapes(true);
+             rr.setShapesFilled(true);
+             renderer.setSeriesStroke(0, new BasicStroke(2.0f));
+             renderer.setSeriesStroke(1, new BasicStroke(2.0f));
+            }
+         
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setDateFormatOverride(new SimpleDateFormat("hh:mma"));
+         
+         return chart;
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return the dataset.
+      */
+     private XYDataset createDataset() {
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.setDomainIsPointsInTime(true);
+         
+         final TimeSeries s1 = new TimeSeries("Series 1", Minute.class);
+         s1.add(new Minute(0, 0, 7, 12, 2003), 1.2);
+         s1.add(new Minute(30, 12, 7, 12, 2003), 3.0);
+         s1.add(new Minute(15, 14, 7, 12, 2003), 8.0);
+         
+         final TimeSeries s2 = new TimeSeries("Series 2", Minute.class);
+         s2.add(new Minute(0, 3, 7, 12, 2003), 0.0);
+         s2.add(new Minute(30, 9, 7, 12, 2003), 0.0);
+         s2.add(new Minute(15, 10, 7, 12, 2003), 0.0);
+         
+         dataset.addSeries(s1);
+         dataset.addSeries(s2);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo12 demo = new TimeSeriesDemo12("Time Series Demo 12");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo13.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo13.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo13.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo13.java	2004-11-07 16:25:56.000000000 +0100
***************
*** 0 ****
--- 1,208 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * TimeSeriesDemo13.java
+  * ---------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo13.java,v 1.4 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 11-Feb-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.text.SimpleDateFormat;
+ 
+ import javax.swing.JPanel;
+ import javax.swing.JTabbedPane;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickUnit;
+ import org.jfree.chart.axis.TickUnits;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.RegularTimePeriod;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.time.Week;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * This demo shows two charts that use weekly data.  A custom tick unit collection is defined to
+  * control the domain axis formatting.
+  *
+  */
+ public class TimeSeriesDemo13 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo13(final String title) {
+         
+         super(title);
+         
+         final XYDataset dataset1 = createDataset(26);
+         final JFreeChart chart1 = createChart(dataset1);
+         final ChartPanel chartPanel1 = new ChartPanel(chart1);
+        
+         final XYDataset dataset2 = createDataset(1);
+         final JFreeChart chart2 = createChart(dataset2);
+         final ChartPanel chartPanel2 = new ChartPanel(chart2);
+         
+         final JTabbedPane tabs = new JTabbedPane();
+         tabs.add("Chart 1", chartPanel1);
+         tabs.add("Chart 2", chartPanel2);
+         final JPanel content = new JPanel(new BorderLayout());
+         content.setPreferredSize(new java.awt.Dimension(500, 270));
+         content.add(tabs);
+         setContentPane(content);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Weekly Data",
+             "Date", 
+             "Value",
+             dataset,
+             true,
+             true,
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+ 
+         final StandardLegend sl = (StandardLegend) chart.getLegend();
+         sl.setDisplaySeriesShapes(true);
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainCrosshairVisible(true);
+         plot.setRangeCrosshairVisible(true);
+         
+         final XYItemRenderer renderer = plot.getRenderer();
+         if (renderer instanceof StandardXYItemRenderer) {
+             final StandardXYItemRenderer rr = (StandardXYItemRenderer) renderer;
+             rr.setPlotShapes(true);
+             rr.setShapesFilled(true);
+         }
+         
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         final TickUnits standardUnits = new TickUnits();
+         standardUnits.add(
+             new DateTickUnit(DateTickUnit.DAY, 1, new SimpleDateFormat("MMM dd ''yy"))
+         );
+         standardUnits.add(
+                 new DateTickUnit(DateTickUnit.DAY, 7, new SimpleDateFormat("MMM dd ''yy"))
+         );
+         standardUnits.add(
+                 new DateTickUnit(DateTickUnit.MONTH, 1, new SimpleDateFormat("MMM ''yy"))
+         );
+         axis.setStandardTickUnits(standardUnits);
+         
+         return chart;
+ 
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a dataset containing random values at weekly intervals.
+      *
+      * @param items  the number of items in the dataset.
+      * 
+      * @return the dataset.
+      */
+     private XYDataset createDataset(final int items) {
+ 
+         final TimeSeries s1 = new TimeSeries("Random Data", Week.class);
+         RegularTimePeriod t = new Week();
+         double v = 100.0;
+         for (int i = 0; i < items; i++) {
+             s1.add(t, v);
+             v = v * (1 + ((Math.random() - 0.499) / 100.0));
+             t = t.next();
+         }
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection(s1);
+         dataset.setDomainIsPointsInTime(true);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo13 demo = new TimeSeriesDemo13("Time Series Demo 13");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo2.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo2.java	2004-11-07 15:19:41.000000000 +0100
***************
*** 0 ****
--- 1,121 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * TimeSeriesDemo2.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo2.java,v 1.12 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.ValueMarker;
+ import org.jfree.data.time.Quarter;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing a time series (quarterly data) with a <code>null</code> value.  The
+  * <code>null</code> value causes a gap in the line connecting the data points.
+  *
+  */
+ public class TimeSeriesDemo2 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a quarterly time series containing a null value.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo2(final String title) {
+ 
+         super(title);
+ 
+         final TimeSeries series = new TimeSeries("Quarterly Data", Quarter.class);
+         series.add(new Quarter(1, 2001), 500.2);
+         series.add(new Quarter(2, 2001), 694.1);
+         series.add(new Quarter(3, 2001), 734.4);
+         series.add(new Quarter(4, 2001), 453.2);
+         series.add(new Quarter(1, 2002), 500.2);
+         series.add(new Quarter(2, 2002), null);
+         series.add(new Quarter(3, 2002), 734.4);
+         series.add(new Quarter(4, 2002), 453.2);
+         final TimeSeriesCollection dataset = new TimeSeriesCollection(series);
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Time Series Demo 2",
+             "Time", 
+             "Value",
+             dataset,
+             true,
+             true,
+             false
+         );
+         chart.getXYPlot().addRangeMarker(new ValueMarker(550.0));
+         final Quarter q = new Quarter(2, 2002);
+         chart.getXYPlot().addDomainMarker(new ValueMarker(q.getMiddleMillisecond()));
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo2 demo = new TimeSeriesDemo2("Time Series Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo3.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo3.java	2004-11-07 16:26:12.000000000 +0100
***************
*** 0 ****
--- 1,172 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * TimeSeriesDemo3.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo3.java,v 1.11 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 06-Aug-2002 : Version 1 (DG);
+  * 11-Oct-2002 : Fixes issues reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickUnit;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.time.Month;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A time series demo, with monthly data, where the tick unit on the axis is set to
+  * one month also (this switches off the auto tick unit selection, and *can* result in
+  * overlapping labels).
+  *
+  */
+ public class TimeSeriesDemo3 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a quarterly time series containing a null value.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo3(final String title) {
+ 
+         super(title);
+ 
+         final TimeSeries series1 = new TimeSeries("Series 1", Month.class);
+         series1.add(new Month(1, 2002), 500.2);
+         series1.add(new Month(2, 2002), 694.1);
+         series1.add(new Month(3, 2002), 734.4);
+         series1.add(new Month(4, 2002), 453.2);
+         series1.add(new Month(5, 2002), 500.2);
+         series1.add(new Month(6, 2002), 345.6);
+         series1.add(new Month(7, 2002), 500.2);
+         series1.add(new Month(8, 2002), 694.1);
+         series1.add(new Month(9, 2002), 734.4);
+         series1.add(new Month(10, 2002), 453.2);
+         series1.add(new Month(11, 2002), 500.2);
+         series1.add(new Month(12, 2002), 345.6);
+ 
+         final TimeSeries series2 = new TimeSeries("Series 2", Month.class);
+         series2.add(new Month(1, 2002), 234.1);
+         series2.add(new Month(2, 2002), 623.7);
+         series2.add(new Month(3, 2002), 642.5);
+         series2.add(new Month(4, 2002), 651.4);
+         series2.add(new Month(5, 2002), 643.5);
+         series2.add(new Month(6, 2002), 785.6);
+         series2.add(new Month(7, 2002), 234.1);
+         series2.add(new Month(8, 2002), 623.7);
+         series2.add(new Month(9, 2002), 642.5);
+         series2.add(new Month(10, 2002), 651.4);
+         series2.add(new Month(11, 2002), 643.5);
+         series2.add(new Month(12, 2002), 785.6);
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(series1);
+         dataset.addSeries(series2);
+ 
+         final JFreeChart chart = createChart(dataset);
+         
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a new chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The dataset.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Time Series Demo 3",
+             "Time",
+             "Value",
+             dataset,
+             true,
+             true,
+             false
+         );
+         final XYPlot plot = chart.getXYPlot();
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setTickUnit(new DateTickUnit(DateTickUnit.MONTH, 1,
+                                           new SimpleDateFormat("MMM-yyyy")));
+         axis.setVerticalTickLabels(true);
+         
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPlotShapes(true);
+         renderer.setSeriesShapesFilled(0, Boolean.TRUE);
+         renderer.setSeriesShapesFilled(1, Boolean.FALSE);
+ 
+         return chart;
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo3 demo = new TimeSeriesDemo3("Time Series Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo4.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo4.java	2004-11-07 16:25:51.000000000 +0100
***************
*** 0 ****
--- 1,147 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * TimeSeriesDemo4.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo4.java,v 1.13 2004/04/30 07:43:20 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1 (DG);
+  * 25-Jun-2002 : Removed unnecessary import (DG);
+  * 28-Aug-2002 : Centered frame on screen (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Insets;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.Marker;
+ import org.jfree.chart.plot.ValueMarker;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.Hour;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * An example of a time series chart using hourly data and including a null value.  The plot
+  * has an image set for the background, and a blue range marker is added to the plot.
+  *
+  */
+ public class TimeSeriesDemo4 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a quarterly time series containing a null value.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo4(final String title) {
+ 
+         super(title);
+         final TimeSeries series = new TimeSeries("Random Data", Hour.class);
+         final Day today = new Day();
+         series.add(new Hour(1, today), 500.2);
+         series.add(new Hour(2, today), 694.1);
+         series.add(new Hour(3, today), 734.4);
+         series.add(new Hour(4, today), 453.2);
+         series.add(new Hour(7, today), 500.2);
+         series.add(new Hour(8, today), null);
+         series.add(new Hour(12, today), 734.4);
+         series.add(new Hour(16, today), 453.2);
+         final TimeSeriesCollection dataset = new TimeSeriesCollection(series);
+ 
+         // create a title with Unicode characters (currency symbols in this case)...
+         final String chartTitle = "\u20A2\u20A2\u20A3\u20A4\u20A5\u20A6\u20A7\u20A8\u20A9\u20AA";
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             chartTitle,
+             "Time", 
+             "Value",
+             dataset,
+             true,
+             true,
+             false
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setInsets(new Insets(0, 0, 0, 20));
+         final Marker marker = new ValueMarker(700.0);
+         marker.setPaint(Color.blue);
+         marker.setAlpha(0.8f);
+         plot.addRangeMarker(marker);
+         plot.setBackgroundPaint(null);
+         plot.setBackgroundImage(JFreeChart.INFO.getLogo());
+         final XYItemRenderer renderer = plot.getRenderer();
+         if (renderer instanceof StandardXYItemRenderer) {
+             final StandardXYItemRenderer r = (StandardXYItemRenderer) renderer;
+             r.setPlotShapes(true);
+             r.setShapesFilled(true);
+         }
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo4 demo = new TimeSeriesDemo4("Time Series Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo5.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo5.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo5.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo5.java	2004-11-07 16:25:47.000000000 +0100
***************
*** 0 ****
--- 1,147 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * TimeSeriesDemo5.java
+  * --------------------
+  * (C) Copyright 2001-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo5.java,v 1.12 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes (from 24-Apr-2002)
+  * --------------------------
+  * 24-Apr-2002 : Added standard header (DG);
+  * 10-Oct-2002 : Renamed JFreeChartDemo2 --> TimeSeriesDemo5 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.data.general.SeriesException;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A time series chart with 4000 data points, to get an idea of how JFreeChart performs with a
+  * larger dataset.  You can see that it slows down significantly, so this needs to be worked on
+  * (4000 points is not that many!).
+  *
+  */
+ public class TimeSeriesDemo5 extends ApplicationFrame {
+     
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo5(final String title) {
+         
+         super(title);
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+         
+     }
+        
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private XYDataset createDataset() {
+         
+         final TimeSeries series = new TimeSeries("Random Data");
+         Day current = new Day(1, 1, 1990);
+         double value = 100.0;
+         for (int i = 0; i < 4000; i++) {
+             try {
+                 value = value + Math.random() - 0.5;
+                 series.add(current, new Double(value));
+                 current = (Day) current.next();
+             }
+             catch (SeriesException e) {
+                 System.err.println("Error adding to series");
+             }
+         }
+         return new TimeSeriesCollection(series);
+     }
+     
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         return ChartFactory.createTimeSeriesChart(
+             "Test", 
+             "Day", 
+             "Value", 
+             dataset,
+             false, 
+             false, 
+             false
+         );
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final String title = "\u20A2\u20A2\u20A2\u20A3\u20A4\u20A5\u20A6\u20A7\u20A8\u20A9\u20AA";
+         final TimeSeriesDemo5 demo = new TimeSeriesDemo5(title);
+         demo.pack();
+         RefineryUtilities.positionFrameRandomly(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo6.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo6.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo6.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo6.java	2004-11-07 16:25:42.000000000 +0100
***************
*** 0 ****
--- 1,169 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * TimeSeriesDemo6.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo6.java,v 1.11 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1 (DG);
+  * 25-Jun-2002 : Removed unnecessary import (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.time.Month;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A time series chart with all zero data.  When the data range is zero, you may want to modify
+  * the default behaviour of the range axis.
+  *
+  */
+ public class TimeSeriesDemo6 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new instance.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo6(final String title) {
+ 
+         super(title);
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Time Series Demo 6", 
+             "Date", 
+             "Value",
+             dataset, 
+             true, 
+             true, 
+             false
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setAutoRangeMinimumSize(1.0);    
+         return chart;   
+     
+     }   
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a dataset, consisting of two series of monthly data.
+      *
+      * @return the dataset.
+      */
+     public XYDataset createDataset() {
+ 
+         final double value = 0.0;
+         final TimeSeries s1 = new TimeSeries("Series 1", Month.class);
+         s1.add(new Month(2, 2001), value);
+         s1.add(new Month(3, 2001), value);
+         s1.add(new Month(4, 2001), value);
+         s1.add(new Month(5, 2001), value);
+         s1.add(new Month(6, 2001), value);
+         s1.add(new Month(7, 2001), value);
+         s1.add(new Month(8, 2001), value);
+         s1.add(new Month(9, 2001), value);
+         s1.add(new Month(10, 2001), value);
+         s1.add(new Month(11, 2001), value);
+         s1.add(new Month(12, 2001), value);
+         s1.add(new Month(1, 2002), value);
+         s1.add(new Month(2, 2002), value);
+         s1.add(new Month(3, 2002), value);
+         s1.add(new Month(4, 2002), value);
+         s1.add(new Month(5, 2002), value);
+         s1.add(new Month(6, 2002), value);
+         s1.add(new Month(7, 2002), value);
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(s1);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo6 demo = new TimeSeriesDemo6("Time Series Demo 6");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo7.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo7.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo7.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo7.java	2004-11-07 16:25:37.000000000 +0100
***************
*** 0 ****
--- 1,112 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * TimeSeriesDemo7.java
+  * --------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo7.java,v 1.11 2004/04/30 07:43:45 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 05-Feb-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A time series chart.
+  *
+  */
+ public class TimeSeriesDemo7 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a simple time series chart.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo7(final String title) {
+ 
+         super(title);
+ 
+         // create a title...
+         final String chartTitle = "Time Series Demo";
+         final XYDataset dataset = new TimeSeriesCollection(
+             DemoDatasetFactory.createEURTimeSeries()
+         );
+ 
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             chartTitle, 
+             "Date", 
+             "Value",
+             dataset, 
+             true, 
+             true, 
+             false
+         );
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo7 demo = new TimeSeriesDemo7("Time Series Demo 7");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo8.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo8.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo8.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo8.java	2004-11-07 16:25:33.000000000 +0100
***************
*** 0 ****
--- 1,144 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * TimeSeriesDemo8.java
+  * --------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo8.java,v 1.16 2004/06/07 10:38:07 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 05-Feb-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.DecimalFormat;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.MovingAverage;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A time series chart.
+  */
+ public class TimeSeriesDemo8 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a simple time series chart.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo8(final String title) {
+         super(title);
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return a sample dataset.
+      */
+     private XYDataset createDataset() {
+         final TimeSeries eur = DemoDatasetFactory.createEURTimeSeries();
+         final TimeSeries mav = MovingAverage.createMovingAverage(
+             eur, "30 day moving average", 30, 30
+         );
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(eur);
+         dataset.addSeries(mav);
+         return dataset;
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return a chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Time Series Demo 8", 
+             "Date", 
+             "Value",
+             dataset, 
+             true, 
+             true, 
+             false
+         );
+         final XYItemRenderer renderer = chart.getXYPlot().getRenderer();
+         final StandardXYToolTipGenerator g = new StandardXYToolTipGenerator(
+             StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+             new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")
+         );
+         renderer.setToolTipGenerator(g);
+         return chart;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo8 demo = new TimeSeriesDemo8("Time Series Demo 8");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo9.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo9.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo9.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo9.java	2004-11-07 16:25:29.000000000 +0100
***************
*** 0 ****
--- 1,194 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * TimeSeriesDemo9.java
+  * --------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo9.java,v 1.11 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 11-Feb-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.geom.Ellipse2D;
+ import java.awt.geom.GeneralPath;
+ import java.awt.geom.Rectangle2D;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * An example of a time series chart.
+  *
+  */
+ public class TimeSeriesDemo9 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a simple time series chart.  This
+      * example uses monthly data.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo9(final String title) {
+ 
+         super(title);
+ 
+         // create a title...
+         final String chartTitle = "Test";
+         final XYDataset dataset = createDataset();
+ 
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             chartTitle, 
+             "Date", 
+             "Price Per Unit",
+             dataset,
+             true,
+             true,
+             false
+         );
+ 
+         final StandardLegend sl = (StandardLegend) chart.getLegend();
+         sl.setDisplaySeriesShapes(true);
+ 
+         final XYPlot plot = chart.getXYPlot();
+         final XYItemRenderer r = plot.getRenderer();
+         if (r instanceof StandardXYItemRenderer) {
+             final StandardXYItemRenderer renderer = (StandardXYItemRenderer) r;
+             renderer.setPlotShapes(true);
+             renderer.setShapesFilled(true);
+             renderer.setSeriesShape(0, new Ellipse2D.Double(-3.0, -3.0, 6.0, 6.0));
+             renderer.setSeriesShape(1, new Rectangle2D.Double(-3.0, -3.0, 6.0, 6.0));
+             final GeneralPath s2 = new GeneralPath();
+             s2.moveTo(0.0f, -3.0f);
+             s2.lineTo(3.0f, 3.0f);
+             s2.lineTo(-3.0f, 3.0f);
+             s2.closePath();
+             renderer.setSeriesShape(2, s2);
+             final GeneralPath s3 = new GeneralPath();
+             s3.moveTo(-1.0f, -3.0f);
+             s3.lineTo(1.0f, -3.0f);
+             s3.lineTo(1.0f, -1.0f);
+             s3.lineTo(3.0f, -1.0f);
+             s3.lineTo(3.0f, 1.0f);
+             s3.lineTo(1.0f, 1.0f);
+             s3.lineTo(1.0f, 3.0f);
+             s3.lineTo(-1.0f, 3.0f);
+             s3.lineTo(-1.0f, 1.0f);
+             s3.lineTo(-3.0f, 1.0f);
+             s3.lineTo(-3.0f, -1.0f);
+             s3.lineTo(-1.0f, -1.0f);
+             s3.closePath();
+             renderer.setSeriesShape(3, s3);
+         }
+ 
+         plot.getDomainAxis().setVisible(false);
+         plot.getRangeAxis().setVisible(false);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     public XYDataset createDataset() {
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         for (int i = 0; i < 4; i++) {
+             dataset.addSeries(createTimeSeries(i, 10));
+         }
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Creates a time series containing random daily data.
+      *
+      * @param series  the series index.
+      * @param count  the number of items for the series.
+      *
+      * @return the dataset.
+      */
+     public TimeSeries createTimeSeries(final int series, final int count) {
+ 
+         final TimeSeries result = new TimeSeries("Series " + series , Day.class);
+ 
+         Day start = new Day();
+         for (int i = 0; i < count; i++) {
+             result.add(start, Math.random());
+             start = (Day) start.next();
+         }
+ 
+         return result;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final TimeSeriesDemo9 demo = new TimeSeriesDemo9("Time Series Demo 9");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo.java jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/TimeSeriesDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/TimeSeriesDemo.java	2004-11-07 16:23:52.000000000 +0100
***************
*** 0 ****
--- 1,218 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * TimeSeriesDemo.java
+  * -------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: TimeSeriesDemo.java,v 1.19 2004/04/26 19:12:03 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1 (DG);
+  * 25-Jun-2002 : Removed unnecessary import (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.StandardLegend;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Month;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ import org.jfree.util.Log;
+ import org.jfree.util.PrintStreamLogTarget;
+ 
+ /**
+  * An example of a time series chart.  For the most part, default settings are used, except that
+  * the renderer is modified to show filled shapes (as well as lines) at each data point.
+  *
+  */
+ public class TimeSeriesDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing how to create a simple time series chart.  This
+      * example uses monthly data.
+      *
+      * @param title  the frame title.
+      */
+     public TimeSeriesDemo(final String title) {
+         
+         super(title);
+         final XYDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setMouseZoomable(true, false);
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  a dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+ 
+         final JFreeChart chart = ChartFactory.createTimeSeriesChart(
+             "Legal & General Unit Trust Prices",
+             "Date", "Price Per Unit",
+             dataset,
+             true,
+             true,
+             false
+         );
+ 
+         chart.setBackgroundPaint(Color.white);
+ 
+         final StandardLegend sl = (StandardLegend) chart.getLegend();
+         sl.setDisplaySeriesShapes(true);
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         plot.setDomainCrosshairVisible(true);
+         plot.setRangeCrosshairVisible(true);
+         
+         final XYItemRenderer renderer = plot.getRenderer();
+         if (renderer instanceof StandardXYItemRenderer) {
+             final StandardXYItemRenderer rr = (StandardXYItemRenderer) renderer;
+             rr.setPlotShapes(true);
+             rr.setShapesFilled(true);
+             rr.setItemLabelsVisible(true);
+         }
+         
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));
+         
+         return chart;
+ 
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a dataset, consisting of two series of monthly data.
+      *
+      * @return the dataset.
+      */
+     private XYDataset createDataset() {
+ 
+         final TimeSeries s1 = new TimeSeries("L&G European Index Trust", Month.class);
+         s1.add(new Month(2, 2001), 181.8);
+         s1.add(new Month(3, 2001), 167.3);
+         s1.add(new Month(4, 2001), 153.8);
+         s1.add(new Month(5, 2001), 167.6);
+         s1.add(new Month(6, 2001), 158.8);
+         s1.add(new Month(7, 2001), 148.3);
+         s1.add(new Month(8, 2001), 153.9);
+         s1.add(new Month(9, 2001), 142.7);
+         s1.add(new Month(10, 2001), 123.2);
+         s1.add(new Month(11, 2001), 131.8);
+         s1.add(new Month(12, 2001), 139.6);
+         s1.add(new Month(1, 2002), 142.9);
+         s1.add(new Month(2, 2002), 138.7);
+         s1.add(new Month(3, 2002), 137.3);
+         s1.add(new Month(4, 2002), 143.9);
+         s1.add(new Month(5, 2002), 139.8);
+         s1.add(new Month(6, 2002), 137.0);
+         s1.add(new Month(7, 2002), 132.8);
+ 
+         final TimeSeries s2 = new TimeSeries("L&G UK Index Trust", Month.class);
+         s2.add(new Month(2, 2001), 129.6);
+         s2.add(new Month(3, 2001), 123.2);
+         s2.add(new Month(4, 2001), 117.2);
+         s2.add(new Month(5, 2001), 124.1);
+         s2.add(new Month(6, 2001), 122.6);
+         s2.add(new Month(7, 2001), 119.2);
+         s2.add(new Month(8, 2001), 116.5);
+         s2.add(new Month(9, 2001), 112.7);
+         s2.add(new Month(10, 2001), 101.5);
+         s2.add(new Month(11, 2001), 106.1);
+         s2.add(new Month(12, 2001), 110.3);
+         s2.add(new Month(1, 2002), 111.7);
+         s2.add(new Month(2, 2002), 111.0);
+         s2.add(new Month(3, 2002), 109.6);
+         s2.add(new Month(4, 2002), 113.2);
+         s2.add(new Month(5, 2002), 111.6);
+         s2.add(new Month(6, 2002), 108.8);
+         s2.add(new Month(7, 2002), 101.6);
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection();
+         dataset.addSeries(s1);
+         dataset.addSeries(s2);
+ 
+         dataset.setDomainIsPointsInTime(true);
+ 
+         return dataset;
+ 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         Log.getInstance().addTarget(new PrintStreamLogTarget());
+         final TimeSeriesDemo demo = new TimeSeriesDemo("Time Series Demo 1");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/WaferMapChartDemo.java jfreechart/source/org/jfree/chart/demo/WaferMapChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/WaferMapChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/WaferMapChartDemo.java	2004-11-07 16:27:17.000000000 +0100
***************
*** 0 ****
--- 1,110 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ----------------------
+  * WaferMapChartDemo.java
+  * ----------------------
+  * (C) Copyright 2003, 2004, by Robert Redburn and Contributors.
+  *
+  * Original Author:  Robert Redburn;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: WaferMapChartDemo.java,v 1.8 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 08-Nov-2003 : Version 1 (RR);
+  * 04-Dec-2003 : Added standard header and Javadocs (DG);
+  * 19-Jan-2004 : Moved waferdata() method to DemoDatasetFactory (RR);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.Legend;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.title.TextTitle;
+ import org.jfree.data.general.WaferMapDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.HorizontalAlignment;
+ import org.jfree.ui.RectangleEdge;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demo showing a wafer map chart.
+  */
+ public class WaferMapChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      * 
+      * @param title  the frame title.
+      */
+     public WaferMapChartDemo(final String title) {
+         super(title);
+         final WaferMapDataset dataset = DemoDatasetFactory.createRandomWaferMapDataset(5);
+         final JFreeChart chart = ChartFactory.createWaferMapChart(
+             "Wafer Map Demo",         // title
+             dataset,                  // wafermapdataset
+             PlotOrientation.VERTICAL, // vertical = notchdown
+             true,                     // legend           
+             false,                    // tooltips
+             false
+         ); 
+         
+         final Legend legend = chart.getLegend();
+         legend.setAnchor(Legend.EAST);
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 0, 1000, Color.blue));
+         
+         final TextTitle copyright = new TextTitle(
+             "JFreeChart WaferMapPlot", new Font("SansSerif", Font.PLAIN, 9)
+         );
+         copyright.setPosition(RectangleEdge.BOTTOM);
+         copyright.setHorizontalAlignment(HorizontalAlignment.RIGHT);
+         chart.addSubtitle(copyright);
+         
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 400));
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Starting point for the demo application.
+      * 
+      * @param args  command line arguments (ignored).
+      */
+     public static void main(final String[] args) {
+         final WaferMapChartDemo demo = new WaferMapChartDemo("Wafer Map Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+     
+ } // end class wafermapchartdemo
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/WaterfallChartDemo2.java jfreechart/source/org/jfree/chart/demo/WaterfallChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/WaterfallChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/WaterfallChartDemo2.java	2004-11-07 16:27:10.000000000 +0100
***************
*** 0 ****
--- 1,181 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * WaterfallChartDemo2.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  Darshan Shah;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: WaterfallChartDemo2.java,v 1.11 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 20-Oct-2003 : Version 1, based on code contributed by Darshan Shah (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ import java.text.DecimalFormat;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.CategoryAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.NumberTickUnit;
+ import org.jfree.chart.axis.TickUnits;
+ import org.jfree.chart.labels.StandardCategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.ValueMarker;
+ import org.jfree.chart.renderer.category.WaterfallBarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.Layer;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A sample waterfall chart.
+  */
+ public class WaterfallChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new WaterFall Chart demo.
+      * 
+      * @param title  the frame title.
+      */
+     public WaterfallChartDemo2(final String title) {
+ 
+         super(title);
+         
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setEnforceFileExtensions(false);
+         setContentPane(chartPanel);
+     }
+ 
+     /**
+      * Creates a sample dataset for the demo.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+          
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(-890.76, "S1", "PY OM");
+         dataset.addValue(-3021.51, "S1", "Vol CM");
+         dataset.addValue(-218.32, "S1", "Price");
+         dataset.addValue(221.75, "S1", "Mat Inf");
+         dataset.addValue(-1504.1, "S1", "Oth Inf");
+         dataset.addValue(7103.8, "S1", "VCP");
+         dataset.addValue(3503.3, "S1", "CM FX");
+         dataset.addValue(-6561.97, "S1", "Base");
+         dataset.addValue(-824.25, "S1", "OM");
+ 
+         return dataset;
+         
+     }
+     
+     /**
+      * Returns the chart.
+      *
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         final CategoryAxis xAxis = new CategoryAxis("Category");
+         final NumberAxis yAxis = new NumberAxis("$ in Thousands");
+         yAxis.setLowerMargin(0.10);
+         yAxis.setUpperMargin(0.10);
+         
+         // create a custom tick unit collection...
+         final DecimalFormat formatter = new DecimalFormat("##,###");
+         formatter.setNegativePrefix("(");
+         formatter.setNegativeSuffix(")");
+         final TickUnits standardUnits = new TickUnits();
+         standardUnits.add(new NumberTickUnit(200, formatter));
+         standardUnits.add(new NumberTickUnit(500, formatter));
+         standardUnits.add(new NumberTickUnit(1000, formatter));
+         standardUnits.add(new NumberTickUnit(2000, formatter));
+         standardUnits.add(new NumberTickUnit(5000, formatter));
+ 
+         yAxis.setStandardTickUnits(standardUnits);
+ 
+         // ****************************************************************************
+         // * JFREECHART DEVELOPER GUIDE                                               *
+         // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+         // * to purchase from Object Refinery Limited:                                *
+         // *                                                                          *
+         // * http://www.object-refinery.com/jfreechart/guide.html                     *
+         // *                                                                          *
+         // * Sales are used to provide funding for the JFreeChart project - please    * 
+         // * support us so that we can continue developing free software.             *
+         // ****************************************************************************
+         
+         final DecimalFormat labelFormatter = new DecimalFormat("##,###");
+         labelFormatter.setNegativePrefix("(");
+         labelFormatter.setNegativeSuffix(")");
+ 
+         final WaterfallBarRenderer renderer = new WaterfallBarRenderer();
+         renderer.setLabelGenerator(
+             new StandardCategoryLabelGenerator("{2}", labelFormatter)
+         );
+         renderer.setItemLabelsVisible(Boolean.TRUE);
+ 
+         final CategoryPlot plot = new CategoryPlot(dataset, xAxis, yAxis, renderer);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setRangeGridlinesVisible(true);
+         final ValueMarker baseline = new ValueMarker(0.0);
+         baseline.setPaint(Color.blue);
+         baseline.setStroke(new BasicStroke(1.1f));
+         plot.addRangeMarker(baseline, Layer.FOREGROUND);
+ 
+         final JFreeChart chart = new JFreeChart("OM WaterFall Chart",
+                                           JFreeChart.DEFAULT_TITLE_FONT, plot, false);
+         chart.setBackgroundPaint(Color.white);
+         return chart;
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final WaterfallChartDemo2 demo = new WaterfallChartDemo2("Waterfall Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/WaterfallChartDemo.java jfreechart/source/org/jfree/chart/demo/WaterfallChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/WaterfallChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/WaterfallChartDemo.java	2004-11-07 16:27:14.000000000 +0100
***************
*** 0 ****
--- 1,183 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * WaterfallChartDemo.java
+  * -----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: WaterfallChartDemo.java,v 1.14 2004/05/10 16:45:23 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 21-Oct-2003 : Version 1 (DG);
+  * 06-Nov-2003 : Modified to use ChartFactory (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.text.DecimalFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberTickUnit;
+ import org.jfree.chart.axis.TickUnits;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.StandardCategoryLabelGenerator;
+ import org.jfree.chart.plot.CategoryPlot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.renderer.category.BarRenderer;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.category.DefaultCategoryDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * A sample waterfall chart.
+  */
+ public class WaterfallChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new WaterFall Chart demo.
+      * 
+      * @param title  the frame title.
+      */
+     public WaterfallChartDemo(final String title) {
+ 
+         super(title);
+         
+         final CategoryDataset dataset = createDataset();
+         final JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         chartPanel.setEnforceFileExtensions(false);
+         setContentPane(chartPanel);
+        
+     }
+ 
+     /**
+      * Creates a sample dataset for the demo.
+      * 
+      * @return A sample dataset.
+      */
+     private CategoryDataset createDataset() {
+         final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
+         dataset.addValue(15.76, "Product 1", "Labour");
+         dataset.addValue(8.66, "Product 1", "Administration");
+         dataset.addValue(4.71, "Product 1", "Marketing");
+         dataset.addValue(3.51, "Product 1", "Distribution");
+         dataset.addValue(32.64, "Product 1", "Total Expense");
+         return dataset;
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Returns the chart.
+      * 
+      * @param dataset  the dataset.
+      *
+      * @return The chart.
+      */
+     private JFreeChart createChart(final CategoryDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createWaterfallChart(
+             "Product Cost Breakdown",
+             "Expense Category",
+             "Cost Per Unit",
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+         chart.setBackgroundPaint(Color.white);
+ 
+         final CategoryPlot plot = chart.getCategoryPlot();
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setRangeGridlinesVisible(true);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         
+         // create a custom tick unit collection...
+         final DecimalFormat formatter = new DecimalFormat("##,###");
+         formatter.setNegativePrefix("(");
+         formatter.setNegativeSuffix(")");
+         final TickUnits standardUnits = new TickUnits();
+         standardUnits.add(new NumberTickUnit(5, formatter));
+         standardUnits.add(new NumberTickUnit(10, formatter));
+         standardUnits.add(new NumberTickUnit(20, formatter));
+         standardUnits.add(new NumberTickUnit(50, formatter));
+         standardUnits.add(new NumberTickUnit(100, formatter));
+         standardUnits.add(new NumberTickUnit(200, formatter));
+         standardUnits.add(new NumberTickUnit(500, formatter));
+         standardUnits.add(new NumberTickUnit(1000, formatter));
+         standardUnits.add(new NumberTickUnit(2000, formatter));
+         standardUnits.add(new NumberTickUnit(5000, formatter));
+         rangeAxis.setStandardTickUnits(standardUnits);
+ 
+         final BarRenderer renderer = (BarRenderer) plot.getRenderer();
+         renderer.setDrawBarOutline(false);
+ 
+         final DecimalFormat labelFormatter = new DecimalFormat("$##,###.00");
+         labelFormatter.setNegativePrefix("(");
+         labelFormatter.setNegativeSuffix(")");
+         renderer.setLabelGenerator(
+             new StandardCategoryLabelGenerator("{2}", labelFormatter)
+         );
+         renderer.setItemLabelsVisible(true);
+ 
+         return chart;
+     }
+ 
+     /**
+      * Starting point for the demo.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final WaterfallChartDemo demo = new WaterfallChartDemo("Waterfall Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+     
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/WaterTemperatureDemo.java jfreechart/source/org/jfree/chart/demo/WaterTemperatureDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/WaterTemperatureDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/WaterTemperatureDemo.java	2004-11-07 16:27:07.000000000 +0100
***************
*** 0 ****
--- 1,137 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------
+  * WaterTemperatureDemo.java
+  * -------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: WaterTemperatureDemo.java,v 1.12 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 17-Jan-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * This demo shows a plot of water temperature at various depths.
+  *
+  */
+ public class WaterTemperatureDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing an XY series containing a null value.
+      *
+      * @param title  the frame title.
+      */
+     public WaterTemperatureDemo(final String title) {
+ 
+         super(title);
+         final XYDataset dataset = createDataset();
+ 
+         final NumberAxis rangeAxis = new NumberAxis("Temperature");
+         rangeAxis.setRange(-0.55, -0.15);
+ 
+         final NumberAxis domainAxis = new NumberAxis("Depth");
+         domainAxis.setInverted(true);
+         domainAxis.setRange(0.0, 35.0);
+         domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+ 
+         final XYItemRenderer renderer = new StandardXYItemRenderer();
+ 
+         final XYPlot plot = new XYPlot(dataset, domainAxis, rangeAxis, renderer);
+         plot.setOrientation(PlotOrientation.HORIZONTAL);
+         final JFreeChart chart = new JFreeChart("Water Temperature By Depth", plot);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      *
+      * @return The dataset.
+      */
+     private XYDataset createDataset() {
+ 
+         final XYSeries series = new XYSeries("Zone 1");
+         series.add(1.0, -0.5);
+         series.add(5.0, -0.5);
+         series.add(10.0, -0.4);
+         series.add(15.0, -0.4);
+         series.add(20.0, -0.3);
+         series.add(25.0, -0.3);
+         series.add(30.0, -0.2);
+         series.add(35.0, -0.2);
+ 
+         return new XYSeriesCollection(series);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final WaterTemperatureDemo demo = new WaterTemperatureDemo("Water Temperature Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/WindChartDemo.java jfreechart/source/org/jfree/chart/demo/WindChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/WindChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/WindChartDemo.java	2004-11-07 16:27:04.000000000 +0100
***************
*** 0 ****
--- 1,129 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * WindChartDemo.java
+  * ------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: WindChartDemo.java,v 1.7 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 30-Jun-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.data.xy.WindDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a wind chart.
+  *
+  */
+ public class WindChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public WindChartDemo(final String title) {
+ 
+         super(title);
+ 
+         final WindDataset dataset = DemoDatasetFactory.createWindDataset1();
+ 
+         // create the chart...
+         final JFreeChart chart = createChart(dataset);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final WindDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createWindPlot(
+             "Wind Chart Demo", 
+             "Date", 
+             "Direction / Force", 
+             dataset,
+             true,
+             false,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.green));
+         return chart;
+         
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final WindChartDemo demo = new WindChartDemo("Wind Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XMLBarChartDemo.java jfreechart/source/org/jfree/chart/demo/XMLBarChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XMLBarChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XMLBarChartDemo.java	2004-11-07 16:27:00.000000000 +0100
***************
*** 0 ****
--- 1,131 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XMLBarChartDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XMLBarChartDemo.java,v 1.11 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 28-Oct-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.io.IOException;
+ import java.io.InputStream;
+ import java.net.URL;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.category.CategoryDataset;
+ import org.jfree.data.xml.DatasetReader;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a bar chart using data from an
+  * XML data file.
+  *
+  */
+ public class XMLBarChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Default constructor.
+      *
+      * @param title  the frame title.
+      */
+     public XMLBarChartDemo(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         CategoryDataset dataset = null;
+         final URL url = getClass().getResource("/org/jfree/chart/demo/categorydata.xml");
+ 
+         try {
+             final InputStream in = url.openStream();
+             dataset = DatasetReader.readCategoryDatasetFromXML(in);
+         }
+         catch (IOException ioe) {
+             System.out.println(ioe.getMessage());
+         }
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createBarChart(
+             "Bar Chart",  // chart title
+             "Domain", 
+             "Range",
+             dataset,      // data
+             PlotOrientation.VERTICAL,
+             true,         // include legend
+             true,
+             false
+         );
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.yellow);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XMLBarChartDemo demo = new XMLBarChartDemo("XML Bar Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XMLPieChartDemo.java jfreechart/source/org/jfree/chart/demo/XMLPieChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XMLPieChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XMLPieChartDemo.java	2004-11-07 16:26:57.000000000 +0100
***************
*** 0 ****
--- 1,135 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XMLPieChartDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XMLPieChartDemo.java,v 1.14 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 20-Nov-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.io.IOException;
+ import java.io.InputStream;
+ import java.net.URL;
+ import java.text.NumberFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.labels.StandardPieItemLabelGenerator;
+ import org.jfree.chart.plot.PiePlot;
+ import org.jfree.data.general.PieDataset;
+ import org.jfree.data.xml.DatasetReader;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a pie chart from data in an
+  * XML file.
+  *
+  */
+ public class XMLPieChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Default constructor.
+      *
+      * @param title  the frame title.
+      */
+     public XMLPieChartDemo(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         PieDataset dataset = null;
+         final URL url = getClass().getResource("/org/jfree/chart/demo/piedata.xml");
+ 
+         try {
+             final InputStream in = url.openStream();
+             dataset = DatasetReader.readPieDatasetFromXML(in);
+         }
+         catch (IOException ioe) {
+             System.out.println(ioe.getMessage());
+         }
+ 
+         // create the chart...
+         final JFreeChart chart = ChartFactory.createPieChart(
+             "Pie Chart Demo 1",  // chart title
+             dataset,             // data
+             true,                // include legend
+             true,
+             false
+         );
+ 
+         // set the background color for the chart...
+         chart.setBackgroundPaint(Color.yellow);
+         final PiePlot plot = (PiePlot) chart.getPlot();
+         plot.setLabelGenerator(new StandardPieItemLabelGenerator(
+             "{0} = {2}", NumberFormat.getNumberInstance(), NumberFormat.getPercentInstance()
+         ));
+         plot.setNoDataMessage("No data available");
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XMLPieChartDemo demo = new XMLPieChartDemo("XML Pie Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYAreaChartDemo2.java jfreechart/source/org/jfree/chart/demo/XYAreaChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYAreaChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYAreaChartDemo2.java	2004-11-07 16:26:50.000000000 +0100
***************
*** 0 ****
--- 1,156 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ---------------------
+  * XYAreaChartDemo2.java
+  * ---------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYAreaChartDemo2.java,v 1.11 2004/05/11 14:56:17 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 26-Nov-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.text.DecimalFormat;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create an area chart with a date axis for
+  * the domain values.
+  *
+  */
+ public class XYAreaChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public XYAreaChartDemo2(final String title) {
+ 
+         super(title);
+ 
+         final TimeSeries series1 = new TimeSeries("Random 1");
+         double value = 0.0;
+         Day day = new Day();
+         for (int i = 0; i < 200; i++) {
+             value = value + Math.random() - 0.5;
+             series1.add(day, value);
+             day = (Day) day.next();
+         }
+ 
+         final TimeSeriesCollection dataset = new TimeSeriesCollection(series1);
+ 
+         final JFreeChart chart = createChart(dataset);
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createXYAreaChart(
+             "XY Area Chart Demo 2",
+             "Time", "Value",
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,  // legend
+             true,  // tool tips
+             false  // URLs
+         );
+         final XYPlot plot = chart.getXYPlot();
+ 
+         final ValueAxis domainAxis = new DateAxis("Time");
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+         plot.setDomainAxis(domainAxis);
+         plot.setForegroundAlpha(0.5f);  
+         
+         final XYItemRenderer renderer = plot.getRenderer();
+         renderer.setToolTipGenerator(
+             new StandardXYToolTipGenerator(
+                 StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
+                 new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("#,##0.00")
+             )
+         );
+         return chart;      
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYAreaChartDemo2 demo = new XYAreaChartDemo2("XY Area Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYAreaChartDemo.java jfreechart/source/org/jfree/chart/demo/XYAreaChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYAreaChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYAreaChartDemo.java	2004-11-07 16:26:53.000000000 +0100
***************
*** 0 ****
--- 1,171 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XYAreaChartDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYAreaChartDemo.java,v 1.8 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 03-Apr-2002 : Version 1 (DG);
+  * 09-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 10-Oct-2002 : Renamed AreaChartDemo --> AreaXYChartDemo (DG);
+  * 10-Jun-2003 : Modified to handle plot orientation (DG);
+  * 31-Jul-2003 : Renamed AreaXYChartDemo --> XYAreaChartDemo (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create an area chart.
+  *
+  */
+ public class XYAreaChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public XYAreaChartDemo(final String title) {
+ 
+         super(title);
+ 
+         final XYSeries series1 = new XYSeries("Random 1");
+         series1.add(new Integer(1), new Double(500.2));
+         series1.add(new Integer(2), new Double(694.1));
+         series1.add(new Integer(3), new Double(-734.4));
+         series1.add(new Integer(4), new Double(453.2));
+         series1.add(new Integer(5), new Double(500.2));
+         series1.add(new Integer(6), new Double(300.7));
+         series1.add(new Integer(7), new Double(734.4));
+         series1.add(new Integer(8), new Double(453.2));
+ 
+         final XYSeries series2 = new XYSeries("Random 2");
+         series2.add(new Integer(1), new Double(700.2));
+         series2.add(new Integer(2), new Double(534.1));
+         series2.add(new Integer(3), new Double(323.4));
+         series2.add(new Integer(4), new Double(125.2));
+         series2.add(new Integer(5), new Double(653.2));
+         series2.add(new Integer(6), new Double(432.7));
+         series2.add(new Integer(7), new Double(564.4));
+         series2.add(new Integer(8), new Double(322.2));
+ 
+         final XYSeriesCollection dataset = new XYSeriesCollection(series1);
+         dataset.addSeries(series2);
+         
+         final JFreeChart chart = createChart(dataset);
+         
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+             
+         final JFreeChart chart = ChartFactory.createXYAreaChart(
+             "XY Area Chart Demo",
+             "Domain (X)", "Range (Y)",
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,  // legend
+             true,  // tool tips
+             false  // URLs
+         );
+         
+         chart.setBackgroundPaint(Color.white);
+         
+         final XYPlot plot = chart.getXYPlot();
+         //plot.setOutlinePaint(Color.black);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setForegroundAlpha(0.65f);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         final ValueAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setTickMarkPaint(Color.black);
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+         
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setTickMarkPaint(Color.black);
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYAreaChartDemo demo = new XYAreaChartDemo("XY Area Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYAreaChartTest.java jfreechart/source/org/jfree/chart/demo/XYAreaChartTest.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYAreaChartTest.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYAreaChartTest.java	2004-11-07 16:26:46.000000000 +0100
***************
*** 0 ****
--- 1,173 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XYAreaChartDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYAreaChartTest.java,v 1.1 2004/05/12 21:45:53 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 03-Apr-2002 : Version 1 (DG);
+  * 09-Oct-2002 : Fixed errors reported by Checkstyle (DG);
+  * 10-Oct-2002 : Renamed AreaChartDemo --> AreaXYChartDemo (DG);
+  * 10-Jun-2003 : Modified to handle plot orientation (DG);
+  * 31-Jul-2003 : Renamed AreaXYChartDemo --> XYAreaChartDemo (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYAreaRenderer2;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create an area chart.
+  *
+  */
+ public class XYAreaChartTest extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public XYAreaChartTest(final String title) {
+ 
+         super(title);
+ 
+         final XYSeries series1 = new XYSeries("Random 1");
+         series1.add(new Integer(1), new Double(500.2));
+         series1.add(new Integer(2), new Double(694.1));
+         series1.add(new Integer(3), new Double(-734.4));
+         series1.add(new Integer(4), new Double(453.2));
+         series1.add(new Integer(5), new Double(500.2));
+         series1.add(new Integer(6), new Double(300.7));
+         series1.add(new Integer(7), new Double(734.4));
+         series1.add(new Integer(8), new Double(453.2));
+ 
+         final XYSeries series2 = new XYSeries("Random 2");
+         series2.add(new Integer(1), new Double(700.2));
+         series2.add(new Integer(2), new Double(534.1));
+         series2.add(new Integer(3), new Double(323.4));
+         series2.add(new Integer(4), new Double(125.2));
+         series2.add(new Integer(5), new Double(653.2));
+         series2.add(new Integer(6), new Double(432.7));
+         series2.add(new Integer(7), new Double(564.4));
+         series2.add(new Integer(8), new Double(322.2));
+ 
+         final XYSeriesCollection dataset = new XYSeriesCollection(series1);
+         dataset.addSeries(series2);
+         
+         final JFreeChart chart = createChart(dataset);
+         
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+             
+         final JFreeChart chart = ChartFactory.createXYAreaChart(
+             "XY Area Chart Test",
+             "Domain (X)", "Range (Y)",
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,  // legend
+             true,  // tool tips
+             false  // URLs
+         );
+         
+         chart.setBackgroundPaint(Color.white);
+         
+         final XYPlot plot = chart.getXYPlot();
+         //plot.setOutlinePaint(Color.black);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setForegroundAlpha(0.65f);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         
+         plot.setRenderer(new XYAreaRenderer2());
+         final ValueAxis domainAxis = plot.getDomainAxis();
+         domainAxis.setTickMarkPaint(Color.black);
+         domainAxis.setLowerMargin(0.0);
+         domainAxis.setUpperMargin(0.0);
+         
+         final ValueAxis rangeAxis = plot.getRangeAxis();
+         rangeAxis.setTickMarkPaint(Color.black);
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYAreaChartTest demo = new XYAreaChartTest("XY Area Chart Test");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYBarChartDemo2.java jfreechart/source/org/jfree/chart/demo/XYBarChartDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYBarChartDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYBarChartDemo2.java	2004-11-07 16:26:37.000000000 +0100
***************
*** 0 ****
--- 1,152 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XYBarChartDemo2.java
+  * --------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYBarChartDemo2.java,v 1.9 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 20-Jun-2002 : Version 1 (DG);
+  * 02-Jul-2002 : Removed unnecessary imports (DG);
+  * 24-Aug-2002 : Set preferred size for ChartPanel (DG);
+  * 11-Oct-2002 : Fixed issues reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
+ import org.jfree.data.time.Day;
+ import org.jfree.data.time.TimeSeries;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a vertical bar chart.
+  *
+  */
+ public class XYBarChartDemo2 extends ApplicationFrame {
+ 
+     /**
+      * Constructs the demo application.
+      *
+      * @param title  the frame title.
+      */
+     public XYBarChartDemo2(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final TimeSeries series1 = new TimeSeries("Series 1", Day.class);
+         series1.add(new Day(1, 1, 2003), 54.3);
+         series1.add(new Day(2, 1, 2003), 20.3);
+         series1.add(new Day(3, 1, 2003), 43.4);
+         series1.add(new Day(4, 1, 2003), -12.0);
+ 
+         final TimeSeries series2 = new TimeSeries("Series 2", Day.class);
+         series2.add(new Day(1, 1, 2003), 8.0);
+         series2.add(new Day(2, 1, 2003), 16.0);
+         series2.add(new Day(3, 1, 2003), 21.0);
+         series2.add(new Day(4, 1, 2003), 5.0);
+ 
+         final TimeSeriesCollection data = new TimeSeriesCollection();
+         data.setDomainIsPointsInTime(false);
+         data.addSeries(series1);
+         data.addSeries(series2);
+ 
+         final JFreeChart chart = createChart(data);
+         
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /** 
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final IntervalXYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createXYBarChart(
+             "XY Bar Chart Demo 2",      // chart title
+             "Date",                     // domain axis label
+             true,
+             "Y",                        // range axis label
+             dataset,                    // data
+             PlotOrientation.HORIZONTAL,
+             true,                       // include legend
+             true,
+             false
+         );
+ 
+         // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
+         final XYPlot plot = chart.getXYPlot();
+         plot.setRenderer(new ClusteredXYBarRenderer());
+         // OPTIONAL CUSTOMISATION COMPLETED.
+         return chart;        
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYBarChartDemo2 demo = new XYBarChartDemo2("XY Bar Chart Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYBarChartDemo3.java jfreechart/source/org/jfree/chart/demo/XYBarChartDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYBarChartDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYBarChartDemo3.java	2004-11-07 16:26:32.000000000 +0100
***************
*** 0 ****
--- 1,132 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XYBarChartDemo3.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYBarChartDemo3.java,v 1.10 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 20-Jun-2002 : Version 1 (DG);
+  * 02-Jul-2002 : Removed unnecessary imports (DG);
+  * 24-Aug-2002 : Set preferred size for ChartPanel (DG);
+  * 11-Oct-2002 : Fixed issues reported by Checkstyle (DG);
+  * 05-Feb-2003 : Renamed VerticalXYBarChartDemo --> VerticalXYBarChartDemo3 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a vertical bar chart.
+  *
+  */
+ public class XYBarChartDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Constructs the demo application.
+      *
+      * @param title  the frame title.
+      */
+     public XYBarChartDemo3(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final IntervalXYDataset dataset = new SimpleIntervalXYDataset();
+ 
+         // create the chart...
+         final JFreeChart chart = createChart(dataset);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a new chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final IntervalXYDataset dataset) {
+     
+         final JFreeChart chart = ChartFactory.createXYBarChart(
+             "Sample",  // chart title
+             "X",       // domain axis label
+             false,
+             "Y",       // range axis label
+             dataset,   // data
+             PlotOrientation.VERTICAL,
+             true,      // include legend
+             true,
+             false
+         );
+         
+         return chart;
+         
+     }
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYBarChartDemo3 demo = new XYBarChartDemo3("XY Bar Chart Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYBarChartDemo4.java jfreechart/source/org/jfree/chart/demo/XYBarChartDemo4.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYBarChartDemo4.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYBarChartDemo4.java	2004-11-07 16:28:16.000000000 +0100
***************
*** 0 ****
--- 1,139 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XYBarChartDemo4.java
+  * --------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYBarChartDemo4.java,v 1.4 2004/04/30 07:44:42 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 02-Mar-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.data.xy.XYBarDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration of the {@link XYBarDataset} wrapper class.
+  *
+  */
+ public class XYBarChartDemo4 extends ApplicationFrame {
+ 
+     /**
+      * Constructs the demo application.
+      *
+      * @param title  the frame title.
+      */
+     public XYBarChartDemo4(final String title) {
+ 
+         super(title);
+ 
+         final IntervalXYDataset dataset = createDataset();
+         
+         final JFreeChart chart = ChartFactory.createXYBarChart(
+             title,
+             "X",
+             false,
+             "Y",
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,
+             false,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));
+         final XYPlot plot = (XYPlot) chart.getPlot();
+         final NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
+         domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private IntervalXYDataset createDataset() {
+         final XYSeries series = new XYSeries("Series 1");
+         series.add(1.0, 5.0);
+         series.add(2.0, 7.8);
+         series.add(3.0, 9.3);
+         final XYSeriesCollection collection = new XYSeriesCollection();
+         collection.addSeries(series);
+         return new XYBarDataset(collection, 0.9);
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYBarChartDemo4 demo = new XYBarChartDemo4("XY Bar Chart Demo 4");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYBarChartDemo.java jfreechart/source/org/jfree/chart/demo/XYBarChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYBarChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYBarChartDemo.java	2004-11-07 16:26:42.000000000 +0100
***************
*** 0 ****
--- 1,137 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------
+  * XYBarChartDemo.java
+  * -------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYBarChartDemo.java,v 1.11 2004/05/11 14:56:17 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 20-Jun-2002 : Version 1 (DG);
+  * 02-Jul-2002 : Removed unnecessary imports (DG);
+  * 24-Aug-2002 : Set preferred size for ChartPanel (DG);
+  * 11-Oct-2002 : Fixed issues reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.GradientPaint;
+ import java.text.DecimalFormat;
+ import java.text.SimpleDateFormat;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.DateTickMarkPosition;
+ import org.jfree.chart.labels.StandardXYToolTipGenerator;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYItemRenderer;
+ import org.jfree.data.time.TimeSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a vertical bar chart.
+  *
+  */
+ public class XYBarChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Constructs the demo application.
+      *
+      * @param title  the frame title.
+      */
+     public XYBarChartDemo(final String title) {
+ 
+         super(title);
+ 
+         final TimeSeriesCollection data = DemoDatasetFactory.createTimeSeriesCollection1();
+         data.setDomainIsPointsInTime(false);
+         final JFreeChart chart = ChartFactory.createXYBarChart(
+             title,
+             "X",
+             true,
+             "Y",
+             data,
+             PlotOrientation.VERTICAL,
+             true,
+             false,
+             false
+         );
+ 
+         // then customise it a little...
+         chart.setBackgroundPaint(new GradientPaint(0, 0, Color.white, 1000, 0, Color.blue));
+ 
+         final XYItemRenderer renderer = chart.getXYPlot().getRenderer();
+         final StandardXYToolTipGenerator generator = new StandardXYToolTipGenerator(
+             "{1} = {2}", new SimpleDateFormat("yyyy"), new DecimalFormat("0.00")
+         );
+         renderer.setToolTipGenerator(generator);
+ 
+         final XYPlot plot = chart.getXYPlot();
+         final DateAxis axis = (DateAxis) plot.getDomainAxis();
+         axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);
+         
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYBarChartDemo demo = new XYBarChartDemo("XY Bar Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYBoxAndWhiskerDemo.java jfreechart/source/org/jfree/chart/demo/XYBoxAndWhiskerDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYBoxAndWhiskerDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYBoxAndWhiskerDemo.java	2004-11-07 16:28:12.000000000 +0100
***************
*** 0 ****
--- 1,158 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * XYBoxAndWhiskerDemo.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by David Browning and Contributors.
+  *
+  * Original Author:  David Browning;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: XYBoxAndWhiskerDemo.java,v 1.9 2004/04/29 08:46:56 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 15-Jul-2003 : Version 1 (DB);
+  * 27-Aug-2003 : Renamed BoxAndWhiskerDemo --> XYBoxAndWhiskerDemo (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.util.ArrayList;
+ import java.util.Date;
+ import java.util.List;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
+ import org.jfree.data.statistics.BoxAndWhiskerCalculator;
+ import org.jfree.data.statistics.BoxAndWhiskerXYDataset;
+ import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
+ import org.jfree.date.DateUtilities;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing a box and whisker chart.
+  *
+  * @author David Browning
+  */
+ public class XYBoxAndWhiskerDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing a box and whisker chart.
+      *
+      * @param title  the frame title.
+      */
+     public XYBoxAndWhiskerDemo(final String title) {
+ 
+         super(title);
+ 
+         final BoxAndWhiskerXYDataset dataset = createSampleDataset();
+         final JFreeChart chart = createChart(dataset);
+         chart.getXYPlot().setOrientation(PlotOrientation.VERTICAL);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 400));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The dataset.
+      */
+     private JFreeChart createChart(final BoxAndWhiskerXYDataset dataset) {
+         
+         final JFreeChart chart = ChartFactory.createBoxAndWhiskerChart(
+             "Box-and-Whisker Demo",
+             "Time", 
+             "Value",
+             dataset, 
+             true
+         );
+         XYPlot plot = (XYPlot) chart.getPlot();
+         XYBoxAndWhiskerRenderer renderer = (XYBoxAndWhiskerRenderer) plot.getRenderer();
+         renderer.setFillBox(false);
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a sample {@link BoxAndWhiskerXYDataset}.
+      *
+      * @return A sample dataset.
+      */
+     public static BoxAndWhiskerXYDataset createSampleDataset() {
+         
+         final int entityCount = 14;
+ 
+         final DefaultBoxAndWhiskerXYDataset dataset = new DefaultBoxAndWhiskerXYDataset("Test");
+         for (int i = 0; i < entityCount; i++) {
+             final Date date = DateUtilities.createDate(2003, 7, i + 1, 12, 0);
+             final List values = new ArrayList();
+             for (int j = 0; j < 10; j++) {
+                 values.add(new Double(10.0 + Math.random() * 10.0));
+                 values.add(new Double(13.0 + Math.random() * 4.0));
+             }
+             dataset.add(date, BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(values));
+            
+         }
+ 
+         return dataset; 
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYBoxAndWhiskerDemo demo = new XYBoxAndWhiskerDemo("Box-and-Whisker Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYLineAndShapeRendererDemo.java jfreechart/source/org/jfree/chart/demo/XYLineAndShapeRendererDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYLineAndShapeRendererDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYLineAndShapeRendererDemo.java	2004-11-07 16:28:08.000000000 +0100
***************
*** 0 ****
--- 1,139 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -------------------------------
+  * XYLineAndShapeRendererDemo.java
+  * -------------------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYLineAndShapeRendererDemo.java,v 1.1 2004/06/07 10:37:49 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 07-Jun-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration of the {@link XYLineAndShapeRenderer} class.
+  */
+ public class XYLineAndShapeRendererDemo extends ApplicationFrame {
+ 
+     /**
+      * Constructs the demo application.
+      *
+      * @param title  the frame title.
+      */
+     public XYLineAndShapeRendererDemo(final String title) {
+ 
+         super(title);
+         XYDataset dataset = createSampleDataset();
+         JFreeChart chart = ChartFactory.createXYLineChart(
+             title,
+             "X",
+             "Y",
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,
+             false,
+             false
+         );
+         XYPlot plot = (XYPlot) chart.getPlot();
+         XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
+         renderer.setSeriesLinesVisible(0, true);
+         renderer.setSeriesShapesVisible(0, false);
+         renderer.setSeriesLinesVisible(1, false);
+         renderer.setSeriesShapesVisible(1, true);        
+         plot.setRenderer(renderer);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));
+         setContentPane(chartPanel);
+ 
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A dataset.
+      */
+     private XYDataset createSampleDataset() {
+         XYSeries series1 = new XYSeries("Series 1");
+         series1.add(1.0, 3.3);
+         series1.add(2.0, 4.4);
+         series1.add(3.0, 1.7);
+         XYSeries series2 = new XYSeries("Series 2");
+         series2.add(1.0, 7.3);
+         series2.add(2.0, 6.8);
+         series2.add(3.0, 9.6);
+         series2.add(4.0, 5.6);
+         XYSeriesCollection dataset = new XYSeriesCollection();
+         dataset.addSeries(series1);
+         dataset.addSeries(series2);
+         return dataset;
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYLineAndShapeRendererDemo demo = new XYLineAndShapeRendererDemo(
+             "XYLineAndShapeRenderer Demo"
+         );
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYLogAxesDemo.java jfreechart/source/org/jfree/chart/demo/XYLogAxesDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYLogAxesDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYLogAxesDemo.java	2004-11-07 16:28:04.000000000 +0100
***************
*** 0 ****
--- 1,143 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * XYLogAxesDemo.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   Clemens;
+  *
+  * $Id: XYLogAxesDemo.java,v 1.14 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 31-Jul-2002 : Version 1 (DG);
+  * 11-Oct-2002 : Fixed issues reported by Checkstyle (DG);
+  * 31-Jan-2003 : Replaced DefaultXYDataset with XYSeriesCollection (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.LogarithmicAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demo showing the use of log axes.
+  *
+  */
+ public class XYLogAxesDemo extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public XYLogAxesDemo(final String title) {
+ 
+         super(title);
+ 
+         //Object[][][] data = new Object[3][50][2];
+         final XYSeries s1 = new XYSeries("Series 1");
+         final XYSeries s2 = new XYSeries("Series 2");
+         final XYSeries s3 = new XYSeries("Series 3");
+ 
+ //        for (int i = 1; i <= 50; i++) {
+ //            s1.add(i, 1000 * Math.pow(i, -2));
+ //            s2.add(i, 1000 * Math.pow(i, -3));
+ //            s3.add(i, 1000 * Math.pow(i, -4));
+ //        }
+ 
+         for (int i = 1; i <= 50; i++) {
+             s1.add(i, 10 * Math.exp(i / 5.0));
+             s2.add(i, 20 * Math.exp(i / 5.0));
+             s3.add(i, 30 * Math.exp(i / 5.0));
+         }
+ 
+         final XYSeriesCollection dataset = new XYSeriesCollection();
+         dataset.addSeries(s1);
+         dataset.addSeries(s2);
+         dataset.addSeries(s3);
+ 
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "Log Axis Demo",          // chart title
+             "Category",               // domain axis label
+             "Value",                  // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,
+             true,                     // include legend
+             true,
+             false
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         final NumberAxis domainAxis = new NumberAxis("x");
+         final NumberAxis rangeAxis = new LogarithmicAxis("Log(y)");
+         plot.setDomainAxis(domainAxis);
+         plot.setRangeAxis(rangeAxis);
+         chart.setBackgroundPaint(Color.white);
+         plot.setOutlinePaint(Color.black);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYLogAxesDemo demo = new XYLogAxesDemo("XY Log Axes Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYSeriesDemo2.java jfreechart/source/org/jfree/chart/demo/XYSeriesDemo2.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYSeriesDemo2.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYSeriesDemo2.java	2004-11-07 16:27:57.000000000 +0100
***************
*** 0 ****
--- 1,124 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * XYSeriesDemo2.java
+  * ------------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYSeriesDemo2.java,v 1.12 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 01-Oct-2002 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * Demo for {@link XYSeries}, where all the y values are the same.
+  *
+  */
+ public class XYSeriesDemo2 extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing an {@link XYSeries} where all the y-values are the same.
+      *
+      * @param title  the frame title.
+      */
+     public XYSeriesDemo2(final String title) {
+ 
+         super(title);
+         final XYSeries series = new XYSeries("Flat Data");
+         series.add(1.0, 100.0);
+         series.add(5.0, 100.0);
+         series.add(4.0, 100.0);
+         series.add(12.5, 100.0);
+         series.add(17.3, 100.0);
+         series.add(21.2, 100.0);
+         series.add(21.9, 100.0);
+         series.add(25.6, 100.0);
+         series.add(30.0, 100.0);
+         final XYSeriesCollection data = new XYSeriesCollection(series);
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "XY Series Demo 2",
+             "X", 
+             "Y", 
+             data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         final XYPlot plot = (XYPlot) chart.getPlot();
+         final NumberAxis axis = (NumberAxis) plot.getRangeAxis();
+         axis.setAutoRangeIncludesZero(false);
+         axis.setAutoRangeMinimumSize(1.0);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYSeriesDemo2 demo = new XYSeriesDemo2("XY Series Demo 2");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYSeriesDemo3.java jfreechart/source/org/jfree/chart/demo/XYSeriesDemo3.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYSeriesDemo3.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYSeriesDemo3.java	2004-11-07 16:27:54.000000000 +0100
***************
*** 0 ****
--- 1,155 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------
+  * XYSeriesDemo3.java
+  * ------------------
+  * (C) Copyright 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYSeriesDemo3.java,v 1.6 2004/05/05 16:28:55 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 03-Feb-2004 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.Color;
+ import java.awt.Font;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.IntervalMarker;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.Layer;
+ import org.jfree.ui.RectangleAnchor;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.TextAnchor;
+ 
+ /**
+  * This demo shows a simple bar chart created using the {@link XYSeriesCollection} dataset.
+  *
+  */
+ public class XYSeriesDemo3 extends ApplicationFrame {
+ 
+     /**
+      * Creates a new demo instance.
+      *
+      * @param title  the frame title.
+      */
+     public XYSeriesDemo3(final String title) {
+         super(title);
+         IntervalXYDataset dataset = createDataset();
+         JFreeChart chart = createChart(dataset);
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+     }
+     
+     /**
+      * Creates a sample dataset.
+      * 
+      * @return A sample dataset.
+      */
+     private IntervalXYDataset createDataset() {
+         final XYSeries series = new XYSeries("Random Data");
+         series.add(1.0, 400.2);
+         series.add(5.0, 294.1);
+         series.add(4.0, 100.0);
+         series.add(12.5, 734.4);
+         series.add(17.3, 453.2);
+         series.add(21.2, 500.2);
+         series.add(21.9, null);
+         series.add(25.6, 734.4);
+         series.add(30.0, 453.2);
+         final XYSeriesCollection dataset = new XYSeriesCollection(series);
+         return dataset;
+     }
+ 
+     /**
+      * Creates a sample chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A sample chart.
+      */
+     private JFreeChart createChart(IntervalXYDataset dataset) {
+         final JFreeChart chart = ChartFactory.createXYBarChart(
+             "XY Series Demo",
+             "X", 
+             false,
+             "Y", 
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+         XYPlot plot = (XYPlot) chart.getPlot();
+         final IntervalMarker target = new IntervalMarker(400.0, 700.0);
+         target.setLabel("Target Range");
+         target.setLabelFont(new Font("SansSerif", Font.ITALIC, 11));
+         target.setLabelAnchor(RectangleAnchor.LEFT);
+         target.setLabelTextAnchor(TextAnchor.CENTER_LEFT);
+         target.setPaint(new Color(222, 222, 255, 128));
+         plot.addRangeMarker(target, Layer.BACKGROUND);
+         return chart;    
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYSeriesDemo3 demo = new XYSeriesDemo3("XY Series Demo 3");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYSeriesDemo.java jfreechart/source/org/jfree/chart/demo/XYSeriesDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYSeriesDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYSeriesDemo.java	2004-11-07 16:28:00.000000000 +0100
***************
*** 0 ****
--- 1,120 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------
+  * XYSeriesDemo.java
+  * -----------------
+  * (C) Copyright 2002-2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: XYSeriesDemo.java,v 1.13 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 08-Apr-2002 : Version 1 (DG);
+  * 11-Jun-2002 : Inserted value out of order to see that it works (DG);
+  * 11-Oct-2002 : Fixed issues reported by Checkstyle (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demo showing a dataset created using the {@link XYSeriesCollection} class.
+  *
+  */
+ public class XYSeriesDemo extends ApplicationFrame {
+ 
+     /**
+      * A demonstration application showing an XY series containing a null value.
+      *
+      * @param title  the frame title.
+      */
+     public XYSeriesDemo(final String title) {
+ 
+         super(title);
+         final XYSeries series = new XYSeries("Random Data");
+         series.add(1.0, 500.2);
+         series.add(5.0, 694.1);
+         series.add(4.0, 100.0);
+         series.add(12.5, 734.4);
+         series.add(17.3, 453.2);
+         series.add(21.2, 500.2);
+         series.add(21.9, null);
+         series.add(25.6, 734.4);
+         series.add(30.0, 453.2);
+         final XYSeriesCollection data = new XYSeriesCollection(series);
+         final JFreeChart chart = ChartFactory.createXYLineChart(
+             "XY Series Demo",
+             "X", 
+             "Y", 
+             data,
+             PlotOrientation.VERTICAL,
+             true,
+             true,
+             false
+         );
+ 
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYSeriesDemo demo = new XYSeriesDemo("XY Series Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYStepAreaChartDemo.java jfreechart/source/org/jfree/chart/demo/XYStepAreaChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYStepAreaChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYStepAreaChartDemo.java	2004-11-07 16:27:50.000000000 +0100
***************
*** 0 ****
--- 1,275 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * ------------------------
+  * XYStepAreaChartDemo.java
+  * ------------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  Matthias Rose (for Ablay & Fodi GmbH);
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: XYStepAreaChartDemo.java,v 1.12 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 26-Sep-2003 : Copied XYAreaChartDemo --> XYStepAreaChartDemo
+  *               and adapted to test XYStepAreaRenderer (MR);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.JCheckBox;
+ import javax.swing.JComboBox;
+ import javax.swing.JLabel;
+ import javax.swing.JPanel;
+ import javax.swing.JTextField;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.Plot;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a step area chart.
+  *
+  * @author Matthias Rose
+  */
+ public class XYStepAreaChartDemo extends ApplicationFrame implements ActionListener {
+ 
+     /** Vertical orientation. */
+     private static final String ORIENT_VERT = "Plot vertical";
+     
+     /** Horizontal orientation. */
+     private static final String ORIENT_HORIZ = "Plot horizontal";
+ 
+     /** Problem data. */
+     private static final Object[][] TEST_DATA = {
+         // domain values,   range values,    may be null?
+         {new Integer(1), new Integer(500), Boolean.TRUE},
+         {new Integer(2), new Integer(694)},
+         {new Integer(3), new Integer(-734)},
+         {new Integer(4), new Integer(453)},
+         {new Integer(5), new Integer(500), Boolean.TRUE},
+         {new Integer(6), new Integer(200)},
+         {new Integer(7), new Integer(550), Boolean.TRUE},
+         {new Integer(8), new Integer(-150), Boolean.TRUE},
+         {new Integer(9), new Integer(232)},
+         {new Integer(10), new Integer(734)},
+         {new Integer(11), new Integer(400), Boolean.TRUE},
+     };
+ 
+     /** The chart panel. */
+     private ChartPanel chartPanel;
+     
+     /** The data series. */
+     private XYSeries xySeries;
+     
+     /** The null values checkbox. */
+     private JCheckBox nullValuesCheckBox;
+ 
+     /** The outline checkbox. */
+     private JCheckBox outlineCheckBox;
+     
+     /** The range base text field. */
+     private JTextField rangeBaseTextField;
+     
+     /** The orientation combobox. */
+     private JComboBox orientationComboBox;  
+     
+     /**
+      * Creates a new demo.
+      *
+      * @param title  the frame title.
+      */
+     public XYStepAreaChartDemo(final String title) {
+ 
+         super(title);
+ 
+         this.xySeries = new XYSeries("Some data");
+         for (int i = 0; i < TEST_DATA.length; i++) {
+             this.xySeries.add((Integer) TEST_DATA[i][0], (Integer) TEST_DATA[i][1]);
+         }
+ 
+         final XYSeriesCollection dataset = new XYSeriesCollection(this.xySeries);
+         
+         final JFreeChart chart = createChart(dataset);
+         
+         this.chartPanel = new ChartPanel(chart);
+ 
+         // allow zooming
+         this.chartPanel.setHorizontalZoom(true);
+         this.chartPanel.setVerticalZoom(true);
+         
+         // size
+         this.chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
+ 
+         // make stroke more striking
+         final Plot plot = this.chartPanel.getChart().getPlot();
+         plot.setOutlineStroke(new BasicStroke(2));
+         plot.setOutlinePaint(Color.magenta);
+ 
+         // add some components to make options changable
+         final JPanel main = new JPanel(new BorderLayout());
+         final JPanel optionsPanel = new JPanel();
+         
+         final String[] options = {ORIENT_VERT, ORIENT_HORIZ};
+         this.orientationComboBox = new JComboBox(options);
+         this.orientationComboBox.addActionListener(this);
+         optionsPanel.add(this.orientationComboBox);
+ 
+         this.outlineCheckBox = new JCheckBox("Outline");
+         this.outlineCheckBox.addActionListener(this);
+         optionsPanel.add(this.outlineCheckBox);
+ 
+         optionsPanel.add(new JLabel("Base"));
+         this.rangeBaseTextField = new JTextField("0", 5);
+         this.rangeBaseTextField.addActionListener(this);
+         optionsPanel.add(this.rangeBaseTextField);
+ 
+         this.nullValuesCheckBox = new JCheckBox("NULL values");
+         this.nullValuesCheckBox.addActionListener(this);
+         optionsPanel.add(this.nullValuesCheckBox);
+ 
+         main.add(optionsPanel, BorderLayout.SOUTH);
+         main.add(this.chartPanel);
+         setContentPane(main);
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Creates a chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return A chart.
+      */
+     private JFreeChart createChart(final XYDataset dataset) {
+             
+         final JFreeChart chart = ChartFactory.createXYStepAreaChart(
+             "XY Step Area Chart Demo",
+             "Domain (X)", "Range (Y)",
+             dataset,
+             PlotOrientation.VERTICAL,
+             true,  // legend
+             true,  // tool tips
+             false  // URLs
+         );
+         
+         // color
+         final XYPlot plot = chart.getXYPlot();
+         plot.getRenderer().setSeriesPaint(0, Color.green);
+ 
+         // fill shapes      
+         final XYStepAreaRenderer rend = (XYStepAreaRenderer) plot.getRenderer();
+         rend.setShapesFilled(true);
+ 
+         return chart;        
+     }
+ 
+     /**
+      * Change options according to settings.
+      * 
+      * @param evt  the event.
+      */
+     public void actionPerformed(final ActionEvent evt) {
+ 
+         final Object source = evt.getSource();
+ 
+         if (source == this.nullValuesCheckBox) {
+             
+             final boolean withNulls = this.nullValuesCheckBox.isSelected();
+             for (int i = 0; i < TEST_DATA.length; i++) {
+                 Integer yVal = (Integer) TEST_DATA[i][1];
+                 if (withNulls && TEST_DATA[i].length > 2) {
+                     yVal = null;
+                 }
+                 this.xySeries.getDataItem(i).setY(yVal);
+             }
+             
+         } 
+         else if (source == this.outlineCheckBox) {
+ 
+             final XYPlot plot = (XYPlot) this.chartPanel.getChart().getPlot();
+             ((XYStepAreaRenderer) plot.getRenderer()).setOutline(this.outlineCheckBox.isSelected());
+             
+         } 
+         else if (source == this.rangeBaseTextField) {
+             
+             final double val = Double.parseDouble(this.rangeBaseTextField.getText());
+             final XYPlot plot = (XYPlot) this.chartPanel.getChart().getPlot();
+             final XYStepAreaRenderer rend = (XYStepAreaRenderer) plot.getRenderer();
+             rend.setRangeBase(val);     
+ 
+         } 
+         else if (source == this.orientationComboBox) {
+ 
+             final XYPlot plot = (XYPlot) this.chartPanel.getChart().getPlot();
+             if (this.orientationComboBox.getSelectedItem() == ORIENT_HORIZ) {
+                 plot.setOrientation(PlotOrientation.HORIZONTAL);        
+             }    
+             else if (this.orientationComboBox.getSelectedItem() == ORIENT_VERT) {
+                 plot.setOrientation(PlotOrientation.VERTICAL);          
+             }
+         }
+ 
+         this.chartPanel.repaint();
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+         final XYStepAreaChartDemo demo = new XYStepAreaChartDemo("Step Area XY Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+     }
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYStepChartDemo.java jfreechart/source/org/jfree/chart/demo/XYStepChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYStepChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYStepChartDemo.java	2004-11-07 16:27:47.000000000 +0100
***************
*** 0 ****
--- 1,172 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XYStepChartDemo.java
+  * --------------------
+  * (C) Copyright 2002-2004, by Roger Studner and Contributors.
+  *
+  * Original Author:  Roger Studner;
+  * Contributor(s):   David Gilbert (for Object Refinery Limited);
+  *
+  * $Id: XYStepChartDemo.java,v 1.13 2004/04/26 19:40:15 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 13-May-2002 : Version 1, contributed by Roger Studner (DG);
+  * 11-Oct-2002 : Moved create method to ChartFactory class, and fixed issues reported by
+  *               Checkstyle (DG);
+  *
+  */
+ package org.jfree.chart.demo;
+ 
+ import java.awt.BasicStroke;
+ import java.awt.Color;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartFrame;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.data.xy.XYDataset;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.date.DateUtilities;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A demonstration of the {@link org.jfree.chart.renderer.XYStepRenderer} class.
+  *
+  * @author Roger Studner
+  */
+ public class XYStepChartDemo {
+ 
+     /** A frame for displaying the chart. */
+     private ChartFrame frame = null;
+ 
+     /**
+      * Displays a sample chart in its own frame.
+      */
+     private void displayChart() {
+ 
+         if (this.frame == null) {
+ 
+             // create a default chart based on some sample data...
+             final String title = "LCACs in use at given time";
+             final String xAxisLabel = "Time";
+             final String yAxisLabel = "Number of Transports";
+ 
+             final XYDataset data = createStepXYDataset();
+ 
+             final JFreeChart chart = ChartFactory.createXYStepChart(
+                 title,
+                 xAxisLabel, yAxisLabel,
+                 data,
+                 PlotOrientation.VERTICAL,
+                 true,   // legend
+                 true,   // tooltips
+                 false   // urls
+             );
+ 
+             // then customise it a little...
+             chart.setBackgroundPaint(new Color(216, 216, 216));
+             final XYPlot plot = chart.getXYPlot();
+             plot.getRenderer().setSeriesStroke(0, new BasicStroke(2.0f));
+             plot.getRenderer().setSeriesStroke(1, new BasicStroke(2.0f));
+             
+             // and present it in a frame...
+             this.frame = new ChartFrame("Plan Comparison", chart);
+             this.frame.pack();
+             RefineryUtilities.positionFrameRandomly(this.frame);
+             this.frame.setVisible(true);
+ 
+         }
+         else {
+             this.frame.setVisible(true);
+             this.frame.requestFocus();
+         }
+ 
+     }
+ 
+     /**
+      * Creates and returns a sample dataset for the XY 'Step' chart.
+      *
+      * @return the sample dataset.
+      */
+     public static XYDataset createStepXYDataset() {
+ 
+         final int feb = 2;
+         final XYSeries s1 = new XYSeries("Plan 1", false, true);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 8, 0).getTime(), 0);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 8, 1).getTime(), 2);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 9, 5).getTime(), 4);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 10, 6).getTime(), 4);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 11, 6).getTime(), 5);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 12, 6).getTime(), 3);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 13, 6).getTime(), 6);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 14, 6).getTime(), 6);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 15, 30).getTime(), 2);
+         s1.add(DateUtilities.createDate(2002, feb, 19, 16, 7).getTime(), 0);
+ 
+         final XYSeries s2 = new XYSeries("Plan 2");
+         s2.add(DateUtilities.createDate(2002, feb, 19, 8, 40).getTime(), 0);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 8, 45).getTime(), 1);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 9, 0).getTime(), 6);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 10, 6).getTime(), 2);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 10, 45).getTime(), 4);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 12, 0).getTime(), 7);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 13, 0).getTime(), 5);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 14, 6).getTime(), 4);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 15, 15).getTime(), 4);
+         s2.add(DateUtilities.createDate(2002, feb, 19, 16, 0).getTime(), 0);
+ 
+         final XYSeriesCollection dataset = new XYSeriesCollection();
+         dataset.addSeries(s1);
+         dataset.addSeries(s2);
+         return dataset;
+     }
+ 
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * The starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYStepChartDemo demo = new XYStepChartDemo();
+         demo.displayChart();
+ 
+     }
+ 
+ }
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/XYTickLabelDemo.java jfreechart/source/org/jfree/chart/demo/XYTickLabelDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/XYTickLabelDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/XYTickLabelDemo.java	2004-11-07 16:27:44.000000000 +0100
***************
*** 0 ****
--- 1,301 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * --------------------
+  * XYTickLabelDemo.java
+  * --------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  Matthias Rose;
+  * Contributor(s):   -;
+  *
+  * $Id: XYTickLabelDemo.java,v 1.9 2004/04/27 14:53:09 mungady Exp $
+  *
+  * Changes
+  * -------
+  * 15-Jul-2002 : Version 1 (MR);
+  *
+  */
+ 
+ 
+ package org.jfree.chart.demo;
+ import java.awt.BorderLayout;
+ import java.awt.Color;
+ import java.awt.Font;
+ import java.awt.event.ActionEvent;
+ import java.awt.event.ActionListener;
+ 
+ import javax.swing.JCheckBox;
+ import javax.swing.JLabel;
+ import javax.swing.JPanel;
+ import javax.swing.JTextField;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.axis.AxisLocation;
+ import org.jfree.chart.axis.DateAxis;
+ import org.jfree.chart.axis.NumberAxis;
+ import org.jfree.chart.axis.SymbolicAxis;
+ import org.jfree.chart.axis.ValueAxis;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
+ import org.jfree.data.xy.XYSeries;
+ import org.jfree.data.xy.XYSeriesCollection;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ import org.jfree.ui.Spacer;
+ 
+ /**
+  * An example which shows some bugs with tick labels in version 0.9.13
+  *
+  * @author Matthias Rose
+  */
+ public class XYTickLabelDemo extends ApplicationFrame implements ActionListener {
+ 
+     /** The default font size. */
+     private static final int DEFAULT_FONT_SIZE = 13; // causes some overlapping 
+ 
+     /** The chart */
+     private JFreeChart chart;
+ 
+     /** Tick labels vertical? */
+     private JCheckBox verticalTickLabelsCheckBox;
+ 
+     /** Plot horizontal? */
+     private JCheckBox horizontalPlotCheckBox;
+ 
+     /** SymbolicAxes? */
+     private JCheckBox symbolicAxesCheckBox;
+ 
+     /** Tick labels font size entry field */
+     private JTextField fontSizeTextField;
+ 
+     /**
+      * A demonstration application showing some bugs with tick labels in version 0.9.13
+      *
+      * @param title  the frame title.
+      */
+     public XYTickLabelDemo(final String title) {
+ 
+         super(title);
+         this.chart = createChart();
+         final ChartPanel chartPanel = new ChartPanel(this.chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(600, 270));
+ 
+         final JPanel mainPanel = new JPanel(new BorderLayout());
+         setContentPane(mainPanel);
+         mainPanel.add(chartPanel);
+ 
+         final JPanel optionsPanel = new JPanel();
+         mainPanel.add(optionsPanel, BorderLayout.SOUTH);
+         
+         this.symbolicAxesCheckBox = new JCheckBox("Symbolic axes");
+         this.symbolicAxesCheckBox.addActionListener(this);
+         optionsPanel.add(this.symbolicAxesCheckBox);
+ 
+         this.verticalTickLabelsCheckBox = new JCheckBox("Tick labels vertical");
+         this.verticalTickLabelsCheckBox.addActionListener(this);
+         optionsPanel.add(this.verticalTickLabelsCheckBox);
+ 
+         this.fontSizeTextField = new JTextField(3);
+         this.fontSizeTextField.addActionListener(this);
+         optionsPanel.add(new JLabel("Font size:"));
+         optionsPanel.add(this.fontSizeTextField);
+         final ValueAxis axis = this.chart.getXYPlot().getDomainAxis();
+         this.fontSizeTextField.setText(DEFAULT_FONT_SIZE + "");
+ 
+         final XYPlot plot = this.chart.getXYPlot();
+         Font ft = axis.getTickLabelFont();
+         ft = ft.deriveFont((float) DEFAULT_FONT_SIZE);
+         plot.getDomainAxis().setTickLabelFont(ft);
+         plot.getRangeAxis().setTickLabelFont(ft);
+         plot.getDomainAxis(1).setTickLabelFont(ft);
+         plot.getRangeAxis(1).setTickLabelFont(ft);
+ 
+         this.horizontalPlotCheckBox = new JCheckBox("Plot horizontal");
+         this.horizontalPlotCheckBox.addActionListener(this);
+         optionsPanel.add(this.horizontalPlotCheckBox);       
+     }
+ 
+     /**
+      * When a checkbox is changed ...
+      * 
+      * @param event  the event.
+      */
+     public void actionPerformed(final ActionEvent event) {
+         final ValueAxis[] axes = new ValueAxis[4];
+         final XYPlot plot = this.chart.getXYPlot();
+         axes[0] = plot.getDomainAxis();
+         axes[1] = plot.getRangeAxis();
+         axes[2] = plot.getDomainAxis(1);
+         axes[3] = plot.getRangeAxis(1);
+ 
+         final Object source = event.getSource();
+         
+         if (source == this.symbolicAxesCheckBox) {
+ 
+             final boolean val = this.symbolicAxesCheckBox.isSelected();
+         
+             for (int i = 0; i < axes.length; i++) {
+                 ValueAxis axis = axes[i];
+                 final String label = axis.getLabel();
+                 final int maxTick = (int) axis.getUpperBound();
+                 final String[] tickLabels = new String[maxTick];
+                 final Font ft = axis.getTickLabelFont();
+                 for (int itk = 0; itk < maxTick; itk++) {
+                     tickLabels[itk] = "Label " + itk;
+                 }
+                 axis = val ? new SymbolicAxis(label, tickLabels) : new NumberAxis(label);  
+                 axis.setTickLabelFont(ft);
+                 axes[i] = axis;
+             }
+             plot.setDomainAxis(axes[0]);
+             plot.setRangeAxis(axes[1]);
+             plot.setDomainAxis(1, axes[2]);
+             plot.setRangeAxis(1, axes[3]);     
+ 
+         }
+         
+         if (source == this.symbolicAxesCheckBox || source == this.verticalTickLabelsCheckBox) {
+             final boolean val = this.verticalTickLabelsCheckBox.isSelected();
+                         
+             for (int i = 0; i < axes.length; i++) {
+                 axes[i].setVerticalTickLabels(val);
+             }
+             
+         } 
+         else if (source == this.symbolicAxesCheckBox || source == this.horizontalPlotCheckBox) {
+             
+             final PlotOrientation val = this.horizontalPlotCheckBox.isSelected()
+                 ? PlotOrientation.HORIZONTAL : PlotOrientation.VERTICAL;
+             this.chart.getXYPlot().setOrientation(val);
+             
+         } 
+         else if (source == this.symbolicAxesCheckBox || source == this.fontSizeTextField) {
+             final String s = this.fontSizeTextField.getText();
+             if (s.length() > 0) {
+                 final float sz = Float.parseFloat(s);
+                 for (int i = 0; i < axes.length; i++) {
+                     final ValueAxis axis = axes[i];
+                     Font ft = axis.getTickLabelFont();
+                     ft = ft.deriveFont(sz);
+                     axis.setTickLabelFont(ft);
+                 }
+             }
+         }       
+     }
+ 
+     /**
+      * Creates the demo chart.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart() {
+ 
+         // create some sample data
+         
+         final XYSeries series1 = new XYSeries("Something");
+         series1.add(0.0, 30.0);
+         series1.add(1.0, 10.0);
+         series1.add(2.0, 40.0);
+         series1.add(3.0, 30.0);
+         series1.add(4.0, 50.0);
+         series1.add(5.0, 50.0);
+         series1.add(6.0, 70.0);
+         series1.add(7.0, 70.0);
+         series1.add(8.0, 80.0);
+ 
+         final XYSeriesCollection dataset1 = new XYSeriesCollection();
+         dataset1.addSeries(series1);
+   
+         final XYSeries series2 = new XYSeries("Something else");
+         series2.add(0.0, 5.0);
+         series2.add(1.0, 4.0);
+         series2.add(2.0, 1.0);
+         series2.add(3.0, 5.0);
+         series2.add(4.0, 0.0);
+ 
+         final XYSeriesCollection dataset2 = new XYSeriesCollection();
+         dataset2.addSeries(series2);
+   
+         // create the chart
+         
+         final JFreeChart result = ChartFactory.createXYLineChart(
+             "Tick Label Demo", 
+             "Domain Axis 1",
+             "Range Axis 1",
+             dataset1, 
+             PlotOrientation.VERTICAL,
+             false, 
+             true, 
+             false
+         );
+ 
+         result.setBackgroundPaint(Color.white);
+         final XYPlot plot = result.getXYPlot();
+         plot.setOrientation(PlotOrientation.VERTICAL);
+         plot.setBackgroundPaint(Color.lightGray);
+         plot.setDomainGridlinePaint(Color.white);
+         plot.setRangeGridlinePaint(Color.white);
+         plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
+         
+         final StandardXYItemRenderer renderer = (StandardXYItemRenderer) plot.getRenderer();
+         renderer.setPaint(Color.black);
+        
+         // DOMAIN AXIS 2
+         final NumberAxis xAxis2 = new NumberAxis("Domain Axis 2");
+         xAxis2.setAutoRangeIncludesZero(false);
+         plot.setDomainAxis(1, xAxis2);
+        
+         // RANGE AXIS 2
+         final DateAxis yAxis1 = new DateAxis("Range Axis 1");
+         plot.setRangeAxis(yAxis1);
+         
+         final DateAxis yAxis2 = new DateAxis("Range Axis 2");
+         plot.setRangeAxis(1, yAxis2);
+         plot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_RIGHT);
+ 
+         plot.setDataset(1, dataset2);    
+         plot.mapDatasetToDomainAxis(1, 1);
+         plot.mapDatasetToRangeAxis(1, 1);    
+         
+         return result;        
+     }
+ 
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final XYTickLabelDemo demo = new XYTickLabelDemo("Tick Label Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ }
+ 
diff -rcNbB -x CVS jfreechart-orig/source/org/jfree/chart/demo/YIntervalChartDemo.java jfreechart/source/org/jfree/chart/demo/YIntervalChartDemo.java
*** jfreechart-orig/source/org/jfree/chart/demo/YIntervalChartDemo.java	1970-01-01 01:00:00.000000000 +0100
--- jfreechart/source/org/jfree/chart/demo/YIntervalChartDemo.java	2004-11-07 16:27:40.000000000 +0100
***************
*** 0 ****
--- 1,132 ----
+ /* ===========================================================
+  * JFreeChart : a free chart library for the Java(tm) platform
+  * ===========================================================
+  *
+  * (C) Copyright 2000-2004, by Object Refinery Limited and Contributors.
+  *
+  * Project Info:  http://www.jfree.org/jfreechart/index.html
+  *
+  * This library is free software; you can redistribute it and/or modify it under the terms
+  * of the GNU Lesser General Public License as published by the Free Software Foundation;
+  * either version 2.1 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  * See the GNU Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public License along with this
+  * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+  * Boston, MA 02111-1307, USA.
+  *
+  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
+  * in the United States and other countries.]
+  *
+  * -----------------------
+  * YIntervalChartDemo.java
+  * -----------------------
+  * (C) Copyright 2003, 2004, by Object Refinery Limited and Contributors.
+  *
+  * Original Author:  David Gilbert (for Object Refinery Limited);
+  * Contributor(s):   -;
+  *
+  * $Id: YIntervalChartDemo.java,v 1.7 2004/04/26 19:12:04 taqua Exp $
+  *
+  * Changes
+  * -------
+  * 27-Jun-2003 : Version 1 (DG);
+  *
+  */
+ 
+ package org.jfree.chart.demo;
+ 
+ import org.jfree.chart.ChartFactory;
+ import org.jfree.chart.ChartPanel;
+ import org.jfree.chart.JFreeChart;
+ import org.jfree.chart.plot.PlotOrientation;
+ import org.jfree.chart.plot.XYPlot;
+ import org.jfree.chart.renderer.xy.YIntervalRenderer;
+ import org.jfree.data.xy.IntervalXYDataset;
+ import org.jfree.ui.ApplicationFrame;
+ import org.jfree.ui.RefineryUtilities;
+ 
+ /**
+  * A simple demonstration application showing how to create a Y Interval Chart.
+  *
+  */
+ public class YIntervalChartDemo extends ApplicationFrame {
+ 
+     /**
+      * Constructs the demo application.
+      *
+      * @param title  the frame title.
+      */
+     public YIntervalChartDemo(final String title) {
+ 
+         super(title);
+ 
+         // create a dataset...
+         final IntervalXYDataset dataset = new SimpleIntervalXYDataset2(100);
+ 
+         // create the chart...
+         final JFreeChart chart = createChart(dataset);
+ 
+         // add the chart to a panel...
+         final ChartPanel chartPanel = new ChartPanel(chart);
+         chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));
+         setContentPane(chartPanel);
+ 
+     }
+ 
+     /**
+      * Creates a new chart.
+      * 
+      * @param dataset  the dataset.
+      * 
+      * @return The chart.
+      */
+     private JFreeChart createChart(final IntervalXYDataset dataset) {
+     
+         final JFreeChart chart = ChartFactory.createScatterPlot(
+             "Y Interval Chart Demo",  // chart title
+             "X",                      // domain axis label
+             "Y",                      // range axis label
+             dataset,                  // data
+             PlotOrientation.VERTICAL,
+             true,                     // include legend
+             true,
+             false
+         );
+ 
+         final XYPlot plot = chart.getXYPlot();
+         plot.setRenderer(new YIntervalRenderer());
+         
+         return chart;
+         
+     }
+     
+     // ****************************************************************************
+     // * JFREECHART DEVELOPER GUIDE                                               *
+     // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
+     // * to purchase from Object Refinery Limited:                                *
+     // *                                                                          *
+     // * http://www.object-refinery.com/jfreechart/guide.html                     *
+     // *                                                                          *
+     // * Sales are used to provide funding for the JFreeChart project - please    * 
+     // * support us so that we can continue developing free software.             *
+     // ****************************************************************************
+     
+     /**
+      * Starting point for the demonstration application.
+      *
+      * @param args  ignored.
+      */
+     public static void main(final String[] args) {
+ 
+         final YIntervalChartDemo demo = new YIntervalChartDemo("Y Interval Chart Demo");
+         demo.pack();
+         RefineryUtilities.centerFrameOnScreen(demo);
+         demo.setVisible(true);
+ 
+     }
+ 
+ }
